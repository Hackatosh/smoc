
Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f0  080095f0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f8  080095f8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200000fc  080096fc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  080096fc  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1d2  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042b6  00000000  00000000  0003f2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  000435b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  00044e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000263b8  00000000  00000000  00046510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000164c4  00000000  00000000  0006c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5bdc  00000000  00000000  00082d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  001589e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080095a4 	.word	0x080095a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080095a4 	.word	0x080095a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004d6:	f000 fbe5 	bl	8000ca4 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e0:	f107 030f 	add.w	r3, r7, #15
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fc39 	bl	8000d60 <ACCELERO_IO_Write>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000500:	f000 fbd0 	bl	8000ca4 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	2201      	movs	r2, #1
 8000508:	210f      	movs	r1, #15
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fc5a 	bl	8000dc4 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000510:	79fb      	ldrb	r3, [r7, #7]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000528:	f107 030f 	add.w	r3, r7, #15
 800052c:	2201      	movs	r2, #1
 800052e:	2121      	movs	r1, #33	; 0x21
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fc47 	bl	8000dc4 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800053c:	b2db      	uxtb	r3, r3
 800053e:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4313      	orrs	r3, r2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800054a:	f107 030f 	add.w	r3, r7, #15
 800054e:	2201      	movs	r2, #1
 8000550:	2121      	movs	r1, #33	; 0x21
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fc04 	bl	8000d60 <ACCELERO_IO_Write>
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800056c:	f107 030f 	add.w	r3, r7, #15
 8000570:	2201      	movs	r2, #1
 8000572:	2138      	movs	r1, #56	; 0x38
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fc25 	bl	8000dc4 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000582:	4313      	orrs	r3, r2
 8000584:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058a:	4313      	orrs	r3, r2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000590:	f107 030f 	add.w	r3, r7, #15
 8000594:	2201      	movs	r2, #1
 8000596:	2138      	movs	r1, #56	; 0x38
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fbe1 	bl	8000d60 <ACCELERO_IO_Write>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005ac:	2300      	movs	r3, #0
 80005ae:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005b0:	f000 fba6 	bl	8000d00 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005b8:	2310      	movs	r3, #16
 80005ba:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005bc:	2320      	movs	r3, #32
 80005be:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffcc 	bl	8000560 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005c8:	233f      	movs	r3, #63	; 0x3f
 80005ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	2201      	movs	r2, #1
 80005d0:	2122      	movs	r1, #34	; 0x22
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fbc4 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005d8:	2350      	movs	r3, #80	; 0x50
 80005da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	2138      	movs	r1, #56	; 0x38
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fbbc 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005e8:	23aa      	movs	r3, #170	; 0xaa
 80005ea:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	2201      	movs	r2, #1
 80005f0:	213b      	movs	r1, #59	; 0x3b
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fbb4 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 80005f8:	230a      	movs	r3, #10
 80005fa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	2201      	movs	r2, #1
 8000600:	213c      	movs	r1, #60	; 0x3c
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fbac 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8000608:	234c      	movs	r3, #76	; 0x4c
 800060a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	2201      	movs	r2, #1
 8000610:	2130      	movs	r1, #48	; 0x30
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fba4 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8000618:	2303      	movs	r3, #3
 800061a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	2201      	movs	r2, #1
 8000620:	213d      	movs	r1, #61	; 0x3d
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fb9c 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8000628:	237f      	movs	r3, #127	; 0x7f
 800062a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	213e      	movs	r1, #62	; 0x3e
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fb94 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8000638:	237f      	movs	r3, #127	; 0x7f
 800063a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	213f      	movs	r1, #63	; 0x3f
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb8c 	bl	8000d60 <ACCELERO_IO_Write>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	2201      	movs	r2, #1
 800065e:	2139      	movs	r1, #57	; 0x39
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbaf 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2206      	movs	r2, #6
 800066c:	2127      	movs	r1, #39	; 0x27
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fba8 	bl	8000dc4 <ACCELERO_IO_Read>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	2201      	movs	r2, #1
 8000686:	2121      	movs	r1, #33	; 0x21
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb9b 	bl	8000dc4 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000694:	b2db      	uxtb	r3, r3
 8000696:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	2201      	movs	r2, #1
 800069c:	2121      	movs	r1, #33	; 0x21
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fb5e 	bl	8000d60 <ACCELERO_IO_Write>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006b4:	2312      	movs	r3, #18
 80006b6:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006b8:	2300      	movs	r3, #0
 80006ba:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006bc:	f107 030f 	add.w	r3, r7, #15
 80006c0:	2201      	movs	r2, #1
 80006c2:	2120      	movs	r1, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fb7d 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2206      	movs	r2, #6
 80006d0:	2129      	movs	r1, #41	; 0x29
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb76 	bl	8000dc4 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006d8:	2300      	movs	r3, #0
 80006da:	77bb      	strb	r3, [r7, #30]
 80006dc:	e011      	b.n	8000702 <LIS302DL_ReadACC+0x56>
  {
    pnRawData[i] = buffer[2*i];
 80006de:	7fbb      	ldrb	r3, [r7, #30]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	f107 0220 	add.w	r2, r7, #32
 80006e6:	4413      	add	r3, r2
 80006e8:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006ec:	7fbb      	ldrb	r3, [r7, #30]
 80006ee:	b212      	sxth	r2, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	f107 0120 	add.w	r1, r7, #32
 80006f6:	440b      	add	r3, r1
 80006f8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	3301      	adds	r3, #1
 8000700:	77bb      	strb	r3, [r7, #30]
 8000702:	7fbb      	ldrb	r3, [r7, #30]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d9ea      	bls.n	80006de <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <LIS302DL_ReadACC+0x6c>
 8000712:	2b20      	cmp	r3, #32
 8000714:	d003      	beq.n	800071e <LIS302DL_ReadACC+0x72>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000716:	e005      	b.n	8000724 <LIS302DL_ReadACC+0x78>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000718:	2312      	movs	r3, #18
 800071a:	77fb      	strb	r3, [r7, #31]
    break;
 800071c:	e002      	b.n	8000724 <LIS302DL_ReadACC+0x78>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800071e:	2348      	movs	r3, #72	; 0x48
 8000720:	77fb      	strb	r3, [r7, #31]
    break;
 8000722:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	77bb      	strb	r3, [r7, #30]
 8000728:	e015      	b.n	8000756 <LIS302DL_ReadACC+0xaa>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800072a:	7fbb      	ldrb	r3, [r7, #30]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	f107 0220 	add.w	r2, r7, #32
 8000732:	4413      	add	r3, r2
 8000734:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000738:	b29a      	uxth	r2, r3
 800073a:	7ffb      	ldrb	r3, [r7, #31]
 800073c:	b29b      	uxth	r3, r3
 800073e:	fb12 f303 	smulbb	r3, r2, r3
 8000742:	b299      	uxth	r1, r3
 8000744:	7fbb      	ldrb	r3, [r7, #30]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	b20a      	sxth	r2, r1
 800074e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	3301      	adds	r3, #1
 8000754:	77bb      	strb	r3, [r7, #30]
 8000756:	7fbb      	ldrb	r3, [r7, #30]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d9e6      	bls.n	800072a <LIS302DL_ReadACC+0x7e>
  }
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000772:	f000 fa97 	bl	8000ca4 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800077c:	f107 030f 	add.w	r3, r7, #15
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f000 faeb 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000794:	f107 030f 	add.w	r3, r7, #15
 8000798:	2201      	movs	r2, #1
 800079a:	2124      	movs	r1, #36	; 0x24
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fadf 	bl	8000d60 <ACCELERO_IO_Write>
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007b4:	f000 fa76 	bl	8000ca4 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	2201      	movs	r2, #1
 80007bc:	210f      	movs	r1, #15
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fb00 	bl	8000dc4 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80007f0:	f107 030f 	add.w	r3, r7, #15
 80007f4:	2201      	movs	r2, #1
 80007f6:	2123      	movs	r1, #35	; 0x23
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fab1 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 800080c:	f107 030f 	add.w	r3, r7, #15
 8000810:	2201      	movs	r2, #1
 8000812:	2121      	movs	r1, #33	; 0x21
 8000814:	4618      	mov	r0, r3
 8000816:	f000 faa3 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000828:	f107 030f 	add.w	r3, r7, #15
 800082c:	2201      	movs	r2, #1
 800082e:	2122      	movs	r1, #34	; 0x22
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fa95 	bl	8000d60 <ACCELERO_IO_Write>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000844:	2300      	movs	r3, #0
 8000846:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000848:	f000 fa5a 	bl	8000d00 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000850:	2300      	movs	r3, #0
 8000852:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 800085c:	2301      	movs	r3, #1
 800085e:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000860:	2300      	movs	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffb1 	bl	80007ce <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 800086c:	2303      	movs	r3, #3
 800086e:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	2201      	movs	r2, #1
 8000874:	2152      	movs	r1, #82	; 0x52
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fa72 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 800087c:	23c8      	movs	r3, #200	; 0xc8
 800087e:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	2201      	movs	r2, #1
 8000884:	2154      	movs	r1, #84	; 0x54
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fa6a 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0x45; 
 800088c:	2345      	movs	r3, #69	; 0x45
 800088e:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	2201      	movs	r2, #1
 8000894:	2156      	movs	r1, #86	; 0x56
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa62 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 800089c:	23fc      	movs	r3, #252	; 0xfc
 800089e:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	2201      	movs	r2, #1
 80008a4:	215a      	movs	r1, #90	; 0x5a
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa5a 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008ac:	23a1      	movs	r3, #161	; 0xa1
 80008ae:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	2201      	movs	r2, #1
 80008b4:	215b      	movs	r1, #91	; 0x5b
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fa52 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008bc:	2301      	movs	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	2201      	movs	r2, #1
 80008c4:	215c      	movs	r1, #92	; 0x5c
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fa4a 	bl	8000d60 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	217b      	movs	r1, #123	; 0x7b
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa44 	bl	8000d60 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	2201      	movs	r2, #1
 80008dc:	2160      	movs	r1, #96	; 0x60
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fa3e 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80008e4:	2306      	movs	r3, #6
 80008e6:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	2161      	movs	r1, #97	; 0x61
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fa36 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0x28; 
 80008f4:	2328      	movs	r3, #40	; 0x28
 80008f6:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	2201      	movs	r2, #1
 80008fc:	2162      	movs	r1, #98	; 0x62
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fa2e 	bl	8000d60 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000904:	2311      	movs	r3, #17
 8000906:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	2201      	movs	r2, #1
 800090c:	2163      	movs	r1, #99	; 0x63
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa26 	bl	8000d60 <ACCELERO_IO_Write>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2201      	movs	r2, #1
 8000926:	2125      	movs	r1, #37	; 0x25
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fa4b 	bl	8000dc4 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000934:	b2db      	uxtb	r3, r3
 8000936:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	2201      	movs	r2, #1
 800093c:	2125      	movs	r1, #37	; 0x25
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa0e 	bl	8000d60 <ACCELERO_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000958:	4b64      	ldr	r3, [pc, #400]	; (8000aec <LIS3DSH_ReadACC+0x1a0>)
 800095a:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000962:	f107 030b 	add.w	r3, r7, #11
 8000966:	2201      	movs	r2, #1
 8000968:	2124      	movs	r1, #36	; 0x24
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fa2a 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2201      	movs	r2, #1
 8000976:	2128      	movs	r1, #40	; 0x28
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fa23 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	3301      	adds	r3, #1
 8000984:	2201      	movs	r2, #1
 8000986:	2129      	movs	r1, #41	; 0x29
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa1b 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	3302      	adds	r3, #2
 8000994:	2201      	movs	r2, #1
 8000996:	212a      	movs	r1, #42	; 0x2a
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fa13 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	3303      	adds	r3, #3
 80009a4:	2201      	movs	r2, #1
 80009a6:	212b      	movs	r1, #43	; 0x2b
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fa0b 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	3304      	adds	r3, #4
 80009b4:	2201      	movs	r2, #1
 80009b6:	212c      	movs	r1, #44	; 0x2c
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fa03 	bl	8000dc4 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	3305      	adds	r3, #5
 80009c4:	2201      	movs	r2, #1
 80009c6:	212d      	movs	r1, #45	; 0x2d
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f9fb 	bl	8000dc4 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d854      	bhi.n	8000a82 <LIS3DSH_ReadACC+0x136>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <LIS3DSH_ReadACC+0x94>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a65 	.word	0x08000a65
 80009e4:	08000a83 	.word	0x08000a83
 80009e8:	08000a83 	.word	0x08000a83
 80009ec:	08000a83 	.word	0x08000a83
 80009f0:	08000a83 	.word	0x08000a83
 80009f4:	08000a83 	.word	0x08000a83
 80009f8:	08000a83 	.word	0x08000a83
 80009fc:	08000a83 	.word	0x08000a83
 8000a00:	08000a6b 	.word	0x08000a6b
 8000a04:	08000a83 	.word	0x08000a83
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a83 	.word	0x08000a83
 8000a10:	08000a83 	.word	0x08000a83
 8000a14:	08000a83 	.word	0x08000a83
 8000a18:	08000a83 	.word	0x08000a83
 8000a1c:	08000a83 	.word	0x08000a83
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000a83 	.word	0x08000a83
 8000a2c:	08000a83 	.word	0x08000a83
 8000a30:	08000a83 	.word	0x08000a83
 8000a34:	08000a83 	.word	0x08000a83
 8000a38:	08000a83 	.word	0x08000a83
 8000a3c:	08000a83 	.word	0x08000a83
 8000a40:	08000a77 	.word	0x08000a77
 8000a44:	08000a83 	.word	0x08000a83
 8000a48:	08000a83 	.word	0x08000a83
 8000a4c:	08000a83 	.word	0x08000a83
 8000a50:	08000a83 	.word	0x08000a83
 8000a54:	08000a83 	.word	0x08000a83
 8000a58:	08000a83 	.word	0x08000a83
 8000a5c:	08000a83 	.word	0x08000a83
 8000a60:	08000a7d 	.word	0x08000a7d
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <LIS3DSH_ReadACC+0x1a0>)
 8000a66:	61bb      	str	r3, [r7, #24]
    break;
 8000a68:	e00c      	b.n	8000a84 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <LIS3DSH_ReadACC+0x1a4>)
 8000a6c:	61bb      	str	r3, [r7, #24]
    break;
 8000a6e:	e009      	b.n	8000a84 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <LIS3DSH_ReadACC+0x1a8>)
 8000a72:	61bb      	str	r3, [r7, #24]
    break;
 8000a74:	e006      	b.n	8000a84 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <LIS3DSH_ReadACC+0x1ac>)
 8000a78:	61bb      	str	r3, [r7, #24]
    break;
 8000a7a:	e003      	b.n	8000a84 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <LIS3DSH_ReadACC+0x1b0>)
 8000a7e:	61bb      	str	r3, [r7, #24]
    break;
 8000a80:	e000      	b.n	8000a84 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	77fb      	strb	r3, [r7, #31]
 8000a88:	e029      	b.n	8000ade <LIS3DSH_ReadACC+0x192>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f107 0220 	add.w	r2, r7, #32
 8000a94:	4413      	add	r3, r2
 8000a96:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	7ffa      	ldrb	r2, [r7, #31]
 8000a9e:	0052      	lsls	r2, r2, #1
 8000aa0:	f107 0120 	add.w	r1, r7, #32
 8000aa4:	440a      	add	r2, r1
 8000aa6:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000aaa:	4413      	add	r3, r2
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abc:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad0:	ee17 2a90 	vmov	r2, s15
 8000ad4:	b212      	sxth	r2, r2
 8000ad6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
 8000ade:	7ffb      	ldrb	r3, [r7, #31]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d9d2      	bls.n	8000a8a <LIS3DSH_ReadACC+0x13e>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	3d75c28f 	.word	0x3d75c28f
 8000af0:	3df5c28f 	.word	0x3df5c28f
 8000af4:	3e3851ec 	.word	0x3e3851ec
 8000af8:	3e75c28f 	.word	0x3e75c28f
 8000afc:	3f3ae148 	.word	0x3f3ae148

08000b00 <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <BSP_LED_On+0x2c>)
 8000b0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <BSP_LED_On+0x30>)
 8000b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f000 fe9f 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000058 	.word	0x20000058
 8000b30:	080095d0 	.word	0x080095d0

08000b34 <BSP_LED_Off>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <BSP_LED_Off+0x2c>)
 8000b42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <BSP_LED_Off+0x30>)
 8000b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	f000 fe85 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000058 	.word	0x20000058
 8000b64:	080095d0 	.word	0x080095d0

08000b68 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000b6c:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b6e:	f003 fabf 	bl	80040f0 <HAL_SPI_GetState>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d12a      	bne.n	8000bce <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <SPIx_Init+0x70>)
 8000b7c:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b80:	2218      	movs	r2, #24
 8000b82:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <SPIx_Init+0x6c>)
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <SPIx_Init+0x6c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <SPIx_Init+0x6c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <SPIx_Init+0x6c>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <SPIx_Init+0x6c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SPIx_Init+0x6c>)
 8000bbe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8000bc4:	f000 f836 	bl	8000c34 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <SPIx_Init+0x6c>)
 8000bca:	f003 f863 	bl	8003c94 <HAL_SPI_Init>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000118 	.word	0x20000118
 8000bd8:	40013000 	.word	0x40013000

08000bdc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <SPIx_WriteRead+0x38>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f107 020f 	add.w	r2, r7, #15
 8000bf2:	1df9      	adds	r1, r7, #7
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <SPIx_WriteRead+0x3c>)
 8000bfa:	f003 f8d7 	bl	8003dac <HAL_SPI_TransmitReceive>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8000c04:	f000 f80a 	bl	8000c1c <SPIx_Error>
  }
  
  return receivedbyte;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000068 	.word	0x20000068
 8000c18:	20000118 	.word	0x20000118

08000c1c <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <SPIx_Error+0x14>)
 8000c22:	f003 f89b 	bl	8003d5c <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication bus */
  SPIx_Init();
 8000c26:	f7ff ff9f 	bl	8000b68 <SPIx_Init>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000118 	.word	0x20000118

08000c34 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <SPIx_MspInit+0x68>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 8000c72:	23e0      	movs	r3, #224	; 0xe0
 8000c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000c82:	2305      	movs	r3, #5
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <SPIx_MspInit+0x6c>)
 8000c8e:	f000 fb53 	bl	8001338 <HAL_GPIO_Init>
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <ACCELERO_IO_Init>:
  * @brief  Configures the Accelerometer SPI interface.
  * @param  None
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <ACCELERO_IO_Init+0x54>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <ACCELERO_IO_Init+0x54>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <ACCELERO_IO_Init+0x54>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <ACCELERO_IO_Init+0x58>)
 8000cdc:	f000 fb2c 	bl	8001338 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <ACCELERO_IO_Init+0x58>)
 8000ce6:	f000 fdbb 	bl	8001860 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8000cea:	f7ff ff3d 	bl	8000b68 <SPIx_Init>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40021000 	.word	0x40021000

08000d00 <ACCELERO_IO_ITConfig>:
  *         EXTI0 is already used by user button so INT1 is not configured here.
  * @param  None
  * @retval None
  */
void ACCELERO_IO_ITConfig(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <ACCELERO_IO_ITConfig+0x54>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <ACCELERO_IO_ITConfig+0x54>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <ACCELERO_IO_ITConfig+0x54>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8000d22:	2302      	movs	r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <ACCELERO_IO_ITConfig+0x58>)
 8000d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <ACCELERO_IO_ITConfig+0x5c>)
 8000d38:	f000 fafe 	bl	8001338 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	210f      	movs	r1, #15
 8000d40:	2007      	movs	r0, #7
 8000d42:	f000 faa0 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fab9 	bl	80012be <HAL_NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40021000 	.word	0x40021000

08000d60 <ACCELERO_IO_Write>:
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000d70:	883b      	ldrh	r3, [r7, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d903      	bls.n	8000d7e <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <ACCELERO_IO_Write+0x60>)
 8000d84:	f000 fd6c 	bl	8001860 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff26 	bl	8000bdc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000d90:	e00a      	b.n	8000da8 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff20 	bl	8000bdc <SPIx_WriteRead>
    NumByteToWrite--;
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8000da8:	883b      	ldrh	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f1      	bne.n	8000d92 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <ACCELERO_IO_Write+0x60>)
 8000db4:	f000 fd54 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <ACCELERO_IO_Read>:
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  * @retval None
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8000dd4:	883b      	ldrh	r3, [r7, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d904      	bls.n	8000de4 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000de0:	70fb      	strb	r3, [r7, #3]
 8000de2:	e003      	b.n	8000dec <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dea:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000dec:	2200      	movs	r2, #0
 8000dee:	2108      	movs	r1, #8
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <ACCELERO_IO_Read+0x70>)
 8000df2:	f000 fd35 	bl	8001860 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff feef 	bl	8000bdc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000dfe:	e00c      	b.n	8000e1a <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff feeb 	bl	8000bdc <SPIx_WriteRead>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000e0e:	883b      	ldrh	r3, [r7, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ef      	bne.n	8000e00 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8000e20:	2201      	movs	r2, #1
 8000e22:	2108      	movs	r1, #8
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <ACCELERO_IO_Read+0x70>)
 8000e26:	f000 fd1b 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <BSP_ACCELERO_Init>:
  * @brief  Setx Accelerometer Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 8000e46:	2300      	movs	r3, #0
 8000e48:	723b      	strb	r3, [r7, #8]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	727b      	strb	r3, [r7, #9]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8000e52:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <BSP_ACCELERO_Init+0x10c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4798      	blx	r3
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b3b      	cmp	r3, #59	; 0x3b
 8000e5c:	d138      	bne.n	8000ed0 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <BSP_ACCELERO_Init+0x110>)
 8000e60:	4a38      	ldr	r2, [pc, #224]	; (8000f44 <BSP_ACCELERO_Init+0x10c>)
 8000e62:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8000e78:	7b7a      	ldrb	r2, [r7, #13]
 8000e7a:	7b3b      	ldrb	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8000e86:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <BSP_ACCELERO_Init+0x110>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	8aba      	ldrh	r2, [r7, #20]
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8000eac:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 8000eae:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8000eb4:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <BSP_ACCELERO_Init+0x110>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	8aba      	ldrh	r2, [r7, #20]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4798      	blx	r3

    ret = ACCELERO_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
 8000ece:	e034      	b.n	8000f3a <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <BSP_ACCELERO_Init+0x114>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eda:	d12c      	bne.n	8000f36 <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <BSP_ACCELERO_Init+0x110>)
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <BSP_ACCELERO_Init+0x114>)
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8000ee2:	2360      	movs	r3, #96	; 0x60
 8000ee4:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8000efa:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8000efc:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8000f04:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 8000f06:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8000f0c:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8000f12:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8abb      	ldrh	r3, [r7, #20]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <BSP_ACCELERO_Init+0x110>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	8aba      	ldrh	r2, [r7, #20]
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	75fb      	strb	r3, [r7, #23]
 8000f34:	e001      	b.n	8000f3a <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000170 	.word	0x20000170
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <BSP_ACCELERO_GetXYZ>:
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <BSP_ACCELERO_GetXYZ+0x50>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d018      	beq.n	8000f98 <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <BSP_ACCELERO_GetXYZ+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <BSP_ACCELERO_GetXYZ+0x50>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <BSP_ACCELERO_GetXYZ+0x54>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10e      	bne.n	8000f98 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be conpliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3302      	adds	r3, #2
 8000f94:	b212      	sxth	r2, r2
 8000f96:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000170 	.word	0x20000170
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f94d 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f007 fcb0 	bl	8008940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f965 	bl	80012da <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f92d 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000094 	.word	0x20000094
 8001044:	20000070 	.word	0x20000070
 8001048:	2000006c 	.word	0x2000006c

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000070 	.word	0x20000070
 8001070:	2000018c 	.word	0x2000018c

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000018c 	.word	0x2000018c

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_Delay+0x40>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000070 	.word	0x20000070

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00c      	b.n	800132a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	e16b      	b.n	800162c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 815a 	bne.w	8001626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d00b      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001386:	2b11      	cmp	r3, #17
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b12      	cmp	r3, #18
 8001390:	d130      	bne.n	80013f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0xfc>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80b4 	beq.w	8001626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014da:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x30c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x310>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d02b      	beq.n	800155e <HAL_GPIO_Init+0x226>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x314>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d025      	beq.n	800155a <HAL_GPIO_Init+0x222>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x318>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01f      	beq.n	8001556 <HAL_GPIO_Init+0x21e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x31c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x320>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x324>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x328>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x32c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x20a>
 800153e:	2307      	movs	r3, #7
 8001540:	e00e      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001542:	2308      	movs	r3, #8
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001546:	2306      	movs	r3, #6
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_GPIO_Init+0x30c>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_GPIO_Init+0x330>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a2:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_GPIO_Init+0x330>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f ae90 	bls.w	8001354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	; 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40021c00 	.word	0x40021c00
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e0cd      	b.n	8001824 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f040 80bd 	bne.w	800181e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80016a4:	4a64      	ldr	r2, [pc, #400]	; (8001838 <HAL_GPIO_DeInit+0x1cc>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4013      	ands	r3, r2
 80016c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_GPIO_DeInit+0x1d0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_DeInit+0xba>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_GPIO_DeInit+0x1d4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_DeInit+0xb6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_GPIO_DeInit+0x1d8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_DeInit+0xb2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a59      	ldr	r2, [pc, #356]	; (8001848 <HAL_GPIO_DeInit+0x1dc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_DeInit+0xae>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_GPIO_DeInit+0x1e0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_DeInit+0xaa>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_GPIO_DeInit+0x1e4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_DeInit+0xa6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_GPIO_DeInit+0x1e8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_DeInit+0xa2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_GPIO_DeInit+0x1ec>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_DeInit+0x9e>
 8001706:	2307      	movs	r3, #7
 8001708:	e00e      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 800170a:	2308      	movs	r3, #8
 800170c:	e00c      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 800170e:	2306      	movs	r3, #6
 8001710:	e00a      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 8001712:	2305      	movs	r3, #5
 8001714:	e008      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 8001716:	2304      	movs	r3, #4
 8001718:	e006      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_DeInit+0xbc>
 8001726:	2300      	movs	r3, #0
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d132      	bne.n	800179e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	4946      	ldr	r1, [pc, #280]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	4943      	ldr	r1, [pc, #268]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	493f      	ldr	r1, [pc, #252]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 800175e:	4013      	ands	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	493c      	ldr	r1, [pc, #240]	; (800185c <HAL_GPIO_DeInit+0x1f0>)
 800176c:	4013      	ands	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001780:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <HAL_GPIO_DeInit+0x1cc>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	43da      	mvns	r2, r3
 8001790:	4829      	ldr	r0, [pc, #164]	; (8001838 <HAL_GPIO_DeInit+0x1cc>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	400a      	ands	r2, r1
 8001798:	3302      	adds	r3, #2
 800179a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2103      	movs	r1, #3
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	08d2      	lsrs	r2, r2, #3
 80017d4:	4019      	ands	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2103      	movs	r1, #3
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2103      	movs	r1, #3
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	f67f af2e 	bls.w	8001688 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001894:	b08f      	sub	sp, #60	; 0x3c
 8001896:	af0a      	add	r7, sp, #40	; 0x28
 8001898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e054      	b.n	800194e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f007 faa0 	bl	8008e04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 f826 	bl	8005934 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	687e      	ldr	r6, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f106 0410 	add.w	r4, r6, #16
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001902:	e885 0003 	stmia.w	r5, {r0, r1}
 8001906:	1d33      	adds	r3, r6, #4
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f003 ffa0 	bl	8005850 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f81d 	bl	8005956 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f004 f930 	bl	8005ba4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001956 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b089      	sub	sp, #36	; 0x24
 800195a:	af04      	add	r7, sp, #16
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	4608      	mov	r0, r1
 8001960:	4611      	mov	r1, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4603      	mov	r3, r0
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	460b      	mov	r3, r1
 800196a:	70bb      	strb	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_HCD_HC_Init+0x28>
 800197a:	2302      	movs	r3, #2
 800197c:	e07f      	b.n	8001a7e <HAL_HCD_HC_Init+0x128>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	333d      	adds	r3, #61	; 0x3d
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	787a      	ldrb	r2, [r7, #1]
 80019ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3340      	adds	r3, #64	; 0x40
 80019be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019c0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3339      	adds	r3, #57	; 0x39
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	333f      	adds	r3, #63	; 0x3f
 80019e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	78bb      	ldrb	r3, [r7, #2]
 80019f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f4:	b2d8      	uxtb	r0, r3
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	333a      	adds	r3, #58	; 0x3a
 8001a04:	4602      	mov	r2, r0
 8001a06:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da0a      	bge.n	8001a26 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333b      	adds	r3, #59	; 0x3b
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e009      	b.n	8001a3a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	333b      	adds	r3, #59	; 0x3b
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	787c      	ldrb	r4, [r7, #1]
 8001a56:	78ba      	ldrb	r2, [r7, #2]
 8001a58:	78f9      	ldrb	r1, [r7, #3]
 8001a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f004 fa1c 	bl	8005ea8 <USB_HC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_HCD_HC_Halt+0x1e>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00f      	b.n	8001ac4 <HAL_HCD_HC_Halt+0x3e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fc56 	bl	8006366 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70bb      	strb	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	333b      	adds	r3, #59	; 0x3b
 8001af6:	78ba      	ldrb	r2, [r7, #2]
 8001af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	333f      	adds	r3, #63	; 0x3f
 8001b0a:	787a      	ldrb	r2, [r7, #1]
 8001b0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b0e:	7c3b      	ldrb	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3342      	adds	r3, #66	; 0x42
 8001b24:	2203      	movs	r2, #3
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e009      	b.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3342      	adds	r3, #66	; 0x42
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b3e:	787b      	ldrb	r3, [r7, #1]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	f200 80d6 	bhi.w	8001cf2 <HAL_HCD_HC_SubmitRequest+0x226>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001cdd 	.word	0x08001cdd
 8001b54:	08001bc9 	.word	0x08001bc9
 8001b58:	08001c53 	.word	0x08001c53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b5c:	7c3b      	ldrb	r3, [r7, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	f040 80c9 	bne.w	8001cf6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001b64:	78bb      	ldrb	r3, [r7, #2]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 80c5 	bne.w	8001cf6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001b6c:	8b3b      	ldrh	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	3351      	adds	r3, #81	; 0x51
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3351      	adds	r3, #81	; 0x51
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3342      	adds	r3, #66	; 0x42
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bb0:	e0a1      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3342      	adds	r3, #66	; 0x42
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	701a      	strb	r2, [r3, #0]
      break;
 8001bc6:	e096      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bc8:	78bb      	ldrb	r3, [r7, #2]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d120      	bne.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3351      	adds	r3, #81	; 0x51
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3342      	adds	r3, #66	; 0x42
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bf8:	e07e      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e073      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3350      	adds	r3, #80	; 0x50
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3342      	adds	r3, #66	; 0x42
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	e05d      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e052      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d120      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	3351      	adds	r3, #81	; 0x51
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3342      	adds	r3, #66	; 0x42
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c82:	e039      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2202      	movs	r2, #2
 8001c96:	701a      	strb	r2, [r3, #0]
      break;
 8001c98:	e02e      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3350      	adds	r3, #80	; 0x50
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3342      	adds	r3, #66	; 0x42
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
      break;
 8001cc4:	e018      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e00d      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3342      	adds	r3, #66	; 0x42
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
      break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e000      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001cf6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	3344      	adds	r3, #68	; 0x44
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	8b39      	ldrh	r1, [r7, #24]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4403      	add	r3, r0
 8001d1c:	3348      	adds	r3, #72	; 0x48
 8001d1e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	335c      	adds	r3, #92	; 0x5c
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	334c      	adds	r3, #76	; 0x4c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3339      	adds	r3, #57	; 0x39
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	335d      	adds	r3, #93	; 0x5d
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	18d1      	adds	r1, r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f004 f996 	bl	80060bc <USB_HC_StartXfer>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 feb3 	bl	8005b1e <USB_GetMode>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80f1 	bne.w	8001fa2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fe97 	bl	8005af8 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80e7 	beq.w	8001fa0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fe8e 	bl	8005af8 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de6:	d104      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fe7e 	bl	8005af8 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e06:	d104      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fe6e 	bl	8005af8 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fe5e 	bl	8005af8 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d103      	bne.n	8001e4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fe50 	bl	8005af8 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e62:	d117      	bne.n	8001e94 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001e72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e76:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f007 f841 	bl	8008f00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 ff49 	bl	8005d1c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fe2d 	bl	8005af8 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d102      	bne.n	8001eb0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f001 f8c8 	bl	8003040 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fe1f 	bl	8005af8 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d106      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f006 ffff 	bl	8008ec8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fe0e 	bl	8005af8 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ee6:	d138      	bne.n	8001f5a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fa29 	bl	8006344 <USB_HC_ReadInterrupt>
 8001ef2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e025      	b.n	8001f46 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d018      	beq.n	8001f40 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f24:	d106      	bne.n	8001f34 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8cf 	bl	80020d0 <HCD_HC_IN_IRQHandler>
 8001f32:	e005      	b.n	8001f40 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fc5f 	bl	80027fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3d4      	bcc.n	8001efa <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fdca 	bl	8005af8 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d101      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x1d6>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_HCD_IRQHandler+0x1d8>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0210 	bic.w	r2, r2, #16
 8001f86:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 ffad 	bl	8002ee8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0210 	orr.w	r2, r2, #16
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	e000      	b.n	8001fa2 <HAL_HCD_IRQHandler+0x206>
      return;
 8001fa0:	bf00      	nop
    }
  }
}
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_HCD_Start+0x16>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e013      	b.n	8001fe6 <HAL_HCD_Start+0x3e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fca1 	bl	8005912 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 ff04 	bl	8005de4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_HCD_Stop+0x16>
 8002000:	2302      	movs	r3, #2
 8002002:	e00d      	b.n	8002020 <HAL_HCD_Stop+0x32>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fae3 	bl	80065dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 feab 	bl	8005d90 <USB_ResetPort>
 800203a:	4603      	mov	r3, r0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	335c      	adds	r3, #92	; 0x5c
 8002060:	781b      	ldrb	r3, [r3, #0]
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	334c      	adds	r3, #76	; 0x4c
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 feed 	bl	8005e84 <USB_GetCurrentFrame>
 80020aa:	4603      	mov	r3, r0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fec8 	bl	8005e56 <USB_GetHostSpeed>
 80020c6:	4603      	mov	r3, r0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d119      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	2304      	movs	r3, #4
 8002110:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	0151      	lsls	r1, r2, #5
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	440a      	add	r2, r1
 8002128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	60d3      	str	r3, [r2, #12]
 8002132:	e095      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d109      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	6093      	str	r3, [r2, #8]
 800215c:	e080      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b08      	cmp	r3, #8
 8002172:	d134      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	335d      	adds	r3, #93	; 0x5d
 80021a4:	2205      	movs	r2, #5
 80021a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2310      	movs	r3, #16
 80021b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2308      	movs	r3, #8
 80021ca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f8c5 	bl	8006366 <USB_HC_Halt>
 80021dc:	e040      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d134      	bne.n	8002260 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f004 f8a0 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	2310      	movs	r3, #16
 8002236:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	335d      	adds	r3, #93	; 0x5d
 8002248:	2208      	movs	r2, #8
 800224a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	461a      	mov	r2, r3
 800225a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002276:	d122      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	0151      	lsls	r1, r2, #5
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	440a      	add	r2, r1
 800228e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f85f 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022bc:	e29b      	b.n	80027f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 80c1 	bne.w	8002458 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01b      	beq.n	8002316 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	3348      	adds	r3, #72	; 0x48
 80022ee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0159      	lsls	r1, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002302:	1ad1      	subs	r1, r2, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4403      	add	r3, r0
 8002312:	334c      	adds	r3, #76	; 0x4c
 8002314:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	335d      	adds	r3, #93	; 0x5d
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3358      	adds	r3, #88	; 0x58
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	333f      	adds	r3, #63	; 0x3f
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002378:	2b02      	cmp	r3, #2
 800237a:	d121      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 ffdd 	bl	8006366 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2310      	movs	r3, #16
 80023bc:	6093      	str	r3, [r2, #8]
 80023be:	e034      	b.n	800242a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	333f      	adds	r3, #63	; 0x3f
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d129      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	0151      	lsls	r1, r2, #5
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	440a      	add	r2, r1
 80023ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	335c      	adds	r3, #92	; 0x5c
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	b2d8      	uxtb	r0, r3
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4601      	mov	r1, r0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f006 fd79 	bl	8008f1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	3350      	adds	r3, #80	; 0x50
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f083 0301 	eor.w	r3, r3, #1
 8002440:	b2d8      	uxtb	r0, r3
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3350      	adds	r3, #80	; 0x50
 8002452:	4602      	mov	r2, r0
 8002454:	701a      	strb	r2, [r3, #0]
}
 8002456:	e1ce      	b.n	80027f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	f040 80f1 	bne.w	8002652 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	440a      	add	r2, r1
 8002486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248a:	f023 0302 	bic.w	r3, r3, #2
 800248e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	335d      	adds	r3, #93	; 0x5d
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10a      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	335c      	adds	r3, #92	; 0x5c
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e0b0      	b.n	800261e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	335d      	adds	r3, #93	; 0x5d
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10a      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	335c      	adds	r3, #92	; 0x5c
 80024e2:	2205      	movs	r2, #5
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e09a      	b.n	800261e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	335d      	adds	r3, #93	; 0x5d
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d00a      	beq.n	8002514 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	335d      	adds	r3, #93	; 0x5d
 800250e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002510:	2b08      	cmp	r3, #8
 8002512:	d156      	bne.n	80025c2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3358      	adds	r3, #88	; 0x58
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4403      	add	r3, r0
 8002536:	3358      	adds	r3, #88	; 0x58
 8002538:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3358      	adds	r3, #88	; 0x58
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d914      	bls.n	800257a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3358      	adds	r3, #88	; 0x58
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2204      	movs	r2, #4
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e009      	b.n	800258e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	335c      	adds	r3, #92	; 0x5c
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e02d      	b.n	800261e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	335d      	adds	r3, #93	; 0x5d
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d122      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	335c      	adds	r3, #92	; 0x5c
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002602:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	b2d8      	uxtb	r0, r3
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4601      	mov	r1, r0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fc66 	bl	8008f1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002650:	e0d1      	b.n	80027f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d13e      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	3358      	adds	r3, #88	; 0x58
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4403      	add	r3, r0
 80026aa:	3358      	adds	r3, #88	; 0x58
 80026ac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	335d      	adds	r3, #93	; 0x5d
 80026be:	2206      	movs	r2, #6
 80026c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fe4a 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	461a      	mov	r2, r3
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	6093      	str	r3, [r2, #8]
}
 80026e4:	e087      	b.n	80027f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d17c      	bne.n	80027f6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	333f      	adds	r3, #63	; 0x3f
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d122      	bne.n	8002758 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	3358      	adds	r3, #88	; 0x58
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fe08 	bl	8006366 <USB_HC_Halt>
 8002756:	e045      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	333f      	adds	r3, #63	; 0x3f
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002780:	2b02      	cmp	r3, #2
 8002782:	d12f      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	3358      	adds	r3, #88	; 0x58
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d121      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335d      	adds	r3, #93	; 0x5d
 80027b0:	2203      	movs	r2, #3
 80027b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fdc1 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2310      	movs	r3, #16
 80027f4:	6093      	str	r3, [r2, #8]
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d119      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	2304      	movs	r3, #4
 800283e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	440a      	add	r2, r1
 8002856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002860:	e33e      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b20      	cmp	r3, #32
 8002876:	d141      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2320      	movs	r3, #32
 8002888:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	333d      	adds	r3, #61	; 0x3d
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 831f 	bne.w	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	335c      	adds	r3, #92	; 0x5c
 80028c6:	2202      	movs	r2, #2
 80028c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fd36 	bl	8006366 <USB_HC_Halt>
}
 80028fa:	e2f1      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d13f      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	335d      	adds	r3, #93	; 0x5d
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	333d      	adds	r3, #61	; 0x3d
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	3358      	adds	r3, #88	; 0x58
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	440a      	add	r2, r1
 8002964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fcf4 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	6093      	str	r3, [r2, #8]
}
 8002990:	e2a6      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a8:	d122      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	0151      	lsls	r1, r2, #5
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	440a      	add	r2, r1
 80029c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fcc6 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ec:	6093      	str	r3, [r2, #8]
}
 80029ee:	e277      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d135      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	3358      	adds	r3, #88	; 0x58
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fc8e 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335d      	adds	r3, #93	; 0x5d
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	e236      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d12b      	bne.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2308      	movs	r3, #8
 8002a98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	0151      	lsls	r1, r2, #5
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fc4e 	bl	8006366 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	335d      	adds	r3, #93	; 0x5d
 8002ada:	2205      	movs	r2, #5
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	e1ff      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d155      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3358      	adds	r3, #88	; 0x58
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	335d      	adds	r3, #93	; 0x5d
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	333d      	adds	r3, #61	; 0x3d
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d114      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	333c      	adds	r3, #60	; 0x3c
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	333d      	adds	r3, #61	; 0x3d
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fbec 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	6093      	str	r3, [r2, #8]
}
 8002ba0:	e19e      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d12b      	bne.n	8002c10 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fbbf 	bl	8006366 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	335d      	adds	r3, #93	; 0x5d
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	6093      	str	r3, [r2, #8]
}
 8002c0e:	e167      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d135      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	0151      	lsls	r1, r2, #5
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fb87 	bl	8006366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	2310      	movs	r3, #16
 8002c68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	335d      	adds	r3, #93	; 0x5d
 8002c8e:	2208      	movs	r2, #8
 8002c90:	701a      	strb	r2, [r3, #0]
}
 8002c92:	e125      	b.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	f040 811a 	bne.w	8002ee0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	0151      	lsls	r1, r2, #5
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	440a      	add	r2, r1
 8002cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc6:	f023 0302 	bic.w	r3, r3, #2
 8002cca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	335d      	adds	r3, #93	; 0x5d
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d137      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	335c      	adds	r3, #92	; 0x5c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	333f      	adds	r3, #63	; 0x3f
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d00b      	beq.n	8002d24 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	333f      	adds	r3, #63	; 0x3f
 8002d1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	f040 80c5 	bne.w	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3351      	adds	r3, #81	; 0x51
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2d8      	uxtb	r0, r3
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	3351      	adds	r3, #81	; 0x51
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e0ad      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	335d      	adds	r3, #93	; 0x5d
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d10a      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e097      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	335d      	adds	r3, #93	; 0x5d
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d10a      	bne.n	8002daa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e081      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	335d      	adds	r3, #93	; 0x5d
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10a      	bne.n	8002dd6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e06b      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	335d      	adds	r3, #93	; 0x5d
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d00a      	beq.n	8002e02 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	335d      	adds	r3, #93	; 0x5d
 8002dfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d155      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3358      	adds	r3, #88	; 0x58
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4403      	add	r3, r0
 8002e24:	3358      	adds	r3, #88	; 0x58
 8002e26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3358      	adds	r3, #88	; 0x58
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d914      	bls.n	8002e68 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3358      	adds	r3, #88	; 0x58
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	335c      	adds	r3, #92	; 0x5c
 8002e62:	2204      	movs	r2, #4
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e009      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	b2d8      	uxtb	r0, r3
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4601      	mov	r1, r0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f006 f81e 	bl	8008f1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	0c5b      	lsrs	r3, r3, #17
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d003      	beq.n	8002f2c <HCD_RXQLVL_IRQHandler+0x44>
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	f000 8082 	beq.w	800302e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f2a:	e083      	b.n	8003034 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07f      	beq.n	8003032 <HCD_RXQLVL_IRQHandler+0x14a>
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	; 0x44
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d074      	beq.n	8003032 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	3344      	adds	r3, #68	; 0x44
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	b292      	uxth	r2, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f002 fd9f 	bl	8005aa6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	3344      	adds	r3, #68	; 0x44
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	18d1      	adds	r1, r2, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4403      	add	r3, r0
 8002f8c:	3344      	adds	r3, #68	; 0x44
 8002f8e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334c      	adds	r3, #76	; 0x4c
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	18d1      	adds	r1, r2, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4403      	add	r3, r0
 8002fb4:	334c      	adds	r3, #76	; 0x4c
 8002fb6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HCD_RXQLVL_IRQHandler+0x154>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d031      	beq.n	8003032 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fe4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	440b      	add	r3, r1
 800300e:	3350      	adds	r3, #80	; 0x50
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2d8      	uxtb	r0, r3
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	3350      	adds	r3, #80	; 0x50
 8003028:	4602      	mov	r2, r0
 800302a:	701a      	strb	r2, [r3, #0]
      break;
 800302c:	e001      	b.n	8003032 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003032:	bf00      	nop
  }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	1ff80000 	.word	0x1ff80000

08003040 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800306c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b02      	cmp	r3, #2
 8003076:	d113      	bne.n	80030a0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10a      	bne.n	8003098 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003090:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f005 ff26 	bl	8008ee4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d147      	bne.n	800313a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d129      	bne.n	8003110 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d113      	bne.n	80030ec <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ce:	d106      	bne.n	80030de <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2102      	movs	r1, #2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fe20 	bl	8005d1c <USB_InitFSLSPClkSel>
 80030dc:	e011      	b.n	8003102 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fe19 	bl	8005d1c <USB_InitFSLSPClkSel>
 80030ea:	e00a      	b.n	8003102 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fa:	461a      	mov	r2, r3
 80030fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003100:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f005 ff18 	bl	8008f38 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f005 feeb 	bl	8008ee4 <HAL_HCD_Connect_Callback>
 800310e:	e014      	b.n	800313a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f005 ff1f 	bl	8008f54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003124:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003128:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003138:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d103      	bne.n	800314c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e11f      	b.n	80033b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f005 fc02 	bl	8008990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c4:	f000 fd3e 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4a7b      	ldr	r2, [pc, #492]	; (80033bc <HAL_I2C_Init+0x25c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d807      	bhi.n	80031e4 <HAL_I2C_Init+0x84>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a7a      	ldr	r2, [pc, #488]	; (80033c0 <HAL_I2C_Init+0x260>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e006      	b.n	80031f2 <HAL_I2C_Init+0x92>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a77      	ldr	r2, [pc, #476]	; (80033c4 <HAL_I2C_Init+0x264>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	bf94      	ite	ls
 80031ec:	2301      	movls	r3, #1
 80031ee:	2300      	movhi	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0db      	b.n	80033b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <HAL_I2C_Init+0x268>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0c9b      	lsrs	r3, r3, #18
 8003204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a64      	ldr	r2, [pc, #400]	; (80033bc <HAL_I2C_Init+0x25c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d802      	bhi.n	8003234 <HAL_I2C_Init+0xd4>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	e009      	b.n	8003248 <HAL_I2C_Init+0xe8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a63      	ldr	r2, [pc, #396]	; (80033cc <HAL_I2C_Init+0x26c>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	3301      	adds	r3, #1
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800325a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4956      	ldr	r1, [pc, #344]	; (80033bc <HAL_I2C_Init+0x25c>)
 8003264:	428b      	cmp	r3, r1
 8003266:	d80d      	bhi.n	8003284 <HAL_I2C_Init+0x124>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e59      	subs	r1, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fbb1 f3f3 	udiv	r3, r1, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b04      	cmp	r3, #4
 800327e:	bf38      	it	cc
 8003280:	2304      	movcc	r3, #4
 8003282:	e04f      	b.n	8003324 <HAL_I2C_Init+0x1c4>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_I2C_Init+0x150>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_I2C_Init+0x176>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x17e>
 80032da:	2301      	movs	r3, #1
 80032dc:	e022      	b.n	8003324 <HAL_I2C_Init+0x1c4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_I2C_Init+0x1a4>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e58      	subs	r0, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Init+0x1c4>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6809      	ldr	r1, [r1, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6911      	ldr	r1, [r2, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	001e847f 	.word	0x001e847f
 80033c4:	003d08ff 	.word	0x003d08ff
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e25b      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4ba3      	ldr	r3, [pc, #652]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4ba0      	ldr	r3, [pc, #640]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b9d      	ldr	r3, [pc, #628]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b99      	ldr	r3, [pc, #612]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e236      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b91      	ldr	r3, [pc, #580]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a90      	ldr	r2, [pc, #576]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a8a      	ldr	r2, [pc, #552]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a87      	ldr	r2, [pc, #540]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b84      	ldr	r3, [pc, #528]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a83      	ldr	r2, [pc, #524]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a80      	ldr	r2, [pc, #512]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fdf4 	bl	8001074 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fdf0 	bl	8001074 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1fb      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fde0 	bl	8001074 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd fddc 	bl	8001074 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1e7      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b6c      	ldr	r3, [pc, #432]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b62      	ldr	r3, [pc, #392]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1bb      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4952      	ldr	r1, [pc, #328]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <HAL_RCC_OscConfig+0x2b0>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd fd95 	bl	8001074 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7fd fd91 	bl	8001074 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e19c      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4940      	ldr	r1, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_OscConfig+0x2b0>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fd74 	bl	8001074 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7fd fd70 	bl	8001074 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e17b      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d030      	beq.n	800361c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCC_OscConfig+0x2b4>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd fd54 	bl	8001074 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd fd50 	bl	8001074 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e15b      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e015      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_OscConfig+0x2b4>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fd fd3d 	bl	8001074 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fd fd39 	bl	8001074 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e144      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a0 	beq.w	800376a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a0e      	ldr	r2, [pc, #56]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x2ac>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x2b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d121      	bne.n	80036aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCC_OscConfig+0x2b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_RCC_OscConfig+0x2b8>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fd fcff 	bl	8001074 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e011      	b.n	800369e <HAL_RCC_OscConfig+0x2ce>
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	42470000 	.word	0x42470000
 8003684:	42470e80 	.word	0x42470e80
 8003688:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fd fcf2 	bl	8001074 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0fd      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b81      	ldr	r3, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x4d4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
 80036b2:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a7c      	ldr	r2, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e01c      	b.n	80036fa <HAL_RCC_OscConfig+0x32a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x312>
 80036c8:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a76      	ldr	r2, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b74      	ldr	r3, [pc, #464]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a73      	ldr	r2, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
 80036e0:	e00b      	b.n	80036fa <HAL_RCC_OscConfig+0x32a>
 80036e2:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a70      	ldr	r2, [pc, #448]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a6d      	ldr	r2, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fd fcb7 	bl	8001074 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd fcb3 	bl	8001074 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0bc      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCC_OscConfig+0x33a>
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fd fca1 	bl	8001074 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fd fc9d 	bl	8001074 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0a6      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ee      	bne.n	8003736 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8092 	beq.w	8003898 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d05c      	beq.n	800383a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d141      	bne.n	800380c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b48      	ldr	r3, [pc, #288]	; (80038ac <HAL_RCC_OscConfig+0x4dc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fd fc71 	bl	8001074 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fd fc6d 	bl	8001074 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e078      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	019b      	lsls	r3, r3, #6
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	4933      	ldr	r1, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037de:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_OscConfig+0x4dc>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fc46 	bl	8001074 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fc42 	bl	8001074 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04d      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x41c>
 800380a:	e045      	b.n	8003898 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x4dc>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fc2f 	bl	8001074 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd fc2b 	bl	8001074 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e036      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x44a>
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e029      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_RCC_OscConfig+0x4d8>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	429a      	cmp	r2, r3
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d115      	bne.n	8003894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003874:	4293      	cmp	r3, r2
 8003876:	d10d      	bne.n	8003894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000
 80038a8:	40023800 	.word	0x40023800
 80038ac:	42470060 	.word	0x42470060

080038b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0cc      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d90c      	bls.n	80038ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0b8      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800390e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800391c:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	494d      	ldr	r1, [pc, #308]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d044      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394e:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d119      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07f      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d003      	beq.n	800396e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396a:	2b03      	cmp	r3, #3
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396e:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e06f      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397e:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e067      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398e:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 0203 	bic.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4934      	ldr	r1, [pc, #208]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fb68 	bl	8001074 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	e00a      	b.n	80039be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a8:	f7fd fb64 	bl	8001074 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e04f      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 020c 	and.w	r2, r3, #12
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d1eb      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d20c      	bcs.n	80039f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e032      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4916      	ldr	r1, [pc, #88]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	490e      	ldr	r1, [pc, #56]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a36:	f000 f821 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	5cd3      	ldrb	r3, [r2, r3]
 8003a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fac8 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023c00 	.word	0x40023c00
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	080095d8 	.word	0x080095d8
 8003a74:	20000094 	.word	0x20000094
 8003a78:	2000006c 	.word	0x2000006c

08003a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d007      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x32>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d008      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x38>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 80b4 	bne.w	8003c10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003aaa:	60bb      	str	r3, [r7, #8]
       break;
 8003aac:	e0b3      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ab0:	60bb      	str	r3, [r7, #8]
      break;
 8003ab2:	e0b0      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab4:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abe:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04a      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	ea03 0501 	and.w	r5, r3, r1
 8003ae0:	ea04 0602 	and.w	r6, r4, r2
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	0154      	lsls	r4, r2, #5
 8003af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003af6:	014b      	lsls	r3, r1, #5
 8003af8:	4619      	mov	r1, r3
 8003afa:	4622      	mov	r2, r4
 8003afc:	1b49      	subs	r1, r1, r5
 8003afe:	eb62 0206 	sbc.w	r2, r2, r6
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0194      	lsls	r4, r2, #6
 8003b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b10:	018b      	lsls	r3, r1, #6
 8003b12:	1a5b      	subs	r3, r3, r1
 8003b14:	eb64 0402 	sbc.w	r4, r4, r2
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	00e2      	lsls	r2, r4, #3
 8003b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b26:	00d9      	lsls	r1, r3, #3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	195b      	adds	r3, r3, r5
 8003b2e:	eb44 0406 	adc.w	r4, r4, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	0262      	lsls	r2, r4, #9
 8003b3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b40:	0259      	lsls	r1, r3, #9
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fb38 	bl	80001c8 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e049      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	ea03 0501 	and.w	r5, r3, r1
 8003b76:	ea04 0602 	and.w	r6, r4, r2
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	0154      	lsls	r4, r2, #5
 8003b88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b8c:	014b      	lsls	r3, r1, #5
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4622      	mov	r2, r4
 8003b92:	1b49      	subs	r1, r1, r5
 8003b94:	eb62 0206 	sbc.w	r2, r2, r6
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f04f 0400 	mov.w	r4, #0
 8003ba0:	0194      	lsls	r4, r2, #6
 8003ba2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ba6:	018b      	lsls	r3, r1, #6
 8003ba8:	1a5b      	subs	r3, r3, r1
 8003baa:	eb64 0402 	sbc.w	r4, r4, r2
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bbc:	00d9      	lsls	r1, r3, #3
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	195b      	adds	r3, r3, r5
 8003bc4:	eb44 0406 	adc.w	r4, r4, r6
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	02a2      	lsls	r2, r4, #10
 8003bd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bd6:	0299      	lsls	r1, r3, #10
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4614      	mov	r4, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	4621      	mov	r1, r4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f04f 0400 	mov.w	r4, #0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4623      	mov	r3, r4
 8003bea:	f7fc faed 	bl	80001c8 <__aeabi_uldivmod>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c12:	60bb      	str	r3, [r7, #8]
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	68bb      	ldr	r3, [r7, #8]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000094 	.word	0x20000094

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	080095e8 	.word	0x080095e8

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffdc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c74:	4601      	mov	r1, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	080095e8 	.word	0x080095e8

08003c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e056      	b.n	8003d54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f004 fead 	bl	8008a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	ea42 0103 	orr.w	r1, r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 0104 	and.w	r1, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01a      	b.n	8003da4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f004 feb2 	bl	8008af0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x26>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e18a      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x33c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dda:	f7fd f94b 	bl	8001074 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00f      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x70>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d107      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x68>
 8003e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d003      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e1a:	e15b      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x82>
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e34:	e14e      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d003      	beq.n	8003e4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	887a      	ldrh	r2, [r7, #2]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d007      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d178      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x10a>
 8003eb0:	8b7b      	ldrh	r3, [r7, #26]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d166      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eda:	e053      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d11b      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d113      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x1b8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d014      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	b292      	uxth	r2, r2
 8003f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f64:	f7fd f886 	bl	8001074 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d807      	bhi.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d003      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f82:	e0a7      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a6      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x130>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1a1      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x130>
 8003f98:	e07c      	b.n	8004094 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d16b      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fce:	e057      	b.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d11c      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d114      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d119      	bne.n	800405a <HAL_SPI_TransmitReceive+0x2ae>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004056:	2301      	movs	r3, #1
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800405a:	f7fd f80b 	bl	8001074 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004066:	429a      	cmp	r2, r3
 8004068:	d803      	bhi.n	8004072 <HAL_SPI_TransmitReceive+0x2c6>
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d102      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x2cc>
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800407e:	e029      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1a2      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x224>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d19d      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f8a1 	bl	80041e0 <SPI_EndRxTxTransaction>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040b0:	e010      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	e000      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3730      	adds	r7, #48	; 0x30
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040fe:	b2db      	uxtb	r3, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800411c:	e04c      	b.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d048      	beq.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004126:	f7fc ffa5 	bl	8001074 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d902      	bls.n	800413c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d13d      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800414a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004154:	d111      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d004      	beq.n	800416a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004168:	d107      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d10f      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e00f      	b.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d1a3      	bne.n	800411e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <SPI_EndRxTxTransaction+0x7c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <SPI_EndRxTxTransaction+0x80>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0d5b      	lsrs	r3, r3, #21
 80041f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420a:	d112      	bne.n	8004232 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	2180      	movs	r1, #128	; 0x80
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff ff78 	bl	800410c <SPI_WaitFlagStateUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e00f      	b.n	8004252 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3b01      	subs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d0f2      	beq.n	8004232 <SPI_EndRxTxTransaction+0x52>
 800424c:	e000      	b.n	8004250 <SPI_EndRxTxTransaction+0x70>
        break;
 800424e:	bf00      	nop
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000094 	.word	0x20000094
 8004260:	165e9f81 	.word	0x165e9f81

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e01d      	b.n	80042b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f004 fc54 	bl	8008b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fa1e 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d007      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d122      	bne.n	800435e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d11b      	bne.n	800435e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f06f 0202 	mvn.w	r2, #2
 800432e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f9af 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 800434a:	e005      	b.n	8004358 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9a1 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f9b2 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d122      	bne.n	80043b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0204 	mvn.w	r2, #4
 8004382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f985 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f977 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f988 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d122      	bne.n	8004406 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d11b      	bne.n	8004406 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0208 	mvn.w	r2, #8
 80043d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f95b 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 80043f2:	e005      	b.n	8004400 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f94d 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f95e 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d122      	bne.n	800445a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d11b      	bne.n	800445a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0210 	mvn.w	r2, #16
 800442a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2208      	movs	r2, #8
 8004430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f931 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 8004446:	e005      	b.n	8004454 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f923 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f934 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10e      	bne.n	8004486 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0201 	mvn.w	r2, #1
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8fd 	bl	8004680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fad9 	bl	8004a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d10e      	bne.n	80044de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8f9 	bl	80046d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d10e      	bne.n	800450a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d107      	bne.n	800450a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0220 	mvn.w	r2, #32
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 faa3 	bl	8004a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_TIM_ConfigClockSource+0x18>
 8004526:	2302      	movs	r3, #2
 8004528:	e0a6      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x166>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004548:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004550:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d067      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x120>
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d80b      	bhi.n	800457e <HAL_TIM_ConfigClockSource+0x6c>
 8004566:	2b10      	cmp	r3, #16
 8004568:	d073      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x140>
 800456a:	2b10      	cmp	r3, #16
 800456c:	d802      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x62>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d06f      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004572:	e078      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004574:	2b20      	cmp	r3, #32
 8004576:	d06c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x140>
 8004578:	2b30      	cmp	r3, #48	; 0x30
 800457a:	d06a      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800457c:	e073      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800457e:	2b70      	cmp	r3, #112	; 0x70
 8004580:	d00d      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x8c>
 8004582:	2b70      	cmp	r3, #112	; 0x70
 8004584:	d804      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x7e>
 8004586:	2b50      	cmp	r3, #80	; 0x50
 8004588:	d033      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xe0>
 800458a:	2b60      	cmp	r3, #96	; 0x60
 800458c:	d041      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800458e:	e06a      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d066      	beq.n	8004664 <HAL_TIM_ConfigClockSource+0x152>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d017      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800459c:	e063      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f000 f9b3 	bl	8004918 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	609a      	str	r2, [r3, #8]
      break;
 80045ca:	e04c      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6899      	ldr	r1, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f000 f99c 	bl	8004918 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e039      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 f910 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2150      	movs	r1, #80	; 0x50
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f969 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004610:	e029      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f92f 	bl	8004882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2160      	movs	r1, #96	; 0x60
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f959 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004630:	e019      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8f0 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f949 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004650:	e009      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f000 f940 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004662:	e000      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <TIM_Base_SetConfig+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <TIM_Base_SetConfig+0x120>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d027      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0x118>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d023      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <TIM_Base_SetConfig+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <TIM_Base_SetConfig+0x13c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <TIM_Base_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e05a      	b.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d01d      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10c      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40010400 	.word	0x40010400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800

08004a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e03f      	b.n	8004b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f004 f870 	bl	8008b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fb4b 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b088      	sub	sp, #32
 8004b16:	af02      	add	r7, sp, #8
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f040 8083 	bne.w	8004c3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x2e>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e07b      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x40>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e074      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b68:	f7fc fa84 	bl	8001074 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b82:	e042      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d122      	bne.n	8004be2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f96a 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	e017      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	e013      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f947 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e01f      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	60ba      	str	r2, [r7, #8]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1b7      	bne.n	8004b84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f92e 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10d      	bne.n	8004c96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_UART_IRQHandler+0x52>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9e0 	bl	8005054 <UART_Receive_IT>
      return;
 8004c94:	e0d1      	b.n	8004e3a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80b0 	beq.w	8004dfe <HAL_UART_IRQHandler+0x1ba>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x70>
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80a5 	beq.w	8004dfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x90>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	f043 0201 	orr.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xb0>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	f043 0202 	orr.w	r2, r3, #2
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_UART_IRQHandler+0xd0>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	f043 0204 	orr.w	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00f      	beq.n	8004d3e <HAL_UART_IRQHandler+0xfa>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <HAL_UART_IRQHandler+0xee>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	f043 0208 	orr.w	r2, r3, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d078      	beq.n	8004e38 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_UART_IRQHandler+0x11c>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f97a 	bl	8005054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_UART_IRQHandler+0x144>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d031      	beq.n	8004dec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8c3 	bl	8004f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d123      	bne.n	8004de4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004daa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d013      	beq.n	8004ddc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <HAL_UART_IRQHandler+0x1fc>)
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fc fa96 	bl	80012f2 <HAL_DMA_Abort_IT>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dda:	e00e      	b.n	8004dfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f845 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de2:	e00a      	b.n	8004dfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f841 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dea:	e006      	b.n	8004dfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f83d 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004df8:	e01e      	b.n	8004e38 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	bf00      	nop
    return;
 8004dfc:	e01c      	b.n	8004e38 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1d6>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8b0 	bl	8004f78 <UART_Transmit_IT>
    return;
 8004e18:	e00f      	b.n	8004e3a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_UART_IRQHandler+0x1f6>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8f8 	bl	8005024 <UART_EndTransmit_IT>
    return;
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004e38:	bf00      	nop
  }
}
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	08004f51 	.word	0x08004f51

08004e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	e02c      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d028      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea0:	f7fc f8e8 	bl	8001074 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d21d      	bcs.n	8004eec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ebe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e00f      	b.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d0c3      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff ff7e 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b21      	cmp	r3, #33	; 0x21
 8004f8a:	d144      	bne.n	8005016 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d11a      	bne.n	8004fcc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004faa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]
 8004fbe:	e00e      	b.n	8004fde <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]
 8004fca:	e008      	b.n	8004fde <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	1c59      	adds	r1, r3, #1
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6211      	str	r1, [r2, #32]
 8004fd6:	781a      	ldrb	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4619      	mov	r1, r3
 8004fec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005000:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005010:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fefd 	bl	8004e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b22      	cmp	r3, #34	; 0x22
 8005066:	d171      	bne.n	800514c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005070:	d123      	bne.n	80050ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10e      	bne.n	800509e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28
 800509c:	e029      	b.n	80050f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
 80050b8:	e01b      	b.n	80050f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6858      	ldr	r0, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6291      	str	r1, [r2, #40]	; 0x28
 80050d2:	b2c2      	uxtb	r2, r0
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e00c      	b.n	80050f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	1c58      	adds	r0, r3, #1
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	6288      	str	r0, [r1, #40]	; 0x28
 80050ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4619      	mov	r1, r3
 8005100:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005102:	2b00      	cmp	r3, #0
 8005104:	d120      	bne.n	8005148 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0220 	bic.w	r2, r2, #32
 8005114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005124:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fe8a 	bl	8004e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e002      	b.n	800514e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800519a:	f023 030c 	bic.w	r3, r3, #12
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c6:	f040 818b 	bne.w	80054e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4ac1      	ldr	r2, [pc, #772]	; (80054d4 <UART_SetConfig+0x37c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d005      	beq.n	80051e0 <UART_SetConfig+0x88>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4abf      	ldr	r2, [pc, #764]	; (80054d8 <UART_SetConfig+0x380>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	f040 80bd 	bne.w	800535a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fe fd44 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80051e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	461d      	mov	r5, r3
 80051ea:	f04f 0600 	mov.w	r6, #0
 80051ee:	46a8      	mov	r8, r5
 80051f0:	46b1      	mov	r9, r6
 80051f2:	eb18 0308 	adds.w	r3, r8, r8
 80051f6:	eb49 0409 	adc.w	r4, r9, r9
 80051fa:	4698      	mov	r8, r3
 80051fc:	46a1      	mov	r9, r4
 80051fe:	eb18 0805 	adds.w	r8, r8, r5
 8005202:	eb49 0906 	adc.w	r9, r9, r6
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005212:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005216:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800521a:	4688      	mov	r8, r1
 800521c:	4691      	mov	r9, r2
 800521e:	eb18 0005 	adds.w	r0, r8, r5
 8005222:	eb49 0106 	adc.w	r1, r9, r6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	461d      	mov	r5, r3
 800522c:	f04f 0600 	mov.w	r6, #0
 8005230:	196b      	adds	r3, r5, r5
 8005232:	eb46 0406 	adc.w	r4, r6, r6
 8005236:	461a      	mov	r2, r3
 8005238:	4623      	mov	r3, r4
 800523a:	f7fa ffc5 	bl	80001c8 <__aeabi_uldivmod>
 800523e:	4603      	mov	r3, r0
 8005240:	460c      	mov	r4, r1
 8005242:	461a      	mov	r2, r3
 8005244:	4ba5      	ldr	r3, [pc, #660]	; (80054dc <UART_SetConfig+0x384>)
 8005246:	fba3 2302 	umull	r2, r3, r3, r2
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	461d      	mov	r5, r3
 8005254:	f04f 0600 	mov.w	r6, #0
 8005258:	46a9      	mov	r9, r5
 800525a:	46b2      	mov	sl, r6
 800525c:	eb19 0309 	adds.w	r3, r9, r9
 8005260:	eb4a 040a 	adc.w	r4, sl, sl
 8005264:	4699      	mov	r9, r3
 8005266:	46a2      	mov	sl, r4
 8005268:	eb19 0905 	adds.w	r9, r9, r5
 800526c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800527c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005280:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005284:	4689      	mov	r9, r1
 8005286:	4692      	mov	sl, r2
 8005288:	eb19 0005 	adds.w	r0, r9, r5
 800528c:	eb4a 0106 	adc.w	r1, sl, r6
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	461d      	mov	r5, r3
 8005296:	f04f 0600 	mov.w	r6, #0
 800529a:	196b      	adds	r3, r5, r5
 800529c:	eb46 0406 	adc.w	r4, r6, r6
 80052a0:	461a      	mov	r2, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	f7fa ff90 	bl	80001c8 <__aeabi_uldivmod>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b8b      	ldr	r3, [pc, #556]	; (80054dc <UART_SetConfig+0x384>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	2164      	movs	r1, #100	; 0x64
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	4a86      	ldr	r2, [pc, #536]	; (80054dc <UART_SetConfig+0x384>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d0:	4498      	add	r8, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	461d      	mov	r5, r3
 80052d6:	f04f 0600 	mov.w	r6, #0
 80052da:	46a9      	mov	r9, r5
 80052dc:	46b2      	mov	sl, r6
 80052de:	eb19 0309 	adds.w	r3, r9, r9
 80052e2:	eb4a 040a 	adc.w	r4, sl, sl
 80052e6:	4699      	mov	r9, r3
 80052e8:	46a2      	mov	sl, r4
 80052ea:	eb19 0905 	adds.w	r9, r9, r5
 80052ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005306:	4689      	mov	r9, r1
 8005308:	4692      	mov	sl, r2
 800530a:	eb19 0005 	adds.w	r0, r9, r5
 800530e:	eb4a 0106 	adc.w	r1, sl, r6
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	461d      	mov	r5, r3
 8005318:	f04f 0600 	mov.w	r6, #0
 800531c:	196b      	adds	r3, r5, r5
 800531e:	eb46 0406 	adc.w	r4, r6, r6
 8005322:	461a      	mov	r2, r3
 8005324:	4623      	mov	r3, r4
 8005326:	f7fa ff4f 	bl	80001c8 <__aeabi_uldivmod>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	461a      	mov	r2, r3
 8005330:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <UART_SetConfig+0x384>)
 8005332:	fba3 1302 	umull	r1, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	3332      	adds	r3, #50	; 0x32
 8005344:	4a65      	ldr	r2, [pc, #404]	; (80054dc <UART_SetConfig+0x384>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f003 0207 	and.w	r2, r3, #7
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4442      	add	r2, r8
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	e26f      	b.n	800583a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800535a:	f7fe fc73 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800535e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	461d      	mov	r5, r3
 8005364:	f04f 0600 	mov.w	r6, #0
 8005368:	46a8      	mov	r8, r5
 800536a:	46b1      	mov	r9, r6
 800536c:	eb18 0308 	adds.w	r3, r8, r8
 8005370:	eb49 0409 	adc.w	r4, r9, r9
 8005374:	4698      	mov	r8, r3
 8005376:	46a1      	mov	r9, r4
 8005378:	eb18 0805 	adds.w	r8, r8, r5
 800537c:	eb49 0906 	adc.w	r9, r9, r6
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800538c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005390:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005394:	4688      	mov	r8, r1
 8005396:	4691      	mov	r9, r2
 8005398:	eb18 0005 	adds.w	r0, r8, r5
 800539c:	eb49 0106 	adc.w	r1, r9, r6
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	461d      	mov	r5, r3
 80053a6:	f04f 0600 	mov.w	r6, #0
 80053aa:	196b      	adds	r3, r5, r5
 80053ac:	eb46 0406 	adc.w	r4, r6, r6
 80053b0:	461a      	mov	r2, r3
 80053b2:	4623      	mov	r3, r4
 80053b4:	f7fa ff08 	bl	80001c8 <__aeabi_uldivmod>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	461a      	mov	r2, r3
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <UART_SetConfig+0x384>)
 80053c0:	fba3 2302 	umull	r2, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	461d      	mov	r5, r3
 80053ce:	f04f 0600 	mov.w	r6, #0
 80053d2:	46a9      	mov	r9, r5
 80053d4:	46b2      	mov	sl, r6
 80053d6:	eb19 0309 	adds.w	r3, r9, r9
 80053da:	eb4a 040a 	adc.w	r4, sl, sl
 80053de:	4699      	mov	r9, r3
 80053e0:	46a2      	mov	sl, r4
 80053e2:	eb19 0905 	adds.w	r9, r9, r5
 80053e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ea:	f04f 0100 	mov.w	r1, #0
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053fe:	4689      	mov	r9, r1
 8005400:	4692      	mov	sl, r2
 8005402:	eb19 0005 	adds.w	r0, r9, r5
 8005406:	eb4a 0106 	adc.w	r1, sl, r6
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	461d      	mov	r5, r3
 8005410:	f04f 0600 	mov.w	r6, #0
 8005414:	196b      	adds	r3, r5, r5
 8005416:	eb46 0406 	adc.w	r4, r6, r6
 800541a:	461a      	mov	r2, r3
 800541c:	4623      	mov	r3, r4
 800541e:	f7fa fed3 	bl	80001c8 <__aeabi_uldivmod>
 8005422:	4603      	mov	r3, r0
 8005424:	460c      	mov	r4, r1
 8005426:	461a      	mov	r2, r3
 8005428:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <UART_SetConfig+0x384>)
 800542a:	fba3 1302 	umull	r1, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2164      	movs	r1, #100	; 0x64
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	3332      	adds	r3, #50	; 0x32
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <UART_SetConfig+0x384>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800544a:	4498      	add	r8, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	461d      	mov	r5, r3
 8005450:	f04f 0600 	mov.w	r6, #0
 8005454:	46a9      	mov	r9, r5
 8005456:	46b2      	mov	sl, r6
 8005458:	eb19 0309 	adds.w	r3, r9, r9
 800545c:	eb4a 040a 	adc.w	r4, sl, sl
 8005460:	4699      	mov	r9, r3
 8005462:	46a2      	mov	sl, r4
 8005464:	eb19 0905 	adds.w	r9, r9, r5
 8005468:	eb4a 0a06 	adc.w	sl, sl, r6
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005478:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800547c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005480:	4689      	mov	r9, r1
 8005482:	4692      	mov	sl, r2
 8005484:	eb19 0005 	adds.w	r0, r9, r5
 8005488:	eb4a 0106 	adc.w	r1, sl, r6
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	461d      	mov	r5, r3
 8005492:	f04f 0600 	mov.w	r6, #0
 8005496:	196b      	adds	r3, r5, r5
 8005498:	eb46 0406 	adc.w	r4, r6, r6
 800549c:	461a      	mov	r2, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	f7fa fe92 	bl	80001c8 <__aeabi_uldivmod>
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <UART_SetConfig+0x384>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	; 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	3332      	adds	r3, #50	; 0x32
 80054be:	4a07      	ldr	r2, [pc, #28]	; (80054dc <UART_SetConfig+0x384>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 0207 	and.w	r2, r3, #7
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4442      	add	r2, r8
 80054d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054d2:	e1b2      	b.n	800583a <UART_SetConfig+0x6e2>
 80054d4:	40011000 	.word	0x40011000
 80054d8:	40011400 	.word	0x40011400
 80054dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4ad7      	ldr	r2, [pc, #860]	; (8005844 <UART_SetConfig+0x6ec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d005      	beq.n	80054f6 <UART_SetConfig+0x39e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4ad6      	ldr	r2, [pc, #856]	; (8005848 <UART_SetConfig+0x6f0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	f040 80d1 	bne.w	8005698 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f6:	f7fe fbb9 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80054fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	469a      	mov	sl, r3
 8005500:	f04f 0b00 	mov.w	fp, #0
 8005504:	46d0      	mov	r8, sl
 8005506:	46d9      	mov	r9, fp
 8005508:	eb18 0308 	adds.w	r3, r8, r8
 800550c:	eb49 0409 	adc.w	r4, r9, r9
 8005510:	4698      	mov	r8, r3
 8005512:	46a1      	mov	r9, r4
 8005514:	eb18 080a 	adds.w	r8, r8, sl
 8005518:	eb49 090b 	adc.w	r9, r9, fp
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005528:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800552c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005530:	4688      	mov	r8, r1
 8005532:	4691      	mov	r9, r2
 8005534:	eb1a 0508 	adds.w	r5, sl, r8
 8005538:	eb4b 0609 	adc.w	r6, fp, r9
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	0094      	lsls	r4, r2, #2
 8005550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005554:	008b      	lsls	r3, r1, #2
 8005556:	461a      	mov	r2, r3
 8005558:	4623      	mov	r3, r4
 800555a:	4628      	mov	r0, r5
 800555c:	4631      	mov	r1, r6
 800555e:	f7fa fe33 	bl	80001c8 <__aeabi_uldivmod>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	461a      	mov	r2, r3
 8005568:	4bb8      	ldr	r3, [pc, #736]	; (800584c <UART_SetConfig+0x6f4>)
 800556a:	fba3 2302 	umull	r2, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	469b      	mov	fp, r3
 8005578:	f04f 0c00 	mov.w	ip, #0
 800557c:	46d9      	mov	r9, fp
 800557e:	46e2      	mov	sl, ip
 8005580:	eb19 0309 	adds.w	r3, r9, r9
 8005584:	eb4a 040a 	adc.w	r4, sl, sl
 8005588:	4699      	mov	r9, r3
 800558a:	46a2      	mov	sl, r4
 800558c:	eb19 090b 	adds.w	r9, r9, fp
 8005590:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a8:	4689      	mov	r9, r1
 80055aa:	4692      	mov	sl, r2
 80055ac:	eb1b 0509 	adds.w	r5, fp, r9
 80055b0:	eb4c 060a 	adc.w	r6, ip, sl
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	f04f 0400 	mov.w	r4, #0
 80055c6:	0094      	lsls	r4, r2, #2
 80055c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055cc:	008b      	lsls	r3, r1, #2
 80055ce:	461a      	mov	r2, r3
 80055d0:	4623      	mov	r3, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	4631      	mov	r1, r6
 80055d6:	f7fa fdf7 	bl	80001c8 <__aeabi_uldivmod>
 80055da:	4603      	mov	r3, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	461a      	mov	r2, r3
 80055e0:	4b9a      	ldr	r3, [pc, #616]	; (800584c <UART_SetConfig+0x6f4>)
 80055e2:	fba3 1302 	umull	r1, r3, r3, r2
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	2164      	movs	r1, #100	; 0x64
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	3332      	adds	r3, #50	; 0x32
 80055f4:	4a95      	ldr	r2, [pc, #596]	; (800584c <UART_SetConfig+0x6f4>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005600:	4498      	add	r8, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	469b      	mov	fp, r3
 8005606:	f04f 0c00 	mov.w	ip, #0
 800560a:	46d9      	mov	r9, fp
 800560c:	46e2      	mov	sl, ip
 800560e:	eb19 0309 	adds.w	r3, r9, r9
 8005612:	eb4a 040a 	adc.w	r4, sl, sl
 8005616:	4699      	mov	r9, r3
 8005618:	46a2      	mov	sl, r4
 800561a:	eb19 090b 	adds.w	r9, r9, fp
 800561e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800562e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005632:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005636:	4689      	mov	r9, r1
 8005638:	4692      	mov	sl, r2
 800563a:	eb1b 0509 	adds.w	r5, fp, r9
 800563e:	eb4c 060a 	adc.w	r6, ip, sl
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4619      	mov	r1, r3
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	f04f 0400 	mov.w	r4, #0
 8005654:	0094      	lsls	r4, r2, #2
 8005656:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800565a:	008b      	lsls	r3, r1, #2
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	4628      	mov	r0, r5
 8005662:	4631      	mov	r1, r6
 8005664:	f7fa fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8005668:	4603      	mov	r3, r0
 800566a:	460c      	mov	r4, r1
 800566c:	461a      	mov	r2, r3
 800566e:	4b77      	ldr	r3, [pc, #476]	; (800584c <UART_SetConfig+0x6f4>)
 8005670:	fba3 1302 	umull	r1, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	2164      	movs	r1, #100	; 0x64
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	3332      	adds	r3, #50	; 0x32
 8005682:	4a72      	ldr	r2, [pc, #456]	; (800584c <UART_SetConfig+0x6f4>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4442      	add	r2, r8
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	e0d0      	b.n	800583a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fad4 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800569c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	469a      	mov	sl, r3
 80056a2:	f04f 0b00 	mov.w	fp, #0
 80056a6:	46d0      	mov	r8, sl
 80056a8:	46d9      	mov	r9, fp
 80056aa:	eb18 0308 	adds.w	r3, r8, r8
 80056ae:	eb49 0409 	adc.w	r4, r9, r9
 80056b2:	4698      	mov	r8, r3
 80056b4:	46a1      	mov	r9, r4
 80056b6:	eb18 080a 	adds.w	r8, r8, sl
 80056ba:	eb49 090b 	adc.w	r9, r9, fp
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056d2:	4688      	mov	r8, r1
 80056d4:	4691      	mov	r9, r2
 80056d6:	eb1a 0508 	adds.w	r5, sl, r8
 80056da:	eb4b 0609 	adc.w	r6, fp, r9
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	0094      	lsls	r4, r2, #2
 80056f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	4631      	mov	r1, r6
 8005700:	f7fa fd62 	bl	80001c8 <__aeabi_uldivmod>
 8005704:	4603      	mov	r3, r0
 8005706:	460c      	mov	r4, r1
 8005708:	461a      	mov	r2, r3
 800570a:	4b50      	ldr	r3, [pc, #320]	; (800584c <UART_SetConfig+0x6f4>)
 800570c:	fba3 2302 	umull	r2, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	469b      	mov	fp, r3
 800571a:	f04f 0c00 	mov.w	ip, #0
 800571e:	46d9      	mov	r9, fp
 8005720:	46e2      	mov	sl, ip
 8005722:	eb19 0309 	adds.w	r3, r9, r9
 8005726:	eb4a 040a 	adc.w	r4, sl, sl
 800572a:	4699      	mov	r9, r3
 800572c:	46a2      	mov	sl, r4
 800572e:	eb19 090b 	adds.w	r9, r9, fp
 8005732:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005742:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005746:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574a:	4689      	mov	r9, r1
 800574c:	4692      	mov	sl, r2
 800574e:	eb1b 0509 	adds.w	r5, fp, r9
 8005752:	eb4c 060a 	adc.w	r6, ip, sl
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4619      	mov	r1, r3
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f04f 0400 	mov.w	r4, #0
 8005768:	0094      	lsls	r4, r2, #2
 800576a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800576e:	008b      	lsls	r3, r1, #2
 8005770:	461a      	mov	r2, r3
 8005772:	4623      	mov	r3, r4
 8005774:	4628      	mov	r0, r5
 8005776:	4631      	mov	r1, r6
 8005778:	f7fa fd26 	bl	80001c8 <__aeabi_uldivmod>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	461a      	mov	r2, r3
 8005782:	4b32      	ldr	r3, [pc, #200]	; (800584c <UART_SetConfig+0x6f4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <UART_SetConfig+0x6f4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a2:	4498      	add	r8, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	469b      	mov	fp, r3
 80057a8:	f04f 0c00 	mov.w	ip, #0
 80057ac:	46d9      	mov	r9, fp
 80057ae:	46e2      	mov	sl, ip
 80057b0:	eb19 0309 	adds.w	r3, r9, r9
 80057b4:	eb4a 040a 	adc.w	r4, sl, sl
 80057b8:	4699      	mov	r9, r3
 80057ba:	46a2      	mov	sl, r4
 80057bc:	eb19 090b 	adds.w	r9, r9, fp
 80057c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d8:	4689      	mov	r9, r1
 80057da:	4692      	mov	sl, r2
 80057dc:	eb1b 0509 	adds.w	r5, fp, r9
 80057e0:	eb4c 060a 	adc.w	r6, ip, sl
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4619      	mov	r1, r3
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	f04f 0400 	mov.w	r4, #0
 80057f6:	0094      	lsls	r4, r2, #2
 80057f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057fc:	008b      	lsls	r3, r1, #2
 80057fe:	461a      	mov	r2, r3
 8005800:	4623      	mov	r3, r4
 8005802:	4628      	mov	r0, r5
 8005804:	4631      	mov	r1, r6
 8005806:	f7fa fcdf 	bl	80001c8 <__aeabi_uldivmod>
 800580a:	4603      	mov	r3, r0
 800580c:	460c      	mov	r4, r1
 800580e:	461a      	mov	r2, r3
 8005810:	4b0e      	ldr	r3, [pc, #56]	; (800584c <UART_SetConfig+0x6f4>)
 8005812:	fba3 1302 	umull	r1, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2164      	movs	r1, #100	; 0x64
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	; 0x32
 8005824:	4a09      	ldr	r2, [pc, #36]	; (800584c <UART_SetConfig+0x6f4>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4442      	add	r2, r8
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	e7ff      	b.n	800583a <UART_SetConfig+0x6e2>
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005844:	40011000 	.word	0x40011000
 8005848:	40011400 	.word	0x40011400
 800584c:	51eb851f 	.word	0x51eb851f

08005850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005850:	b084      	sub	sp, #16
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	f107 001c 	add.w	r0, r7, #28
 800585e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	2b01      	cmp	r3, #1
 8005866:	d122      	bne.n	80058ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d105      	bne.n	80058a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f94a 	bl	8005b3c <USB_CoreReset>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e01a      	b.n	80058e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f93e 	bl	8005b3c <USB_CoreReset>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
 80058d6:	e005      	b.n	80058e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d10b      	bne.n	8005902 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f043 0206 	orr.w	r2, r3, #6
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800590e:	b004      	add	sp, #16
 8005910:	4770      	bx	lr

08005912 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f023 0201 	bic.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	e00b      	b.n	800599a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e001      	b.n	800599a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e003      	b.n	80059a2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800599a:	2032      	movs	r0, #50	; 0x32
 800599c:	f7fb fb76 	bl	800108c <HAL_Delay>

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <USB_FlushTxFifo+0x48>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e006      	b.n	80059e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d0f0      	beq.n	80059c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2210      	movs	r2, #16
 8005a08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <USB_FlushRxFifo+0x40>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d901      	bls.n	8005a1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e006      	b.n	8005a2a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d0f0      	beq.n	8005a0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	00030d40 	.word	0x00030d40

08005a3c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4611      	mov	r1, r2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	71fb      	strb	r3, [r7, #7]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11a      	bne.n	8005a98 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a62:	88bb      	ldrh	r3, [r7, #4]
 8005a64:	3303      	adds	r3, #3
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e00f      	b.n	8005a90 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	031a      	lsls	r2, r3, #12
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	3304      	adds	r3, #4
 8005a88:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d3eb      	bcc.n	8005a70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b089      	sub	sp, #36	; 0x24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	3303      	adds	r3, #3
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e00b      	b.n	8005ae2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d3ef      	bcc.n	8005aca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3724      	adds	r7, #36	; 0x24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b10:	68fb      	ldr	r3, [r7, #12]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e01b      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d0f0      	beq.n	8005b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	00030d40 	.word	0x00030d40

08005ba4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	f107 001c 	add.w	r0, r7, #28
 8005bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d018      	beq.n	8005c28 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d10a      	bne.n	8005c12 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	e014      	b.n	8005c3c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e009      	b.n	8005c3c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c3c:	2110      	movs	r1, #16
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff feb4 	bl	80059ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fed7 	bl	80059f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e015      	b.n	8005c7c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d3e5      	bcc.n	8005c50 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005c84:	2101      	movs	r1, #1
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8ac 	bl	8005de4 <USB_DriveVbus>

  HAL_Delay(200U);
 8005c8c:	20c8      	movs	r0, #200	; 0xc8
 8005c8e:	f7fb f9fd 	bl	800108c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <USB_HostInit+0x164>)
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <USB_HostInit+0x168>)
 8005cbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cc2:	e009      	b.n	8005cd8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a10      	ldr	r2, [pc, #64]	; (8005d10 <USB_HostInit+0x16c>)
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a10      	ldr	r2, [pc, #64]	; (8005d14 <USB_HostInit+0x170>)
 8005cd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f043 0210 	orr.w	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <USB_HostInit+0x174>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d02:	b004      	add	sp, #16
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	01000200 	.word	0x01000200
 8005d0c:	00e00300 	.word	0x00e00300
 8005d10:	00600080 	.word	0x00600080
 8005d14:	004000e0 	.word	0x004000e0
 8005d18:	a3200008 	.word	0xa3200008

08005d1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d54:	4313      	orrs	r3, r2
 8005d56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d64:	461a      	mov	r2, r3
 8005d66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d6a:	6053      	str	r3, [r2, #4]
 8005d6c:	e009      	b.n	8005d82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d106      	bne.n	8005d82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005db0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dc0:	2064      	movs	r0, #100	; 0x64
 8005dc2:	f7fb f963 	bl	800108c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005dd4:	200a      	movs	r0, #10
 8005dd6:	f7fb f959 	bl	800108c <HAL_Delay>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <USB_DriveVbus+0x44>
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d106      	bne.n	8005e28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	d109      	bne.n	8005e48 <USB_DriveVbus+0x64>
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	0c5b      	lsrs	r3, r3, #17
 8005e74:	f003 0303 	and.w	r3, r3, #3
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	b29b      	uxth	r3, r3
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	70fb      	strb	r3, [r7, #3]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	70bb      	strb	r3, [r7, #2]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d87e      	bhi.n	8005fe4 <USB_HC_Init+0x13c>
 8005ee6:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <USB_HC_Init+0x44>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005efd 	.word	0x08005efd
 8005ef0:	08005fa7 	.word	0x08005fa7
 8005ef4:	08005efd 	.word	0x08005efd
 8005ef8:	08005f69 	.word	0x08005f69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	da10      	bge.n	8005f3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f36:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005f38:	e057      	b.n	8005fea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d051      	beq.n	8005fea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f64:	60d3      	str	r3, [r2, #12]
      break;
 8005f66:	e040      	b.n	8005fea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da34      	bge.n	8005fee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fa4:	e023      	b.n	8005fee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f240 2325 	movw	r3, #549	; 0x225
 8005fb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da17      	bge.n	8005ff2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fdc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fe0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fe2:	e006      	b.n	8005ff2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	e004      	b.n	8005ff4 <USB_HC_Init+0x14c>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <USB_HC_Init+0x14c>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <USB_HC_Init+0x14c>
      break;
 8005ff2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ffa:	699a      	ldr	r2, [r3, #24]
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	2101      	movs	r1, #1
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800600e:	4313      	orrs	r3, r2
 8006010:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800601e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da03      	bge.n	800602e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	e001      	b.n	8006032 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006032:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800603a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e001      	b.n	8006046 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006046:	787b      	ldrb	r3, [r7, #1]
 8006048:	059b      	lsls	r3, r3, #22
 800604a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800604e:	78bb      	ldrb	r3, [r7, #2]
 8006050:	02db      	lsls	r3, r3, #11
 8006052:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006056:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800605c:	049b      	lsls	r3, r3, #18
 800605e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006062:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006066:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800606a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	0159      	lsls	r1, r3, #5
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	440b      	add	r3, r1
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006082:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006088:	2b03      	cmp	r3, #3
 800608a:	d10f      	bne.n	80060ac <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060aa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop

080060bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d028      	beq.n	8006138 <USB_HC_StartXfer+0x7c>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	791b      	ldrb	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d124      	bne.n	8006138 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <USB_HC_StartXfer+0x50>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	795b      	ldrb	r3, [r3, #5]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	4619      	mov	r1, r3
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa2e 	bl	8006564 <USB_DoPing>
      return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e112      	b.n	8006332 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d112      	bne.n	8006138 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006130:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d018      	beq.n	8006172 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	8912      	ldrh	r2, [r2, #8]
 8006148:	4413      	add	r3, r2
 800614a:	3b01      	subs	r3, #1
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	8912      	ldrh	r2, [r2, #8]
 8006150:	fbb3 f3f2 	udiv	r3, r3, r2
 8006154:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006156:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006158:	8b7b      	ldrh	r3, [r7, #26]
 800615a:	429a      	cmp	r2, r3
 800615c:	d90b      	bls.n	8006176 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800615e:	8b7b      	ldrh	r3, [r7, #26]
 8006160:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	8912      	ldrh	r2, [r2, #8]
 8006168:	fb02 f203 	mul.w	r2, r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	611a      	str	r2, [r3, #16]
 8006170:	e001      	b.n	8006176 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006172:	2301      	movs	r3, #1
 8006174:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d006      	beq.n	800618c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800617e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	8912      	ldrh	r2, [r2, #8]
 8006184:	fb02 f203 	mul.w	r2, r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006196:	04d9      	lsls	r1, r3, #19
 8006198:	4b68      	ldr	r3, [pc, #416]	; (800633c <USB_HC_StartXfer+0x280>)
 800619a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800619c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	7a9b      	ldrb	r3, [r3, #10]
 80061a2:	075b      	lsls	r3, r3, #29
 80061a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80061a8:	69f9      	ldr	r1, [r7, #28]
 80061aa:	0148      	lsls	r0, r1, #5
 80061ac:	6a39      	ldr	r1, [r7, #32]
 80061ae:	4401      	add	r1, r0
 80061b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80061b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ce:	460a      	mov	r2, r1
 80061d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006204:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006208:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	7e7b      	ldrb	r3, [r7, #25]
 800621a:	075b      	lsls	r3, r3, #29
 800621c:	69f9      	ldr	r1, [r7, #28]
 800621e:	0148      	lsls	r0, r1, #5
 8006220:	6a39      	ldr	r1, [r7, #32]
 8006222:	4401      	add	r1, r0
 8006224:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006228:	4313      	orrs	r3, r2
 800622a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a41      	ldr	r2, [pc, #260]	; (8006340 <USB_HC_StartXfer+0x284>)
 800623c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800623e:	4b40      	ldr	r3, [pc, #256]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006246:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006248:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	4a39      	ldr	r2, [pc, #228]	; (8006340 <USB_HC_StartXfer+0x284>)
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e005      	b.n	800626c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006260:	4b37      	ldr	r3, [pc, #220]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006268:	4a35      	ldr	r2, [pc, #212]	; (8006340 <USB_HC_StartXfer+0x284>)
 800626a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800626c:	4b34      	ldr	r3, [pc, #208]	; (8006340 <USB_HC_StartXfer+0x284>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006274:	4a32      	ldr	r2, [pc, #200]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006276:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006284:	461a      	mov	r2, r3
 8006286:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <USB_HC_StartXfer+0x284>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d14e      	bne.n	8006330 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d14a      	bne.n	8006330 <USB_HC_StartXfer+0x274>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d046      	beq.n	8006330 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	79db      	ldrb	r3, [r3, #7]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d830      	bhi.n	800630c <USB_HC_StartXfer+0x250>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <USB_HC_StartXfer+0x1f4>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062e5 	.word	0x080062e5
 80062b8:	080062c1 	.word	0x080062c1
 80062bc:	080062e5 	.word	0x080062e5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	3303      	adds	r3, #3
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ca:	8afa      	ldrh	r2, [r7, #22]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d91c      	bls.n	8006310 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	619a      	str	r2, [r3, #24]
          }
          break;
 80062e2:	e015      	b.n	8006310 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	3303      	adds	r3, #3
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062ee:	8afa      	ldrh	r2, [r7, #22]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d90a      	bls.n	8006314 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	619a      	str	r2, [r3, #24]
          }
          break;
 800630a:	e003      	b.n	8006314 <USB_HC_StartXfer+0x258>

        default:
          break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <USB_HC_StartXfer+0x25a>
          break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <USB_HC_StartXfer+0x25a>
          break;
 8006314:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68d9      	ldr	r1, [r3, #12]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	785a      	ldrb	r2, [r3, #1]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	b298      	uxth	r0, r3
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fb86 	bl	8005a3c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	; 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	1ff80000 	.word	0x1ff80000
 8006340:	20000174 	.word	0x20000174

08006344 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	b29b      	uxth	r3, r3
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	0c9b      	lsrs	r3, r3, #18
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <USB_HC_Halt+0x3a>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d16c      	bne.n	800647a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d143      	bne.n	8006454 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800642a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3301      	adds	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006438:	d81d      	bhi.n	8006476 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006450:	d0ec      	beq.n	800642c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006452:	e080      	b.n	8006556 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006472:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006474:	e06f      	b.n	8006556 <USB_HC_Halt+0x1f0>
          break;
 8006476:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006478:	e06d      	b.n	8006556 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006498:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d143      	bne.n	8006532 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006508:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006516:	d81d      	bhi.n	8006554 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652e:	d0ec      	beq.n	800650a <USB_HC_Halt+0x1a4>
 8006530:	e011      	b.n	8006556 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	440a      	add	r2, r1
 8006548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e000      	b.n	8006556 <USB_HC_Halt+0x1f0>
          break;
 8006554:	bf00      	nop
    }
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006578:	2301      	movs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	04da      	lsls	r2, r3, #19
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <USB_DoPing+0x74>)
 8006582:	4013      	ands	r3, r2
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006594:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	1ff80000 	.word	0x1ff80000

080065dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff f9a1 	bl	8005934 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065f2:	2110      	movs	r1, #16
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff f9d9 	bl	80059ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff f9fc 	bl	80059f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e01f      	b.n	8006646 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006624:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800662c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	461a      	mov	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3301      	adds	r3, #1
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d9dc      	bls.n	8006606 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e034      	b.n	80066bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006668:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006670:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006678:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	461a      	mov	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006698:	d80c      	bhi.n	80066b4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d0ec      	beq.n	800668c <USB_StopHost+0xb0>
 80066b2:	e000      	b.n	80066b6 <USB_StopHost+0xda>
        break;
 80066b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d9c7      	bls.n	8006652 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c8:	461a      	mov	r2, r3
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff f91a 	bl	8005912 <USB_EnableGlobalInt>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80066f0:	2302      	movs	r3, #2
 80066f2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80066f4:	2301      	movs	r3, #1
 80066f6:	2202      	movs	r2, #2
 80066f8:	2102      	movs	r1, #2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc3a 	bl	8006f74 <USBH_FindInterface>
 8006700:	4603      	mov	r3, r0
 8006702:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	f000 812a 	beq.w	8006960 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fc13 	bl	8006f3c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800671c:	2050      	movs	r0, #80	; 0x50
 800671e:	f002 fe6f 	bl	8009400 <malloc>
 8006722:	4603      	mov	r3, r0
 8006724:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	211a      	movs	r1, #26
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b25b      	sxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	da15      	bge.n	8006774 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	211a      	movs	r1, #26
 800674e:	fb01 f303 	mul.w	r3, r1, r3
 8006752:	4413      	add	r3, r2
 8006754:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fd21 	bl	80081c2 <USBH_AllocPipe>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	7819      	ldrb	r1, [r3, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	7858      	ldrb	r0, [r3, #1]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	8952      	ldrh	r2, [r2, #10]
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	2203      	movs	r2, #3
 80067a4:	9201      	str	r2, [sp, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4623      	mov	r3, r4
 80067aa:	4602      	mov	r2, r0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fcd9 	bl	8008164 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f002 fd46 	bl	800924c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80067c0:	2300      	movs	r3, #0
 80067c2:	2200      	movs	r2, #0
 80067c4:	210a      	movs	r1, #10
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fbd4 	bl	8006f74 <USBH_FindInterface>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2bff      	cmp	r3, #255	; 0xff
 80067d4:	f000 80c4 	beq.w	8006960 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da16      	bge.n	800681e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	211a      	movs	r1, #26
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	211a      	movs	r1, #26
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	4413      	add	r3, r2
 8006812:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	835a      	strh	r2, [r3, #26]
 800681c:	e015      	b.n	800684a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	211a      	movs	r1, #26
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	4413      	add	r3, r2
 800682a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	211a      	movs	r1, #26
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006844:	881a      	ldrh	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f203 3352 	addw	r3, r3, #850	; 0x352
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b25b      	sxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	da16      	bge.n	8006890 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	211a      	movs	r1, #26
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	835a      	strh	r2, [r3, #26]
 800688e:	e015      	b.n	80068bc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	211a      	movs	r1, #26
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	f203 3352 	addw	r3, r3, #850	; 0x352
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	211a      	movs	r1, #26
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7b9b      	ldrb	r3, [r3, #14]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fc7d 	bl	80081c2 <USBH_AllocPipe>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	7bdb      	ldrb	r3, [r3, #15]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fc73 	bl	80081c2 <USBH_AllocPipe>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	7b59      	ldrb	r1, [r3, #13]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7b98      	ldrb	r0, [r3, #14]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	8b12      	ldrh	r2, [r2, #24]
 80068fc:	9202      	str	r2, [sp, #8]
 80068fe:	2202      	movs	r2, #2
 8006900:	9201      	str	r2, [sp, #4]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	4623      	mov	r3, r4
 8006906:	4602      	mov	r2, r0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fc2b 	bl	8008164 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	7b19      	ldrb	r1, [r3, #12]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	7bd8      	ldrb	r0, [r3, #15]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	8b52      	ldrh	r2, [r2, #26]
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	2202      	movs	r2, #2
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4623      	mov	r3, r4
 8006930:	4602      	mov	r2, r0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fc16 	bl	8008164 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	7b5b      	ldrb	r3, [r3, #13]
 8006944:	2200      	movs	r2, #0
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f002 fc7f 	bl	800924c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	7b1b      	ldrb	r3, [r3, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f002 fc78 	bl	800924c <USBH_LL_SetToggle>
      status = USBH_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bd90      	pop	{r4, r7, pc}

0800696a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fc09 	bl	80081a2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fc31 	bl	80081fe <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	7b1b      	ldrb	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	7b1b      	ldrb	r3, [r3, #12]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fbf6 	bl	80081a2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	7b1b      	ldrb	r3, [r3, #12]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fc1e 	bl	80081fe <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	7b5b      	ldrb	r3, [r3, #13]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	7b5b      	ldrb	r3, [r3, #13]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fbe3 	bl	80081a2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7b5b      	ldrb	r3, [r3, #13]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fc0b 	bl	80081fe <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fd04 	bl	8009410 <free>
    phost->pActiveClass->pData = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006a24:	2302      	movs	r3, #2
 8006a26:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	3340      	adds	r3, #64	; 0x40
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8b2 	bl	8006ba2 <GetLineCoding>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a4e:	2102      	movs	r1, #2
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
  }
  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d877      	bhi.n	8006b74 <USBH_CDC_Process+0x114>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBH_CDC_Process+0x2c>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006aa1 	.word	0x08006aa1
 8006a90:	08006aa7 	.word	0x08006aa7
 8006a94:	08006ad7 	.word	0x08006ad7
 8006a98:	08006b4b 	.word	0x08006b4b
 8006a9c:	08006b59 	.word	0x08006b59
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa4:	e06d      	b.n	8006b82 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f897 	bl	8006be0 <SetLineCoding>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006ac4:	e058      	b.n	8006b78 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d055      	beq.n	8006b78 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006ad4:	e050      	b.n	8006b78 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3340      	adds	r3, #64	; 0x40
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f860 	bl	8006ba2 <GetLineCoding>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d126      	bne.n	8006b3a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d13b      	bne.n	8006b7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d133      	bne.n	8006b7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d12b      	bne.n	8006b7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d124      	bne.n	8006b7c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f95a 	bl	8006dec <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006b38:	e020      	b.n	8006b7c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d01d      	beq.n	8006b7c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006b48:	e018      	b.n	8006b7c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f867 	bl	8006c1e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8dc 	bl	8006d0e <CDC_ProcessReception>
    break;
 8006b56:	e014      	b.n	8006b82 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fece 	bl	80078fc <USBH_ClrFeature>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006b72:	e005      	b.n	8006b80 <USBH_CDC_Process+0x120>

  default:
    break;
 8006b74:	bf00      	nop
 8006b76:	e004      	b.n	8006b82 <USBH_CDC_Process+0x122>
    break;
 8006b78:	bf00      	nop
 8006b7a:	e002      	b.n	8006b82 <USBH_CDC_Process+0x122>
    break;
 8006b7c:	bf00      	nop
 8006b7e:	e000      	b.n	8006b82 <USBH_CDC_Process+0x122>
    break;
 8006b80:	bf00      	nop

  }

  return status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	22a1      	movs	r2, #161	; 0xa1
 8006bb0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2221      	movs	r2, #33	; 0x21
 8006bb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2207      	movs	r2, #7
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f873 	bl	8007cbc <USBH_CtlReq>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2221      	movs	r2, #33	; 0x21
 8006bee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2207      	movs	r2, #7
 8006c06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2207      	movs	r2, #7
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 f854 	bl	8007cbc <USBH_CtlReq>
 8006c14:	4603      	mov	r3, r0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af02      	add	r7, sp, #8
 8006c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d002      	beq.n	8006c44 <CDC_ProcessTransmission+0x26>
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d025      	beq.n	8006c8e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006c42:	e060      	b.n	8006d06 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	8b12      	ldrh	r2, [r2, #24]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d90c      	bls.n	8006c6a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8b1a      	ldrh	r2, [r3, #24]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	7b58      	ldrb	r0, [r3, #13]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4603      	mov	r3, r0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fa3b 	bl	80080de <USBH_BulkSendData>
 8006c68:	e00c      	b.n	8006c84 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	7b58      	ldrb	r0, [r3, #13]
 8006c78:	2301      	movs	r3, #1
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fa2d 	bl	80080de <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006c8c:	e03b      	b.n	8006d06 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	7b5b      	ldrb	r3, [r3, #13]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f002 faaf 	bl	80091f8 <USBH_LL_GetURBState>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d128      	bne.n	8006cf6 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	8b12      	ldrh	r2, [r2, #24]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d90e      	bls.n	8006cce <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	8b12      	ldrh	r2, [r2, #24]
 8006cb8:	1a9a      	subs	r2, r3, r2
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	8b12      	ldrh	r2, [r2, #24]
 8006cc6:	441a      	add	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]
 8006ccc:	e002      	b.n	8006cd4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006ce4:	e00e      	b.n	8006d04 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f868 	bl	8006dc4 <USBH_CDC_TransmitCallback>
    break;
 8006cf4:	e006      	b.n	8006d04 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d103      	bne.n	8006d04 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d04:	bf00      	nop
  }
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d002      	beq.n	8006d34 <CDC_ProcessReception+0x26>
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00e      	beq.n	8006d50 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006d32:	e043      	b.n	8006dbc <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a19      	ldr	r1, [r3, #32]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	8b5a      	ldrh	r2, [r3, #26]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	7b1b      	ldrb	r3, [r3, #12]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f9f1 	bl	8008128 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006d4e:	e035      	b.n	8006dbc <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	7b1b      	ldrb	r3, [r3, #12]
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fa4e 	bl	80091f8 <USBH_LL_GetURBState>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006d60:	7cfb      	ldrb	r3, [r7, #19]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d129      	bne.n	8006dba <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	7b1b      	ldrb	r3, [r3, #12]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 f9b1 	bl	80090d4 <USBH_LL_GetLastXferSize>
 8006d72:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d016      	beq.n	8006dac <CDC_ProcessReception+0x9e>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	8b5b      	ldrh	r3, [r3, #26]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d910      	bls.n	8006dac <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2203      	movs	r2, #3
 8006da6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006daa:	e006      	b.n	8006dba <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f80f 	bl	8006dd8 <USBH_CDC_ReceiveCallback>
    break;
 8006dba:	bf00      	nop
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]

}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e14:	2302      	movs	r3, #2
 8006e16:	e019      	b.n	8006e4c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	79fa      	ldrb	r2, [r7, #7]
 8006e1c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f80f 	bl	8006e54 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f002 f893 	bl	8008f70 <USBH_LL_Init>

  return USBH_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006e60:	e008      	b.n	8006e74 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	32e0      	adds	r2, #224	; 0xe0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b0e      	cmp	r3, #14
 8006e78:	d9f3      	bls.n	8006e62 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e009      	b.n	8006e94 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9a:	d3f1      	bcc.n	8006e80 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d017      	beq.n	8006f2a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	33dc      	adds	r3, #220	; 0xdc
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e004      	b.n	8006f2e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f24:	2302      	movs	r3, #2
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e001      	b.n	8006f2e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d204      	bcs.n	8006f62 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006f60:	e001      	b.n	8006f66 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	461a      	mov	r2, r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	70fb      	strb	r3, [r7, #3]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70bb      	strb	r3, [r7, #2]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006f9c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f9e:	e025      	b.n	8006fec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	221a      	movs	r2, #26
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	3308      	adds	r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	3302      	adds	r3, #2
 8006fb0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	795b      	ldrb	r3, [r3, #5]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d002      	beq.n	8006fc2 <USBH_FindInterface+0x4e>
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d111      	bne.n	8006fe6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006fc6:	78ba      	ldrb	r2, [r7, #2]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d002      	beq.n	8006fd2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006fcc:	78bb      	ldrb	r3, [r7, #2]
 8006fce:	2bff      	cmp	r3, #255	; 0xff
 8006fd0:	d109      	bne.n	8006fe6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006fd6:	787a      	ldrb	r2, [r7, #1]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d002      	beq.n	8006fe2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fdc:	787b      	ldrb	r3, [r7, #1]
 8006fde:	2bff      	cmp	r3, #255	; 0xff
 8006fe0:	d101      	bne.n	8006fe6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	e006      	b.n	8006ff4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d9d6      	bls.n	8006fa0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ff2:	23ff      	movs	r3, #255	; 0xff
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 ffed 	bl	8008fe8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800700e:	2101      	movs	r1, #1
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f002 f904 	bl	800921e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af04      	add	r7, sp, #16
 8007026:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007028:	2302      	movs	r3, #2
 800702a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 faec 	bl	800760e <USBH_IsPortEnabled>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <USBH_Process+0x36>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b03      	cmp	r3, #3
 800704e:	d002      	beq.n	8007056 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2203      	movs	r2, #3
 8007054:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b0b      	cmp	r3, #11
 800705e:	f200 814c 	bhi.w	80072fa <USBH_Process+0x2da>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBH_Process+0x48>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007099 	.word	0x08007099
 800706c:	080070bb 	.word	0x080070bb
 8007070:	080070cf 	.word	0x080070cf
 8007074:	080072d5 	.word	0x080072d5
 8007078:	080072fb 	.word	0x080072fb
 800707c:	0800715d 	.word	0x0800715d
 8007080:	0800728b 	.word	0x0800728b
 8007084:	0800718d 	.word	0x0800718d
 8007088:	080071ad 	.word	0x080071ad
 800708c:	080071cd 	.word	0x080071cd
 8007090:	080071fb 	.word	0x080071fb
 8007094:	080072bd 	.word	0x080072bd
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 812c 	beq.w	80072fe <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80070ac:	20c8      	movs	r0, #200	; 0xc8
 80070ae:	f002 f900 	bl	80092b2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fff3 	bl	800909e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80070b8:	e121      	b.n	80072fe <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	f040 811e 	bne.w	8007302 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	701a      	strb	r2, [r3, #0]
    }
    break;
 80070cc:	e119      	b.n	8007302 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80070ce:	2064      	movs	r0, #100	; 0x64
 80070d0:	f002 f8ef 	bl	80092b2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 ffbd 	bl	8009054 <USBH_LL_GetSpeed>
 80070da:	4603      	mov	r3, r0
 80070dc:	461a      	mov	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2205      	movs	r2, #5
 80070e8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80070ea:	2100      	movs	r1, #0
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f868 	bl	80081c2 <USBH_AllocPipe>
 80070f2:	4603      	mov	r3, r0
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f860 	bl	80081c2 <USBH_AllocPipe>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7919      	ldrb	r1, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800711e:	b292      	uxth	r2, r2
 8007120:	9202      	str	r2, [sp, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	9201      	str	r2, [sp, #4]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f819 	bl	8008164 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7959      	ldrb	r1, [r3, #5]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007146:	b292      	uxth	r2, r2
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	9201      	str	r2, [sp, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	2200      	movs	r2, #0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f805 	bl	8008164 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800715a:	e0e3      	b.n	8007324 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f8e7 	bl	8007330 <USBH_HandleEnum>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 80ce 	bne.w	8007306 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007178:	2b01      	cmp	r3, #1
 800717a:	d103      	bne.n	8007184 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2208      	movs	r2, #8
 8007180:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007182:	e0c0      	b.n	8007306 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2207      	movs	r2, #7
 8007188:	701a      	strb	r2, [r3, #0]
    break;
 800718a:	e0bc      	b.n	8007306 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80b9 	beq.w	800730a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80071aa:	e0ae      	b.n	800730a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fb59 	bl	800786e <USBH_SetCfg>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f040 80a5 	bne.w	800730e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2209      	movs	r2, #9
 80071c8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80071ca:	e0a0      	b.n	800730e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb69 	bl	80078b4 <USBH_SetFeature>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8094 	bne.w	8007312 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220a      	movs	r2, #10
 80071ee:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80071f0:	e08f      	b.n	8007312 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	220a      	movs	r2, #10
 80071f6:	701a      	strb	r2, [r3, #0]
    break;
 80071f8:	e08b      	b.n	8007312 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8088 	beq.w	8007316 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
 8007212:	e017      	b.n	8007244 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	33dc      	adds	r3, #220	; 0xdc
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	791a      	ldrb	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007228:	429a      	cmp	r2, r3
 800722a:	d108      	bne.n	800723e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	33dc      	adds	r3, #220	; 0xdc
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	3301      	adds	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0e4      	beq.n	8007214 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007250:	2b00      	cmp	r3, #0
 8007252:	d016      	beq.n	8007282 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2206      	movs	r2, #6
 800726a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007272:	2103      	movs	r1, #3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007278:	e04d      	b.n	8007316 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	220d      	movs	r2, #13
 800727e:	701a      	strb	r2, [r3, #0]
    break;
 8007280:	e049      	b.n	8007316 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	220d      	movs	r2, #13
 8007286:	701a      	strb	r2, [r3, #0]
    break;
 8007288:	e045      	b.n	8007316 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00f      	beq.n	80072b4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d136      	bne.n	800731a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	220b      	movs	r2, #11
 80072b0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80072b2:	e032      	b.n	800731a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	220d      	movs	r2, #13
 80072b8:	701a      	strb	r2, [r3, #0]
    break;
 80072ba:	e02e      	b.n	800731a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02b      	beq.n	800731e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
    }
    break;
 80072d2:	e024      	b.n	800731e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff fdbd 	bl	8006e54 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01e      	beq.n	8007322 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80072f8:	e013      	b.n	8007322 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80072fa:	bf00      	nop
 80072fc:	e012      	b.n	8007324 <USBH_Process+0x304>
    break;
 80072fe:	bf00      	nop
 8007300:	e010      	b.n	8007324 <USBH_Process+0x304>
    break;
 8007302:	bf00      	nop
 8007304:	e00e      	b.n	8007324 <USBH_Process+0x304>
    break;
 8007306:	bf00      	nop
 8007308:	e00c      	b.n	8007324 <USBH_Process+0x304>
    break;
 800730a:	bf00      	nop
 800730c:	e00a      	b.n	8007324 <USBH_Process+0x304>
    break;
 800730e:	bf00      	nop
 8007310:	e008      	b.n	8007324 <USBH_Process+0x304>
    break;
 8007312:	bf00      	nop
 8007314:	e006      	b.n	8007324 <USBH_Process+0x304>
    break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <USBH_Process+0x304>
    break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <USBH_Process+0x304>
    break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <USBH_Process+0x304>
    break;
 8007322:	bf00      	nop
  }
 return USBH_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b07      	cmp	r3, #7
 8007342:	f200 80f8 	bhi.w	8007536 <USBH_HandleEnum+0x206>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBH_HandleEnum+0x1c>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	0800736d 	.word	0x0800736d
 8007350:	080073df 	.word	0x080073df
 8007354:	080073f7 	.word	0x080073f7
 8007358:	0800746d 	.word	0x0800746d
 800735c:	08007483 	.word	0x08007483
 8007360:	0800749f 	.word	0x0800749f
 8007364:	080074d3 	.word	0x080074d3
 8007368:	08007507 	.word	0x08007507
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800736c:	2108      	movs	r1, #8
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9ad 	bl	80076ce <USBH_Get_DevDesc>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 80df 	bne.w	800753a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7919      	ldrb	r1, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80073a0:	b292      	uxth	r2, r2
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	9201      	str	r2, [sp, #4]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4603      	mov	r3, r0
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fed8 	bl	8008164 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7959      	ldrb	r1, [r3, #5]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80073c8:	b292      	uxth	r2, r2
 80073ca:	9202      	str	r2, [sp, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	9201      	str	r2, [sp, #4]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4603      	mov	r3, r0
 80073d4:	2200      	movs	r2, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fec4 	bl	8008164 <USBH_OpenPipe>

    }
    break;
 80073dc:	e0ad      	b.n	800753a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80073de:	2112      	movs	r1, #18
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f974 	bl	80076ce <USBH_Get_DevDesc>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 80a8 	bne.w	800753e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	705a      	strb	r2, [r3, #1]

    }
    break;
 80073f4:	e0a3      	b.n	800753e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80073f6:	2101      	movs	r1, #1
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa14 	bl	8007826 <USBH_SetAddress>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 809e 	bne.w	8007542 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007406:	2002      	movs	r0, #2
 8007408:	f001 ff53 	bl	80092b2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2203      	movs	r2, #3
 8007418:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7919      	ldrb	r1, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800742e:	b292      	uxth	r2, r2
 8007430:	9202      	str	r2, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	9201      	str	r2, [sp, #4]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	4603      	mov	r3, r0
 800743a:	2280      	movs	r2, #128	; 0x80
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fe91 	bl	8008164 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7959      	ldrb	r1, [r3, #5]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007456:	b292      	uxth	r2, r2
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	2200      	movs	r2, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fe7d 	bl	8008164 <USBH_OpenPipe>
    }
    break;
 800746a:	e06a      	b.n	8007542 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800746c:	2109      	movs	r1, #9
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f955 	bl	800771e <USBH_Get_CfgDesc>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d165      	bne.n	8007546 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007480:	e061      	b.n	8007546 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f947 	bl	800771e <USBH_Get_CfgDesc>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d159      	bne.n	800754a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2205      	movs	r2, #5
 800749a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800749c:	e055      	b.n	800754a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80074b4:	23ff      	movs	r3, #255	; 0xff
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f955 	bl	8007766 <USBH_Get_StringDesc>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d145      	bne.n	800754e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2206      	movs	r2, #6
 80074c6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80074c8:	e041      	b.n	800754e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2206      	movs	r2, #6
 80074ce:	705a      	strb	r2, [r3, #1]
    break;
 80074d0:	e03d      	b.n	800754e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80074e8:	23ff      	movs	r3, #255	; 0xff
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f93b 	bl	8007766 <USBH_Get_StringDesc>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d12d      	bne.n	8007552 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2207      	movs	r2, #7
 80074fa:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80074fc:	e029      	b.n	8007552 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2207      	movs	r2, #7
 8007502:	705a      	strb	r2, [r3, #1]
    break;
 8007504:	e025      	b.n	8007552 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800751c:	23ff      	movs	r3, #255	; 0xff
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f921 	bl	8007766 <USBH_Get_StringDesc>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d115      	bne.n	8007556 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800752e:	e012      	b.n	8007556 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
    break;
 8007534:	e00f      	b.n	8007556 <USBH_HandleEnum+0x226>

  default:
    break;
 8007536:	bf00      	nop
 8007538:	e00e      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 800753a:	bf00      	nop
 800753c:	e00c      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 800753e:	bf00      	nop
 8007540:	e00a      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 8007542:	bf00      	nop
 8007544:	e008      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 8007546:	bf00      	nop
 8007548:	e006      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 800754a:	bf00      	nop
 800754c:	e004      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <USBH_HandleEnum+0x228>
    break;
 8007556:	bf00      	nop
  }
  return Status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f804 	bl	80075a6 <USBH_HandleSof>
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b0b      	cmp	r3, #11
 80075b6:	d10a      	bne.n	80075ce <USBH_HandleSof+0x28>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
  }
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80075e6:	bf00      	nop
}
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007602:	bf00      	nop
}
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007652:	2104      	movs	r1, #4
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	e007      	b.n	800766a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007660:	2b01      	cmp	r3, #1
 8007662:	d102      	bne.n	800766a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fcce 	bl	800901e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fdb8 	bl	80081fe <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fdb2 	bl	80081fe <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076b2:	2105      	movs	r1, #5
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fc95 	bl	8008fe8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2203      	movs	r2, #3
 80076c2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af02      	add	r7, sp, #8
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f864 	bl	80077bc <USBH_GetDescriptor>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	b292      	uxth	r2, r2
 800770e:	4619      	mov	r1, r3
 8007710:	f000 f918 	bl	8007944 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af02      	add	r7, sp, #8
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	331c      	adds	r3, #28
 800772e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f83d 	bl	80077bc <USBH_GetDescriptor>
 8007742:	4603      	mov	r3, r0
 8007744:	72fb      	strb	r3, [r7, #11]
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007752:	887a      	ldrh	r2, [r7, #2]
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f964 	bl	8007a24 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800775c:	7afb      	ldrb	r3, [r7, #11]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b088      	sub	sp, #32
 800776a:	af02      	add	r7, sp, #8
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	461a      	mov	r2, r3
 8007772:	460b      	mov	r3, r1
 8007774:	72fb      	strb	r3, [r7, #11]
 8007776:	4613      	mov	r3, r2
 8007778:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007782:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	460b      	mov	r3, r1
 8007790:	2100      	movs	r1, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f812 	bl	80077bc <USBH_GetDescriptor>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d107      	bne.n	80077b2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077a8:	893a      	ldrh	r2, [r7, #8]
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fa37 	bl	8007c20 <USBH_ParseStringDesc>
  }
  return status;
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	72fb      	strb	r3, [r7, #11]
 80077ca:	4613      	mov	r3, r2
 80077cc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	789b      	ldrb	r3, [r3, #2]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d11c      	bne.n	8007810 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2206      	movs	r2, #6
 80077e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	893a      	ldrh	r2, [r7, #8]
 80077ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077ee:	893b      	ldrh	r3, [r7, #8]
 80077f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f8:	d104      	bne.n	8007804 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f240 4209 	movw	r2, #1033	; 0x409
 8007800:	829a      	strh	r2, [r3, #20]
 8007802:	e002      	b.n	800780a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8b3a      	ldrh	r2, [r7, #24]
 800780e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007810:	8b3b      	ldrh	r3, [r7, #24]
 8007812:	461a      	mov	r2, r3
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fa50 	bl	8007cbc <USBH_CtlReq>
 800781c:	4603      	mov	r3, r0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	789b      	ldrb	r3, [r3, #2]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10f      	bne.n	800785a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2205      	movs	r2, #5
 8007844:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa2c 	bl	8007cbc <USBH_CtlReq>
 8007864:	4603      	mov	r3, r0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	789b      	ldrb	r3, [r3, #2]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d10e      	bne.n	80078a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2209      	movs	r2, #9
 800788c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa09 	bl	8007cbc <USBH_CtlReq>
 80078aa:	4603      	mov	r3, r0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	789b      	ldrb	r3, [r3, #2]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d10f      	bne.n	80078e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9e5 	bl	8007cbc <USBH_CtlReq>
 80078f2:	4603      	mov	r3, r0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10f      	bne.n	8007930 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	b29a      	uxth	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007930:	2200      	movs	r2, #0
 8007932:	2100      	movs	r1, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f9c1 	bl	8007cbc <USBH_CtlReq>
 800793a:	4603      	mov	r3, r0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	785a      	ldrb	r2, [r3, #1]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3302      	adds	r3, #2
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29a      	uxth	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3303      	adds	r3, #3
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	791a      	ldrb	r2, [r3, #4]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	795a      	ldrb	r2, [r3, #5]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	799a      	ldrb	r2, [r3, #6]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	79da      	ldrb	r2, [r3, #7]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d939      	bls.n	8007a18 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3308      	adds	r3, #8
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	3309      	adds	r3, #9
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4313      	orrs	r3, r2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	330a      	adds	r3, #10
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	330b      	adds	r3, #11
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	330c      	adds	r3, #12
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	330d      	adds	r3, #13
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	7b9a      	ldrb	r2, [r3, #14]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	7bda      	ldrb	r2, [r3, #15]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	7c1a      	ldrb	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	7c5a      	ldrb	r2, [r3, #17]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	745a      	strb	r2, [r3, #17]
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	785a      	ldrb	r2, [r3, #1]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3302      	adds	r3, #2
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	3303      	adds	r3, #3
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	791a      	ldrb	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	795a      	ldrb	r2, [r3, #5]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	799a      	ldrb	r2, [r3, #6]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	79da      	ldrb	r2, [r3, #7]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	7a1a      	ldrb	r2, [r3, #8]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d95f      	bls.n	8007b60 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007aa0:	2309      	movs	r3, #9
 8007aa2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007aa8:	e051      	b.n	8007b4e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007aaa:	f107 0316 	add.w	r3, r7, #22
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ab2:	f000 f8e8 	bl	8007c86 <USBH_GetNextDesc>
 8007ab6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d146      	bne.n	8007b4e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ac4:	221a      	movs	r2, #26
 8007ac6:	fb02 f303 	mul.w	r3, r2, r3
 8007aca:	3308      	adds	r3, #8
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ad6:	69f8      	ldr	r0, [r7, #28]
 8007ad8:	f000 f846 	bl	8007b68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ae6:	e022      	b.n	8007b2e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007ae8:	f107 0316 	add.w	r3, r7, #22
 8007aec:	4619      	mov	r1, r3
 8007aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af0:	f000 f8c9 	bl	8007c86 <USBH_GetNextDesc>
 8007af4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	d117      	bne.n	8007b2e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b02:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b06:	3201      	adds	r2, #1
 8007b08:	00d2      	lsls	r2, r2, #3
 8007b0a:	211a      	movs	r1, #26
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	3308      	adds	r3, #8
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	3304      	adds	r3, #4
 8007b1a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b1e:	69b8      	ldr	r0, [r7, #24]
 8007b20:	f000 f851 	bl	8007bc6 <USBH_ParseEPDesc>
            ep_ix++;
 8007b24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b28:	3301      	adds	r3, #1
 8007b2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d204      	bcs.n	8007b44 <USBH_ParseCfgDesc+0x120>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	885a      	ldrh	r2, [r3, #2]
 8007b3e:	8afb      	ldrh	r3, [r7, #22]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d8d1      	bhi.n	8007ae8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d804      	bhi.n	8007b60 <USBH_ParseCfgDesc+0x13c>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	885a      	ldrh	r2, [r3, #2]
 8007b5a:	8afb      	ldrh	r3, [r7, #22]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d8a4      	bhi.n	8007aaa <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b60:	bf00      	nop
 8007b62:	3728      	adds	r7, #40	; 0x28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785a      	ldrb	r2, [r3, #1]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	789a      	ldrb	r2, [r3, #2]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	78da      	ldrb	r2, [r3, #3]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	791a      	ldrb	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	795a      	ldrb	r2, [r3, #5]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	799a      	ldrb	r2, [r3, #6]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	79da      	ldrb	r2, [r3, #7]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	7a1a      	ldrb	r2, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	721a      	strb	r2, [r3, #8]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	785a      	ldrb	r2, [r3, #1]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	789a      	ldrb	r2, [r3, #2]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	78da      	ldrb	r2, [r3, #3]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3305      	adds	r3, #5
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	799a      	ldrb	r2, [r3, #6]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	719a      	strb	r2, [r3, #6]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d120      	bne.n	8007c7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	1e9a      	subs	r2, r3, #2
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	bf28      	it	cs
 8007c44:	4613      	movcs	r3, r2
 8007c46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	82fb      	strh	r3, [r7, #22]
 8007c52:	e00b      	b.n	8007c6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c66:	8afb      	ldrh	r3, [r7, #22]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	82fb      	strh	r3, [r7, #22]
 8007c6c:	8afa      	ldrh	r2, [r7, #22]
 8007c6e:	8abb      	ldrh	r3, [r7, #20]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3ef      	bcc.n	8007c54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
  }
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007cae:	68fb      	ldr	r3, [r7, #12]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	789b      	ldrb	r3, [r3, #2]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d002      	beq.n	8007cdc <USBH_CtlReq+0x20>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d00f      	beq.n	8007cfa <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007cda:	e034      	b.n	8007d46 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
    break;
 8007cf8:	e025      	b.n	8007d46 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f828 	bl	8007d50 <USBH_HandleControl>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
    break;
 8007d1a:	e013      	b.n	8007d44 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d108      	bne.n	8007d34 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	75fb      	strb	r3, [r7, #23]
    break;
 8007d32:	e007      	b.n	8007d44 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d104      	bne.n	8007d44 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
    break;
 8007d44:	bf00      	nop
  }
  return status;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7e1b      	ldrb	r3, [r3, #24]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	2b0a      	cmp	r3, #10
 8007d68:	f200 814c 	bhi.w	8008004 <USBH_HandleControl+0x2b4>
 8007d6c:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <USBH_HandleControl+0x24>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	08007dbb 	.word	0x08007dbb
 8007d7c:	08007e25 	.word	0x08007e25
 8007d80:	08007e4b 	.word	0x08007e4b
 8007d84:	08007e83 	.word	0x08007e83
 8007d88:	08007eaf 	.word	0x08007eaf
 8007d8c:	08007f01 	.word	0x08007f01
 8007d90:	08007f23 	.word	0x08007f23
 8007d94:	08007f5f 	.word	0x08007f5f
 8007d98:	08007f87 	.word	0x08007f87
 8007d9c:	08007fc5 	.word	0x08007fc5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0110 	add.w	r1, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	795b      	ldrb	r3, [r3, #5]
 8007daa:	461a      	mov	r2, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f939 	bl	8008024 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2202      	movs	r2, #2
 8007db6:	761a      	strb	r2, [r3, #24]
    break;
 8007db8:	e12f      	b.n	800801a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fa19 	bl	80091f8 <USBH_LL_GetURBState>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d11e      	bne.n	8007e0e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7c1b      	ldrb	r3, [r3, #16]
 8007dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dd8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8adb      	ldrh	r3, [r3, #22]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007de2:	7b7b      	ldrb	r3, [r7, #13]
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d103      	bne.n	8007df0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2203      	movs	r2, #3
 8007dec:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007dee:	e10b      	b.n	8008008 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2205      	movs	r2, #5
 8007df4:	761a      	strb	r2, [r3, #24]
    break;
 8007df6:	e107      	b.n	8008008 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007df8:	7b7b      	ldrb	r3, [r7, #13]
 8007dfa:	2b80      	cmp	r3, #128	; 0x80
 8007dfc:	d103      	bne.n	8007e06 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2209      	movs	r2, #9
 8007e02:	761a      	strb	r2, [r3, #24]
    break;
 8007e04:	e100      	b.n	8008008 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2207      	movs	r2, #7
 8007e0a:	761a      	strb	r2, [r3, #24]
    break;
 8007e0c:	e0fc      	b.n	8008008 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d003      	beq.n	8007e1c <USBH_HandleControl+0xcc>
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	f040 80f6 	bne.w	8008008 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	220b      	movs	r2, #11
 8007e20:	761a      	strb	r2, [r3, #24]
    break;
 8007e22:	e0f1      	b.n	8008008 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6899      	ldr	r1, [r3, #8]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	899a      	ldrh	r2, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f930 	bl	80080a2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2204      	movs	r2, #4
 8007e46:	761a      	strb	r2, [r3, #24]
    break;
 8007e48:	e0e7      	b.n	800801a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f9d1 	bl	80091f8 <USBH_LL_GetURBState>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d102      	bne.n	8007e66 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2209      	movs	r2, #9
 8007e64:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b05      	cmp	r3, #5
 8007e6a:	d102      	bne.n	8007e72 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007e70:	e0cc      	b.n	800800c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	f040 80c9 	bne.w	800800c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	220b      	movs	r2, #11
 8007e7e:	761a      	strb	r2, [r3, #24]
    break;
 8007e80:	e0c4      	b.n	800800c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6899      	ldr	r1, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	899a      	ldrh	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7958      	ldrb	r0, [r3, #5]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4603      	mov	r3, r0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8df 	bl	8008058 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	761a      	strb	r2, [r3, #24]
    break;
 8007eac:	e0b5      	b.n	800801a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	795b      	ldrb	r3, [r3, #5]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f99f 	bl	80091f8 <USBH_LL_GetURBState>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d103      	bne.n	8007ecc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2207      	movs	r2, #7
 8007ec8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007eca:	e0a1      	b.n	8008010 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	d105      	bne.n	8007ede <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	220c      	movs	r2, #12
 8007ed6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	e098      	b.n	8008010 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d103      	bne.n	8007eec <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	761a      	strb	r2, [r3, #24]
    break;
 8007eea:	e091      	b.n	8008010 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	f040 808e 	bne.w	8008010 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	220b      	movs	r2, #11
 8007ef8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007efa:	2302      	movs	r3, #2
 8007efc:	73fb      	strb	r3, [r7, #15]
    break;
 8007efe:	e087      	b.n	8008010 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	791b      	ldrb	r3, [r3, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f8ca 	bl	80080a2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	761a      	strb	r2, [r3, #24]

    break;
 8007f20:	e07b      	b.n	800801a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	791b      	ldrb	r3, [r3, #4]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f965 	bl	80091f8 <USBH_LL_GetURBState>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d105      	bne.n	8007f44 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220d      	movs	r2, #13
 8007f3c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f42:	e067      	b.n	8008014 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d103      	bne.n	8007f52 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	220b      	movs	r2, #11
 8007f4e:	761a      	strb	r2, [r3, #24]
    break;
 8007f50:	e060      	b.n	8008014 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d15d      	bne.n	8008014 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f5c:	e05a      	b.n	8008014 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	795a      	ldrb	r2, [r3, #5]
 8007f62:	2301      	movs	r3, #1
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f873 	bl	8008058 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	220a      	movs	r2, #10
 8007f82:	761a      	strb	r2, [r3, #24]
    break;
 8007f84:	e049      	b.n	800801a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	795b      	ldrb	r3, [r3, #5]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f933 	bl	80091f8 <USBH_LL_GetURBState>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d105      	bne.n	8007fa8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	220d      	movs	r2, #13
 8007fa4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007fa6:	e037      	b.n	8008018 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d103      	bne.n	8007fb6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2209      	movs	r2, #9
 8007fb2:	761a      	strb	r2, [r3, #24]
    break;
 8007fb4:	e030      	b.n	8008018 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d12d      	bne.n	8008018 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	220b      	movs	r2, #11
 8007fc0:	761a      	strb	r2, [r3, #24]
    break;
 8007fc2:	e029      	b.n	8008018 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7e5b      	ldrb	r3, [r3, #25]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	765a      	strb	r2, [r3, #25]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7e5b      	ldrb	r3, [r3, #25]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d809      	bhi.n	8007fec <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f820 	bl	800901e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007fea:	e016      	b.n	800801a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ff2:	2106      	movs	r1, #6
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007ffe:	2302      	movs	r3, #2
 8008000:	73fb      	strb	r3, [r7, #15]
    break;
 8008002:	e00a      	b.n	800801a <USBH_HandleControl+0x2ca>

  default:
    break;
 8008004:	bf00      	nop
 8008006:	e008      	b.n	800801a <USBH_HandleControl+0x2ca>
    break;
 8008008:	bf00      	nop
 800800a:	e006      	b.n	800801a <USBH_HandleControl+0x2ca>
    break;
 800800c:	bf00      	nop
 800800e:	e004      	b.n	800801a <USBH_HandleControl+0x2ca>
    break;
 8008010:	bf00      	nop
 8008012:	e002      	b.n	800801a <USBH_HandleControl+0x2ca>
    break;
 8008014:	bf00      	nop
 8008016:	e000      	b.n	800801a <USBH_HandleControl+0x2ca>
    break;
 8008018:	bf00      	nop
  }
  return status;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af04      	add	r7, sp, #16
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008032:	79f9      	ldrb	r1, [r7, #7]
 8008034:	2300      	movs	r3, #0
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	2308      	movs	r3, #8
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	2300      	movs	r3, #0
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 f8a4 	bl	8009196 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af04      	add	r7, sp, #16
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4611      	mov	r1, r2
 8008064:	461a      	mov	r2, r3
 8008066:	460b      	mov	r3, r1
 8008068:	80fb      	strh	r3, [r7, #6]
 800806a:	4613      	mov	r3, r2
 800806c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800807c:	7979      	ldrb	r1, [r7, #5]
 800807e:	7e3b      	ldrb	r3, [r7, #24]
 8008080:	9303      	str	r3, [sp, #12]
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2301      	movs	r3, #1
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	2200      	movs	r2, #0
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f001 f87f 	bl	8009196 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b088      	sub	sp, #32
 80080a6:	af04      	add	r7, sp, #16
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	4611      	mov	r1, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	460b      	mov	r3, r1
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	4613      	mov	r3, r2
 80080b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80080b8:	7979      	ldrb	r1, [r7, #5]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	9302      	str	r3, [sp, #8]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	2301      	movs	r3, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	2201      	movs	r2, #1
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f001 f861 	bl	8009196 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080d4:	2300      	movs	r3, #0

}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b088      	sub	sp, #32
 80080e2:	af04      	add	r7, sp, #16
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4611      	mov	r1, r2
 80080ea:	461a      	mov	r2, r3
 80080ec:	460b      	mov	r3, r1
 80080ee:	80fb      	strh	r3, [r7, #6]
 80080f0:	4613      	mov	r3, r2
 80080f2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008102:	7979      	ldrb	r1, [r7, #5]
 8008104:	7e3b      	ldrb	r3, [r7, #24]
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2301      	movs	r3, #1
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2302      	movs	r3, #2
 8008116:	2200      	movs	r2, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f001 f83c 	bl	8009196 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af04      	add	r7, sp, #16
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4611      	mov	r1, r2
 8008134:	461a      	mov	r2, r3
 8008136:	460b      	mov	r3, r1
 8008138:	80fb      	strh	r3, [r7, #6]
 800813a:	4613      	mov	r3, r2
 800813c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800813e:	7979      	ldrb	r1, [r7, #5]
 8008140:	2300      	movs	r3, #0
 8008142:	9303      	str	r3, [sp, #12]
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	9302      	str	r3, [sp, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	2301      	movs	r3, #1
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2302      	movs	r3, #2
 8008152:	2201      	movs	r2, #1
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f001 f81e 	bl	8009196 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af04      	add	r7, sp, #16
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4603      	mov	r3, r0
 8008174:	70fb      	strb	r3, [r7, #3]
 8008176:	460b      	mov	r3, r1
 8008178:	70bb      	strb	r3, [r7, #2]
 800817a:	4613      	mov	r3, r2
 800817c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800817e:	7878      	ldrb	r0, [r7, #1]
 8008180:	78ba      	ldrb	r2, [r7, #2]
 8008182:	78f9      	ldrb	r1, [r7, #3]
 8008184:	8b3b      	ldrh	r3, [r7, #24]
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	7d3b      	ldrb	r3, [r7, #20]
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	7c3b      	ldrb	r3, [r7, #16]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 ffb1 	bl	80090fa <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008198:	2300      	movs	r3, #0

}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	460b      	mov	r3, r1
 80081ac:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 ffd0 	bl	8009158 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081b8:	2300      	movs	r3, #0

}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f831 	bl	8008236 <USBH_GetFreePipe>
 80081d4:	4603      	mov	r3, r0
 80081d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081d8:	89fb      	ldrh	r3, [r7, #14]
 80081da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	89fa      	ldrh	r2, [r7, #14]
 80081e6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	32e0      	adds	r2, #224	; 0xe0
 80081ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80081f2:	89fb      	ldrh	r3, [r7, #14]
 80081f4:	b2db      	uxtb	r3, r3
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	2b0a      	cmp	r3, #10
 800820e:	d80b      	bhi.n	8008228 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32e0      	adds	r2, #224	; 0xe0
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	32e0      	adds	r2, #224	; 0xe0
 8008224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
 8008246:	e00e      	b.n	8008266 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32e0      	adds	r2, #224	; 0xe0
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	b29b      	uxth	r3, r3
 800825e:	e007      	b.n	8008270 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	3301      	adds	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b0a      	cmp	r3, #10
 800826a:	d9ed      	bls.n	8008248 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800826c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <event_init>:
#include <event.h>
void event_init( event *e )
{ *e = 0; }
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <event_trigger>:
void event_trigger( event *e )
{ *e = 1; }
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <init_acc_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void init_acc_mode(){
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED3);
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7f8 fc3d 	bl	8000b34 <BSP_LED_Off>
	BSP_LED_Off(LED4);
 80082ba:	2000      	movs	r0, #0
 80082bc:	f7f8 fc3a 	bl	8000b34 <BSP_LED_Off>
	BSP_LED_Off(LED5);
 80082c0:	2002      	movs	r0, #2
 80082c2:	f7f8 fc37 	bl	8000b34 <BSP_LED_Off>
	BSP_LED_Off(LED6);
 80082c6:	2003      	movs	r0, #3
 80082c8:	f7f8 fc34 	bl	8000b34 <BSP_LED_Off>
}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <loop_acc_mode>:

static void loop_acc_mode(){
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0

	ACCELERO_Read_Acc(&xval,&yval);
 80082d4:	493a      	ldr	r1, [pc, #232]	; (80083c0 <loop_acc_mode+0xf0>)
 80082d6:	483b      	ldr	r0, [pc, #236]	; (80083c4 <loop_acc_mode+0xf4>)
 80082d8:	f000 fb0f 	bl	80088fa <ACCELERO_Read_Acc>

	if((ABS(xval))>(ABS(yval)))
 80082dc:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <loop_acc_mode+0xf4>)
 80082de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082e2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80082e6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80082ea:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <loop_acc_mode+0xf0>)
 80082ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfb8      	it	lt
 80082f4:	425b      	neglt	r3, r3
 80082f6:	429a      	cmp	r2, r3
 80082f8:	dd2a      	ble.n	8008350 <loop_acc_mode+0x80>
	  {
	    if(xval > ThresholdHigh)
 80082fa:	4b32      	ldr	r3, [pc, #200]	; (80083c4 <loop_acc_mode+0xf4>)
 80082fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008300:	2bc8      	cmp	r3, #200	; 0xc8
 8008302:	dd0d      	ble.n	8008320 <loop_acc_mode+0x50>
	    {
	      /* LED5 On */
	      BSP_LED_On(LED5);
 8008304:	2002      	movs	r0, #2
 8008306:	f7f8 fbfb 	bl	8000b00 <BSP_LED_On>
	      HAL_UART_Transmit( &huart4, "L", 1, 1000 );
 800830a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800830e:	2201      	movs	r2, #1
 8008310:	492d      	ldr	r1, [pc, #180]	; (80083c8 <loop_acc_mode+0xf8>)
 8008312:	482e      	ldr	r0, [pc, #184]	; (80083cc <loop_acc_mode+0xfc>)
 8008314:	f7fc fbfd 	bl	8004b12 <HAL_UART_Transmit>
	      HAL_Delay(10);
 8008318:	200a      	movs	r0, #10
 800831a:	f7f8 feb7 	bl	800108c <HAL_Delay>
 800831e:	e041      	b.n	80083a4 <loop_acc_mode+0xd4>
	    }
	    else if(xval < ThresholdLow)
 8008320:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <loop_acc_mode+0xf4>)
 8008322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008326:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800832a:	da0d      	bge.n	8008348 <loop_acc_mode+0x78>
	    {
	      /* LED4 On */
	      BSP_LED_On(LED4);
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fbe7 	bl	8000b00 <BSP_LED_On>
	      HAL_UART_Transmit( &huart4, "R", 1, 1000 );
 8008332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008336:	2201      	movs	r2, #1
 8008338:	4925      	ldr	r1, [pc, #148]	; (80083d0 <loop_acc_mode+0x100>)
 800833a:	4824      	ldr	r0, [pc, #144]	; (80083cc <loop_acc_mode+0xfc>)
 800833c:	f7fc fbe9 	bl	8004b12 <HAL_UART_Transmit>
	      HAL_Delay(10);
 8008340:	200a      	movs	r0, #10
 8008342:	f7f8 fea3 	bl	800108c <HAL_Delay>
 8008346:	e02d      	b.n	80083a4 <loop_acc_mode+0xd4>
	    }
	    else
	    {
	      HAL_Delay(10);
 8008348:	200a      	movs	r0, #10
 800834a:	f7f8 fe9f 	bl	800108c <HAL_Delay>
 800834e:	e029      	b.n	80083a4 <loop_acc_mode+0xd4>
	    }
	  }
	  else
	  {
	    if(yval < ThresholdLow)
 8008350:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <loop_acc_mode+0xf0>)
 8008352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008356:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800835a:	da0d      	bge.n	8008378 <loop_acc_mode+0xa8>
	    {
	      /* LED6 On */
	      BSP_LED_On(LED6);
 800835c:	2003      	movs	r0, #3
 800835e:	f7f8 fbcf 	bl	8000b00 <BSP_LED_On>
	      HAL_UART_Transmit( &huart4, "T", 1, 1000 );
 8008362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008366:	2201      	movs	r2, #1
 8008368:	491a      	ldr	r1, [pc, #104]	; (80083d4 <loop_acc_mode+0x104>)
 800836a:	4818      	ldr	r0, [pc, #96]	; (80083cc <loop_acc_mode+0xfc>)
 800836c:	f7fc fbd1 	bl	8004b12 <HAL_UART_Transmit>
	      HAL_Delay(10);
 8008370:	200a      	movs	r0, #10
 8008372:	f7f8 fe8b 	bl	800108c <HAL_Delay>
 8008376:	e015      	b.n	80083a4 <loop_acc_mode+0xd4>
	    }
	    else if(yval > ThresholdHigh)
 8008378:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <loop_acc_mode+0xf0>)
 800837a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800837e:	2bc8      	cmp	r3, #200	; 0xc8
 8008380:	dd0d      	ble.n	800839e <loop_acc_mode+0xce>
	    {
	      /* LED3 On */
	      BSP_LED_On(LED3);
 8008382:	2001      	movs	r0, #1
 8008384:	f7f8 fbbc 	bl	8000b00 <BSP_LED_On>
	      HAL_UART_Transmit( &huart4, "B", 1, 1000 );
 8008388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800838c:	2201      	movs	r2, #1
 800838e:	4912      	ldr	r1, [pc, #72]	; (80083d8 <loop_acc_mode+0x108>)
 8008390:	480e      	ldr	r0, [pc, #56]	; (80083cc <loop_acc_mode+0xfc>)
 8008392:	f7fc fbbe 	bl	8004b12 <HAL_UART_Transmit>
	      HAL_Delay(10);
 8008396:	200a      	movs	r0, #10
 8008398:	f7f8 fe78 	bl	800108c <HAL_Delay>
 800839c:	e002      	b.n	80083a4 <loop_acc_mode+0xd4>
	    }
	    else
	    {
	      HAL_Delay(10);
 800839e:	200a      	movs	r0, #10
 80083a0:	f7f8 fe74 	bl	800108c <HAL_Delay>
	    }
	  }

	  BSP_LED_Off(LED3);
 80083a4:	2001      	movs	r0, #1
 80083a6:	f7f8 fbc5 	bl	8000b34 <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 80083aa:	2000      	movs	r0, #0
 80083ac:	f7f8 fbc2 	bl	8000b34 <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 80083b0:	2002      	movs	r0, #2
 80083b2:	f7f8 fbbf 	bl	8000b34 <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 80083b6:	2003      	movs	r0, #3
 80083b8:	f7f8 fbbc 	bl	8000b34 <BSP_LED_Off>
}
 80083bc:	bf00      	nop
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000178 	.word	0x20000178
 80083c4:	200001e4 	.word	0x200001e4
 80083c8:	080095c0 	.word	0x080095c0
 80083cc:	200001e8 	.word	0x200001e8
 80083d0:	080095c4 	.word	0x080095c4
 80083d4:	080095c8 	.word	0x080095c8
 80083d8:	080095cc 	.word	0x080095cc

080083dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80083e0:	f7f8 fde2 	bl	8000fa8 <HAL_Init>

  /* USER CODE BEGIN Init */
  event_init( &e );
 80083e4:	480d      	ldr	r0, [pc, #52]	; (800841c <main+0x40>)
 80083e6:	f7ff ff49 	bl	800827c <event_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80083ea:	f000 f81b 	bl	8008424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80083ee:	f000 f95f 	bl	80086b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80083f2:	f000 f881 	bl	80084f8 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80083f6:	f000 fca7 	bl	8008d48 <MX_USB_HOST_Init>
  MX_UART4_Init();
 80083fa:	f000 f92f 	bl	800865c <MX_UART4_Init>
  MX_SPI1_Init();
 80083fe:	f000 f8a9 	bl	8008554 <MX_SPI1_Init>
  MX_TIM2_Init();
 8008402:	f000 f8dd 	bl	80085c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT( &htim2 );
 8008406:	4806      	ldr	r0, [pc, #24]	; (8008420 <main+0x44>)
 8008408:	f7fb ff57 	bl	80042ba <HAL_TIM_Base_Start_IT>
	init_acc_mode();
 800840c:	f7ff ff50 	bl	80082b0 <init_acc_mode>
  /* USER CODE BEGIN WHILE */

	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008410:	f000 fcc0 	bl	8008d94 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	loop_acc_mode();
 8008414:	f7ff ff5c 	bl	80082d0 <loop_acc_mode>
    MX_USB_HOST_Process();
 8008418:	e7fa      	b.n	8008410 <main+0x34>
 800841a:	bf00      	nop
 800841c:	200002c0 	.word	0x200002c0
 8008420:	20000280 	.word	0x20000280

08008424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b094      	sub	sp, #80	; 0x50
 8008428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800842a:	f107 0320 	add.w	r3, r7, #32
 800842e:	2230      	movs	r2, #48	; 0x30
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fff4 	bl	8009420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	609a      	str	r2, [r3, #8]
 8008444:	60da      	str	r2, [r3, #12]
 8008446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <SystemClock_Config+0xcc>)
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	4a27      	ldr	r2, [pc, #156]	; (80084f0 <SystemClock_Config+0xcc>)
 8008452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008456:	6413      	str	r3, [r2, #64]	; 0x40
 8008458:	4b25      	ldr	r3, [pc, #148]	; (80084f0 <SystemClock_Config+0xcc>)
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008460:	60bb      	str	r3, [r7, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008464:	2300      	movs	r3, #0
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <SystemClock_Config+0xd0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a21      	ldr	r2, [pc, #132]	; (80084f4 <SystemClock_Config+0xd0>)
 800846e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	4b1f      	ldr	r3, [pc, #124]	; (80084f4 <SystemClock_Config+0xd0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008480:	2301      	movs	r3, #1
 8008482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800848a:	2302      	movs	r3, #2
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800848e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008494:	2308      	movs	r3, #8
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008498:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800849e:	2302      	movs	r3, #2
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80084a2:	2307      	movs	r3, #7
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084a6:	f107 0320 	add.w	r3, r7, #32
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fa ff90 	bl	80033d0 <HAL_RCC_OscConfig>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80084b6:	f000 fa19 	bl	80088ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084ba:	230f      	movs	r3, #15
 80084bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084be:	2302      	movs	r3, #2
 80084c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80084c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80084ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80084cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	2105      	movs	r1, #5
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fb f9e9 	bl	80038b0 <HAL_RCC_ClockConfig>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80084e4:	f000 fa02 	bl	80088ec <Error_Handler>
  }
}
 80084e8:	bf00      	nop
 80084ea:	3750      	adds	r7, #80	; 0x50
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	40023800 	.word	0x40023800
 80084f4:	40007000 	.word	0x40007000

080084f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80084fc:	4b12      	ldr	r3, [pc, #72]	; (8008548 <MX_I2C1_Init+0x50>)
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <MX_I2C1_Init+0x54>)
 8008500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <MX_I2C1_Init+0x50>)
 8008504:	4a12      	ldr	r2, [pc, #72]	; (8008550 <MX_I2C1_Init+0x58>)
 8008506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008508:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <MX_I2C1_Init+0x50>)
 800850a:	2200      	movs	r2, #0
 800850c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800850e:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <MX_I2C1_Init+0x50>)
 8008510:	2200      	movs	r2, #0
 8008512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <MX_I2C1_Init+0x50>)
 8008516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800851a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <MX_I2C1_Init+0x50>)
 800851e:	2200      	movs	r2, #0
 8008520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008522:	4b09      	ldr	r3, [pc, #36]	; (8008548 <MX_I2C1_Init+0x50>)
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <MX_I2C1_Init+0x50>)
 800852a:	2200      	movs	r2, #0
 800852c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <MX_I2C1_Init+0x50>)
 8008530:	2200      	movs	r2, #0
 8008532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008534:	4804      	ldr	r0, [pc, #16]	; (8008548 <MX_I2C1_Init+0x50>)
 8008536:	f7fa fe13 	bl	8003160 <HAL_I2C_Init>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008540:	f000 f9d4 	bl	80088ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008544:	bf00      	nop
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000190 	.word	0x20000190
 800854c:	40005400 	.word	0x40005400
 8008550:	000186a0 	.word	0x000186a0

08008554 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008558:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <MX_SPI1_Init+0x64>)
 800855a:	4a18      	ldr	r2, [pc, #96]	; (80085bc <MX_SPI1_Init+0x68>)
 800855c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800855e:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008568:	2200      	movs	r2, #0
 800856a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800856c:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <MX_SPI1_Init+0x64>)
 800856e:	2200      	movs	r2, #0
 8008570:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008574:	2200      	movs	r2, #0
 8008576:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <MX_SPI1_Init+0x64>)
 800857a:	2200      	movs	r2, #0
 800857c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800857e:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008584:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008588:	2200      	movs	r2, #0
 800858a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <MX_SPI1_Init+0x64>)
 800858e:	2200      	movs	r2, #0
 8008590:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008592:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <MX_SPI1_Init+0x64>)
 8008594:	2200      	movs	r2, #0
 8008596:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <MX_SPI1_Init+0x64>)
 800859a:	2200      	movs	r2, #0
 800859c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <MX_SPI1_Init+0x64>)
 80085a0:	220a      	movs	r2, #10
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80085a4:	4804      	ldr	r0, [pc, #16]	; (80085b8 <MX_SPI1_Init+0x64>)
 80085a6:	f7fb fb75 	bl	8003c94 <HAL_SPI_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80085b0:	f000 f99c 	bl	80088ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000228 	.word	0x20000228
 80085bc:	40013000 	.word	0x40013000

080085c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085c6:	f107 0308 	add.w	r3, r7, #8
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	609a      	str	r2, [r3, #8]
 80085d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085d4:	463b      	mov	r3, r7
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <MX_TIM2_Init+0x98>)
 80085de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80085e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80085e4:	4b1c      	ldr	r3, [pc, #112]	; (8008658 <MX_TIM2_Init+0x98>)
 80085e6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80085ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ec:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <MX_TIM2_Init+0x98>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <MX_TIM2_Init+0x98>)
 80085f4:	f241 3287 	movw	r2, #4999	; 0x1387
 80085f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <MX_TIM2_Init+0x98>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008600:	4b15      	ldr	r3, [pc, #84]	; (8008658 <MX_TIM2_Init+0x98>)
 8008602:	2200      	movs	r2, #0
 8008604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008606:	4814      	ldr	r0, [pc, #80]	; (8008658 <MX_TIM2_Init+0x98>)
 8008608:	f7fb fe2c 	bl	8004264 <HAL_TIM_Base_Init>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008612:	f000 f96b 	bl	80088ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800861a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	4619      	mov	r1, r3
 8008622:	480d      	ldr	r0, [pc, #52]	; (8008658 <MX_TIM2_Init+0x98>)
 8008624:	f7fb ff75 	bl	8004512 <HAL_TIM_ConfigClockSource>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800862e:	f000 f95d 	bl	80088ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008632:	2300      	movs	r3, #0
 8008634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800863a:	463b      	mov	r3, r7
 800863c:	4619      	mov	r1, r3
 800863e:	4806      	ldr	r0, [pc, #24]	; (8008658 <MX_TIM2_Init+0x98>)
 8008640:	f7fc f98a 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800864a:	f000 f94f 	bl	80088ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000280 	.word	0x20000280

0800865c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008660:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008662:	4a12      	ldr	r2, [pc, #72]	; (80086ac <MX_UART4_Init+0x50>)
 8008664:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800866c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800866e:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008670:	2200      	movs	r2, #0
 8008672:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008676:	2200      	movs	r2, #0
 8008678:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <MX_UART4_Init+0x4c>)
 800867c:	2200      	movs	r2, #0
 800867e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008682:	220c      	movs	r2, #12
 8008684:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008688:	2200      	movs	r2, #0
 800868a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <MX_UART4_Init+0x4c>)
 800868e:	2200      	movs	r2, #0
 8008690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008692:	4805      	ldr	r0, [pc, #20]	; (80086a8 <MX_UART4_Init+0x4c>)
 8008694:	f7fc f9f0 	bl	8004a78 <HAL_UART_Init>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800869e:	f000 f925 	bl	80088ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80086a2:	bf00      	nop
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200001e8 	.word	0x200001e8
 80086ac:	40004c00 	.word	0x40004c00

080086b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b6:	f107 031c 	add.w	r3, r7, #28
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	609a      	str	r2, [r3, #8]
 80086c2:	60da      	str	r2, [r3, #12]
 80086c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	4b81      	ldr	r3, [pc, #516]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a80      	ldr	r2, [pc, #512]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086d0:	f043 0310 	orr.w	r3, r3, #16
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b7e      	ldr	r3, [pc, #504]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	4b7a      	ldr	r3, [pc, #488]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a79      	ldr	r2, [pc, #484]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086ec:	f043 0304 	orr.w	r3, r3, #4
 80086f0:	6313      	str	r3, [r2, #48]	; 0x30
 80086f2:	4b77      	ldr	r3, [pc, #476]	; (80088d0 <MX_GPIO_Init+0x220>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	4b73      	ldr	r3, [pc, #460]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	4a72      	ldr	r2, [pc, #456]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870c:	6313      	str	r3, [r2, #48]	; 0x30
 800870e:	4b70      	ldr	r3, [pc, #448]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	4b6c      	ldr	r3, [pc, #432]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	4a6b      	ldr	r2, [pc, #428]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008724:	f043 0301 	orr.w	r3, r3, #1
 8008728:	6313      	str	r3, [r2, #48]	; 0x30
 800872a:	4b69      	ldr	r3, [pc, #420]	; (80088d0 <MX_GPIO_Init+0x220>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	60bb      	str	r3, [r7, #8]
 800873a:	4b65      	ldr	r3, [pc, #404]	; (80088d0 <MX_GPIO_Init+0x220>)
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	4a64      	ldr	r2, [pc, #400]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008740:	f043 0302 	orr.w	r3, r3, #2
 8008744:	6313      	str	r3, [r2, #48]	; 0x30
 8008746:	4b62      	ldr	r3, [pc, #392]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	4b5e      	ldr	r3, [pc, #376]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	4a5d      	ldr	r2, [pc, #372]	; (80088d0 <MX_GPIO_Init+0x220>)
 800875c:	f043 0308 	orr.w	r3, r3, #8
 8008760:	6313      	str	r3, [r2, #48]	; 0x30
 8008762:	4b5b      	ldr	r3, [pc, #364]	; (80088d0 <MX_GPIO_Init+0x220>)
 8008764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	607b      	str	r3, [r7, #4]
 800876c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800876e:	2200      	movs	r2, #0
 8008770:	2108      	movs	r1, #8
 8008772:	4858      	ldr	r0, [pc, #352]	; (80088d4 <MX_GPIO_Init+0x224>)
 8008774:	f7f9 f874 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008778:	2201      	movs	r2, #1
 800877a:	2101      	movs	r1, #1
 800877c:	4856      	ldr	r0, [pc, #344]	; (80088d8 <MX_GPIO_Init+0x228>)
 800877e:	f7f9 f86f 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008782:	2200      	movs	r2, #0
 8008784:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008788:	4854      	ldr	r0, [pc, #336]	; (80088dc <MX_GPIO_Init+0x22c>)
 800878a:	f7f9 f869 	bl	8001860 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800878e:	2308      	movs	r3, #8
 8008790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008792:	2301      	movs	r3, #1
 8008794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800879a:	2300      	movs	r3, #0
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800879e:	f107 031c 	add.w	r3, r7, #28
 80087a2:	4619      	mov	r1, r3
 80087a4:	484b      	ldr	r0, [pc, #300]	; (80088d4 <MX_GPIO_Init+0x224>)
 80087a6:	f7f8 fdc7 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80087aa:	2301      	movs	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087ae:	2301      	movs	r3, #1
 80087b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087b6:	2300      	movs	r3, #0
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80087ba:	f107 031c 	add.w	r3, r7, #28
 80087be:	4619      	mov	r1, r3
 80087c0:	4845      	ldr	r0, [pc, #276]	; (80088d8 <MX_GPIO_Init+0x228>)
 80087c2:	f7f8 fdb9 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80087c6:	2308      	movs	r3, #8
 80087c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ca:	2302      	movs	r3, #2
 80087cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087d2:	2300      	movs	r3, #0
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087d6:	2305      	movs	r3, #5
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80087da:	f107 031c 	add.w	r3, r7, #28
 80087de:	4619      	mov	r1, r3
 80087e0:	483d      	ldr	r0, [pc, #244]	; (80088d8 <MX_GPIO_Init+0x228>)
 80087e2:	f7f8 fda9 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80087e6:	2301      	movs	r3, #1
 80087e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80087ea:	4b3d      	ldr	r3, [pc, #244]	; (80088e0 <MX_GPIO_Init+0x230>)
 80087ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80087f2:	f107 031c 	add.w	r3, r7, #28
 80087f6:	4619      	mov	r1, r3
 80087f8:	483a      	ldr	r0, [pc, #232]	; (80088e4 <MX_GPIO_Init+0x234>)
 80087fa:	f7f8 fd9d 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80087fe:	2310      	movs	r3, #16
 8008800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008802:	2302      	movs	r3, #2
 8008804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880a:	2300      	movs	r3, #0
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800880e:	2306      	movs	r3, #6
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008812:	f107 031c 	add.w	r3, r7, #28
 8008816:	4619      	mov	r1, r3
 8008818:	4832      	ldr	r0, [pc, #200]	; (80088e4 <MX_GPIO_Init+0x234>)
 800881a:	f7f8 fd8d 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800881e:	2304      	movs	r3, #4
 8008820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008822:	2300      	movs	r3, #0
 8008824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008826:	2300      	movs	r3, #0
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800882a:	f107 031c 	add.w	r3, r7, #28
 800882e:	4619      	mov	r1, r3
 8008830:	482d      	ldr	r0, [pc, #180]	; (80088e8 <MX_GPIO_Init+0x238>)
 8008832:	f7f8 fd81 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883c:	2302      	movs	r3, #2
 800883e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008844:	2300      	movs	r3, #0
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008848:	2305      	movs	r3, #5
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800884c:	f107 031c 	add.w	r3, r7, #28
 8008850:	4619      	mov	r1, r3
 8008852:	4825      	ldr	r0, [pc, #148]	; (80088e8 <MX_GPIO_Init+0x238>)
 8008854:	f7f8 fd70 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008858:	f24f 0310 	movw	r3, #61456	; 0xf010
 800885c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800885e:	2301      	movs	r3, #1
 8008860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008862:	2300      	movs	r3, #0
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008866:	2300      	movs	r3, #0
 8008868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800886a:	f107 031c 	add.w	r3, r7, #28
 800886e:	4619      	mov	r1, r3
 8008870:	481a      	ldr	r0, [pc, #104]	; (80088dc <MX_GPIO_Init+0x22c>)
 8008872:	f7f8 fd61 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8008876:	2380      	movs	r3, #128	; 0x80
 8008878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800887a:	2302      	movs	r3, #2
 800887c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887e:	2300      	movs	r3, #0
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008882:	2300      	movs	r3, #0
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008886:	2306      	movs	r3, #6
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800888a:	f107 031c 	add.w	r3, r7, #28
 800888e:	4619      	mov	r1, r3
 8008890:	4811      	ldr	r0, [pc, #68]	; (80088d8 <MX_GPIO_Init+0x228>)
 8008892:	f7f8 fd51 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008896:	2320      	movs	r3, #32
 8008898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800889a:	2300      	movs	r3, #0
 800889c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80088a2:	f107 031c 	add.w	r3, r7, #28
 80088a6:	4619      	mov	r1, r3
 80088a8:	480c      	ldr	r0, [pc, #48]	; (80088dc <MX_GPIO_Init+0x22c>)
 80088aa:	f7f8 fd45 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80088ae:	2302      	movs	r3, #2
 80088b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <MX_GPIO_Init+0x230>)
 80088b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80088ba:	f107 031c 	add.w	r3, r7, #28
 80088be:	4619      	mov	r1, r3
 80088c0:	4804      	ldr	r0, [pc, #16]	; (80088d4 <MX_GPIO_Init+0x224>)
 80088c2:	f7f8 fd39 	bl	8001338 <HAL_GPIO_Init>

}
 80088c6:	bf00      	nop
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800
 80088d4:	40021000 	.word	0x40021000
 80088d8:	40020800 	.word	0x40020800
 80088dc:	40020c00 	.word	0x40020c00
 80088e0:	10120000 	.word	0x10120000
 80088e4:	40020000 	.word	0x40020000
 80088e8:	40020400 	.word	0x40020400

080088ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80088f0:	bf00      	nop
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <ACCELERO_Read_Acc>:
  * @brief  Read Acceleration data.
  * @param  None
  * @retval None
  */
void ACCELERO_Read_Acc(int16_t *xval, int16_t *yval)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8008904:	f7f8 fa98 	bl	8000e38 <BSP_ACCELERO_Init>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <ACCELERO_Read_Acc+0x1a>
  {
    /* Initialization Error */
    Error_Handler();
 800890e:	f7ff ffed 	bl	80088ec <Error_Handler>
	     BSP_ACCELERO_GetXYZ(buffer);

	     *xval = buffer[0];
	     *yval = buffer[1];
  }
}
 8008912:	e011      	b.n	8008938 <ACCELERO_Read_Acc+0x3e>
	      int16_t buffer[3] = {0};
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	809a      	strh	r2, [r3, #4]
	     BSP_ACCELERO_GetXYZ(buffer);
 800891e:	f107 0308 	add.w	r3, r7, #8
 8008922:	4618      	mov	r0, r3
 8008924:	f7f8 fb14 	bl	8000f50 <BSP_ACCELERO_GetXYZ>
	     *xval = buffer[0];
 8008928:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	801a      	strh	r2, [r3, #0]
	     *yval = buffer[1];
 8008930:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	801a      	strh	r2, [r3, #0]
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	4b10      	ldr	r3, [pc, #64]	; (800898c <HAL_MspInit+0x4c>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	4a0f      	ldr	r2, [pc, #60]	; (800898c <HAL_MspInit+0x4c>)
 8008950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008954:	6453      	str	r3, [r2, #68]	; 0x44
 8008956:	4b0d      	ldr	r3, [pc, #52]	; (800898c <HAL_MspInit+0x4c>)
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008962:	2300      	movs	r3, #0
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4b09      	ldr	r3, [pc, #36]	; (800898c <HAL_MspInit+0x4c>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	4a08      	ldr	r2, [pc, #32]	; (800898c <HAL_MspInit+0x4c>)
 800896c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008970:	6413      	str	r3, [r2, #64]	; 0x40
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_MspInit+0x4c>)
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800897e:	2007      	movs	r0, #7
 8008980:	f7f8 fc76 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40023800 	.word	0x40023800

08008990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a19      	ldr	r2, [pc, #100]	; (8008a14 <HAL_I2C_MspInit+0x84>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d12c      	bne.n	8008a0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 80089bc:	f043 0302 	orr.w	r3, r3, #2
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80089ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80089d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089d4:	2312      	movs	r3, #18
 80089d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089d8:	2301      	movs	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089dc:	2300      	movs	r3, #0
 80089de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80089e0:	2304      	movs	r3, #4
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	4619      	mov	r1, r3
 80089ea:	480c      	ldr	r0, [pc, #48]	; (8008a1c <HAL_I2C_MspInit+0x8c>)
 80089ec:	f7f8 fca4 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	4a07      	ldr	r2, [pc, #28]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 80089fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089fe:	6413      	str	r3, [r2, #64]	; 0x40
 8008a00:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <HAL_I2C_MspInit+0x88>)
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008a0c:	bf00      	nop
 8008a0e:	3728      	adds	r7, #40	; 0x28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40005400 	.word	0x40005400
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	40020400 	.word	0x40020400

08008a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	605a      	str	r2, [r3, #4]
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <HAL_SPI_MspInit+0xc0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d149      	bne.n	8008ad6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	4a26      	ldr	r2, [pc, #152]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a50:	6453      	str	r3, [r2, #68]	; 0x44
 8008a52:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	4a1f      	ldr	r2, [pc, #124]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	4b19      	ldr	r3, [pc, #100]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	6313      	str	r3, [r2, #48]	; 0x30
 8008a8a:	4b16      	ldr	r3, [pc, #88]	; (8008ae4 <HAL_SPI_MspInit+0xc4>)
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	60bb      	str	r3, [r7, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 8008a96:	2360      	movs	r3, #96	; 0x60
 8008a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008aa6:	2305      	movs	r3, #5
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aaa:	f107 0314 	add.w	r3, r7, #20
 8008aae:	4619      	mov	r1, r3
 8008ab0:	480d      	ldr	r0, [pc, #52]	; (8008ae8 <HAL_SPI_MspInit+0xc8>)
 8008ab2:	f7f8 fc41 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aba:	2302      	movs	r3, #2
 8008abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008ac6:	2305      	movs	r3, #5
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aca:	f107 0314 	add.w	r3, r7, #20
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4806      	ldr	r0, [pc, #24]	; (8008aec <HAL_SPI_MspInit+0xcc>)
 8008ad2:	f7f8 fc31 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008ad6:	bf00      	nop
 8008ad8:	3728      	adds	r7, #40	; 0x28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	40013000 	.word	0x40013000
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	40020000 	.word	0x40020000
 8008aec:	40020400 	.word	0x40020400

08008af0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <HAL_SPI_MspDeInit+0x38>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <HAL_SPI_MspDeInit+0x3c>)
 8008b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b06:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <HAL_SPI_MspDeInit+0x3c>)
 8008b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin);
 8008b0e:	2160      	movs	r1, #96	; 0x60
 8008b10:	4807      	ldr	r0, [pc, #28]	; (8008b30 <HAL_SPI_MspDeInit+0x40>)
 8008b12:	f7f8 fdab 	bl	800166c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5);
 8008b16:	2120      	movs	r1, #32
 8008b18:	4806      	ldr	r0, [pc, #24]	; (8008b34 <HAL_SPI_MspDeInit+0x44>)
 8008b1a:	f7f8 fda7 	bl	800166c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	40013000 	.word	0x40013000
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	40020000 	.word	0x40020000
 8008b34:	40020400 	.word	0x40020400

08008b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b48:	d115      	bne.n	8008b76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <HAL_TIM_Base_MspInit+0x48>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	4a0b      	ldr	r2, [pc, #44]	; (8008b80 <HAL_TIM_Base_MspInit+0x48>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <HAL_TIM_Base_MspInit+0x48>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008b66:	2200      	movs	r2, #0
 8008b68:	2100      	movs	r1, #0
 8008b6a:	201c      	movs	r0, #28
 8008b6c:	f7f8 fb8b 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008b70:	201c      	movs	r0, #28
 8008b72:	f7f8 fba4 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40023800 	.word	0x40023800

08008b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	609a      	str	r2, [r3, #8]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <HAL_UART_MspInit+0x94>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d134      	bne.n	8008c10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bbe:	613b      	str	r3, [r7, #16]
 8008bc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	4a14      	ldr	r2, [pc, #80]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bcc:	f043 0304 	orr.w	r3, r3, #4
 8008bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_UART_MspInit+0x98>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be4:	2302      	movs	r3, #2
 8008be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008be8:	2301      	movs	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bec:	2303      	movs	r3, #3
 8008bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4809      	ldr	r0, [pc, #36]	; (8008c20 <HAL_UART_MspInit+0x9c>)
 8008bfc:	f7f8 fb9c 	bl	8001338 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008c00:	2200      	movs	r2, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	2034      	movs	r0, #52	; 0x34
 8008c06:	f7f8 fb3e 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008c0a:	2034      	movs	r0, #52	; 0x34
 8008c0c:	f7f8 fb57 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8008c10:	bf00      	nop
 8008c12:	3728      	adds	r7, #40	; 0x28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40004c00 	.word	0x40004c00
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40020800 	.word	0x40020800

08008c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c32:	b480      	push	{r7}
 8008c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c36:	e7fe      	b.n	8008c36 <HardFault_Handler+0x4>

08008c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c3c:	e7fe      	b.n	8008c3c <MemManage_Handler+0x4>

08008c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c42:	e7fe      	b.n	8008c42 <BusFault_Handler+0x4>

08008c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c48:	e7fe      	b.n	8008c48 <UsageFault_Handler+0x4>

08008c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c5c:	bf00      	nop
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c66:	b480      	push	{r7}
 8008c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c6a:	bf00      	nop
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c78:	f7f8 f9e8 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	event_trigger( &e );
 8008c84:	4803      	ldr	r0, [pc, #12]	; (8008c94 <TIM2_IRQHandler+0x14>)
 8008c86:	f7ff fb06 	bl	8008296 <event_trigger>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008c8a:	4803      	ldr	r0, [pc, #12]	; (8008c98 <TIM2_IRQHandler+0x18>)
 8008c8c:	f7fb fb39 	bl	8004302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008c90:	bf00      	nop
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200002c0 	.word	0x200002c0
 8008c98:	20000280 	.word	0x20000280

08008c9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008ca0:	4802      	ldr	r0, [pc, #8]	; (8008cac <UART4_IRQHandler+0x10>)
 8008ca2:	f7fb ffcf 	bl	8004c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008ca6:	bf00      	nop
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200001e8 	.word	0x200001e8

08008cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008cb4:	4802      	ldr	r0, [pc, #8]	; (8008cc0 <OTG_FS_IRQHandler+0x10>)
 8008cb6:	f7f9 f871 	bl	8001d9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008cba:	bf00      	nop
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000690 	.word	0x20000690

08008cc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <_sbrk+0x50>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <_sbrk+0x16>
		heap_end = &end;
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <_sbrk+0x50>)
 8008cd6:	4a10      	ldr	r2, [pc, #64]	; (8008d18 <_sbrk+0x54>)
 8008cd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008cda:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <_sbrk+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <_sbrk+0x50>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	466a      	mov	r2, sp
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d907      	bls.n	8008cfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008cee:	f000 fb5d 	bl	80093ac <__errno>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfc:	e006      	b.n	8008d0c <_sbrk+0x48>
	}

	heap_end += incr;
 8008cfe:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <_sbrk+0x50>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	4a03      	ldr	r2, [pc, #12]	; (8008d14 <_sbrk+0x50>)
 8008d08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	2000017c 	.word	0x2000017c
 8008d18:	20000958 	.word	0x20000958

08008d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <SystemInit+0x28>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <SystemInit+0x28>)
 8008d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <SystemInit+0x28>)
 8008d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d36:	609a      	str	r2, [r3, #8]
#endif
}
 8008d38:	bf00      	nop
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	e000ed00 	.word	0xe000ed00

08008d48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	490e      	ldr	r1, [pc, #56]	; (8008d88 <MX_USB_HOST_Init+0x40>)
 8008d50:	480e      	ldr	r0, [pc, #56]	; (8008d8c <MX_USB_HOST_Init+0x44>)
 8008d52:	f7fe f855 	bl	8006e00 <USBH_Init>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d5c:	f7ff fdc6 	bl	80088ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d60:	490b      	ldr	r1, [pc, #44]	; (8008d90 <MX_USB_HOST_Init+0x48>)
 8008d62:	480a      	ldr	r0, [pc, #40]	; (8008d8c <MX_USB_HOST_Init+0x44>)
 8008d64:	f7fe f8bf 	bl	8006ee6 <USBH_RegisterClass>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d6e:	f7ff fdbd 	bl	80088ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d72:	4806      	ldr	r0, [pc, #24]	; (8008d8c <MX_USB_HOST_Init+0x44>)
 8008d74:	f7fe f944 	bl	8007000 <USBH_Start>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d7e:	f7ff fdb5 	bl	80088ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d82:	bf00      	nop
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	200002c4 	.word	0x200002c4
 8008d90:	20000074 	.word	0x20000074

08008d94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d98:	4802      	ldr	r0, [pc, #8]	; (8008da4 <MX_USB_HOST_Process+0x10>)
 8008d9a:	f7fe f941 	bl	8007020 <USBH_Process>
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200002c4 	.word	0x200002c4

08008da8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d819      	bhi.n	8008df0 <USBH_UserProcess+0x48>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <USBH_UserProcess+0x1c>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008dd9 	.word	0x08008dd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <USBH_UserProcess+0x58>)
 8008dda:	2203      	movs	r2, #3
 8008ddc:	701a      	strb	r2, [r3, #0]
  break;
 8008dde:	e008      	b.n	8008df2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <USBH_UserProcess+0x58>)
 8008de2:	2202      	movs	r2, #2
 8008de4:	701a      	strb	r2, [r3, #0]
  break;
 8008de6:	e004      	b.n	8008df2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <USBH_UserProcess+0x58>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	701a      	strb	r2, [r3, #0]
  break;
 8008dee:	e000      	b.n	8008df2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008df0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20000180 	.word	0x20000180

08008e04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e0c:	f107 0314 	add.w	r3, r7, #20
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e24:	d147      	bne.n	8008eb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	4a24      	ldr	r2, [pc, #144]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	6313      	str	r3, [r2, #48]	; 0x30
 8008e36:	4b22      	ldr	r3, [pc, #136]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	4619      	mov	r1, r3
 8008e56:	481b      	ldr	r0, [pc, #108]	; (8008ec4 <HAL_HCD_MspInit+0xc0>)
 8008e58:	f7f8 fa6e 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e62:	2302      	movs	r3, #2
 8008e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e6e:	230a      	movs	r3, #10
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	4619      	mov	r1, r3
 8008e78:	4812      	ldr	r0, [pc, #72]	; (8008ec4 <HAL_HCD_MspInit+0xc0>)
 8008e7a:	f7f8 fa5d 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	6353      	str	r3, [r2, #52]	; 0x34
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e92:	4a0b      	ldr	r2, [pc, #44]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e98:	6453      	str	r3, [r2, #68]	; 0x44
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <HAL_HCD_MspInit+0xbc>)
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	2043      	movs	r0, #67	; 0x43
 8008eac:	f7f8 f9eb 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008eb0:	2043      	movs	r0, #67	; 0x43
 8008eb2:	f7f8 fa04 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	3728      	adds	r7, #40	; 0x28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40023800 	.word	0x40023800
 8008ec4:	40020000 	.word	0x40020000

08008ec8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fb53 	bl	8007582 <USBH_LL_IncTimer>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fb98 	bl	8007628 <USBH_LL_Connect>
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fbb0 	bl	8007674 <USBH_LL_Disconnect>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fb45 	bl	80075d6 <USBH_LL_PortEnabled>
} 
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fb45 	bl	80075f2 <USBH_LL_PortDisabled>
} 
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d12a      	bne.n	8008fd8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f82:	4a18      	ldr	r2, [pc, #96]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008f8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f92:	4b14      	ldr	r3, [pc, #80]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008f94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008fa0:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fae:	2202      	movs	r2, #2
 8008fb0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008fb8:	480a      	ldr	r0, [pc, #40]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fba:	f7f8 fc6a 	bl	8001892 <HAL_HCD_Init>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008fc4:	f7ff fc92 	bl	80088ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008fc8:	4806      	ldr	r0, [pc, #24]	; (8008fe4 <USBH_LL_Init+0x74>)
 8008fca:	f7f9 f865 	bl	8002098 <HAL_HCD_GetCurrentFrame>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fe fac6 	bl	8007564 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000690 	.word	0x20000690

08008fe8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f8 ffd2 	bl	8001fa8 <HAL_HCD_Start>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f95c 	bl	80092c8 <USBH_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009034:	4618      	mov	r0, r3
 8009036:	f7f8 ffda 	bl	8001fee <HAL_HCD_Stop>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f941 	bl	80092c8 <USBH_Get_USB_Status>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800904a:	7bbb      	ldrb	r3, [r7, #14]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009066:	4618      	mov	r0, r3
 8009068:	f7f9 f824 	bl	80020b4 <HAL_HCD_GetCurrentSpeed>
 800906c:	4603      	mov	r3, r0
 800906e:	2b01      	cmp	r3, #1
 8009070:	d007      	beq.n	8009082 <USBH_LL_GetSpeed+0x2e>
 8009072:	2b01      	cmp	r3, #1
 8009074:	d302      	bcc.n	800907c <USBH_LL_GetSpeed+0x28>
 8009076:	2b02      	cmp	r3, #2
 8009078:	d006      	beq.n	8009088 <USBH_LL_GetSpeed+0x34>
 800907a:	e008      	b.n	800908e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
    break;
 8009080:	e008      	b.n	8009094 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
    break;
 8009086:	e005      	b.n	8009094 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009088:	2302      	movs	r3, #2
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	e002      	b.n	8009094 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800908e:	2301      	movs	r3, #1
 8009090:	73fb      	strb	r3, [r7, #15]
    break;
 8009092:	bf00      	nop
  }
  return  speed;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f8 ffb7 	bl	8002028 <HAL_HCD_ResetPort>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f901 	bl	80092c8 <USBH_Get_USB_Status>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	4611      	mov	r1, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7f8 ffbf 	bl	800206e <HAL_HCD_HC_GetXferCount>
 80090f0:	4603      	mov	r3, r0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090fa:	b590      	push	{r4, r7, lr}
 80090fc:	b089      	sub	sp, #36	; 0x24
 80090fe:	af04      	add	r7, sp, #16
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	461a      	mov	r2, r3
 8009108:	4603      	mov	r3, r0
 800910a:	70fb      	strb	r3, [r7, #3]
 800910c:	460b      	mov	r3, r1
 800910e:	70bb      	strb	r3, [r7, #2]
 8009110:	4613      	mov	r3, r2
 8009112:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009122:	787c      	ldrb	r4, [r7, #1]
 8009124:	78ba      	ldrb	r2, [r7, #2]
 8009126:	78f9      	ldrb	r1, [r7, #3]
 8009128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4623      	mov	r3, r4
 800913a:	f7f8 fc0c 	bl	8001956 <HAL_HCD_HC_Init>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 f8bf 	bl	80092c8 <USBH_Get_USB_Status>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800914e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	bd90      	pop	{r4, r7, pc}

08009158 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009172:	78fa      	ldrb	r2, [r7, #3]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7f8 fc85 	bl	8001a86 <HAL_HCD_HC_Halt>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f8a0 	bl	80092c8 <USBH_Get_USB_Status>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800918c:	7bbb      	ldrb	r3, [r7, #14]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009196:	b590      	push	{r4, r7, lr}
 8009198:	b089      	sub	sp, #36	; 0x24
 800919a:	af04      	add	r7, sp, #16
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	70fb      	strb	r3, [r7, #3]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70bb      	strb	r3, [r7, #2]
 80091ac:	4613      	mov	r3, r2
 80091ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80091be:	787c      	ldrb	r4, [r7, #1]
 80091c0:	78ba      	ldrb	r2, [r7, #2]
 80091c2:	78f9      	ldrb	r1, [r7, #3]
 80091c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4623      	mov	r3, r4
 80091da:	f7f8 fc77 	bl	8001acc <HAL_HCD_HC_SubmitRequest>
 80091de:	4603      	mov	r3, r0
 80091e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f86f 	bl	80092c8 <USBH_Get_USB_Status>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f7f8 ff18 	bl	8002044 <HAL_HCD_HC_GetURBState>
 8009214:	4603      	mov	r3, r0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	460b      	mov	r3, r1
 8009228:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009230:	2b01      	cmp	r3, #1
 8009232:	d103      	bne.n	800923c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f872 	bl	8009320 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800923c:	20c8      	movs	r0, #200	; 0xc8
 800923e:	f7f7 ff25 	bl	800108c <HAL_Delay>
  return USBH_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
 8009258:	4613      	mov	r3, r2
 800925a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009262:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	440b      	add	r3, r1
 8009272:	333b      	adds	r3, #59	; 0x3b
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	68f9      	ldr	r1, [r7, #12]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	440b      	add	r3, r1
 8009288:	3350      	adds	r3, #80	; 0x50
 800928a:	78ba      	ldrb	r2, [r7, #2]
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	e009      	b.n	80092a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	440b      	add	r3, r1
 800929e:	3351      	adds	r3, #81	; 0x51
 80092a0:	78ba      	ldrb	r2, [r7, #2]
 80092a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f7 fee6 	bl	800108c <HAL_Delay>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d817      	bhi.n	800930c <USBH_Get_USB_Status+0x44>
 80092dc:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBH_Get_USB_Status+0x1c>)
 80092de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e2:	bf00      	nop
 80092e4:	080092f5 	.word	0x080092f5
 80092e8:	080092fb 	.word	0x080092fb
 80092ec:	08009301 	.word	0x08009301
 80092f0:	08009307 	.word	0x08009307
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	e00b      	b.n	8009312 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092fa:	2302      	movs	r3, #2
 80092fc:	73fb      	strb	r3, [r7, #15]
    break;
 80092fe:	e008      	b.n	8009312 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009300:	2301      	movs	r3, #1
 8009302:	73fb      	strb	r3, [r7, #15]
    break;
 8009304:	e005      	b.n	8009312 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009306:	2302      	movs	r3, #2
 8009308:	73fb      	strb	r3, [r7, #15]
    break;
 800930a:	e002      	b.n	8009312 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800930c:	2302      	movs	r3, #2
 800930e:	73fb      	strb	r3, [r7, #15]
    break;
 8009310:	bf00      	nop
  }
  return usb_status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d102      	bne.n	800933a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]
 8009338:	e001      	b.n	800933e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	461a      	mov	r2, r3
 8009342:	2101      	movs	r1, #1
 8009344:	4803      	ldr	r0, [pc, #12]	; (8009354 <MX_DriverVbusFS+0x34>)
 8009346:	f7f8 fa8b 	bl	8001860 <HAL_GPIO_WritePin>
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	40020800 	.word	0x40020800

08009358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009390 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800935c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800935e:	e003      	b.n	8009368 <LoopCopyDataInit>

08009360 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009360:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009362:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009364:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009366:	3104      	adds	r1, #4

08009368 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009368:	480b      	ldr	r0, [pc, #44]	; (8009398 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800936a:	4b0c      	ldr	r3, [pc, #48]	; (800939c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800936c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800936e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009370:	d3f6      	bcc.n	8009360 <CopyDataInit>
  ldr  r2, =_sbss
 8009372:	4a0b      	ldr	r2, [pc, #44]	; (80093a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009374:	e002      	b.n	800937c <LoopFillZerobss>

08009376 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009376:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009378:	f842 3b04 	str.w	r3, [r2], #4

0800937c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800937e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009380:	d3f9      	bcc.n	8009376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009382:	f7ff fccb 	bl	8008d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009386:	f000 f817 	bl	80093b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800938a:	f7ff f827 	bl	80083dc <main>
  bx  lr    
 800938e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009390:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009394:	08009600 	.word	0x08009600
  ldr  r0, =_sdata
 8009398:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800939c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 80093a0:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 80093a4:	20000958 	.word	0x20000958

080093a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093a8:	e7fe      	b.n	80093a8 <ADC_IRQHandler>
	...

080093ac <__errno>:
 80093ac:	4b01      	ldr	r3, [pc, #4]	; (80093b4 <__errno+0x8>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000098 	.word	0x20000098

080093b8 <__libc_init_array>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4e0d      	ldr	r6, [pc, #52]	; (80093f0 <__libc_init_array+0x38>)
 80093bc:	4c0d      	ldr	r4, [pc, #52]	; (80093f4 <__libc_init_array+0x3c>)
 80093be:	1ba4      	subs	r4, r4, r6
 80093c0:	10a4      	asrs	r4, r4, #2
 80093c2:	2500      	movs	r5, #0
 80093c4:	42a5      	cmp	r5, r4
 80093c6:	d109      	bne.n	80093dc <__libc_init_array+0x24>
 80093c8:	4e0b      	ldr	r6, [pc, #44]	; (80093f8 <__libc_init_array+0x40>)
 80093ca:	4c0c      	ldr	r4, [pc, #48]	; (80093fc <__libc_init_array+0x44>)
 80093cc:	f000 f8ea 	bl	80095a4 <_init>
 80093d0:	1ba4      	subs	r4, r4, r6
 80093d2:	10a4      	asrs	r4, r4, #2
 80093d4:	2500      	movs	r5, #0
 80093d6:	42a5      	cmp	r5, r4
 80093d8:	d105      	bne.n	80093e6 <__libc_init_array+0x2e>
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093e0:	4798      	blx	r3
 80093e2:	3501      	adds	r5, #1
 80093e4:	e7ee      	b.n	80093c4 <__libc_init_array+0xc>
 80093e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093ea:	4798      	blx	r3
 80093ec:	3501      	adds	r5, #1
 80093ee:	e7f2      	b.n	80093d6 <__libc_init_array+0x1e>
 80093f0:	080095f8 	.word	0x080095f8
 80093f4:	080095f8 	.word	0x080095f8
 80093f8:	080095f8 	.word	0x080095f8
 80093fc:	080095fc 	.word	0x080095fc

08009400 <malloc>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <malloc+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f000 b861 	b.w	80094cc <_malloc_r>
 800940a:	bf00      	nop
 800940c:	20000098 	.word	0x20000098

08009410 <free>:
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <free+0xc>)
 8009412:	4601      	mov	r1, r0
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f000 b80b 	b.w	8009430 <_free_r>
 800941a:	bf00      	nop
 800941c:	20000098 	.word	0x20000098

08009420 <memset>:
 8009420:	4402      	add	r2, r0
 8009422:	4603      	mov	r3, r0
 8009424:	4293      	cmp	r3, r2
 8009426:	d100      	bne.n	800942a <memset+0xa>
 8009428:	4770      	bx	lr
 800942a:	f803 1b01 	strb.w	r1, [r3], #1
 800942e:	e7f9      	b.n	8009424 <memset+0x4>

08009430 <_free_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4605      	mov	r5, r0
 8009434:	2900      	cmp	r1, #0
 8009436:	d045      	beq.n	80094c4 <_free_r+0x94>
 8009438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943c:	1f0c      	subs	r4, r1, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfb8      	it	lt
 8009442:	18e4      	addlt	r4, r4, r3
 8009444:	f000 f8ac 	bl	80095a0 <__malloc_lock>
 8009448:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <_free_r+0x98>)
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	4610      	mov	r0, r2
 800944e:	b933      	cbnz	r3, 800945e <_free_r+0x2e>
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6014      	str	r4, [r2, #0]
 8009454:	4628      	mov	r0, r5
 8009456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800945a:	f000 b8a2 	b.w	80095a2 <__malloc_unlock>
 800945e:	42a3      	cmp	r3, r4
 8009460:	d90c      	bls.n	800947c <_free_r+0x4c>
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	1862      	adds	r2, r4, r1
 8009466:	4293      	cmp	r3, r2
 8009468:	bf04      	itt	eq
 800946a:	681a      	ldreq	r2, [r3, #0]
 800946c:	685b      	ldreq	r3, [r3, #4]
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	bf04      	itt	eq
 8009472:	1852      	addeq	r2, r2, r1
 8009474:	6022      	streq	r2, [r4, #0]
 8009476:	6004      	str	r4, [r0, #0]
 8009478:	e7ec      	b.n	8009454 <_free_r+0x24>
 800947a:	4613      	mov	r3, r2
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	b10a      	cbz	r2, 8009484 <_free_r+0x54>
 8009480:	42a2      	cmp	r2, r4
 8009482:	d9fa      	bls.n	800947a <_free_r+0x4a>
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	1858      	adds	r0, r3, r1
 8009488:	42a0      	cmp	r0, r4
 800948a:	d10b      	bne.n	80094a4 <_free_r+0x74>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	4401      	add	r1, r0
 8009490:	1858      	adds	r0, r3, r1
 8009492:	4282      	cmp	r2, r0
 8009494:	6019      	str	r1, [r3, #0]
 8009496:	d1dd      	bne.n	8009454 <_free_r+0x24>
 8009498:	6810      	ldr	r0, [r2, #0]
 800949a:	6852      	ldr	r2, [r2, #4]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	4401      	add	r1, r0
 80094a0:	6019      	str	r1, [r3, #0]
 80094a2:	e7d7      	b.n	8009454 <_free_r+0x24>
 80094a4:	d902      	bls.n	80094ac <_free_r+0x7c>
 80094a6:	230c      	movs	r3, #12
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	e7d3      	b.n	8009454 <_free_r+0x24>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	1821      	adds	r1, r4, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	bf04      	itt	eq
 80094b4:	6811      	ldreq	r1, [r2, #0]
 80094b6:	6852      	ldreq	r2, [r2, #4]
 80094b8:	6062      	str	r2, [r4, #4]
 80094ba:	bf04      	itt	eq
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	605c      	str	r4, [r3, #4]
 80094c2:	e7c7      	b.n	8009454 <_free_r+0x24>
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	20000184 	.word	0x20000184

080094cc <_malloc_r>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	1ccd      	adds	r5, r1, #3
 80094d0:	f025 0503 	bic.w	r5, r5, #3
 80094d4:	3508      	adds	r5, #8
 80094d6:	2d0c      	cmp	r5, #12
 80094d8:	bf38      	it	cc
 80094da:	250c      	movcc	r5, #12
 80094dc:	2d00      	cmp	r5, #0
 80094de:	4606      	mov	r6, r0
 80094e0:	db01      	blt.n	80094e6 <_malloc_r+0x1a>
 80094e2:	42a9      	cmp	r1, r5
 80094e4:	d903      	bls.n	80094ee <_malloc_r+0x22>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	2000      	movs	r0, #0
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	f000 f857 	bl	80095a0 <__malloc_lock>
 80094f2:	4a21      	ldr	r2, [pc, #132]	; (8009578 <_malloc_r+0xac>)
 80094f4:	6814      	ldr	r4, [r2, #0]
 80094f6:	4621      	mov	r1, r4
 80094f8:	b991      	cbnz	r1, 8009520 <_malloc_r+0x54>
 80094fa:	4c20      	ldr	r4, [pc, #128]	; (800957c <_malloc_r+0xb0>)
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	b91b      	cbnz	r3, 8009508 <_malloc_r+0x3c>
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f83d 	bl	8009580 <_sbrk_r>
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f838 	bl	8009580 <_sbrk_r>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d124      	bne.n	800955e <_malloc_r+0x92>
 8009514:	230c      	movs	r3, #12
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f842 	bl	80095a2 <__malloc_unlock>
 800951e:	e7e4      	b.n	80094ea <_malloc_r+0x1e>
 8009520:	680b      	ldr	r3, [r1, #0]
 8009522:	1b5b      	subs	r3, r3, r5
 8009524:	d418      	bmi.n	8009558 <_malloc_r+0x8c>
 8009526:	2b0b      	cmp	r3, #11
 8009528:	d90f      	bls.n	800954a <_malloc_r+0x7e>
 800952a:	600b      	str	r3, [r1, #0]
 800952c:	50cd      	str	r5, [r1, r3]
 800952e:	18cc      	adds	r4, r1, r3
 8009530:	4630      	mov	r0, r6
 8009532:	f000 f836 	bl	80095a2 <__malloc_unlock>
 8009536:	f104 000b 	add.w	r0, r4, #11
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	f020 0007 	bic.w	r0, r0, #7
 8009540:	1ac3      	subs	r3, r0, r3
 8009542:	d0d3      	beq.n	80094ec <_malloc_r+0x20>
 8009544:	425a      	negs	r2, r3
 8009546:	50e2      	str	r2, [r4, r3]
 8009548:	e7d0      	b.n	80094ec <_malloc_r+0x20>
 800954a:	428c      	cmp	r4, r1
 800954c:	684b      	ldr	r3, [r1, #4]
 800954e:	bf16      	itet	ne
 8009550:	6063      	strne	r3, [r4, #4]
 8009552:	6013      	streq	r3, [r2, #0]
 8009554:	460c      	movne	r4, r1
 8009556:	e7eb      	b.n	8009530 <_malloc_r+0x64>
 8009558:	460c      	mov	r4, r1
 800955a:	6849      	ldr	r1, [r1, #4]
 800955c:	e7cc      	b.n	80094f8 <_malloc_r+0x2c>
 800955e:	1cc4      	adds	r4, r0, #3
 8009560:	f024 0403 	bic.w	r4, r4, #3
 8009564:	42a0      	cmp	r0, r4
 8009566:	d005      	beq.n	8009574 <_malloc_r+0xa8>
 8009568:	1a21      	subs	r1, r4, r0
 800956a:	4630      	mov	r0, r6
 800956c:	f000 f808 	bl	8009580 <_sbrk_r>
 8009570:	3001      	adds	r0, #1
 8009572:	d0cf      	beq.n	8009514 <_malloc_r+0x48>
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	e7db      	b.n	8009530 <_malloc_r+0x64>
 8009578:	20000184 	.word	0x20000184
 800957c:	20000188 	.word	0x20000188

08009580 <_sbrk_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4c06      	ldr	r4, [pc, #24]	; (800959c <_sbrk_r+0x1c>)
 8009584:	2300      	movs	r3, #0
 8009586:	4605      	mov	r5, r0
 8009588:	4608      	mov	r0, r1
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	f7ff fb9a 	bl	8008cc4 <_sbrk>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_sbrk_r+0x1a>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b103      	cbz	r3, 800959a <_sbrk_r+0x1a>
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	20000954 	.word	0x20000954

080095a0 <__malloc_lock>:
 80095a0:	4770      	bx	lr

080095a2 <__malloc_unlock>:
 80095a2:	4770      	bx	lr

080095a4 <_init>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr

080095b0 <_fini>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr
