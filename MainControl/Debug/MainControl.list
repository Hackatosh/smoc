
MainControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b90  0800ed9c  0800ed9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801292c  0801292c  0002292c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012934  08012934  00022934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012938  08012938  00022938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000078c  20000000  0801293c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003078c  2**0
                  CONTENTS
  8 .bss          00009d9c  20000790  20000790  00030790  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  2000a52c  2000a52c  00030790  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003078c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000513c2  00000000  00000000  000307bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000ae22  00000000  00000000  00081b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001ce65  00000000  00000000  0008c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f90  00000000  00000000  000a9808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003008  00000000  00000000  000ab798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003260f  00000000  00000000  000ae7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f940  00000000  00000000  000e0daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef3db  00000000  00000000  001106ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ffaca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b64  00000000  00000000  001ffb48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000790 	.word	0x20000790
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed84 	.word	0x0800ed84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000794 	.word	0x20000794
 80001cc:	0800ed84 	.word	0x0800ed84

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_InitTick+0x3c>)
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_InitTick+0x40>)
{
 8000ee2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	7818      	ldrb	r0, [r3, #0]
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eee:	6810      	ldr	r0, [r2, #0]
 8000ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef4:	f000 fa68 	bl	80013c8 <HAL_SYSTICK_Config>
 8000ef8:	4604      	mov	r4, r0
 8000efa:	b958      	cbnz	r0, 8000f14 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	2d0f      	cmp	r5, #15
 8000efe:	d809      	bhi.n	8000f14 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	4602      	mov	r2, r0
 8000f02:	4629      	mov	r1, r5
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 fa1c 	bl	8001344 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_InitTick+0x44>)
 8000f0e:	4620      	mov	r0, r4
 8000f10:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f14:	2001      	movs	r0, #1
 8000f16:	e7fc      	b.n	8000f12 <HAL_InitTick+0x36>
 8000f18:	200005b4 	.word	0x200005b4
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_Init>:
{
 8000f24:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x30>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f9ed 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff ffc8 	bl	8000edc <HAL_InitTick>
  HAL_MspInit();
 8000f4c:	f00b fd08 	bl	800c960 <HAL_MspInit>
}
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f58:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <HAL_IncTick+0x10>)
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_IncTick+0x14>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	440b      	add	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20001ac4 	.word	0x20001ac4
 8000f6c:	20000000 	.word	0x20000000

08000f70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_GetTick+0x8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20001ac4 	.word	0x20001ac4

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff6 	bl	8000f70 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f84:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	bf1c      	itt	ne
 8000f88:	4b05      	ldrne	r3, [pc, #20]	; (8000fa0 <HAL_Delay+0x24>)
 8000f8a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	bf18      	it	ne
 8000f90:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	f7ff ffed 	bl	8000f70 <HAL_GetTick>
 8000f96:	1b40      	subs	r0, r0, r5
 8000f98:	42a0      	cmp	r0, r4
 8000f9a:	d3fa      	bcc.n	8000f92 <HAL_Delay+0x16>
  {
  }
}
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <HAL_GetUIDw0+0x8>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	1fff7a10 	.word	0x1fff7a10

08000fb0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_GetUIDw1+0x8>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	1fff7a14 	.word	0x1fff7a14

08000fbc <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <HAL_GetUIDw2+0x8>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	1fff7a18 	.word	0x1fff7a18

08000fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fca:	4604      	mov	r4, r0
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	f000 809b 	beq.w	8001108 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fd2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fd4:	b925      	cbnz	r5, 8000fe0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd6:	f00b fcdf 	bl	800c998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fda:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fdc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe2:	06db      	lsls	r3, r3, #27
 8000fe4:	f100 808e 	bmi.w	8001104 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ff8:	4b44      	ldr	r3, [pc, #272]	; (800110c <HAL_ADC_Init+0x144>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001000:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	6861      	ldr	r1, [r4, #4]
 8001006:	430a      	orrs	r2, r1
 8001008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800100a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800100c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800101c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800101e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001020:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001022:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001026:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	430a      	orrs	r2, r1
 800102c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800102e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001030:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	430a      	orrs	r2, r1
 800103c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800103e:	4934      	ldr	r1, [pc, #208]	; (8001110 <HAL_ADC_Init+0x148>)
 8001040:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001042:	428a      	cmp	r2, r1
 8001044:	d052      	beq.n	80010ec <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001046:	6899      	ldr	r1, [r3, #8]
 8001048:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800104c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	430a      	orrs	r2, r1
 8001052:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001054:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001056:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800105c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001062:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001064:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001066:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001068:	f022 0202 	bic.w	r2, r2, #2
 800106c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001074:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001076:	f894 2020 	ldrb.w	r2, [r4, #32]
 800107a:	2a00      	cmp	r2, #0
 800107c:	d03e      	beq.n	80010fc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800107e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001080:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800108e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	3901      	subs	r1, #1
 8001094:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001098:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800109c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800109e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a6:	3901      	subs	r1, #1
 80010a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010b0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010c0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010c4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010cc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010ce:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010e4:	2300      	movs	r3, #0
 80010e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010fa:	e7b2      	b.n	8001062 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001102:	e7c9      	b.n	8001098 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001104:	2001      	movs	r0, #1
 8001106:	e7ed      	b.n	80010e4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	e7ee      	b.n	80010ea <HAL_ADC_Init+0x122>
 800110c:	40012300 	.word	0x40012300
 8001110:	0f000001 	.word	0x0f000001

08001114 <HAL_ADC_Start>:
{
 8001114:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800111a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d061      	beq.n	80011e6 <HAL_ADC_Start+0xd2>
 8001122:	2301      	movs	r3, #1
 8001124:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001128:	6803      	ldr	r3, [r0, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	07d1      	lsls	r1, r2, #31
 800112e:	d505      	bpl.n	800113c <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	07d2      	lsls	r2, r2, #31
 8001134:	d414      	bmi.n	8001160 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8001136:	2000      	movs	r0, #0
}
 8001138:	b002      	add	sp, #8
 800113a:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 800113c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113e:	492b      	ldr	r1, [pc, #172]	; (80011ec <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <HAL_ADC_Start+0xdc>)
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	fbb2 f2f1 	udiv	r2, r2, r1
 800114e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8001152:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001154:	9a01      	ldr	r2, [sp, #4]
 8001156:	2a00      	cmp	r2, #0
 8001158:	d0ea      	beq.n	8001130 <HAL_ADC_Start+0x1c>
      counter--;
 800115a:	9a01      	ldr	r2, [sp, #4]
 800115c:	3a01      	subs	r2, #1
 800115e:	e7f8      	b.n	8001152 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001160:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001174:	bf41      	itttt	mi
 8001176:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001178:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800117c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001180:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001182:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001188:	bf1c      	itt	ne
 800118a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800118c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001190:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001192:	2200      	movs	r2, #0
 8001194:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001198:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800119c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <HAL_ADC_Start+0xe0>)
 80011a0:	6851      	ldr	r1, [r2, #4]
 80011a2:	f011 0f1f 	tst.w	r1, #31
 80011a6:	4914      	ldr	r1, [pc, #80]	; (80011f8 <HAL_ADC_Start+0xe4>)
 80011a8:	d11a      	bne.n	80011e0 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d006      	beq.n	80011bc <HAL_ADC_Start+0xa8>
 80011ae:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d10b      	bne.n	80011ce <HAL_ADC_Start+0xba>
 80011b6:	6852      	ldr	r2, [r2, #4]
 80011b8:	06d2      	lsls	r2, r2, #27
 80011ba:	d1bc      	bne.n	8001136 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011bc:	6898      	ldr	r0, [r3, #8]
 80011be:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011c2:	d1b8      	bne.n	8001136 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e7b4      	b.n	8001138 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ce:	490b      	ldr	r1, [pc, #44]	; (80011fc <HAL_ADC_Start+0xe8>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d1b0      	bne.n	8001136 <HAL_ADC_Start+0x22>
 80011d4:	6852      	ldr	r2, [r2, #4]
 80011d6:	f002 021f 	and.w	r2, r2, #31
 80011da:	2a0f      	cmp	r2, #15
 80011dc:	d9ee      	bls.n	80011bc <HAL_ADC_Start+0xa8>
 80011de:	e7aa      	b.n	8001136 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e0:	428b      	cmp	r3, r1
 80011e2:	d1a8      	bne.n	8001136 <HAL_ADC_Start+0x22>
 80011e4:	e7ea      	b.n	80011bc <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80011e6:	2002      	movs	r0, #2
 80011e8:	e7a6      	b.n	8001138 <HAL_ADC_Start+0x24>
 80011ea:	bf00      	nop
 80011ec:	000f4240 	.word	0x000f4240
 80011f0:	200005b4 	.word	0x200005b4
 80011f4:	40012300 	.word	0x40012300
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40012200 	.word	0x40012200

08001200 <HAL_ADC_ConfigChannel>:
{
 8001200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001206:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800120a:	2b01      	cmp	r3, #1
 800120c:	d07e      	beq.n	800130c <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800120e:	680d      	ldr	r5, [r1, #0]
 8001210:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8001212:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001214:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001216:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800121a:	b2ac      	uxth	r4, r5
 800121c:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800121e:	d929      	bls.n	8001274 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001220:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001224:	68df      	ldr	r7, [r3, #12]
 8001226:	3a1e      	subs	r2, #30
 8001228:	f04f 0c07 	mov.w	ip, #7
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	ea27 070c 	bic.w	r7, r7, ip
 8001234:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001236:	68df      	ldr	r7, [r3, #12]
 8001238:	fa06 f202 	lsl.w	r2, r6, r2
 800123c:	433a      	orrs	r2, r7
 800123e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001240:	6849      	ldr	r1, [r1, #4]
 8001242:	2906      	cmp	r1, #6
 8001244:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001248:	d824      	bhi.n	8001294 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800124c:	3a05      	subs	r2, #5
 800124e:	261f      	movs	r6, #31
 8001250:	4096      	lsls	r6, r2
 8001252:	ea21 0106 	bic.w	r1, r1, r6
 8001256:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125a:	fa04 f202 	lsl.w	r2, r4, r2
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001262:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <HAL_ADC_ConfigChannel+0x110>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d031      	beq.n	80012cc <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8001268:	2300      	movs	r3, #0
 800126a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800126e:	4618      	mov	r0, r3
}
 8001270:	b003      	add	sp, #12
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001274:	691f      	ldr	r7, [r3, #16]
 8001276:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800127a:	f04f 0c07 	mov.w	ip, #7
 800127e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001282:	ea27 070c 	bic.w	r7, r7, ip
 8001286:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001288:	691f      	ldr	r7, [r3, #16]
 800128a:	fa06 f202 	lsl.w	r2, r6, r2
 800128e:	433a      	orrs	r2, r7
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	e7d5      	b.n	8001240 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001294:	290c      	cmp	r1, #12
 8001296:	f04f 011f 	mov.w	r1, #31
 800129a:	d80b      	bhi.n	80012b4 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800129c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800129e:	3a23      	subs	r2, #35	; 0x23
 80012a0:	4091      	lsls	r1, r2
 80012a2:	ea26 0101 	bic.w	r1, r6, r1
 80012a6:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012aa:	fa04 f202 	lsl.w	r2, r4, r2
 80012ae:	430a      	orrs	r2, r1
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
 80012b2:	e7d6      	b.n	8001262 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80012b6:	3a41      	subs	r2, #65	; 0x41
 80012b8:	4091      	lsls	r1, r2
 80012ba:	ea26 0101 	bic.w	r1, r6, r1
 80012be:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012c2:	fa04 f202 	lsl.w	r2, r4, r2
 80012c6:	430a      	orrs	r2, r1
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ca:	e7ca      	b.n	8001262 <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012cc:	2d12      	cmp	r5, #18
 80012ce:	d104      	bne.n	80012da <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012d0:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_ADC_ConfigChannel+0x114>)
 80012d2:	6853      	ldr	r3, [r2, #4]
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012da:	f1a5 0310 	sub.w	r3, r5, #16
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d8c2      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <HAL_ADC_ConfigChannel+0x114>)
 80012e4:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012e6:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012ec:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012ee:	d1bb      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_ADC_ConfigChannel+0x118>)
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_ADC_ConfigChannel+0x11c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012fa:	230a      	movs	r3, #10
 80012fc:	4353      	muls	r3, r2
        counter--;
 80012fe:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0b0      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8001306:	9b01      	ldr	r3, [sp, #4]
 8001308:	3b01      	subs	r3, #1
 800130a:	e7f8      	b.n	80012fe <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 800130c:	2002      	movs	r0, #2
 800130e:	e7af      	b.n	8001270 <HAL_ADC_ConfigChannel+0x70>
 8001310:	40012000 	.word	0x40012000
 8001314:	40012300 	.word	0x40012300
 8001318:	200005b4 	.word	0x200005b4
 800131c:	000f4240 	.word	0x000f4240

08001320 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001322:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	0200      	lsls	r0, r0, #8
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800133a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800133c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b570      	push	{r4, r5, r6, lr}
 8001348:	68dc      	ldr	r4, [r3, #12]
 800134a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134e:	f1c4 0507 	rsb	r5, r4, #7
 8001352:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001354:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	bf28      	it	cs
 800135a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001360:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001362:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	bf8c      	ite	hi
 8001368:	3c03      	subhi	r4, #3
 800136a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	ea21 0303 	bic.w	r3, r1, r3
 8001370:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001372:	fa06 f404 	lsl.w	r4, r6, r4
 8001376:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800137a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	bfa8      	it	ge
 8001382:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001386:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	bfbc      	itt	lt
 800138c:	f000 000f 	andlt.w	r0, r0, #15
 8001390:	4a05      	ldrlt	r2, [pc, #20]	; (80013a8 <HAL_NVIC_SetPriority+0x64>)
 8001392:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	bfaa      	itet	ge
 8001396:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	e000ed14 	.word	0xe000ed14

080013ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	db08      	blt.n	80013c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b0:	0942      	lsrs	r2, r0, #5
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 001f 	and.w	r0, r0, #31
 80013b8:	fa03 f000 	lsl.w	r0, r3, r0
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <HAL_NVIC_EnableIRQ+0x18>)
 80013be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	3801      	subs	r0, #1
 80013ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013ce:	d20a      	bcs.n	80013e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	21f0      	movs	r1, #240	; 0xf0
 80013d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80013f4:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80013f6:	4604      	mov	r4, r0
 80013f8:	b168      	cbz	r0, 8001416 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80013fa:	7903      	ldrb	r3, [r0, #4]
 80013fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001400:	b913      	cbnz	r3, 8001408 <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001402:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001404:	f00b fafa 	bl	800c9fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001408:	2302      	movs	r3, #2
 800140a:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800140c:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800140e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001410:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001412:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8001414:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
 8001418:	e7fc      	b.n	8001414 <HAL_DAC_Init+0x20>

0800141a <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800141a:	7943      	ldrb	r3, [r0, #5]
 800141c:	2b01      	cmp	r3, #1
{
 800141e:	b510      	push	{r4, lr}
 8001420:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001424:	d018      	beq.n	8001458 <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001426:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001428:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 800142a:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800142c:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 800142e:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001430:	408a      	lsls	r2, r1
 8001432:	4322      	orrs	r2, r4
 8001434:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001436:	b989      	cbnz	r1, 800145c <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001438:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800143a:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800143c:	074c      	lsls	r4, r1, #29
 800143e:	d507      	bpl.n	8001450 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001440:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001444:	2a38      	cmp	r2, #56	; 0x38
 8001446:	d103      	bne.n	8001450 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800144e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001450:	2301      	movs	r3, #1
 8001452:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001454:	2300      	movs	r3, #0
 8001456:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001458:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 800145a:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800145c:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800145e:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001460:	0349      	lsls	r1, r1, #13
 8001462:	d5f5      	bpl.n	8001450 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001464:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001468:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 800146c:	d1f0      	bne.n	8001450 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	f042 0202 	orr.w	r2, r2, #2
 8001474:	e7eb      	b.n	800144e <HAL_DAC_Start+0x34>

08001476 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001476:	7943      	ldrb	r3, [r0, #5]
 8001478:	2b01      	cmp	r3, #1
{
 800147a:	b530      	push	{r4, r5, lr}
 800147c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001480:	d018      	beq.n	80014b4 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001482:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001484:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001486:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001488:	f640 75fe 	movw	r5, #4094	; 0xffe
 800148c:	4095      	lsls	r5, r2
 800148e:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001492:	e9d1 3100 	ldrd	r3, r1, [r1]
 8001496:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001498:	4093      	lsls	r3, r2
 800149a:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800149c:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	21c0      	movs	r1, #192	; 0xc0
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014aa:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80014ac:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80014ae:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014b0:	2300      	movs	r3, #0
 80014b2:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80014b4:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80014b6:	bd30      	pop	{r4, r5, pc}

080014b8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ca:	2305      	movs	r3, #5
 80014cc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80014d8:	2000      	movs	r0, #0
}
 80014da:	4770      	bx	lr

080014dc <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80014dc:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <ETH_Delay.constprop.4+0x20>)
 80014e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014ea:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 80014ec:	bf00      	nop
  } 
  while (Delay --);
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f9      	bne.n	80014ec <ETH_Delay.constprop.4+0x10>
}
 80014f8:	b002      	add	sp, #8
 80014fa:	4770      	bx	lr
 80014fc:	200005b4 	.word	0x200005b4

08001500 <ETH_FlushTransmitFIFO>:
{
 8001500:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001506:	f241 0118 	movw	r1, #4120	; 0x1018
 800150a:	6803      	ldr	r3, [r0, #0]
 800150c:	585a      	ldr	r2, [r3, r1]
 800150e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001512:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001514:	585b      	ldr	r3, [r3, r1]
 8001516:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001518:	f7ff ffe0 	bl	80014dc <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 800151c:	9a01      	ldr	r2, [sp, #4]
 800151e:	6803      	ldr	r3, [r0, #0]
 8001520:	505a      	str	r2, [r3, r1]
}
 8001522:	b003      	add	sp, #12
 8001524:	f85d fb04 	ldr.w	pc, [sp], #4

08001528 <ETH_MACDMAConfig>:
{
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800152c:	b129      	cbz	r1, 800153a <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 800152e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001536:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800153a:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 800153c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800153e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001540:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  tmpreg1 = (heth->Instance)->MACCR;
 8001544:	6815      	ldr	r5, [r2, #0]
                       macinit.LoopbackMode |
 8001546:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800154a:	4830      	ldr	r0, [pc, #192]	; (800160c <ETH_MACDMAConfig+0xe4>)
 800154c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001550:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001554:	bf0c      	ite	eq
 8001556:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800155a:	2100      	movne	r1, #0
 800155c:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800155e:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001560:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001562:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001564:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001566:	f7ff fd09 	bl	8000f7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800156a:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800156c:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 800156e:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001570:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001572:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001574:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001576:	f7ff fd01 	bl	8000f7c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800157e:	2500      	movs	r5, #0
 8001580:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001582:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001584:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001586:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800158a:	0412      	lsls	r2, r2, #16
 800158c:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800158e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001592:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001594:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8001596:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001598:	f7ff fcf0 	bl	8000f7c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800159c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800159e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80015a0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015a2:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80015a4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a6:	f7ff fce9 	bl	8000f7c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015aa:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015ae:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015b0:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b4:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015b6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015b8:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015ba:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80015be:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015c2:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015c4:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c6:	f7ff fcd9 	bl	8000f7c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015ca:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80015ce:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d4:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015d6:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80015d8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015da:	f7ff fccf 	bl	8000f7c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015e4:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015e6:	69a3      	ldr	r3, [r4, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80015ec:	f241 011c 	movw	r1, #4124	; 0x101c
 80015f0:	5853      	ldr	r3, [r2, r1]
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fa:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015fc:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001600:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001602:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001604:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <ETH_MACDMAConfig+0xf4>)
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	bd70      	pop	{r4, r5, r6, pc}
 800160c:	ff20810f 	.word	0xff20810f
 8001610:	f8de3f23 	.word	0xf8de3f23
 8001614:	02c12080 	.word	0x02c12080
 8001618:	40028040 	.word	0x40028040
 800161c:	40028044 	.word	0x40028044

08001620 <HAL_ETH_DMATxDescListInit>:
{
 8001620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8001624:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001628:	2c01      	cmp	r4, #1
 800162a:	f04f 0402 	mov.w	r4, #2
 800162e:	d031      	beq.n	8001694 <HAL_ETH_DMATxDescListInit+0x74>
 8001630:	2501      	movs	r5, #1
 8001632:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001636:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800163a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 800163c:	460c      	mov	r4, r1
 800163e:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001640:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001644:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8001648:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 800164c:	429d      	cmp	r5, r3
 800164e:	d10c      	bne.n	800166a <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001650:	6802      	ldr	r2, [r0, #0]
 8001652:	f241 0310 	movw	r3, #4112	; 0x1010
 8001656:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001658:	2301      	movs	r3, #1
 800165a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800165e:	2300      	movs	r3, #0
 8001660:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001664:	4618      	mov	r0, r3
}
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800166a:	fb0c 2605 	mla	r6, ip, r5, r2
 800166e:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001670:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001672:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001674:	b91e      	cbnz	r6, 800167e <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001676:	6826      	ldr	r6, [r4, #0]
 8001678:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800167c:	6026      	str	r6, [r4, #0]
 800167e:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001682:	45ae      	cmp	lr, r5
 8001684:	bf94      	ite	ls
 8001686:	4688      	movls	r8, r1
 8001688:	46b0      	movhi	r8, r6
 800168a:	f8c4 800c 	str.w	r8, [r4, #12]
 800168e:	3501      	adds	r5, #1
 8001690:	4634      	mov	r4, r6
 8001692:	e7db      	b.n	800164c <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001694:	4620      	mov	r0, r4
 8001696:	e7e6      	b.n	8001666 <HAL_ETH_DMATxDescListInit+0x46>

08001698 <HAL_ETH_DMARxDescListInit>:
{
 8001698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 800169c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80016a0:	2c01      	cmp	r4, #1
 80016a2:	f04f 0402 	mov.w	r4, #2
 80016a6:	d02f      	beq.n	8001708 <HAL_ETH_DMARxDescListInit+0x70>
 80016a8:	2501      	movs	r5, #1
 80016aa:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016ae:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80016b2:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80016b4:	460c      	mov	r4, r1
 80016b6:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016b8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016bc:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016c0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80016c4:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80016c8:	42ab      	cmp	r3, r5
 80016ca:	d10c      	bne.n	80016e6 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80016d2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80016da:	2300      	movs	r3, #0
 80016dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80016e0:	4618      	mov	r0, r3
}
 80016e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016e6:	fb0e 2605 	mla	r6, lr, r5, r2
 80016ea:	60a6      	str	r6, [r4, #8]
 80016ec:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80016f0:	45a8      	cmp	r8, r5
 80016f2:	bf94      	ite	ls
 80016f4:	4689      	movls	r9, r1
 80016f6:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016f8:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016fa:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80016fe:	f8c4 900c 	str.w	r9, [r4, #12]
 8001702:	3501      	adds	r5, #1
 8001704:	4634      	mov	r4, r6
 8001706:	e7df      	b.n	80016c8 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8001708:	4620      	mov	r0, r4
 800170a:	e7ea      	b.n	80016e2 <HAL_ETH_DMARxDescListInit+0x4a>

0800170c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800170c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001710:	2b01      	cmp	r3, #1
{
 8001712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001714:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8001718:	d068      	beq.n	80017ec <HAL_ETH_TransmitFrame+0xe0>
 800171a:	2201      	movs	r2, #1
 800171c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001720:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8001724:	b929      	cbnz	r1, 8001732 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8001726:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800172a:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800172e:	4610      	mov	r0, r2
}
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001732:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001734:	681c      	ldr	r4, [r3, #0]
 8001736:	2c00      	cmp	r4, #0
 8001738:	da06      	bge.n	8001748 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800173a:	2312      	movs	r3, #18
 800173c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001740:	2300      	movs	r3, #0
 8001742:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8001746:	e7f2      	b.n	800172e <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001748:	f240 54f4 	movw	r4, #1524	; 0x5f4
 800174c:	42a1      	cmp	r1, r4
 800174e:	d92e      	bls.n	80017ae <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001750:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001754:	fb04 1412 	mls	r4, r4, r2, r1
 8001758:	b33c      	cbz	r4, 80017aa <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 800175a:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800175c:	4c24      	ldr	r4, [pc, #144]	; (80017f0 <HAL_ETH_TransmitFrame+0xe4>)
 800175e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8001762:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001766:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800176a:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800176c:	f240 57f4 	movw	r7, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8001770:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001772:	681d      	ldr	r5, [r3, #0]
 8001774:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001778:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 800177a:	b91c      	cbnz	r4, 8001784 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800177c:	681d      	ldr	r5, [r3, #0]
 800177e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001782:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8001784:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001786:	bf08      	it	eq
 8001788:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800178a:	605f      	str	r7, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800178c:	bf04      	itt	eq
 800178e:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8001792:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001794:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001796:	bf08      	it	eq
 8001798:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 800179a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800179c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80017a0:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017a2:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017a4:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80017a6:	d1e4      	bne.n	8001772 <HAL_ETH_TransmitFrame+0x66>
 80017a8:	e00d      	b.n	80017c6 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80017aa:	2a01      	cmp	r2, #1
 80017ac:	d1d6      	bne.n	800175c <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017b4:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017b6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017b8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017c0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017c2:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017c8:	f241 0214 	movw	r2, #4116	; 0x1014
 80017cc:	6803      	ldr	r3, [r0, #0]
 80017ce:	5899      	ldr	r1, [r3, r2]
 80017d0:	0749      	lsls	r1, r1, #29
 80017d2:	d505      	bpl.n	80017e0 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017d4:	2104      	movs	r1, #4
 80017d6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80017d8:	f241 0204 	movw	r2, #4100	; 0x1004
 80017dc:	2100      	movs	r1, #0
 80017de:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80017e6:	2300      	movs	r3, #0
 80017e8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80017ec:	4618      	mov	r0, r3
 80017ee:	e79f      	b.n	8001730 <HAL_ETH_TransmitFrame+0x24>
 80017f0:	fffffa0c 	.word	0xfffffa0c

080017f4 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80017f4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80017f8:	2b01      	cmp	r3, #1
{
 80017fa:	b530      	push	{r4, r5, lr}
 80017fc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8001800:	d023      	beq.n	800184a <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8001802:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001806:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001808:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 800180a:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800180c:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 800180e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001812:	db27      	blt.n	8001864 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800181c:	d017      	beq.n	800184e <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 800181e:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001820:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8001822:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001824:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001826:	bf08      	it	eq
 8001828:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800182a:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 800182c:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800182e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001832:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8001834:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001836:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 800183c:	2301      	movs	r3, #1
 800183e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001842:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001844:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8001846:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800184e:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001850:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001852:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8001854:	bf53      	iteet	pl
 8001856:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount = 1U;
 8001858:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800185a:	e9c0 320c 	strdmi	r3, r2, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 800185e:	3301      	addpl	r3, #1
 8001860:	bf58      	it	pl
 8001862:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8001864:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8001866:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8001868:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800186c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001870:	e7eb      	b.n	800184a <HAL_ETH_GetReceivedFrame+0x56>

08001872 <HAL_ETH_ReadPHYRegister>:
{
 8001872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001874:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001878:	2b82      	cmp	r3, #130	; 0x82
{
 800187a:	4605      	mov	r5, r0
 800187c:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800187e:	d030      	beq.n	80018e2 <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001880:	2382      	movs	r3, #130	; 0x82
 8001882:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8001886:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001888:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 800188a:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800188c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8001890:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001894:	f000 001c 	and.w	r0, r0, #28
 8001898:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800189a:	8a2c      	ldrh	r4, [r5, #16]
 800189c:	02e4      	lsls	r4, r4, #11
 800189e:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018a0:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 80018a2:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80018a4:	f7ff fb64 	bl	8000f70 <HAL_GetTick>
 80018a8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018aa:	f014 0001 	ands.w	r0, r4, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80018be:	e00c      	b.n	80018da <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80018c0:	f7ff fb56 	bl	8000f70 <HAL_GetTick>
 80018c4:	1bc0      	subs	r0, r0, r7
 80018c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80018ca:	d307      	bcc.n	80018dc <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80018d2:	2300      	movs	r3, #0
 80018d4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
}
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	691c      	ldr	r4, [r3, #16]
 80018e0:	e7e3      	b.n	80018aa <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80018e2:	2002      	movs	r0, #2
 80018e4:	e7f9      	b.n	80018da <HAL_ETH_ReadPHYRegister+0x68>

080018e6 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018e6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80018ea:	2b42      	cmp	r3, #66	; 0x42
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018f0:	d02e      	beq.n	8001950 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018f2:	2342      	movs	r3, #66	; 0x42
 80018f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80018f8:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018fa:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80018fc:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018fe:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8001902:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001906:	f000 001c 	and.w	r0, r0, #28
 800190a:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800190c:	8a2c      	ldrh	r4, [r5, #16]
 800190e:	02e4      	lsls	r4, r4, #11
 8001910:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001912:	4304      	orrs	r4, r0
 8001914:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001916:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001918:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800191a:	f7ff fb29 	bl	8000f70 <HAL_GetTick>
 800191e:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001920:	f014 0001 	ands.w	r0, r4, #1
 8001924:	d103      	bne.n	800192e <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8001926:	2301      	movs	r3, #1
 8001928:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800192c:	e00c      	b.n	8001948 <HAL_ETH_WritePHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800192e:	f7ff fb1f 	bl	8000f70 <HAL_GetTick>
 8001932:	1b80      	subs	r0, r0, r6
 8001934:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001938:	d307      	bcc.n	800194a <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 800193a:	2301      	movs	r3, #1
 800193c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001940:	2300      	movs	r3, #0
 8001942:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
}
 8001948:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 800194a:	682b      	ldr	r3, [r5, #0]
 800194c:	691c      	ldr	r4, [r3, #16]
 800194e:	e7e7      	b.n	8001920 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8001950:	2002      	movs	r0, #2
 8001952:	e7f9      	b.n	8001948 <HAL_ETH_WritePHYRegister+0x62>

08001954 <HAL_ETH_Init>:
{
 8001954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800195a:	4604      	mov	r4, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	f000 80de 	beq.w	8001b1e <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8001962:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001966:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800196a:	b91b      	cbnz	r3, 8001974 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 800196c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8001970:	f00a f996 	bl	800bca0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_ETH_Init+0x1d0>)
 800197a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800198c:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_ETH_Init+0x1d4>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001994:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	6a21      	ldr	r1, [r4, #32]
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019ac:	f7ff fae0 	bl	8000f70 <HAL_GetTick>
 80019b0:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	07d0      	lsls	r0, r2, #31
 80019bc:	d41d      	bmi.n	80019fa <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019be:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80019c0:	f001 f8fc 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_ETH_Init+0x1d8>)
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <HAL_ETH_Init+0x1dc>)
 80019c8:	4403      	add	r3, r0
 80019ca:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019cc:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019d0:	d822      	bhi.n	8001a18 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019d2:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019d6:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019dc:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff ff80 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 80019e6:	4605      	mov	r5, r0
 80019e8:	b368      	cbz	r0, 8001a46 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 80019ea:	2101      	movs	r1, #1
 80019ec:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 80019ee:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80019f0:	f7ff fd9a 	bl	8001528 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80019f4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80019f8:	e00b      	b.n	8001a12 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019fa:	f7ff fab9 	bl	8000f70 <HAL_GetTick>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001a04:	d9d5      	bls.n	80019b2 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a06:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001a08:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a0a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001a12:	4628      	mov	r0, r5
 8001a14:	b003      	add	sp, #12
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_ETH_Init+0x1e0>)
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_ETH_Init+0x1e4>)
 8001a1c:	4403      	add	r3, r0
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d802      	bhi.n	8001a28 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a22:	f045 050c 	orr.w	r5, r5, #12
 8001a26:	e7d6      	b.n	80019d6 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a28:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_ETH_Init+0x1e8>)
 8001a2a:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_ETH_Init+0x1ec>)
 8001a2c:	4403      	add	r3, r0
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d9d1      	bls.n	80019d6 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_ETH_Init+0x1f0>)
 8001a34:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <HAL_ETH_Init+0x1f4>)
 8001a36:	4403      	add	r3, r0
 8001a38:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a3a:	bf94      	ite	ls
 8001a3c:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a40:	f045 0510 	orrhi.w	r5, r5, #16
 8001a44:	e7c7      	b.n	80019d6 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8001a46:	20ff      	movs	r0, #255	; 0xff
 8001a48:	f7ff fa98 	bl	8000f7c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a4c:	6863      	ldr	r3, [r4, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d053      	beq.n	8001afa <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8001a52:	f7ff fa8d 	bl	8000f70 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a56:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a5a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a5c:	466a      	mov	r2, sp
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff ff06 	bl	8001872 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a66:	f7ff fa83 	bl	8000f70 <HAL_GetTick>
 8001a6a:	1b80      	subs	r0, r0, r6
 8001a6c:	42b8      	cmp	r0, r7
 8001a6e:	d90b      	bls.n	8001a88 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8001a70:	2101      	movs	r1, #1
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fd58 	bl	8001528 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001a84:	2503      	movs	r5, #3
 8001a86:	e7c4      	b.n	8001a12 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001a88:	9b00      	ldr	r3, [sp, #0]
 8001a8a:	0759      	lsls	r1, r3, #29
 8001a8c:	d5e6      	bpl.n	8001a5c <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a92:	2100      	movs	r1, #0
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff ff26 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1a5      	bne.n	80019ea <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8001a9e:	f7ff fa67 	bl	8000f70 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001aa2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001aa6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001aa8:	466a      	mov	r2, sp
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fee0 	bl	8001872 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ab2:	f7ff fa5d 	bl	8000f70 <HAL_GetTick>
 8001ab6:	1b80      	subs	r0, r0, r6
 8001ab8:	42b8      	cmp	r0, r7
 8001aba:	d8d9      	bhi.n	8001a70 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	069a      	lsls	r2, r3, #26
 8001ac0:	d5f2      	bpl.n	8001aa8 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ac2:	466a      	mov	r2, sp
 8001ac4:	211f      	movs	r1, #31
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff fed3 	bl	8001872 <HAL_ETH_ReadPHYRegister>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d18c      	bne.n	80019ea <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001ad6:	bf18      	it	ne
 8001ad8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001adc:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ade:	bf4c      	ite	mi
 8001ae0:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ae2:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ae6:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ae8:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001aea:	2100      	movs	r1, #0
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fd1b 	bl	8001528 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001af8:	e78b      	b.n	8001a12 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001afa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8001afe:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001b00:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001b04:	b292      	uxth	r2, r2
 8001b06:	4629      	mov	r1, r5
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff feec 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	f47f af6b 	bne.w	80019ea <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001b14:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001b18:	f7ff fa30 	bl	8000f7c <HAL_Delay>
 8001b1c:	e7e5      	b.n	8001aea <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8001b1e:	2501      	movs	r5, #1
 8001b20:	e777      	b.n	8001a12 <HAL_ETH_Init+0xbe>
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	feced300 	.word	0xfeced300
 8001b30:	00e4e1bf 	.word	0x00e4e1bf
 8001b34:	fde9f140 	.word	0xfde9f140
 8001b38:	017d783f 	.word	0x017d783f
 8001b3c:	fc6c7900 	.word	0xfc6c7900
 8001b40:	026259ff 	.word	0x026259ff
 8001b44:	fa0a1f00 	.word	0xfa0a1f00
 8001b48:	02faf07f 	.word	0x02faf07f

08001b4c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8001b4c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001b50:	2b01      	cmp	r3, #1
{  
 8001b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b54:	4605      	mov	r5, r0
 8001b56:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8001b5a:	d031      	beq.n	8001bc0 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8001b5c:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b5e:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8001b60:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8001b64:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b66:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8001b68:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8001b6e:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b72:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b78:	f7ff fcb0 	bl	80014dc <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	9a01      	ldr	r2, [sp, #4]
 8001b80:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001b82:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f042 0204 	orr.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b90:	f7ff fca4 	bl	80014dc <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	9a00      	ldr	r2, [sp, #0]
 8001b98:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff fcb0 	bl	8001500 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001ba0:	682a      	ldr	r2, [r5, #0]
 8001ba2:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8001ba6:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001ba8:	58d1      	ldr	r1, [r2, r3]
 8001baa:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001bae:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001bb0:	58d1      	ldr	r1, [r2, r3]
 8001bb2:	f041 0102 	orr.w	r1, r1, #2
 8001bb6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001bb8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001bbc:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001d7c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd0:	4a68      	ldr	r2, [pc, #416]	; (8001d74 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001d80 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001bda:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001be0:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be4:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8001be8:	45b4      	cmp	ip, r6
 8001bea:	f040 80ae 	bne.w	8001d4a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bee:	684c      	ldr	r4, [r1, #4]
 8001bf0:	f024 0710 	bic.w	r7, r4, #16
 8001bf4:	2f02      	cmp	r7, #2
 8001bf6:	d116      	bne.n	8001c26 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001bfc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c00:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c0c:	f04f 0e0f 	mov.w	lr, #15
 8001c10:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001c14:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c18:	690d      	ldr	r5, [r1, #16]
 8001c1a:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c1e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	f8ca 5020 	str.w	r5, [sl, #32]
 8001c26:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001c2c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c30:	fa05 f50a 	lsl.w	r5, r5, sl
 8001c34:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c36:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3e:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c42:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c44:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c48:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001c4a:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	d811      	bhi.n	8001c74 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c50:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c52:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c56:	68cf      	ldr	r7, [r1, #12]
 8001c58:	fa07 fe0a 	lsl.w	lr, r7, sl
 8001c5c:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8001c60:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c68:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001c6c:	409f      	lsls	r7, r3
 8001c6e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001c72:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c74:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	688f      	ldr	r7, [r1, #8]
 8001c7a:	fa07 f70a 	lsl.w	r7, r7, sl
 8001c7e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001c80:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c82:	00e5      	lsls	r5, r4, #3
 8001c84:	d561      	bpl.n	8001d4a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	f04f 0b00 	mov.w	fp, #0
 8001c8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8001c8e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c92:	4d39      	ldr	r5, [pc, #228]	; (8001d78 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001c98:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001c9c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001ca0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001ca4:	9703      	str	r7, [sp, #12]
 8001ca6:	9f03      	ldr	r7, [sp, #12]
 8001ca8:	f023 0703 	bic.w	r7, r3, #3
 8001cac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001cb0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cc0:	f04f 0c0f 	mov.w	ip, #15
 8001cc4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cca:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	d043      	beq.n	8001d58 <HAL_GPIO_Init+0x194>
 8001cd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cd4:	42a8      	cmp	r0, r5
 8001cd6:	d041      	beq.n	8001d5c <HAL_GPIO_Init+0x198>
 8001cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cdc:	42a8      	cmp	r0, r5
 8001cde:	d03f      	beq.n	8001d60 <HAL_GPIO_Init+0x19c>
 8001ce0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce4:	42a8      	cmp	r0, r5
 8001ce6:	d03d      	beq.n	8001d64 <HAL_GPIO_Init+0x1a0>
 8001ce8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cec:	42a8      	cmp	r0, r5
 8001cee:	d03b      	beq.n	8001d68 <HAL_GPIO_Init+0x1a4>
 8001cf0:	4548      	cmp	r0, r9
 8001cf2:	d03b      	beq.n	8001d6c <HAL_GPIO_Init+0x1a8>
 8001cf4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001cf8:	42a8      	cmp	r0, r5
 8001cfa:	d039      	beq.n	8001d70 <HAL_GPIO_Init+0x1ac>
 8001cfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d00:	42a8      	cmp	r0, r5
 8001d02:	bf14      	ite	ne
 8001d04:	2508      	movne	r5, #8
 8001d06:	2507      	moveq	r5, #7
 8001d08:	fa05 f50e 	lsl.w	r5, r5, lr
 8001d0c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001d12:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	bf0c      	ite	eq
 8001d1c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d1e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001d20:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001d22:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d28:	bf0c      	ite	eq
 8001d2a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d2c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001d2e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d32:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d36:	bf0c      	ite	eq
 8001d38:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d3a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001d3c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001d3e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d40:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001d42:	bf54      	ite	pl
 8001d44:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001d46:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001d48:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	f47f af44 	bne.w	8001bda <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001d52:	b005      	add	sp, #20
 8001d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d58:	465d      	mov	r5, fp
 8001d5a:	e7d5      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d5c:	2501      	movs	r5, #1
 8001d5e:	e7d3      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d60:	2502      	movs	r5, #2
 8001d62:	e7d1      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d64:	2503      	movs	r5, #3
 8001d66:	e7cf      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d68:	2504      	movs	r5, #4
 8001d6a:	e7cd      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d6c:	2505      	movs	r5, #5
 8001d6e:	e7cb      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d70:	2506      	movs	r5, #6
 8001d72:	e7c9      	b.n	8001d08 <HAL_GPIO_Init+0x144>
 8001d74:	40013c00 	.word	0x40013c00
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40021400 	.word	0x40021400

08001d84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	b10a      	cbz	r2, 8001d8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	6181      	str	r1, [r0, #24]
  }
}
 8001d88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	0409      	lsls	r1, r1, #16
 8001d8c:	e7fb      	b.n	8001d86 <HAL_GPIO_WritePin+0x2>

08001d8e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d8e:	6943      	ldr	r3, [r0, #20]
 8001d90:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d94:	bf08      	it	eq
 8001d96:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d98:	6181      	str	r1, [r0, #24]
  }
}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001da0:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001da2:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8001da6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001daa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8001dae:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001db2:	2801      	cmp	r0, #1
 8001db4:	d027      	beq.n	8001e06 <HAL_HCD_HC_Init+0x6a>
  hhcd->hc[ch_num].do_ping = 0U;
 8001db6:	2028      	movs	r0, #40	; 0x28
 8001db8:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001dbc:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001dbe:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dc0:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001dc4:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001dc8:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dcc:	bf08      	it	eq
 8001dce:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001dd0:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dd8:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ddc:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001de0:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001de4:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001de8:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001dec:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001df0:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8001df4:	9700      	str	r7, [sp, #0]
 8001df6:	6820      	ldr	r0, [r4, #0]
 8001df8:	f001 ff6a 	bl	8003cd0 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001dfc:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001e00:	b004      	add	sp, #16
 8001e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001e06:	2002      	movs	r0, #2
 8001e08:	e7fa      	b.n	8001e00 <HAL_HCD_HC_Init+0x64>

08001e0a <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001e0a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001e0e:	2b01      	cmp	r3, #1
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e14:	d009      	beq.n	8001e2a <HAL_HCD_HC_Halt+0x20>
 8001e16:	2301      	movs	r3, #1
 8001e18:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1c:	6800      	ldr	r0, [r0, #0]
 8001e1e:	f001 ffdf 	bl	8003de0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8001e28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	e7fc      	b.n	8001e28 <HAL_HCD_HC_Halt+0x1e>

08001e2e <HAL_HCD_Init>:
{
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001e32:	4607      	mov	r7, r0
{
 8001e34:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d041      	beq.n	8001ebe <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e3a:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001e3e:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e44:	b91b      	cbnz	r3, 8001e4e <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001e46:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001e4a:	f00b f86d 	bl	800cf28 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001e56:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e58:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001e5c:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001e60:	bf08      	it	eq
 8001e62:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001e64:	f001 fdf0 	bl	8003a48 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6a:	466d      	mov	r5, sp
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7a:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e7e:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e80:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f001 fd99 	bl	80039bc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e8a:	f856 0b10 	ldr.w	r0, [r6], #16
 8001e8e:	2101      	movs	r1, #1
 8001e90:	f001 fde0 	bl	8003a54 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e96:	466d      	mov	r5, sp
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f001 fe90 	bl	8003bd0 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
}
 8001eb8:	b00a      	add	sp, #40	; 0x28
 8001eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e7fa      	b.n	8001eb8 <HAL_HCD_Init+0x8a>
	...

08001ec4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ec4:	b4f0      	push	{r4, r5, r6, r7}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ec6:	2428      	movs	r4, #40	; 0x28
 8001ec8:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001ecc:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8001ed0:	9e05      	ldr	r6, [sp, #20]
 8001ed2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ed6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001eda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001ede:	b96f      	cbnz	r7, 8001efc <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ee0:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ee2:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001ee8:	d02b      	beq.n	8001f42 <HAL_HCD_HC_SubmitRequest+0x7e>
 8001eea:	42bb      	cmp	r3, r7
 8001eec:	d029      	beq.n	8001f42 <HAL_HCD_HC_SubmitRequest+0x7e>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d131      	bne.n	8001f56 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef2:	2328      	movs	r3, #40	; 0x28
 8001ef4:	fb03 0301 	mla	r3, r3, r1, r0
 8001ef8:	2200      	movs	r2, #0
 8001efa:	e02a      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001efc:	f04f 0c02 	mov.w	ip, #2
 8001f00:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  switch (ep_type)
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d826      	bhi.n	8001f56 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f08:	a401      	add	r4, pc, #4	; (adr r4, 8001f10 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001f0a:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001ef3 	.word	0x08001ef3
 8001f18:	08001f43 	.word	0x08001f43
 8001f1c:	08001f43 	.word	0x08001f43
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f20:	2f01      	cmp	r7, #1
 8001f22:	d118      	bne.n	8001f56 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f24:	b9ba      	cbnz	r2, 8001f56 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001f26:	b925      	cbnz	r5, 8001f32 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f28:	2328      	movs	r3, #40	; 0x28
 8001f2a:	fb03 0301 	mla	r3, r3, r1, r0
 8001f2e:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f32:	2328      	movs	r3, #40	; 0x28
 8001f34:	fb03 0301 	mla	r3, r3, r1, r0
 8001f38:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f3c:	b14a      	cbz	r2, 8001f52 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f3e:	2202      	movs	r2, #2
 8001f40:	e007      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x8e>
 8001f42:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f44:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001f48:	b9ca      	cbnz	r2, 8001f7e <HAL_HCD_HC_SubmitRequest+0xba>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4a:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d1f5      	bne.n	8001f3e <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f56:	2428      	movs	r4, #40	; 0x28
 8001f58:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f5c:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f5e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f62:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 8001f64:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f72:	3138      	adds	r1, #56	; 0x38
 8001f74:	7c02      	ldrb	r2, [r0, #16]
 8001f76:	6800      	ldr	r0, [r0, #0]
}
 8001f78:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f7a:	f001 bf95 	b.w	8003ea8 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f7e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001f82:	e7db      	b.n	8001f3c <HAL_HCD_HC_SubmitRequest+0x78>

08001f84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f88:	6806      	ldr	r6, [r0, #0]
{
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f8e:	4630      	mov	r0, r6
 8001f90:	f001 fdc0 	bl	8003b14 <USB_GetMode>
 8001f94:	2801      	cmp	r0, #1
 8001f96:	f040 80ed 	bne.w	8002174 <HAL_HCD_IRQHandler+0x1f0>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f9a:	6828      	ldr	r0, [r5, #0]
 8001f9c:	f001 fdb6 	bl	8003b0c <USB_ReadInterrupts>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	f000 80e7 	beq.w	8002174 <HAL_HCD_IRQHandler+0x1f0>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fa6:	6828      	ldr	r0, [r5, #0]
 8001fa8:	f001 fdb0 	bl	8003b0c <USB_ReadInterrupts>
 8001fac:	0280      	lsls	r0, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fae:	bf48      	it	mi
 8001fb0:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fb2:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fb4:	bf44      	itt	mi
 8001fb6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001fba:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fbc:	f001 fda6 	bl	8003b0c <USB_ReadInterrupts>
 8001fc0:	02c1      	lsls	r1, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fc2:	bf48      	it	mi
 8001fc4:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fc6:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fc8:	bf44      	itt	mi
 8001fca:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001fce:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fd0:	f001 fd9c 	bl	8003b0c <USB_ReadInterrupts>
 8001fd4:	0142      	lsls	r2, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fd6:	bf48      	it	mi
 8001fd8:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fda:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fdc:	bf44      	itt	mi
 8001fde:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001fe2:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fe4:	f001 fd92 	bl	8003b0c <USB_ReadInterrupts>
 8001fe8:	0783      	lsls	r3, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fea:	bf48      	it	mi
 8001fec:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fee:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ff0:	bf44      	itt	mi
 8001ff2:	2202      	movmi	r2, #2
 8001ff4:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ff6:	f001 fd89 	bl	8003b0c <USB_ReadInterrupts>
 8001ffa:	0087      	lsls	r7, r0, #2
 8001ffc:	d510      	bpl.n	8002020 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001ffe:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002002:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002006:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800200a:	4628      	mov	r0, r5
 800200c:	f00a ffdc 	bl	800cfc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002010:	2101      	movs	r1, #1
 8002012:	6828      	ldr	r0, [r5, #0]
 8002014:	f001 fd82 	bl	8003b1c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800201e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002020:	6828      	ldr	r0, [r5, #0]
 8002022:	f001 fd73 	bl	8003b0c <USB_ReadInterrupts>
 8002026:	01c4      	lsls	r4, r0, #7
 8002028:	d543      	bpl.n	80020b2 <HAL_HCD_IRQHandler+0x12e>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800202a:	682c      	ldr	r4, [r5, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800202c:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8002030:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8002032:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8002036:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002038:	9b03      	ldr	r3, [sp, #12]
 800203a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800203e:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002040:	9b02      	ldr	r3, [sp, #8]
 8002042:	0798      	lsls	r0, r3, #30
 8002044:	d50d      	bpl.n	8002062 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002046:	9b02      	ldr	r3, [sp, #8]
 8002048:	07d9      	lsls	r1, r3, #31
 800204a:	d506      	bpl.n	800205a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800204c:	69a3      	ldr	r3, [r4, #24]
 800204e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002052:	61a3      	str	r3, [r4, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002054:	4628      	mov	r0, r5
 8002056:	f00a ffb3 	bl	800cfc0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002062:	9b02      	ldr	r3, [sp, #8]
 8002064:	071a      	lsls	r2, r3, #28
 8002066:	d51a      	bpl.n	800209e <HAL_HCD_IRQHandler+0x11a>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002068:	9b03      	ldr	r3, [sp, #12]
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002070:	9b02      	ldr	r3, [sp, #8]
 8002072:	075b      	lsls	r3, r3, #29
 8002074:	f140 8089 	bpl.w	800218a <HAL_HCD_IRQHandler+0x206>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002078:	69a9      	ldr	r1, [r5, #24]
 800207a:	2902      	cmp	r1, #2
 800207c:	d17d      	bne.n	800217a <HAL_HCD_IRQHandler+0x1f6>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800207e:	9b02      	ldr	r3, [sp, #8]
 8002080:	6828      	ldr	r0, [r5, #0]
 8002082:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800208a:	bf18      	it	ne
 800208c:	2101      	movne	r1, #1
 800208e:	f001 fd45 	bl	8003b1c <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002092:	4628      	mov	r0, r5
 8002094:	f00a ff9d 	bl	800cfd2 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002098:	4628      	mov	r0, r5
 800209a:	f00a ff91 	bl	800cfc0 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800209e:	9b02      	ldr	r3, [sp, #8]
 80020a0:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80020a2:	bf42      	ittt	mi
 80020a4:	9b03      	ldrmi	r3, [sp, #12]
 80020a6:	f043 0320 	orrmi.w	r3, r3, #32
 80020aa:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80020ac:	9b03      	ldr	r3, [sp, #12]
 80020ae:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020b2:	6828      	ldr	r0, [r5, #0]
 80020b4:	f001 fd2a 	bl	8003b0c <USB_ReadInterrupts>
 80020b8:	0700      	lsls	r0, r0, #28
 80020ba:	d505      	bpl.n	80020c8 <HAL_HCD_IRQHandler+0x144>
      HAL_HCD_SOF_Callback(hhcd);
 80020bc:	4628      	mov	r0, r5
 80020be:	f00a ff7b 	bl	800cfb8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020c8:	6828      	ldr	r0, [r5, #0]
 80020ca:	f001 fd1f 	bl	8003b0c <USB_ReadInterrupts>
 80020ce:	0181      	lsls	r1, r0, #6
 80020d0:	d512      	bpl.n	80020f8 <HAL_HCD_IRQHandler+0x174>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020d2:	6828      	ldr	r0, [r5, #0]
 80020d4:	f001 fe7f 	bl	8003dd6 <USB_HC_ReadInterrupt>
 80020d8:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80020dc:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020de:	f04f 0900 	mov.w	r9, #0
 80020e2:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020e4:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020e6:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ea:	68ab      	ldr	r3, [r5, #8]
 80020ec:	6828      	ldr	r0, [r5, #0]
 80020ee:	454b      	cmp	r3, r9
 80020f0:	d85a      	bhi.n	80021a8 <HAL_HCD_IRQHandler+0x224>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80020f8:	6828      	ldr	r0, [r5, #0]
 80020fa:	f001 fd07 	bl	8003b0c <USB_ReadInterrupts>
 80020fe:	06c3      	lsls	r3, r0, #27
 8002100:	d538      	bpl.n	8002174 <HAL_HCD_IRQHandler+0x1f0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002102:	682c      	ldr	r4, [r5, #0]
 8002104:	69a3      	ldr	r3, [r4, #24]
 8002106:	f023 0310 	bic.w	r3, r3, #16
 800210a:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 800210c:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800210e:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8002112:	2a02      	cmp	r2, #2
 8002114:	d129      	bne.n	800216a <HAL_HCD_IRQHandler+0x1e6>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002116:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800211a:	f1b8 0f00 	cmp.w	r8, #0
 800211e:	d024      	beq.n	800216a <HAL_HCD_IRQHandler+0x1e6>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002120:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002124:	2728      	movs	r7, #40	; 0x28
 8002126:	fb07 5706 	mla	r7, r7, r6, r5
 800212a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800212c:	b1e9      	cbz	r1, 800216a <HAL_HCD_IRQHandler+0x1e6>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800212e:	4642      	mov	r2, r8
 8002130:	4620      	mov	r0, r4
 8002132:	f001 fcdd 	bl	8003af0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	4443      	add	r3, r8
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800213c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213e:	4443      	add	r3, r8
 8002140:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002142:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 8002146:	0173      	lsls	r3, r6, #5
 8002148:	18e2      	adds	r2, r4, r3
 800214a:	6911      	ldr	r1, [r2, #16]
 800214c:	4ab6      	ldr	r2, [pc, #728]	; (8002428 <HAL_HCD_IRQHandler+0x4a4>)
 800214e:	400a      	ands	r2, r1
 8002150:	b15a      	cbz	r2, 800216a <HAL_HCD_IRQHandler+0x1e6>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002152:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002154:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002158:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800215c:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800215e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216a:	682a      	ldr	r2, [r5, #0]
 800216c:	6993      	ldr	r3, [r2, #24]
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	6193      	str	r3, [r2, #24]
}
 8002174:	b005      	add	sp, #20
 8002176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800217a:	68eb      	ldr	r3, [r5, #12]
 800217c:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800217e:	bf04      	itt	eq
 8002180:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002184:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8002188:	e783      	b.n	8002092 <HAL_HCD_IRQHandler+0x10e>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800218a:	4628      	mov	r0, r5
 800218c:	f00a ff25 	bl	800cfda <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002190:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002194:	682a      	ldr	r2, [r5, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002196:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800219a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800219e:	6993      	ldr	r3, [r2, #24]
 80021a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	e77a      	b.n	800209e <HAL_HCD_IRQHandler+0x11a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021a8:	9a00      	ldr	r2, [sp, #0]
 80021aa:	f009 030f 	and.w	r3, r9, #15
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	07da      	lsls	r2, r3, #31
 80021b4:	f140 8085 	bpl.w	80022c2 <HAL_HCD_IRQHandler+0x33e>
 80021b8:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021bc:	9a01      	ldr	r2, [sp, #4]
 80021be:	fa5f f689 	uxtb.w	r6, r9
 80021c2:	58d1      	ldr	r1, [r2, r3]
 80021c4:	ea4f 1b46 	mov.w	fp, r6, lsl #5
 80021c8:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 80021cc:	eb0b 040a 	add.w	r4, fp, sl
 80021d0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021d4:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021d6:	f000 80ef 	beq.w	80023b8 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021da:	074b      	lsls	r3, r1, #29
 80021dc:	d513      	bpl.n	8002206 <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021de:	2104      	movs	r1, #4
 80021e0:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e2:	68e1      	ldr	r1, [r4, #12]
 80021e4:	f041 0102 	orr.w	r1, r1, #2
 80021e8:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ea:	68a1      	ldr	r1, [r4, #8]
 80021ec:	0588      	lsls	r0, r1, #22
 80021ee:	d539      	bpl.n	8002264 <HAL_HCD_IRQHandler+0x2e0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f0:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f2:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fa:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	f001 fdf0 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	e0b8      	b.n	8002378 <HAL_HCD_IRQHandler+0x3f4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002206:	68a1      	ldr	r1, [r4, #8]
 8002208:	0689      	lsls	r1, r1, #26
 800220a:	d502      	bpl.n	8002212 <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800220c:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800220e:	60a1      	str	r1, [r4, #8]
 8002210:	e7eb      	b.n	80021ea <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002212:	68a1      	ldr	r1, [r4, #8]
 8002214:	070a      	lsls	r2, r1, #28
 8002216:	d511      	bpl.n	800223c <HAL_HCD_IRQHandler+0x2b8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002218:	68e1      	ldr	r1, [r4, #12]
 800221a:	f041 0102 	orr.w	r1, r1, #2
 800221e:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002220:	fb07 5106 	mla	r1, r7, r6, r5
 8002224:	f04f 0c05 	mov.w	ip, #5
 8002228:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800222c:	2110      	movs	r1, #16
 800222e:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002230:	2108      	movs	r1, #8
 8002232:	60a1      	str	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002234:	4631      	mov	r1, r6
 8002236:	f001 fdd3 	bl	8003de0 <USB_HC_Halt>
 800223a:	e7d6      	b.n	80021ea <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800223c:	68a1      	ldr	r1, [r4, #8]
 800223e:	054b      	lsls	r3, r1, #21
 8002240:	d5d3      	bpl.n	80021ea <HAL_HCD_IRQHandler+0x266>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002242:	68e1      	ldr	r1, [r4, #12]
 8002244:	f041 0102 	orr.w	r1, r1, #2
 8002248:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224a:	4631      	mov	r1, r6
 800224c:	f001 fdc8 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002250:	2110      	movs	r1, #16
 8002252:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002254:	fb07 5106 	mla	r1, r7, r6, r5
 8002258:	2008      	movs	r0, #8
 800225a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800225e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002262:	e7d4      	b.n	800220e <HAL_HCD_IRQHandler+0x28a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002264:	68a1      	ldr	r1, [r4, #8]
 8002266:	07c9      	lsls	r1, r1, #31
 8002268:	d53d      	bpl.n	80022e6 <HAL_HCD_IRQHandler+0x362>
    if (hhcd->Init.dma_enable != 0U)
 800226a:	6929      	ldr	r1, [r5, #16]
 800226c:	b149      	cbz	r1, 8002282 <HAL_HCD_IRQHandler+0x2fe>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800226e:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002272:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002274:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002278:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800227c:	1a09      	subs	r1, r1, r0
 800227e:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002282:	fb07 5c06 	mla	ip, r7, r6, r5
 8002286:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002288:	2100      	movs	r1, #0
 800228a:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 800228e:	f88c 205d 	strb.w	r2, [ip, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002292:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002294:	f89c 103f 	ldrb.w	r1, [ip, #63]	; 0x3f
 8002298:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 800229c:	d114      	bne.n	80022c8 <HAL_HCD_IRQHandler+0x344>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a8:	4631      	mov	r1, r6
 80022aa:	f001 fd99 	bl	8003de0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ae:	2310      	movs	r3, #16
 80022b0:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022b2:	fb07 5606 	mla	r6, r7, r6, r5
 80022b6:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022c2:	f109 0901 	add.w	r9, r9, #1
 80022c6:	e710      	b.n	80020ea <HAL_HCD_IRQHandler+0x166>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022c8:	2903      	cmp	r1, #3
 80022ca:	d1f2      	bne.n	80022b2 <HAL_HCD_IRQHandler+0x32e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022cc:	f85b 100a 	ldr.w	r1, [fp, sl]
 80022d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80022d4:	f84b 100a 	str.w	r1, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d8:	4628      	mov	r0, r5
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022da:	f88c 205c 	strb.w	r2, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022de:	4631      	mov	r1, r6
 80022e0:	f00a fe76 	bl	800cfd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022e4:	e7e5      	b.n	80022b2 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022e6:	68a1      	ldr	r1, [r4, #8]
 80022e8:	078a      	lsls	r2, r1, #30
 80022ea:	d530      	bpl.n	800234e <HAL_HCD_IRQHandler+0x3ca>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022ec:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022ee:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022f2:	f021 0102 	bic.w	r1, r1, #2
 80022f6:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022f8:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80022fc:	2901      	cmp	r1, #1
 80022fe:	d102      	bne.n	8002306 <HAL_HCD_IRQHandler+0x382>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002300:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8002304:	e117      	b.n	8002536 <HAL_HCD_IRQHandler+0x5b2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002306:	2905      	cmp	r1, #5
 8002308:	d0fa      	beq.n	8002300 <HAL_HCD_IRQHandler+0x37c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800230a:	2906      	cmp	r1, #6
 800230c:	d001      	beq.n	8002312 <HAL_HCD_IRQHandler+0x38e>
 800230e:	2908      	cmp	r1, #8
 8002310:	d10f      	bne.n	8002332 <HAL_HCD_IRQHandler+0x3ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002312:	fb07 5106 	mla	r1, r7, r6, r5
 8002316:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8002318:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800231a:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 800231c:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 800231e:	bf81      	itttt	hi
 8002320:	2000      	movhi	r0, #0
 8002322:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002324:	2004      	movhi	r0, #4
 8002326:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800232a:	bf98      	it	ls
 800232c:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 8002330:	e004      	b.n	800233c <HAL_HCD_IRQHandler+0x3b8>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002332:	2903      	cmp	r1, #3
 8002334:	f040 80ff 	bne.w	8002536 <HAL_HCD_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002338:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800233c:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002340:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002344:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002348:	f84b 100a 	str.w	r1, [fp, sl]
 800234c:	e0f3      	b.n	8002536 <HAL_HCD_IRQHandler+0x5b2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800234e:	68a1      	ldr	r1, [r4, #8]
 8002350:	6828      	ldr	r0, [r5, #0]
 8002352:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8002356:	d011      	beq.n	800237c <HAL_HCD_IRQHandler+0x3f8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002358:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800235a:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002364:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002366:	3301      	adds	r3, #1
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800236a:	2306      	movs	r3, #6
 800236c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	4631      	mov	r1, r6
 8002372:	f001 fd35 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	60a3      	str	r3, [r4, #8]
 800237a:	e7a2      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800237c:	68a3      	ldr	r3, [r4, #8]
 800237e:	06db      	lsls	r3, r3, #27
 8002380:	d59f      	bpl.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002382:	fb07 5206 	mla	r2, r7, r6, r5
 8002386:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800238a:	2b03      	cmp	r3, #3
 800238c:	d109      	bne.n	80023a2 <HAL_HCD_IRQHandler+0x41e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800238e:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002390:	68e3      	ldr	r3, [r4, #12]
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	4631      	mov	r1, r6
 800239a:	f001 fd21 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800239e:	2310      	movs	r3, #16
 80023a0:	e7ea      	b.n	8002378 <HAL_HCD_IRQHandler+0x3f4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80023a6:	d1fa      	bne.n	800239e <HAL_HCD_IRQHandler+0x41a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a8:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80023aa:	692b      	ldr	r3, [r5, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f6      	bne.n	800239e <HAL_HCD_IRQHandler+0x41a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023b0:	2303      	movs	r3, #3
 80023b2:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80023b6:	e7eb      	b.n	8002390 <HAL_HCD_IRQHandler+0x40c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023b8:	f011 0c04 	ands.w	ip, r1, #4
 80023bc:	d006      	beq.n	80023cc <HAL_HCD_IRQHandler+0x448>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023be:	2304      	movs	r3, #4
 80023c0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c2:	68e3      	ldr	r3, [r4, #12]
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	60e3      	str	r3, [r4, #12]
 80023ca:	e77a      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023cc:	68a1      	ldr	r1, [r4, #8]
 80023ce:	f011 0120 	ands.w	r1, r1, #32
 80023d2:	d014      	beq.n	80023fe <HAL_HCD_IRQHandler+0x47a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023d4:	2320      	movs	r3, #32
 80023d6:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023d8:	fb07 5306 	mla	r3, r7, r6, r5
 80023dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80023e0:	2a01      	cmp	r2, #1
 80023e2:	f47f af6e 	bne.w	80022c2 <HAL_HCD_IRQHandler+0x33e>
      hhcd->hc[ch_num].do_ping = 0U;
 80023e6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ea:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ee:	68e3      	ldr	r3, [r4, #12]
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f6:	4631      	mov	r1, r6
 80023f8:	f001 fcf2 	bl	8003de0 <USB_HC_Halt>
 80023fc:	e761      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	065a      	lsls	r2, r3, #25
 8002402:	d513      	bpl.n	800242c <HAL_HCD_IRQHandler+0x4a8>
    hhcd->hc[ch_num].state = HC_NYET;
 8002404:	fb07 5306 	mla	r3, r7, r6, r5
 8002408:	2204      	movs	r2, #4
 800240a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002414:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002416:	68e3      	ldr	r3, [r4, #12]
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241e:	4631      	mov	r1, r6
 8002420:	f001 fcde 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	e7a7      	b.n	8002378 <HAL_HCD_IRQHandler+0x3f4>
 8002428:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800242c:	68a1      	ldr	r1, [r4, #8]
 800242e:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002432:	d005      	beq.n	8002440 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002434:	68e3      	ldr	r3, [r4, #12]
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243c:	4631      	mov	r1, r6
 800243e:	e6dd      	b.n	80021fc <HAL_HCD_IRQHandler+0x278>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002440:	68a3      	ldr	r3, [r4, #8]
 8002442:	07db      	lsls	r3, r3, #31
 8002444:	d50f      	bpl.n	8002466 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002446:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002448:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800244c:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002450:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002454:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002456:	4631      	mov	r1, r6
 8002458:	f001 fcc2 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800245c:	2201      	movs	r2, #1
 800245e:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002460:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8002464:	e72d      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002466:	68a1      	ldr	r1, [r4, #8]
 8002468:	0709      	lsls	r1, r1, #28
 800246a:	d50e      	bpl.n	800248a <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800246c:	2308      	movs	r3, #8
 800246e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002470:	68e3      	ldr	r3, [r4, #12]
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002478:	4631      	mov	r1, r6
 800247a:	f001 fcb1 	bl	8003de0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800247e:	fb07 5606 	mla	r6, r7, r6, r5
 8002482:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002484:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002488:	e71b      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800248a:	68a1      	ldr	r1, [r4, #8]
 800248c:	06ca      	lsls	r2, r1, #27
 800248e:	d514      	bpl.n	80024ba <HAL_HCD_IRQHandler+0x536>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002490:	fb07 5306 	mla	r3, r7, r6, r5
 8002494:	2200      	movs	r2, #0
 8002496:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002498:	2203      	movs	r2, #3
 800249a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800249e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	f47f af74 	bne.w	8002390 <HAL_HCD_IRQHandler+0x40c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80024a8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	f47f af6f 	bne.w	8002390 <HAL_HCD_IRQHandler+0x40c>
        hhcd->hc[ch_num].do_ping = 1U;
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024b8:	e76a      	b.n	8002390 <HAL_HCD_IRQHandler+0x40c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024ba:	68a1      	ldr	r1, [r4, #8]
 80024bc:	060b      	lsls	r3, r1, #24
 80024be:	d50c      	bpl.n	80024da <HAL_HCD_IRQHandler+0x556>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c0:	68e3      	ldr	r3, [r4, #12]
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c8:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024ca:	fb07 5606 	mla	r6, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ce:	f001 fc87 	bl	8003de0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024d2:	2306      	movs	r3, #6
 80024d4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80024d8:	e74d      	b.n	8002376 <HAL_HCD_IRQHandler+0x3f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024da:	68a1      	ldr	r1, [r4, #8]
 80024dc:	0549      	lsls	r1, r1, #21
 80024de:	d50f      	bpl.n	8002500 <HAL_HCD_IRQHandler+0x57c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e0:	68e3      	ldr	r3, [r4, #12]
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e8:	4631      	mov	r1, r6
 80024ea:	f001 fc79 	bl	8003de0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ee:	2310      	movs	r3, #16
 80024f0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024f8:	fb07 5606 	mla	r6, r7, r6, r5
 80024fc:	2308      	movs	r3, #8
 80024fe:	e7c1      	b.n	8002484 <HAL_HCD_IRQHandler+0x500>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002500:	68a1      	ldr	r1, [r4, #8]
 8002502:	078a      	lsls	r2, r1, #30
 8002504:	f57f aedd 	bpl.w	80022c2 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002508:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800250a:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800250e:	f021 0102 	bic.w	r1, r1, #2
 8002512:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002514:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8002518:	2901      	cmp	r1, #1
 800251a:	d117      	bne.n	800254c <HAL_HCD_IRQHandler+0x5c8>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800251c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002520:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002524:	3b02      	subs	r3, #2
 8002526:	2b01      	cmp	r3, #1
 8002528:	d805      	bhi.n	8002536 <HAL_HCD_IRQHandler+0x5b2>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800252a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002536:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800253a:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800253e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002542:	4631      	mov	r1, r6
 8002544:	4628      	mov	r0, r5
 8002546:	f00a fd43 	bl	800cfd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800254a:	e6ba      	b.n	80022c2 <HAL_HCD_IRQHandler+0x33e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800254c:	2903      	cmp	r1, #3
 800254e:	d102      	bne.n	8002556 <HAL_HCD_IRQHandler+0x5d2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002550:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 8002554:	e7ef      	b.n	8002536 <HAL_HCD_IRQHandler+0x5b2>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002556:	2904      	cmp	r1, #4
 8002558:	d0fa      	beq.n	8002550 <HAL_HCD_IRQHandler+0x5cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800255a:	2905      	cmp	r1, #5
 800255c:	f43f aed0 	beq.w	8002300 <HAL_HCD_IRQHandler+0x37c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002560:	2906      	cmp	r1, #6
 8002562:	f43f aed6 	beq.w	8002312 <HAL_HCD_IRQHandler+0x38e>
 8002566:	2908      	cmp	r1, #8
 8002568:	d1e5      	bne.n	8002536 <HAL_HCD_IRQHandler+0x5b2>
 800256a:	e6d2      	b.n	8002312 <HAL_HCD_IRQHandler+0x38e>

0800256c <HAL_HCD_Start>:
{
 800256c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800256e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002572:	2b01      	cmp	r3, #1
{
 8002574:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002576:	d00d      	beq.n	8002594 <HAL_HCD_Start+0x28>
 8002578:	2501      	movs	r5, #1
 800257a:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800257e:	6800      	ldr	r0, [r0, #0]
 8002580:	f001 fa5c 	bl	8003a3c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002584:	4629      	mov	r1, r5
 8002586:	6820      	ldr	r0, [r4, #0]
 8002588:	f001 fb02 	bl	8003b90 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800258c:	2000      	movs	r0, #0
 800258e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002592:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002594:	2002      	movs	r0, #2
 8002596:	e7fc      	b.n	8002592 <HAL_HCD_Start+0x26>

08002598 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002598:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800259c:	2b01      	cmp	r3, #1
{
 800259e:	b510      	push	{r4, lr}
 80025a0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80025a2:	d009      	beq.n	80025b8 <HAL_HCD_Stop+0x20>
 80025a4:	2301      	movs	r3, #1
 80025a6:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80025aa:	6800      	ldr	r0, [r0, #0]
 80025ac:	f001 fd28 	bl	8004000 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 80025b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80025b8:	2002      	movs	r0, #2
 80025ba:	e7fc      	b.n	80025b6 <HAL_HCD_Stop+0x1e>

080025bc <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80025bc:	6800      	ldr	r0, [r0, #0]
 80025be:	f001 bac9 	b.w	8003b54 <USB_ResetPort>

080025c2 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80025c2:	2328      	movs	r3, #40	; 0x28
 80025c4:	fb03 0101 	mla	r1, r3, r1, r0
}
 80025c8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80025cc:	4770      	bx	lr

080025ce <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80025ce:	2328      	movs	r3, #40	; 0x28
 80025d0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80025d4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80025d6:	4770      	bx	lr

080025d8 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025d8:	6800      	ldr	r0, [r0, #0]
 80025da:	f001 bb74 	b.w	8003cc6 <USB_GetCurrentFrame>

080025de <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80025de:	6800      	ldr	r0, [r0, #0]
 80025e0:	f001 bb66 	b.w	8003cb0 <USB_GetHostSpeed>

080025e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e6:	4604      	mov	r4, r0
 80025e8:	b908      	cbnz	r0, 80025ee <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025f6:	b91b      	cbnz	r3, 8002600 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80025f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80025fc:	f00a fa30 	bl	800ca60 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8002600:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002602:	2324      	movs	r3, #36	; 0x24
 8002604:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002610:	f000 fada 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002614:	6863      	ldr	r3, [r4, #4]
 8002616:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_I2C_Init+0x138>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d84d      	bhi.n	80026b8 <HAL_I2C_Init+0xd4>
 800261c:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_I2C_Init+0x13c>)
 800261e:	4290      	cmp	r0, r2
 8002620:	d9e3      	bls.n	80025ea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002622:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002624:	493f      	ldr	r1, [pc, #252]	; (8002724 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002626:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002628:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002630:	430d      	orrs	r5, r1
 8002632:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002634:	6a15      	ldr	r5, [r2, #32]
 8002636:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800263a:	3101      	adds	r1, #1
 800263c:	4329      	orrs	r1, r5
 800263e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002640:	69d1      	ldr	r1, [r2, #28]
 8002642:	4d36      	ldr	r5, [pc, #216]	; (800271c <HAL_I2C_Init+0x138>)
 8002644:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002648:	42ab      	cmp	r3, r5
 800264a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800264e:	f100 30ff 	add.w	r0, r0, #4294967295
 8002652:	d848      	bhi.n	80026e6 <HAL_I2C_Init+0x102>
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fbb0 f0f3 	udiv	r0, r0, r3
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	bf38      	it	cc
 8002664:	2304      	movcc	r3, #4
 8002666:	430b      	orrs	r3, r1
 8002668:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800266a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800266e:	6811      	ldr	r1, [r2, #0]
 8002670:	4303      	orrs	r3, r0
 8002672:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002676:	430b      	orrs	r3, r1
 8002678:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800267a:	6891      	ldr	r1, [r2, #8]
 800267c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002680:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002684:	4303      	orrs	r3, r0
 8002686:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800268a:	430b      	orrs	r3, r1
 800268c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800268e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002692:	68d1      	ldr	r1, [r2, #12]
 8002694:	4303      	orrs	r3, r0
 8002696:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800269a:	430b      	orrs	r3, r1
 800269c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800269e:	6813      	ldr	r3, [r2, #0]
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026aa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80026b6:	e799      	b.n	80025ec <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_I2C_Init+0x144>)
 80026ba:	4290      	cmp	r0, r2
 80026bc:	d995      	bls.n	80025ea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026be:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80026c0:	4e18      	ldr	r6, [pc, #96]	; (8002724 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80026c4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80026cc:	4335      	orrs	r5, r6
 80026ce:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d0:	6a15      	ldr	r5, [r2, #32]
 80026d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80026d6:	4371      	muls	r1, r6
 80026d8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80026dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80026e0:	fbb1 f1f6 	udiv	r1, r1, r6
 80026e4:	e7a9      	b.n	800263a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e6:	68a5      	ldr	r5, [r4, #8]
 80026e8:	b955      	cbnz	r5, 8002700 <HAL_I2C_Init+0x11c>
 80026ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80026f2:	1c43      	adds	r3, r0, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	b16b      	cbz	r3, 8002716 <HAL_I2C_Init+0x132>
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	e7b2      	b.n	8002666 <HAL_I2C_Init+0x82>
 8002700:	2519      	movs	r5, #25
 8002702:	436b      	muls	r3, r5
 8002704:	fbb0 f0f3 	udiv	r0, r0, r3
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270e:	b113      	cbz	r3, 8002716 <HAL_I2C_Init+0x132>
 8002710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002714:	e7a7      	b.n	8002666 <HAL_I2C_Init+0x82>
 8002716:	2301      	movs	r3, #1
 8002718:	e7a5      	b.n	8002666 <HAL_I2C_Init+0x82>
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	000f4240 	.word	0x000f4240
 8002728:	003d08ff 	.word	0x003d08ff

0800272c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	4604      	mov	r4, r0
 8002732:	b918      	cbnz	r0, 800273c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002734:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002736:	b002      	add	sp, #8
 8002738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273c:	6803      	ldr	r3, [r0, #0]
 800273e:	07dd      	lsls	r5, r3, #31
 8002740:	d410      	bmi.n	8002764 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	0798      	lsls	r0, r3, #30
 8002746:	d458      	bmi.n	80027fa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	071a      	lsls	r2, r3, #28
 800274c:	f100 809a 	bmi.w	8002884 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	075b      	lsls	r3, r3, #29
 8002754:	f100 80b8 	bmi.w	80028c8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002758:	69a2      	ldr	r2, [r4, #24]
 800275a:	2a00      	cmp	r2, #0
 800275c:	f040 8119 	bne.w	8002992 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002760:	2000      	movs	r0, #0
 8002762:	e7e8      	b.n	8002736 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002764:	4ba6      	ldr	r3, [pc, #664]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	f002 020c 	and.w	r2, r2, #12
 800276c:	2a04      	cmp	r2, #4
 800276e:	d007      	beq.n	8002780 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002776:	2a08      	cmp	r2, #8
 8002778:	d10a      	bne.n	8002790 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0259      	lsls	r1, r3, #9
 800277e:	d507      	bpl.n	8002790 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	4b9f      	ldr	r3, [pc, #636]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	039a      	lsls	r2, r3, #14
 8002786:	d5dc      	bpl.n	8002742 <HAL_RCC_OscConfig+0x16>
 8002788:	6863      	ldr	r3, [r4, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1d9      	bne.n	8002742 <HAL_RCC_OscConfig+0x16>
 800278e:	e7d1      	b.n	8002734 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	6863      	ldr	r3, [r4, #4]
 8002792:	4d9b      	ldr	r5, [pc, #620]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d111      	bne.n	80027be <HAL_RCC_OscConfig+0x92>
 800279a:	682b      	ldr	r3, [r5, #0]
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027a2:	f7fe fbe5 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4d96      	ldr	r5, [pc, #600]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80027a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	039b      	lsls	r3, r3, #14
 80027ae:	d4c8      	bmi.n	8002742 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fbde 	bl	8000f70 <HAL_GetTick>
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	2864      	cmp	r0, #100	; 0x64
 80027b8:	d9f7      	bls.n	80027aa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80027ba:	2003      	movs	r0, #3
 80027bc:	e7bb      	b.n	8002736 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c2:	d104      	bne.n	80027ce <HAL_RCC_OscConfig+0xa2>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	e7e5      	b.n	800279a <HAL_RCC_OscConfig+0x6e>
 80027ce:	682a      	ldr	r2, [r5, #0]
 80027d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027d4:	602a      	str	r2, [r5, #0]
 80027d6:	682a      	ldr	r2, [r5, #0]
 80027d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027dc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1df      	bne.n	80027a2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80027e2:	f7fe fbc5 	bl	8000f70 <HAL_GetTick>
 80027e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	039f      	lsls	r7, r3, #14
 80027ec:	d5a9      	bpl.n	8002742 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ee:	f7fe fbbf 	bl	8000f70 <HAL_GetTick>
 80027f2:	1b80      	subs	r0, r0, r6
 80027f4:	2864      	cmp	r0, #100	; 0x64
 80027f6:	d9f7      	bls.n	80027e8 <HAL_RCC_OscConfig+0xbc>
 80027f8:	e7df      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	f012 0f0c 	tst.w	r2, #12
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280a:	2a08      	cmp	r2, #8
 800280c:	d111      	bne.n	8002832 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	025e      	lsls	r6, r3, #9
 8002812:	d40e      	bmi.n	8002832 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002814:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	0795      	lsls	r5, r2, #30
 800281a:	d502      	bpl.n	8002822 <HAL_RCC_OscConfig+0xf6>
 800281c:	68e2      	ldr	r2, [r4, #12]
 800281e:	2a01      	cmp	r2, #1
 8002820:	d188      	bne.n	8002734 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	6921      	ldr	r1, [r4, #16]
 8002826:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800282a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800282e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002830:	e78a      	b.n	8002748 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002832:	68e2      	ldr	r2, [r4, #12]
 8002834:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x2d8>)
 8002836:	b1b2      	cbz	r2, 8002866 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283c:	f7fe fb98 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4d6f      	ldr	r5, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002842:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	0798      	lsls	r0, r3, #30
 8002848:	d507      	bpl.n	800285a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	682b      	ldr	r3, [r5, #0]
 800284c:	6922      	ldr	r2, [r4, #16]
 800284e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002852:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	e776      	b.n	8002748 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fb89 	bl	8000f70 <HAL_GetTick>
 800285e:	1b80      	subs	r0, r0, r6
 8002860:	2802      	cmp	r0, #2
 8002862:	d9ef      	bls.n	8002844 <HAL_RCC_OscConfig+0x118>
 8002864:	e7a9      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002866:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002868:	f7fe fb82 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286c:	4d64      	ldr	r5, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800286e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	0799      	lsls	r1, r3, #30
 8002874:	f57f af68 	bpl.w	8002748 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fb7a 	bl	8000f70 <HAL_GetTick>
 800287c:	1b80      	subs	r0, r0, r6
 800287e:	2802      	cmp	r0, #2
 8002880:	d9f6      	bls.n	8002870 <HAL_RCC_OscConfig+0x144>
 8002882:	e79a      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002884:	6962      	ldr	r2, [r4, #20]
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <HAL_RCC_OscConfig+0x2dc>)
 8002888:	b17a      	cbz	r2, 80028aa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800288e:	f7fe fb6f 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4d5b      	ldr	r5, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002894:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002898:	079f      	lsls	r7, r3, #30
 800289a:	f53f af59 	bmi.w	8002750 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe fb67 	bl	8000f70 <HAL_GetTick>
 80028a2:	1b80      	subs	r0, r0, r6
 80028a4:	2802      	cmp	r0, #2
 80028a6:	d9f6      	bls.n	8002896 <HAL_RCC_OscConfig+0x16a>
 80028a8:	e787      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80028aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028ac:	f7fe fb60 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4d53      	ldr	r5, [pc, #332]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80028b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80028b6:	0798      	lsls	r0, r3, #30
 80028b8:	f57f af4a 	bpl.w	8002750 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7fe fb58 	bl	8000f70 <HAL_GetTick>
 80028c0:	1b80      	subs	r0, r0, r6
 80028c2:	2802      	cmp	r0, #2
 80028c4:	d9f6      	bls.n	80028b4 <HAL_RCC_OscConfig+0x188>
 80028c6:	e778      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 80028ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80028d0:	d128      	bne.n	8002924 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	9201      	str	r2, [sp, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028e6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4d48      	ldr	r5, [pc, #288]	; (8002a0c <HAL_RCC_OscConfig+0x2e0>)
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	05d9      	lsls	r1, r3, #23
 80028ee:	d51b      	bpl.n	8002928 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	68a3      	ldr	r3, [r4, #8]
 80028f2:	4d43      	ldr	r5, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d127      	bne.n	8002948 <HAL_RCC_OscConfig+0x21c>
 80028f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002900:	f7fe fb36 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4d3e      	ldr	r5, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002906:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800290e:	079b      	lsls	r3, r3, #30
 8002910:	d539      	bpl.n	8002986 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002912:	2e00      	cmp	r6, #0
 8002914:	f43f af20 	beq.w	8002758 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 800291a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	e719      	b.n	8002758 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002924:	2600      	movs	r6, #0
 8002926:	e7df      	b.n	80028e8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002930:	f7fe fb1e 	bl	8000f70 <HAL_GetTick>
 8002934:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	05da      	lsls	r2, r3, #23
 800293a:	d4d9      	bmi.n	80028f0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe fb18 	bl	8000f70 <HAL_GetTick>
 8002940:	1bc0      	subs	r0, r0, r7
 8002942:	2802      	cmp	r0, #2
 8002944:	d9f7      	bls.n	8002936 <HAL_RCC_OscConfig+0x20a>
 8002946:	e738      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	2b05      	cmp	r3, #5
 800294a:	d104      	bne.n	8002956 <HAL_RCC_OscConfig+0x22a>
 800294c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	672b      	str	r3, [r5, #112]	; 0x70
 8002954:	e7d0      	b.n	80028f8 <HAL_RCC_OscConfig+0x1cc>
 8002956:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	672a      	str	r2, [r5, #112]	; 0x70
 800295e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002960:	f022 0204 	bic.w	r2, r2, #4
 8002964:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ca      	bne.n	8002900 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800296a:	f7fe fb01 	bl	8000f70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002972:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002976:	0798      	lsls	r0, r3, #30
 8002978:	d5cb      	bpl.n	8002912 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe faf9 	bl	8000f70 <HAL_GetTick>
 800297e:	1bc0      	subs	r0, r0, r7
 8002980:	4540      	cmp	r0, r8
 8002982:	d9f7      	bls.n	8002974 <HAL_RCC_OscConfig+0x248>
 8002984:	e719      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe faf3 	bl	8000f70 <HAL_GetTick>
 800298a:	1bc0      	subs	r0, r0, r7
 800298c:	4540      	cmp	r0, r8
 800298e:	d9bd      	bls.n	800290c <HAL_RCC_OscConfig+0x1e0>
 8002990:	e713      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002992:	4d1b      	ldr	r5, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
 8002994:	68ab      	ldr	r3, [r5, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b08      	cmp	r3, #8
 800299c:	f43f aeca 	beq.w	8002734 <HAL_RCC_OscConfig+0x8>
 80029a0:	4e1b      	ldr	r6, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x2e4>)
 80029a2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80029a6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a8:	d134      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80029aa:	f7fe fae1 	bl	8000f70 <HAL_GetTick>
 80029ae:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	0199      	lsls	r1, r3, #6
 80029b4:	d41e      	bmi.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029cc:	0852      	lsrs	r2, r2, #1
 80029ce:	3a01      	subs	r2, #1
 80029d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029d4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80029d6:	2301      	movs	r3, #1
 80029d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029da:	f7fe fac9 	bl	8000f70 <HAL_GetTick>
 80029de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	f53f aebc 	bmi.w	8002760 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fac2 	bl	8000f70 <HAL_GetTick>
 80029ec:	1b40      	subs	r0, r0, r5
 80029ee:	2802      	cmp	r0, #2
 80029f0:	d9f6      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2b4>
 80029f2:	e6e2      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fabc 	bl	8000f70 <HAL_GetTick>
 80029f8:	1bc0      	subs	r0, r0, r7
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9d8      	bls.n	80029b0 <HAL_RCC_OscConfig+0x284>
 80029fe:	e6dc      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002a14:	f7fe faac 	bl	8000f70 <HAL_GetTick>
 8002a18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	f57f ae9f 	bpl.w	8002760 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe faa5 	bl	8000f70 <HAL_GetTick>
 8002a26:	1b00      	subs	r0, r0, r4
 8002a28:	2802      	cmp	r0, #2
 8002a2a:	d9f6      	bls.n	8002a1a <HAL_RCC_OscConfig+0x2ee>
 8002a2c:	e6c5      	b.n	80027ba <HAL_RCC_OscConfig+0x8e>
 8002a2e:	bf00      	nop

08002a30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a30:	4913      	ldr	r1, [pc, #76]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002a32:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a34:	688b      	ldr	r3, [r1, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x16>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a42:	4810      	ldr	r0, [pc, #64]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8002a46:	4810      	ldr	r0, [pc, #64]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8002a48:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a50:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	bf14      	ite	ne
 8002a56:	480c      	ldrne	r0, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	480a      	ldreq	r0, [pc, #40]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a5e:	bf18      	it	ne
 8002a60:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	fba1 0100 	umull	r0, r1, r1, r0
 8002a6a:	f7fe f8b7 	bl	8000bdc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x50>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002a7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a7e:	e7e3      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x18>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <HAL_RCC_ClockConfig>:
{
 8002a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a90:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002a92:	4604      	mov	r4, r0
 8002a94:	b910      	cbnz	r0, 8002a9c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a96:	2001      	movs	r0, #1
}
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCC_ClockConfig+0x120>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	f002 020f 	and.w	r2, r2, #15
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	d327      	bcc.n	8002af8 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	6821      	ldr	r1, [r4, #0]
 8002aaa:	078f      	lsls	r7, r1, #30
 8002aac:	d42c      	bmi.n	8002b08 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	07c8      	lsls	r0, r1, #31
 8002ab0:	d43f      	bmi.n	8002b32 <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_ClockConfig+0x120>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f002 020f 	and.w	r2, r2, #15
 8002aba:	42aa      	cmp	r2, r5
 8002abc:	d864      	bhi.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	0751      	lsls	r1, r2, #29
 8002ac2:	d46a      	bmi.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	0713      	lsls	r3, r2, #28
 8002ac6:	d507      	bpl.n	8002ad8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac8:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
 8002aca:	6921      	ldr	r1, [r4, #16]
 8002acc:	6893      	ldr	r3, [r2, #8]
 8002ace:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ad2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ad6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad8:	f7ff ffaa 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <HAL_RCC_ClockConfig+0x128>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	40d8      	lsrs	r0, r3
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_ClockConfig+0x12c>)
 8002aec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f9f4 	bl	8000edc <HAL_InitTick>
  return HAL_OK;
 8002af4:	2000      	movs	r0, #0
 8002af6:	e7cf      	b.n	8002a98 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af8:	b2ca      	uxtb	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	428b      	cmp	r3, r1
 8002b04:	d1c7      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xa>
 8002b06:	e7cf      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1c>
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0e:	bf1e      	ittt	ne
 8002b10:	689a      	ldrne	r2, [r3, #8]
 8002b12:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002b16:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1a:	bf42      	ittt	mi
 8002b1c:	689a      	ldrmi	r2, [r3, #8]
 8002b1e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002b22:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	68a0      	ldr	r0, [r4, #8]
 8002b28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b2c:	4302      	orrs	r2, r0
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e7bd      	b.n	8002aae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	d0a9      	beq.n	8002a96 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4e1b      	ldr	r6, [pc, #108]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
 8002b44:	68b3      	ldr	r3, [r6, #8]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fa0f 	bl	8000f70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b52:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b56:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b58:	68b3      	ldr	r3, [r6, #8]
 8002b5a:	6862      	ldr	r2, [r4, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b64:	d0a5      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7fe fa03 	bl	8000f70 <HAL_GetTick>
 8002b6a:	1bc0      	subs	r0, r0, r7
 8002b6c:	4540      	cmp	r0, r8
 8002b6e:	d9f3      	bls.n	8002b58 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8002b70:	2003      	movs	r0, #3
 8002b72:	e791      	b.n	8002a98 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b74:	1e91      	subs	r1, r2, #2
 8002b76:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	d802      	bhi.n	8002b82 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b80:	e7de      	b.n	8002b40 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	f013 0f02 	tst.w	r3, #2
 8002b86:	e7db      	b.n	8002b40 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b88:	b2ea      	uxtb	r2, r5
 8002b8a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	42ab      	cmp	r3, r5
 8002b94:	f47f af7f 	bne.w	8002a96 <HAL_RCC_ClockConfig+0xa>
 8002b98:	e791      	b.n	8002abe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9a:	4905      	ldr	r1, [pc, #20]	; (8002bb0 <HAL_RCC_ClockConfig+0x124>)
 8002b9c:	68e0      	ldr	r0, [r4, #12]
 8002b9e:	688b      	ldr	r3, [r1, #8]
 8002ba0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ba4:	4303      	orrs	r3, r0
 8002ba6:	608b      	str	r3, [r1, #8]
 8002ba8:	e78c      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x38>
 8002baa:	bf00      	nop
 8002bac:	40023c00 	.word	0x40023c00
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0801273b 	.word	0x0801273b
 8002bb8:	200005b4 	.word	0x200005b4

08002bbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	200005b4 	.word	0x200005b4

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x14>)
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bd6:	6810      	ldr	r0, [r2, #0]
}
 8002bd8:	40d8      	lsrs	r0, r3
 8002bda:	4770      	bx	lr
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	0801274b 	.word	0x0801274b
 8002be4:	200005b4 	.word	0x200005b4

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x14>)
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bf6:	6810      	ldr	r0, [r2, #0]
}
 8002bf8:	40d8      	lsrs	r0, r3
 8002bfa:	4770      	bx	lr
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	0801274b 	.word	0x0801274b
 8002c04:	200005b4 	.word	0x200005b4

08002c08 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002c08:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	b190      	cbz	r0, 8002c34 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c0e:	7943      	ldrb	r3, [r0, #5]
 8002c10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c14:	b913      	cbnz	r3, 8002c1c <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c16:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c18:	f009 ff5a 	bl	800cad0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c1c:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c1e:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c20:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c2a:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c30:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8002c32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e7fc      	b.n	8002c32 <HAL_RNG_Init+0x2a>

08002c38 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002c3a:	7903      	ldrb	r3, [r0, #4]
 8002c3c:	2b01      	cmp	r3, #1
{
 8002c3e:	4604      	mov	r4, r0
 8002c40:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8002c42:	d025      	beq.n	8002c90 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002c44:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng);
 8002c46:	2001      	movs	r0, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002c48:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 8002c4a:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8002c4c:	d11d      	bne.n	8002c8a <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c52:	f7fe f98d 	bl	8000f70 <HAL_GetTick>
 8002c56:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6855      	ldr	r5, [r2, #4]
 8002c5c:	f015 0501 	ands.w	r5, r5, #1
 8002c60:	d008      	beq.n	8002c74 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002c62:	6893      	ldr	r3, [r2, #8]
 8002c64:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8002c66:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2000      	movs	r0, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	7123      	strb	r3, [r4, #4]

  return status;
 8002c72:	e009      	b.n	8002c88 <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002c74:	f7fe f97c 	bl	8000f70 <HAL_GetTick>
 8002c78:	1bc0      	subs	r0, r0, r7
 8002c7a:	2802      	cmp	r0, #2
 8002c7c:	d9ec      	bls.n	8002c58 <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 8002c7e:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002c80:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8002c82:	7160      	strb	r0, [r4, #5]
        __HAL_UNLOCK(hrng);
 8002c84:	7125      	strb	r5, [r4, #4]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002c86:	60a3      	str	r3, [r4, #8]
}
 8002c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	60a3      	str	r3, [r4, #8]
 8002c8e:	e7ee      	b.n	8002c6e <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 8002c90:	2002      	movs	r0, #2
 8002c92:	e7f9      	b.n	8002c88 <HAL_RNG_GenerateRandomNumber+0x50>

08002c94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c94:	6a03      	ldr	r3, [r0, #32]
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9c:	6a03      	ldr	r3, [r0, #32]
{
 8002c9e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ca6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002caa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002cae:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002cb2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cb4:	4d0e      	ldr	r5, [pc, #56]	; (8002cf0 <TIM_OC1_SetConfig+0x5c>)
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	d002      	beq.n	8002cc0 <TIM_OC1_SetConfig+0x2c>
 8002cba:	4e0e      	ldr	r6, [pc, #56]	; (8002cf4 <TIM_OC1_SetConfig+0x60>)
 8002cbc:	42b0      	cmp	r0, r6
 8002cbe:	d110      	bne.n	8002ce2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cc0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cc2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002cc6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cca:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	d002      	beq.n	8002cd6 <TIM_OC1_SetConfig+0x42>
 8002cd0:	4d08      	ldr	r5, [pc, #32]	; (8002cf4 <TIM_OC1_SetConfig+0x60>)
 8002cd2:	42a8      	cmp	r0, r5
 8002cd4:	d105      	bne.n	8002ce2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cda:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cde:	4335      	orrs	r5, r6
 8002ce0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ce6:	684a      	ldr	r2, [r1, #4]
 8002ce8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cea:	6203      	str	r3, [r0, #32]
}
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf8:	6a03      	ldr	r3, [r0, #32]
 8002cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cfe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d00:	6a03      	ldr	r3, [r0, #32]
{
 8002d02:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d0a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d0e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d10:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002d12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1a:	4d11      	ldr	r5, [pc, #68]	; (8002d60 <TIM_OC3_SetConfig+0x68>)
 8002d1c:	42a8      	cmp	r0, r5
 8002d1e:	d003      	beq.n	8002d28 <TIM_OC3_SetConfig+0x30>
 8002d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d24:	42a8      	cmp	r0, r5
 8002d26:	d114      	bne.n	8002d52 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d28:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d32:	4d0b      	ldr	r5, [pc, #44]	; (8002d60 <TIM_OC3_SetConfig+0x68>)
 8002d34:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3a:	d003      	beq.n	8002d44 <TIM_OC3_SetConfig+0x4c>
 8002d3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d40:	42a8      	cmp	r0, r5
 8002d42:	d106      	bne.n	8002d52 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d44:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d48:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d4c:	4335      	orrs	r5, r6
 8002d4e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d52:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d54:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d56:	684a      	ldr	r2, [r1, #4]
 8002d58:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5a:	6203      	str	r3, [r0, #32]
}
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
 8002d5e:	bf00      	nop
 8002d60:	40010000 	.word	0x40010000

08002d64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d64:	6a03      	ldr	r3, [r0, #32]
 8002d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6c:	6a03      	ldr	r3, [r0, #32]
{
 8002d6e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d76:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d88:	4d08      	ldr	r5, [pc, #32]	; (8002dac <TIM_OC4_SetConfig+0x48>)
 8002d8a:	42a8      	cmp	r0, r5
 8002d8c:	d003      	beq.n	8002d96 <TIM_OC4_SetConfig+0x32>
 8002d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d92:	42a8      	cmp	r0, r5
 8002d94:	d104      	bne.n	8002da0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d96:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d98:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d9c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da4:	684a      	ldr	r2, [r1, #4]
 8002da6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da8:	6203      	str	r3, [r0, #32]
}
 8002daa:	bd30      	pop	{r4, r5, pc}
 8002dac:	40010000 	.word	0x40010000

08002db0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbe:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002dc0:	bf1e      	ittt	ne
 8002dc2:	681a      	ldrne	r2, [r3, #0]
 8002dc4:	f042 0201 	orrne.w	r2, r2, #1
 8002dc8:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd4:	6803      	ldr	r3, [r0, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002de6:	bf1e      	ittt	ne
 8002de8:	681a      	ldrne	r2, [r3, #0]
 8002dea:	f042 0201 	orrne.w	r2, r2, #1
 8002dee:	601a      	strne	r2, [r3, #0]
}
 8002df0:	2000      	movs	r0, #0
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PWM_MspInit>:
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIM_PeriodElapsedCallback>:
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_IC_CaptureCallback>:
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIM_PWM_PulseFinishedCallback>:
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_TriggerCallback>:
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	0791      	lsls	r1, r2, #30
{
 8002e06:	b510      	push	{r4, lr}
 8002e08:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0a:	d50e      	bpl.n	8002e2a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	0792      	lsls	r2, r2, #30
 8002e10:	d50b      	bpl.n	8002e2a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e12:	f06f 0202 	mvn.w	r2, #2
 8002e16:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e18:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e1c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e20:	d077      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	f7ff ffea 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	2300      	movs	r3, #0
 8002e28:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	0750      	lsls	r0, r2, #29
 8002e30:	d510      	bpl.n	8002e54 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	0751      	lsls	r1, r2, #29
 8002e36:	d50d      	bpl.n	8002e54 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e38:	f06f 0204 	mvn.w	r2, #4
 8002e3c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e40:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e42:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e48:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4a:	d068      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4c:	f7ff ffd5 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e50:	2300      	movs	r3, #0
 8002e52:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	0712      	lsls	r2, r2, #28
 8002e5a:	d50f      	bpl.n	8002e7c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	0710      	lsls	r0, r2, #28
 8002e60:	d50c      	bpl.n	8002e7c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e62:	f06f 0208 	mvn.w	r2, #8
 8002e66:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e68:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e72:	d05a      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e74:	f7ff ffc1 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	06d2      	lsls	r2, r2, #27
 8002e82:	d510      	bpl.n	8002ea6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	06d0      	lsls	r0, r2, #27
 8002e88:	d50d      	bpl.n	8002ea6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e8a:	f06f 0210 	mvn.w	r2, #16
 8002e8e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e92:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e94:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e98:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e9c:	d04b      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	f7ff ffac 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	07d1      	lsls	r1, r2, #31
 8002eac:	d508      	bpl.n	8002ec0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	07d2      	lsls	r2, r2, #31
 8002eb2:	d505      	bpl.n	8002ec0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb4:	f06f 0201 	mvn.w	r2, #1
 8002eb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff ff9b 	bl	8002df6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	0610      	lsls	r0, r2, #24
 8002ec6:	d508      	bpl.n	8002eda <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	0611      	lsls	r1, r2, #24
 8002ecc:	d505      	bpl.n	8002eda <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ece:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f000 fa54 	bl	8003382 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	0652      	lsls	r2, r2, #25
 8002ee0:	d508      	bpl.n	8002ef4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	0650      	lsls	r0, r2, #25
 8002ee6:	d505      	bpl.n	8002ef4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff ff85 	bl	8002dfe <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	0691      	lsls	r1, r2, #26
 8002efa:	d522      	bpl.n	8002f42 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	0692      	lsls	r2, r2, #26
 8002f00:	d51f      	bpl.n	8002f42 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002f06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f08:	611a      	str	r2, [r3, #16]
}
 8002f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f0e:	f000 ba37 	b.w	8003380 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	f7ff ff71 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff ff70 	bl	8002dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8002f1c:	e783      	b.n	8002e26 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	f7ff ff6b 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff ff6a 	bl	8002dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8002f28:	e792      	b.n	8002e50 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	f7ff ff65 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ff64 	bl	8002dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8002f34:	e7a0      	b.n	8002e78 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	f7ff ff5f 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7ff ff5e 	bl	8002dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8002f40:	e7af      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xa2>
}
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f44:	4a30      	ldr	r2, [pc, #192]	; (8003008 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002f46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	4290      	cmp	r0, r2
 8002f4a:	d012      	beq.n	8002f72 <TIM_Base_SetConfig+0x2e>
 8002f4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f50:	d00f      	beq.n	8002f72 <TIM_Base_SetConfig+0x2e>
 8002f52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f56:	4290      	cmp	r0, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_Base_SetConfig+0x2e>
 8002f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f5e:	4290      	cmp	r0, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0x2e>
 8002f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f66:	4290      	cmp	r0, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0x2e>
 8002f6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f6e:	4290      	cmp	r0, r2
 8002f70:	d119      	bne.n	8002fa6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002f72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f78:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <TIM_Base_SetConfig+0xc4>)
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d029      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002f80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f84:	d026      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002f86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f8a:	4290      	cmp	r0, r2
 8002f8c:	d022      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f92:	4290      	cmp	r0, r2
 8002f94:	d01e      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f9a:	4290      	cmp	r0, r2
 8002f9c:	d01a      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002f9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fa2:	4290      	cmp	r0, r2
 8002fa4:	d016      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <TIM_Base_SetConfig+0xc8>)
 8002fa8:	4290      	cmp	r0, r2
 8002faa:	d013      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	d00f      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb8:	4290      	cmp	r0, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fbc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002fc0:	4290      	cmp	r0, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fc8:	4290      	cmp	r0, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x90>
 8002fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fd0:	4290      	cmp	r0, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	694a      	ldr	r2, [r1, #20]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fe4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe6:	688b      	ldr	r3, [r1, #8]
 8002fe8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fea:	680b      	ldr	r3, [r1, #0]
 8002fec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <TIM_Base_SetConfig+0xc4>)
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xb8>
 8002ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff8:	4298      	cmp	r0, r3
 8002ffa:	d101      	bne.n	8003000 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	690b      	ldr	r3, [r1, #16]
 8002ffe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003000:	2301      	movs	r3, #1
 8003002:	6143      	str	r3, [r0, #20]
}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40014000 	.word	0x40014000

08003010 <HAL_TIM_Base_Init>:
{
 8003010:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003012:	4604      	mov	r4, r0
 8003014:	b1a0      	cbz	r0, 8003040 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003016:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800301a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800301e:	b91b      	cbnz	r3, 8003028 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003020:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003024:	f009 fd6c 	bl	800cb00 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	1d21      	adds	r1, r4, #4
 8003032:	f7ff ff87 	bl	8002f44 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003036:	2301      	movs	r3, #1
 8003038:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800303c:	2000      	movs	r0, #0
}
 800303e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e7fc      	b.n	800303e <HAL_TIM_Base_Init+0x2e>

08003044 <HAL_TIM_PWM_Init>:
{
 8003044:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003046:	4604      	mov	r4, r0
 8003048:	b1a0      	cbz	r0, 8003074 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800304e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003052:	b91b      	cbnz	r3, 800305c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003054:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003058:	f7ff fecc 	bl	8002df4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1d21      	adds	r1, r4, #4
 8003066:	f7ff ff6d 	bl	8002f44 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800306a:	2301      	movs	r3, #1
 800306c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
}
 8003072:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	e7fc      	b.n	8003072 <HAL_TIM_PWM_Init+0x2e>

08003078 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003078:	6a03      	ldr	r3, [r0, #32]
 800307a:	f023 0310 	bic.w	r3, r3, #16
 800307e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003080:	6a03      	ldr	r3, [r0, #32]
{
 8003082:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8003084:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003086:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003088:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800308a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003092:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003094:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003098:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800309c:	4d10      	ldr	r5, [pc, #64]	; (80030e0 <TIM_OC2_SetConfig+0x68>)
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d003      	beq.n	80030aa <TIM_OC2_SetConfig+0x32>
 80030a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	d114      	bne.n	80030d4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80030ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b4:	4d0a      	ldr	r5, [pc, #40]	; (80030e0 <TIM_OC2_SetConfig+0x68>)
 80030b6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	d003      	beq.n	80030c6 <TIM_OC2_SetConfig+0x4e>
 80030be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030c2:	42a8      	cmp	r0, r5
 80030c4:	d106      	bne.n	80030d4 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ca:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030ce:	4335      	orrs	r5, r6
 80030d0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80030d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030d6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80030d8:	684a      	ldr	r2, [r1, #4]
 80030da:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030dc:	6203      	str	r3, [r0, #32]
}
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	40010000 	.word	0x40010000

080030e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80030e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80030e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
{
 80030ec:	4604      	mov	r4, r0
 80030ee:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80030f2:	d025      	beq.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80030f4:	2301      	movs	r3, #1
 80030f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80030fe:	2a0c      	cmp	r2, #12
 8003100:	d818      	bhi.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003102:	e8df f002 	tbb	[pc, r2]
 8003106:	1707      	.short	0x1707
 8003108:	171e1717 	.word	0x171e1717
 800310c:	172f1717 	.word	0x172f1717
 8003110:	1717      	.short	0x1717
 8003112:	40          	.byte	0x40
 8003113:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	f7ff fdbd 	bl	8002c94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800311c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	f042 0208 	orr.w	r2, r2, #8
 8003124:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003132:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003134:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003136:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800313c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003140:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f7ff ff98 	bl	8003078 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003148:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800314a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003162:	e7e6      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	f7ff fdc7 	bl	8002cf8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	f042 0208 	orr.w	r2, r2, #8
 8003174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	f022 0204 	bic.w	r2, r2, #4
 800317c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003182:	61da      	str	r2, [r3, #28]
      break;
 8003184:	e7d6      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	f7ff fdec 	bl	8002d64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800318c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800318e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031a6:	e7ec      	b.n	8003182 <HAL_TIM_PWM_ConfigChannel+0x9e>

080031a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031aa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80031b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b8:	6083      	str	r3, [r0, #8]
}
 80031ba:	bd10      	pop	{r4, pc}

080031bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
{
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	4604      	mov	r4, r0
 80031c6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80031ca:	d019      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80031d2:	2301      	movs	r3, #1
 80031d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80031e2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80031e4:	680b      	ldr	r3, [r1, #0]
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d065      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xfa>
 80031ea:	d815      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x5c>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d00c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x4e>
 80031f0:	d807      	bhi.n	8003202 <HAL_TIM_ConfigClockSource+0x46>
 80031f2:	b153      	cbz	r3, 800320a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031f6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003200:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003202:	2b20      	cmp	r3, #32
 8003204:	d001      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x4e>
 8003206:	2b30      	cmp	r3, #48	; 0x30
 8003208:	d1f4      	bne.n	80031f4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800320a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800320c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003210:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003214:	4313      	orrs	r3, r2
 8003216:	e01a      	b.n	800324e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d034      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0xca>
 800321c:	d819      	bhi.n	8003252 <HAL_TIM_ConfigClockSource+0x96>
 800321e:	2b50      	cmp	r3, #80	; 0x50
 8003220:	d1e8      	bne.n	80031f4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	684a      	ldr	r2, [r1, #4]
 8003224:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003226:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003228:	6a05      	ldr	r5, [r0, #32]
 800322a:	f025 0501 	bic.w	r5, r5, #1
 800322e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003230:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003232:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800323e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003240:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003242:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003244:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800324a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800324e:	6083      	str	r3, [r0, #8]
 8003250:	e7d0      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003252:	2b70      	cmp	r3, #112	; 0x70
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0xb4>
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	d1cb      	bne.n	80031f4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	68cb      	ldr	r3, [r1, #12]
 800325e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003262:	f7ff ffa1 	bl	80031a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	6893      	ldr	r3, [r2, #8]
 800326a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326e:	e008      	b.n	8003282 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003270:	68cb      	ldr	r3, [r1, #12]
 8003272:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003276:	f7ff ff97 	bl	80031a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800327e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003282:	6093      	str	r3, [r2, #8]
      break;
 8003284:	e7b6      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003286:	684d      	ldr	r5, [r1, #4]
 8003288:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	6a01      	ldr	r1, [r0, #32]
 800328c:	f021 0110 	bic.w	r1, r1, #16
 8003290:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003294:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003296:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800329e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80032a6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80032a8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80032b4:	e7cb      	b.n	800324e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	684a      	ldr	r2, [r1, #4]
 80032b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80032ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	6a05      	ldr	r5, [r0, #32]
 80032be:	f025 0501 	bic.w	r5, r5, #1
 80032c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ce:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80032d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032de:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80032e2:	e7b4      	b.n	800324e <HAL_TIM_ConfigClockSource+0x92>

080032e4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032e6:	f001 011f 	and.w	r1, r1, #31
{
 80032ea:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ec:	2401      	movs	r4, #1
 80032ee:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80032f0:	ea23 0304 	bic.w	r3, r3, r4
 80032f4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f6:	6a03      	ldr	r3, [r0, #32]
 80032f8:	408a      	lsls	r2, r1
 80032fa:	431a      	orrs	r2, r3
 80032fc:	6202      	str	r2, [r0, #32]
}
 80032fe:	bd10      	pop	{r4, pc}

08003300 <HAL_TIM_OC_Start>:
{
 8003300:	b510      	push	{r4, lr}
 8003302:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003304:	2201      	movs	r2, #1
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	f7ff ffec 	bl	80032e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <HAL_TIM_OC_Start+0x3c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_TIM_OC_Start+0x1c>
 8003314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800331c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800332c:	bf1e      	ittt	ne
 800332e:	681a      	ldrne	r2, [r3, #0]
 8003330:	f042 0201 	orrne.w	r2, r2, #1
 8003334:	601a      	strne	r2, [r3, #0]
}
 8003336:	2000      	movs	r0, #0
 8003338:	bd10      	pop	{r4, pc}
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000

08003340 <HAL_TIM_PWM_Start>:
 8003340:	f7ff bfde 	b.w	8003300 <HAL_TIM_OC_Start>

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003344:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
{
 800334a:	b530      	push	{r4, r5, lr}
 800334c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003350:	d014      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003352:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003358:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800335a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003360:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003368:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800336e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003370:	2301      	movs	r3, #1
 8003372:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003376:	2300      	movs	r3, #0
 8003378:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800337c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800337e:	bd30      	pop	{r4, r5, pc}

08003380 <HAL_TIMEx_CommutCallback>:
 8003380:	4770      	bx	lr

08003382 <HAL_TIMEx_BreakCallback>:
 8003382:	4770      	bx	lr

08003384 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003384:	6803      	ldr	r3, [r0, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800338c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003396:	2320      	movs	r3, #32
 8003398:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800339c:	4770      	bx	lr
	...

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	6803      	ldr	r3, [r0, #0]
 80033a6:	68c1      	ldr	r1, [r0, #12]
 80033a8:	691a      	ldr	r2, [r3, #16]
{
 80033aa:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80033b0:	430a      	orrs	r2, r1
 80033b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b4:	6925      	ldr	r5, [r4, #16]
 80033b6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033b8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ba:	69c0      	ldr	r0, [r0, #28]
 80033bc:	432a      	orrs	r2, r5
 80033be:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80033c0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033c4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80033c6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	69a1      	ldr	r1, [r4, #24]
 80033d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033d8:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e2:	d17b      	bne.n	80034dc <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <UART_SetConfig+0x50>
 80033e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d144      	bne.n	800347a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033f0:	f7ff fbfa 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 80033f4:	6867      	ldr	r7, [r4, #4]
 80033f6:	2519      	movs	r5, #25
 80033f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80033fc:	fb05 f300 	mul.w	r3, r5, r0
 8003400:	007f      	lsls	r7, r7, #1
 8003402:	fbb3 f3f7 	udiv	r3, r3, r7
 8003406:	fbb3 f3f8 	udiv	r3, r3, r8
 800340a:	011f      	lsls	r7, r3, #4
 800340c:	f7ff fbec 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	4368      	muls	r0, r5
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fbb0 f6f3 	udiv	r6, r0, r3
 800341a:	f7ff fbe5 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	4368      	muls	r0, r5
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fbb0 f3f3 	udiv	r3, r0, r3
 8003428:	fbb3 f3f8 	udiv	r3, r3, r8
 800342c:	fb08 6313 	mls	r3, r8, r3, r6
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	fbb3 f3f8 	udiv	r3, r3, r8
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800343e:	f7ff fbd3 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003442:	6862      	ldr	r2, [r4, #4]
 8003444:	4368      	muls	r0, r5
 8003446:	0052      	lsls	r2, r2, #1
 8003448:	fbb0 f9f2 	udiv	r9, r0, r2
 800344c:	f7ff fbcc 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	4368      	muls	r0, r5
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fbb0 f3f3 	udiv	r3, r0, r3
 800345c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003460:	fb08 9313 	mls	r3, r8, r3, r9
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	fbb3 f3f8 	udiv	r3, r3, r8
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	443b      	add	r3, r7
 8003472:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003474:	6093      	str	r3, [r2, #8]
    }
  }
}
 8003476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800347a:	f7ff fba5 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800347e:	6867      	ldr	r7, [r4, #4]
 8003480:	2519      	movs	r5, #25
 8003482:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003486:	fb05 f300 	mul.w	r3, r5, r0
 800348a:	007f      	lsls	r7, r7, #1
 800348c:	fbb3 f3f7 	udiv	r3, r3, r7
 8003490:	fbb3 f3f8 	udiv	r3, r3, r8
 8003494:	011f      	lsls	r7, r3, #4
 8003496:	f7ff fb97 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800349a:	6863      	ldr	r3, [r4, #4]
 800349c:	4368      	muls	r0, r5
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb0 f6f3 	udiv	r6, r0, r3
 80034a4:	f7ff fb90 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	4368      	muls	r0, r5
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80034b6:	fb08 6313 	mls	r3, r8, r3, r6
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	fbb3 f3f8 	udiv	r3, r3, r8
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80034c8:	f7ff fb7e 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80034cc:	6862      	ldr	r2, [r4, #4]
 80034ce:	4368      	muls	r0, r5
 80034d0:	0052      	lsls	r2, r2, #1
 80034d2:	fbb0 f9f2 	udiv	r9, r0, r2
 80034d6:	f7ff fb77 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80034da:	e7b9      	b.n	8003450 <UART_SetConfig+0xb0>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034dc:	4293      	cmp	r3, r2
 80034de:	d002      	beq.n	80034e6 <UART_SetConfig+0x146>
 80034e0:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <UART_SetConfig+0x230>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d141      	bne.n	800356a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034e6:	f7ff fb7f 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 80034ea:	6867      	ldr	r7, [r4, #4]
 80034ec:	2519      	movs	r5, #25
 80034ee:	f04f 0864 	mov.w	r8, #100	; 0x64
 80034f2:	fb05 f300 	mul.w	r3, r5, r0
 80034f6:	00bf      	lsls	r7, r7, #2
 80034f8:	fbb3 f3f7 	udiv	r3, r3, r7
 80034fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8003500:	011f      	lsls	r7, r3, #4
 8003502:	f7ff fb71 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	4368      	muls	r0, r5
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb0 f6f3 	udiv	r6, r0, r3
 8003510:	f7ff fb6a 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	4368      	muls	r0, r5
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003522:	fb08 6313 	mls	r3, r8, r3, r6
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	3332      	adds	r3, #50	; 0x32
 800352a:	fbb3 f3f8 	udiv	r3, r3, r8
 800352e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8003532:	f7ff fb59 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003536:	6862      	ldr	r2, [r4, #4]
 8003538:	4368      	muls	r0, r5
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	fbb0 f9f2 	udiv	r9, r0, r2
 8003540:	f7ff fb52 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003544:	6863      	ldr	r3, [r4, #4]
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	4368      	muls	r0, r5
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003550:	fbb3 f3f8 	udiv	r3, r3, r8
 8003554:	fb08 9313 	mls	r3, r8, r3, r9
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	4333      	orrs	r3, r6
 8003566:	443b      	add	r3, r7
 8003568:	e784      	b.n	8003474 <UART_SetConfig+0xd4>
 800356a:	f7ff fb2d 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800356e:	6867      	ldr	r7, [r4, #4]
 8003570:	2519      	movs	r5, #25
 8003572:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003576:	fb05 f300 	mul.w	r3, r5, r0
 800357a:	00bf      	lsls	r7, r7, #2
 800357c:	fbb3 f3f7 	udiv	r3, r3, r7
 8003580:	fbb3 f3f8 	udiv	r3, r3, r8
 8003584:	011f      	lsls	r7, r3, #4
 8003586:	f7ff fb1f 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800358a:	6863      	ldr	r3, [r4, #4]
 800358c:	4368      	muls	r0, r5
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb0 f6f3 	udiv	r6, r0, r3
 8003594:	f7ff fb18 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	4368      	muls	r0, r5
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80035a6:	fb08 6313 	mls	r3, r8, r3, r6
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	3332      	adds	r3, #50	; 0x32
 80035ae:	fbb3 f3f8 	udiv	r3, r3, r8
 80035b2:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80035b6:	f7ff fb07 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	4368      	muls	r0, r5
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	fbb0 f9f2 	udiv	r9, r0, r2
 80035c4:	f7ff fb00 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80035c8:	e7bc      	b.n	8003544 <UART_SetConfig+0x1a4>
 80035ca:	bf00      	nop
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40011400 	.word	0x40011400

080035d4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	460e      	mov	r6, r1
 80035da:	4617      	mov	r7, r2
 80035dc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	680b      	ldr	r3, [r1, #0]
 80035e2:	ea36 0303 	bics.w	r3, r6, r3
 80035e6:	d101      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80035e8:	2000      	movs	r0, #0
 80035ea:	e014      	b.n	8003616 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	1c6b      	adds	r3, r5, #1
 80035ee:	d0f7      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f0:	b995      	cbnz	r5, 8003618 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003604:	2320      	movs	r3, #32
 8003606:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800360e:	2300      	movs	r3, #0
 8003610:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003614:	2003      	movs	r0, #3
}
 8003616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003618:	f7fd fcaa 	bl	8000f70 <HAL_GetTick>
 800361c:	1bc0      	subs	r0, r0, r7
 800361e:	4285      	cmp	r5, r0
 8003620:	d2dd      	bcs.n	80035de <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003622:	e7e6      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003624 <HAL_UART_Init>:
{
 8003624:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003626:	4604      	mov	r4, r0
 8003628:	b340      	cbz	r0, 800367c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800362e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003632:	b91b      	cbnz	r3, 800363c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003634:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003638:	f009 fabe 	bl	800cbb8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800363c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800363e:	2324      	movs	r3, #36	; 0x24
 8003640:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003644:	68d3      	ldr	r3, [r2, #12]
 8003646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff fea7 	bl	80033a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800365a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003662:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800366e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003670:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003672:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003676:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800367a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7fc      	b.n	800367a <HAL_UART_Init+0x56>

08003680 <HAL_UART_Transmit>:
{
 8003680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003684:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003686:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800368a:	2b20      	cmp	r3, #32
{
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003692:	d14d      	bne.n	8003730 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003694:	2900      	cmp	r1, #0
 8003696:	d049      	beq.n	800372c <HAL_UART_Transmit+0xac>
 8003698:	2a00      	cmp	r2, #0
 800369a:	d047      	beq.n	800372c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800369c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d045      	beq.n	8003730 <HAL_UART_Transmit+0xb0>
 80036a4:	2301      	movs	r3, #1
 80036a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ae:	2321      	movs	r3, #33	; 0x21
 80036b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80036b4:	f7fd fc5c 	bl	8000f70 <HAL_GetTick>
    huart->TxXferSize = Size;
 80036b8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80036bc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80036be:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b963      	cbnz	r3, 80036e2 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c8:	463b      	mov	r3, r7
 80036ca:	4632      	mov	r2, r6
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ff80 	bl	80035d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80036d4:	b9a8      	cbnz	r0, 8003702 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80036d6:	2320      	movs	r3, #32
 80036d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80036dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80036e0:	e010      	b.n	8003704 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 80036e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f0:	4632      	mov	r2, r6
 80036f2:	463b      	mov	r3, r7
 80036f4:	f04f 0180 	mov.w	r1, #128	; 0x80
 80036f8:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036fa:	d10e      	bne.n	800371a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fc:	f7ff ff6a 	bl	80035d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003700:	b110      	cbz	r0, 8003708 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
}
 8003704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003708:	882b      	ldrh	r3, [r5, #0]
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003710:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003712:	6923      	ldr	r3, [r4, #16]
 8003714:	b943      	cbnz	r3, 8003728 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8003716:	3502      	adds	r5, #2
 8003718:	e7d3      	b.n	80036c2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	f7ff ff5b 	bl	80035d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800371e:	2800      	cmp	r0, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	782a      	ldrb	r2, [r5, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	3501      	adds	r5, #1
 800372a:	e7ca      	b.n	80036c2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	e7e9      	b.n	8003704 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003730:	2002      	movs	r0, #2
 8003732:	e7e7      	b.n	8003704 <HAL_UART_Transmit+0x84>

08003734 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003734:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003738:	2b20      	cmp	r3, #32
 800373a:	d118      	bne.n	800376e <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800373c:	b1a9      	cbz	r1, 800376a <HAL_UART_Transmit_IT+0x36>
 800373e:	b1a2      	cbz	r2, 800376a <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003740:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003744:	2b01      	cmp	r3, #1
 8003746:	d012      	beq.n	800376e <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003748:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800374a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800374c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003750:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003752:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003754:	2221      	movs	r2, #33	; 0x21
 8003756:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800375a:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800375c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003764:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003766:	4618      	mov	r0, r3
 8003768:	4770      	bx	lr
      return HAL_ERROR;
 800376a:	2001      	movs	r0, #1
 800376c:	4770      	bx	lr
    return HAL_BUSY;
 800376e:	2002      	movs	r0, #2
}
 8003770:	4770      	bx	lr

08003772 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003772:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003776:	2b20      	cmp	r3, #32
 8003778:	d120      	bne.n	80037bc <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800377a:	b1e9      	cbz	r1, 80037b8 <HAL_UART_Receive_IT+0x46>
 800377c:	b1e2      	cbz	r2, 80037b8 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800377e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003782:	2b01      	cmp	r3, #1
 8003784:	d01a      	beq.n	80037bc <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8003786:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8003788:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800378c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003790:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003794:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003796:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003798:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800379a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800379e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037a2:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037a4:	6951      	ldr	r1, [r2, #20]
 80037a6:	f041 0101 	orr.w	r1, r1, #1
 80037aa:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037ac:	68d1      	ldr	r1, [r2, #12]
 80037ae:	f041 0120 	orr.w	r1, r1, #32
 80037b2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80037b4:	4618      	mov	r0, r3
 80037b6:	4770      	bx	lr
      return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
 80037ba:	4770      	bx	lr
    return HAL_BUSY;
 80037bc:	2002      	movs	r0, #2
}
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_TxCpltCallback>:
 80037c0:	4770      	bx	lr

080037c2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80037c6:	2b22      	cmp	r3, #34	; 0x22
{
 80037c8:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ca:	d133      	bne.n	8003834 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037cc:	6881      	ldr	r1, [r0, #8]
 80037ce:	6904      	ldr	r4, [r0, #16]
 80037d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80037d2:	6802      	ldr	r2, [r0, #0]
 80037d4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80037d8:	d123      	bne.n	8003822 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037da:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037dc:	b9ec      	cbnz	r4, 800381a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80037e6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80037e8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80037ea:	3c01      	subs	r4, #1
 80037ec:	b2a4      	uxth	r4, r4
 80037ee:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80037f0:	b98c      	cbnz	r4, 8003816 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	f022 0220 	bic.w	r2, r2, #32
 80037fa:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003802:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800380c:	2320      	movs	r3, #32
 800380e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003812:	f008 fd13 	bl	800c23c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8003816:	2000      	movs	r0, #0
 8003818:	e00d      	b.n	8003836 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f823 2b01 	strh.w	r2, [r3], #1
 8003820:	e7e1      	b.n	80037e6 <UART_Receive_IT+0x24>
 8003822:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003824:	6852      	ldr	r2, [r2, #4]
 8003826:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003828:	b90c      	cbnz	r4, 800382e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e7dc      	b.n	80037e8 <UART_Receive_IT+0x26>
 800382e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003832:	e7fa      	b.n	800382a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003834:	2002      	movs	r0, #2
}
 8003836:	bd10      	pop	{r4, pc}

08003838 <HAL_UART_ErrorCallback>:
 8003838:	4770      	bx	lr
	...

0800383c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800383c:	6803      	ldr	r3, [r0, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003840:	68d9      	ldr	r1, [r3, #12]
{
 8003842:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003844:	0716      	lsls	r6, r2, #28
{
 8003846:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003848:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800384a:	d107      	bne.n	800385c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800384c:	0696      	lsls	r6, r2, #26
 800384e:	d558      	bpl.n	8003902 <HAL_UART_IRQHandler+0xc6>
 8003850:	068d      	lsls	r5, r1, #26
 8003852:	d556      	bpl.n	8003902 <HAL_UART_IRQHandler+0xc6>
}
 8003854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003858:	f7ff bfb3 	b.w	80037c2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800385c:	f015 0501 	ands.w	r5, r5, #1
 8003860:	d102      	bne.n	8003868 <HAL_UART_IRQHandler+0x2c>
 8003862:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003866:	d04c      	beq.n	8003902 <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003868:	07d3      	lsls	r3, r2, #31
 800386a:	d505      	bpl.n	8003878 <HAL_UART_IRQHandler+0x3c>
 800386c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386e:	bf42      	ittt	mi
 8003870:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003872:	f043 0301 	orrmi.w	r3, r3, #1
 8003876:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003878:	0750      	lsls	r0, r2, #29
 800387a:	d504      	bpl.n	8003886 <HAL_UART_IRQHandler+0x4a>
 800387c:	b11d      	cbz	r5, 8003886 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003886:	0793      	lsls	r3, r2, #30
 8003888:	d504      	bpl.n	8003894 <HAL_UART_IRQHandler+0x58>
 800388a:	b11d      	cbz	r5, 8003894 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800388c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003894:	0716      	lsls	r6, r2, #28
 8003896:	d504      	bpl.n	80038a2 <HAL_UART_IRQHandler+0x66>
 8003898:	b11d      	cbz	r5, 80038a2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800389a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038a4:	b343      	cbz	r3, 80038f8 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038a6:	0695      	lsls	r5, r2, #26
 80038a8:	d504      	bpl.n	80038b4 <HAL_UART_IRQHandler+0x78>
 80038aa:	0688      	lsls	r0, r1, #26
 80038ac:	d502      	bpl.n	80038b4 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff ff87 	bl	80037c2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038ba:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80038bc:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038be:	d402      	bmi.n	80038c6 <HAL_UART_IRQHandler+0x8a>
 80038c0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80038c4:	d019      	beq.n	80038fa <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 80038c6:	f7ff fd5d 	bl	8003384 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	0652      	lsls	r2, r2, #25
 80038d0:	d50f      	bpl.n	80038f2 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d2:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80038d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038da:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80038dc:	b148      	cbz	r0, 80038f2 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_UART_IRQHandler+0x13c>)
 80038e0:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e2:	f7fd fde9 	bl	80014b8 <HAL_DMA_Abort_IT>
 80038e6:	b138      	cbz	r0, 80038f8 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80038ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038f0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ffa0 	bl	8003838 <HAL_UART_ErrorCallback>
}
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80038fa:	f7ff ff9d 	bl	8003838 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003900:	e7fa      	b.n	80038f8 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003902:	0616      	lsls	r6, r2, #24
 8003904:	d528      	bpl.n	8003958 <HAL_UART_IRQHandler+0x11c>
 8003906:	060d      	lsls	r5, r1, #24
 8003908:	d526      	bpl.n	8003958 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800390a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800390e:	2a21      	cmp	r2, #33	; 0x21
 8003910:	d1f2      	bne.n	80038f8 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003912:	68a1      	ldr	r1, [r4, #8]
 8003914:	6a22      	ldr	r2, [r4, #32]
 8003916:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800391a:	d118      	bne.n	800394e <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800391c:	8811      	ldrh	r1, [r2, #0]
 800391e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003922:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003924:	6921      	ldr	r1, [r4, #16]
 8003926:	b981      	cbnz	r1, 800394a <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8003928:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800392a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800392c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800392e:	3a01      	subs	r2, #1
 8003930:	b292      	uxth	r2, r2
 8003932:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003934:	2a00      	cmp	r2, #0
 8003936:	d1df      	bne.n	80038f8 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	e7d6      	b.n	80038f8 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 800394a:	3201      	adds	r2, #1
 800394c:	e7ed      	b.n	800392a <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394e:	1c51      	adds	r1, r2, #1
 8003950:	6221      	str	r1, [r4, #32]
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e7e9      	b.n	800392c <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003958:	0650      	lsls	r0, r2, #25
 800395a:	d5cd      	bpl.n	80038f8 <HAL_UART_IRQHandler+0xbc>
 800395c:	064a      	lsls	r2, r1, #25
 800395e:	d5cb      	bpl.n	80038f8 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003968:	2320      	movs	r3, #32
 800396a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800396e:	4620      	mov	r0, r4
 8003970:	f7ff ff26 	bl	80037c0 <HAL_UART_TxCpltCallback>
 8003974:	e7c0      	b.n	80038f8 <HAL_UART_IRQHandler+0xbc>
 8003976:	bf00      	nop
 8003978:	0800397d 	.word	0x0800397d

0800397c <UART_DMAAbortOnError>:
{
 800397c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003984:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003986:	f7ff ff57 	bl	8003838 <HAL_UART_ErrorCallback>
}
 800398a:	bd08      	pop	{r3, pc}

0800398c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800398e:	3b01      	subs	r3, #1
 8003990:	d00f      	beq.n	80039b2 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003992:	6902      	ldr	r2, [r0, #16]
 8003994:	2a00      	cmp	r2, #0
 8003996:	dafa      	bge.n	800398e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003998:	6903      	ldr	r3, [r0, #16]
 800399a:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <USB_CoreReset+0x2c>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80039a2:	3a01      	subs	r2, #1
 80039a4:	d005      	beq.n	80039b2 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039a6:	6903      	ldr	r3, [r0, #16]
 80039a8:	f013 0301 	ands.w	r3, r3, #1
 80039ac:	d1f9      	bne.n	80039a2 <USB_CoreReset+0x16>

  return HAL_OK;
 80039ae:	4618      	mov	r0, r3
 80039b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80039b2:	2003      	movs	r0, #3
}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	00030d41 	.word	0x00030d41

080039bc <USB_CoreInit>:
{
 80039bc:	b084      	sub	sp, #16
 80039be:	b538      	push	{r3, r4, r5, lr}
 80039c0:	ad05      	add	r5, sp, #20
 80039c2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039c8:	2b01      	cmp	r3, #1
{
 80039ca:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039cc:	d125      	bne.n	8003a1a <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039d6:	68c3      	ldr	r3, [r0, #12]
 80039d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039e2:	68c3      	ldr	r3, [r0, #12]
 80039e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039e8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80039ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039ec:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ee:	bf02      	ittt	eq
 80039f0:	68c3      	ldreq	r3, [r0, #12]
 80039f2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80039f6:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80039f8:	f7ff ffc8 	bl	800398c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80039fc:	9b08      	ldr	r3, [sp, #32]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	f043 0306 	orr.w	r3, r3, #6
 8003a08:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	f043 0320 	orr.w	r3, r3, #32
 8003a10:	60a3      	str	r3, [r4, #8]
}
 8003a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a16:	b004      	add	sp, #16
 8003a18:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a1a:	68c3      	ldr	r3, [r0, #12]
 8003a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a20:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003a22:	f7ff ffb3 	bl	800398c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a28:	b923      	cbnz	r3, 8003a34 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a30:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a32:	e7e3      	b.n	80039fc <USB_CoreInit+0x40>
 8003a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	e7f9      	b.n	8003a30 <USB_CoreInit+0x74>

08003a3c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a3c:	6883      	ldr	r3, [r0, #8]
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6083      	str	r3, [r0, #8]
}
 8003a44:	2000      	movs	r0, #0
 8003a46:	4770      	bx	lr

08003a48 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a48:	6883      	ldr	r3, [r0, #8]
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6083      	str	r3, [r0, #8]
}
 8003a50:	2000      	movs	r0, #0
 8003a52:	4770      	bx	lr

08003a54 <USB_SetCurrentMode>:
{
 8003a54:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a56:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a58:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a5a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a5e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a60:	d108      	bne.n	8003a74 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a62:	68c3      	ldr	r3, [r0, #12]
 8003a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a68:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003a6a:	2032      	movs	r0, #50	; 0x32
 8003a6c:	f7fd fa86 	bl	8000f7c <HAL_Delay>
  return HAL_OK;
 8003a70:	2000      	movs	r0, #0
}
 8003a72:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003a74:	b919      	cbnz	r1, 8003a7e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a76:	68c3      	ldr	r3, [r0, #12]
 8003a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a7c:	e7f4      	b.n	8003a68 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003a7e:	2001      	movs	r0, #1
 8003a80:	e7f7      	b.n	8003a72 <USB_SetCurrentMode+0x1e>
	...

08003a84 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a84:	0189      	lsls	r1, r1, #6
 8003a86:	f041 0120 	orr.w	r1, r1, #32
 8003a8a:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <USB_FlushTxFifo+0x20>)
 8003a8c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	d005      	beq.n	8003a9e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a92:	6903      	ldr	r3, [r0, #16]
 8003a94:	f013 0320 	ands.w	r3, r3, #32
 8003a98:	d1f9      	bne.n	8003a8e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003a9e:	2003      	movs	r0, #3
}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	00030d41 	.word	0x00030d41

08003aa8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <USB_FlushRxFifo+0x1c>)
 8003aac:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	d005      	beq.n	8003abe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ab2:	6903      	ldr	r3, [r0, #16]
 8003ab4:	f013 0310 	ands.w	r3, r3, #16
 8003ab8:	d1f9      	bne.n	8003aae <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003aba:	4618      	mov	r0, r3
 8003abc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003abe:	2003      	movs	r0, #3
}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	00030d41 	.word	0x00030d41

08003ac8 <USB_WritePacket>:
{
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003ace:	b94c      	cbnz	r4, 8003ae4 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ad0:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ad2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ad6:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ad8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003adc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	d101      	bne.n	8003ae8 <USB_WritePacket+0x20>
}
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ae8:	f851 2b04 	ldr.w	r2, [r1], #4
 8003aec:	6002      	str	r2, [r0, #0]
 8003aee:	e7f7      	b.n	8003ae0 <USB_WritePacket+0x18>

08003af0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003af0:	3203      	adds	r2, #3
 8003af2:	0892      	lsrs	r2, r2, #2
 8003af4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003af8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003afc:	4291      	cmp	r1, r2
 8003afe:	d101      	bne.n	8003b04 <USB_ReadPacket+0x14>
}
 8003b00:	4608      	mov	r0, r1
 8003b02:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b04:	6803      	ldr	r3, [r0, #0]
 8003b06:	f841 3b04 	str.w	r3, [r1], #4
 8003b0a:	e7f7      	b.n	8003afc <USB_ReadPacket+0xc>

08003b0c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003b0c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003b0e:	6980      	ldr	r0, [r0, #24]
}
 8003b10:	4010      	ands	r0, r2
 8003b12:	4770      	bx	lr

08003b14 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003b14:	6940      	ldr	r0, [r0, #20]
}
 8003b16:	f000 0001 	and.w	r0, r0, #1
 8003b1a:	4770      	bx	lr

08003b1c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b1c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003b20:	f023 0303 	bic.w	r3, r3, #3
{
 8003b24:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b26:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b2a:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003b2e:	f001 0303 	and.w	r3, r1, #3
 8003b32:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8003b34:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b36:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b3a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8003b3e:	d104      	bne.n	8003b4a <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8003b40:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8003b44:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8003b46:	2000      	movs	r0, #0
 8003b48:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8003b4a:	2902      	cmp	r1, #2
 8003b4c:	d1fb      	bne.n	8003b46 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8003b4e:	f241 7370 	movw	r3, #6000	; 0x1770
 8003b52:	e7f7      	b.n	8003b44 <USB_InitFSLSPClkSel+0x28>

08003b54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003b56:	2500      	movs	r5, #0
 8003b58:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003b5a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003b5e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b66:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003b68:	9b01      	ldr	r3, [sp, #4]
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003b6e:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003b70:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003b74:	2064      	movs	r0, #100	; 0x64
 8003b76:	f7fd fa01 	bl	8000f7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003b84:	200a      	movs	r0, #10
 8003b86:	f7fd f9f9 	bl	8000f7c <HAL_Delay>

  return HAL_OK;
}
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	b003      	add	sp, #12
 8003b8e:	bd30      	pop	{r4, r5, pc}

08003b90 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003b90:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003b96:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003b9a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b9c:	9b01      	ldr	r3, [sp, #4]
 8003b9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ba2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	04da      	lsls	r2, r3, #19
 8003ba8:	d406      	bmi.n	8003bb8 <USB_DriveVbus+0x28>
 8003baa:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003bac:	bf02      	ittt	eq
 8003bae:	9b01      	ldreq	r3, [sp, #4]
 8003bb0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003bb4:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003bb8:	9b01      	ldr	r3, [sp, #4]
 8003bba:	04db      	lsls	r3, r3, #19
 8003bbc:	d505      	bpl.n	8003bca <USB_DriveVbus+0x3a>
 8003bbe:	b921      	cbnz	r1, 8003bca <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	b002      	add	sp, #8
 8003bce:	4770      	bx	lr

08003bd0 <USB_HostInit>:
{
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	b538      	push	{r3, r4, r5, lr}
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	a805      	add	r0, sp, #20
 8003bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003be8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003bf0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf8:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003bfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bfc:	05da      	lsls	r2, r3, #23
 8003bfe:	d53f      	bpl.n	8003c80 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c00:	9b07      	ldr	r3, [sp, #28]
 8003c02:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c04:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c08:	d13c      	bne.n	8003c84 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c0e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003c12:	2110      	movs	r1, #16
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff ff35 	bl	8003a84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff44 	bl	8003aa8 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	9906      	ldr	r1, [sp, #24]
 8003c24:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003c2c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c2e:	4299      	cmp	r1, r3
 8003c30:	d12b      	bne.n	8003c8a <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8003c32:	2101      	movs	r1, #1
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7ff ffab 	bl	8003b90 <USB_DriveVbus>
  HAL_Delay(200U);
 8003c3a:	20c8      	movs	r0, #200	; 0xc8
 8003c3c:	f7fd f99e 	bl	8000f7c <HAL_Delay>
  USBx->GINTMSK = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c4c:	05db      	lsls	r3, r3, #23
 8003c4e:	d521      	bpl.n	8003c94 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8003c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c54:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003c56:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003c5e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8003c62:	9b08      	ldr	r3, [sp, #32]
 8003c64:	b91b      	cbnz	r3, 8003c6e <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	f043 0310 	orr.w	r3, r3, #16
 8003c6c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003c6e:	69a2      	ldr	r2, [r4, #24]
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <USB_HostInit+0xd8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61a3      	str	r3, [r4, #24]
}
 8003c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	b004      	add	sp, #16
 8003c7e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c80:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	e7c1      	b.n	8003c0e <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c8a:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c8c:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003c8e:	60d5      	str	r5, [r2, #12]
 8003c90:	3220      	adds	r2, #32
 8003c92:	e7cc      	b.n	8003c2e <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003c98:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003c9c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003c9e:	4b03      	ldr	r3, [pc, #12]	; (8003cac <USB_HostInit+0xdc>)
 8003ca0:	e7dd      	b.n	8003c5e <USB_HostInit+0x8e>
 8003ca2:	bf00      	nop
 8003ca4:	00e00300 	.word	0x00e00300
 8003ca8:	a3200008 	.word	0xa3200008
 8003cac:	004000e0 	.word	0x004000e0

08003cb0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003cb6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003cba:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003cbc:	9801      	ldr	r0, [sp, #4]
}
 8003cbe:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003cc2:	b002      	add	sp, #8
 8003cc4:	4770      	bx	lr

08003cc6 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003cc6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003cca:	6880      	ldr	r0, [r0, #8]
}
 8003ccc:	b280      	uxth	r0, r0
 8003cce:	4770      	bx	lr

08003cd0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003cd4:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003cd8:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8003cdc:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003ce0:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	60a0      	str	r0, [r4, #8]
 8003ce8:	fa4f f882 	sxtb.w	r8, r2
 8003cec:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
 8003cf0:	f001 0c0f 	and.w	ip, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003cf4:	2e03      	cmp	r6, #3
 8003cf6:	d86c      	bhi.n	8003dd2 <USB_HC_Init+0x102>
 8003cf8:	e8df f006 	tbb	[pc, r6]
 8003cfc:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d00:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003d04:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d08:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003d0a:	da03      	bge.n	8003d14 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003d0c:	68e1      	ldr	r1, [r4, #12]
 8003d0e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003d12:	e005      	b.n	8003d20 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003d14:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003d16:	05c9      	lsls	r1, r1, #23
 8003d18:	d542      	bpl.n	8003da0 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003d1a:	68e1      	ldr	r1, [r4, #12]
 8003d1c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8003d20:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d22:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003d24:	f8de 4018 	ldr.w	r4, [lr, #24]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f10c 	lsl.w	r1, r1, ip
 8003d2e:	4321      	orrs	r1, r4
 8003d30:	f8ce 1018 	str.w	r1, [lr, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d34:	69a9      	ldr	r1, [r5, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003d36:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d3a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003d3e:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003d40:	bfac      	ite	ge
 8003d42:	2400      	movge	r4, #0
 8003d44:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d48:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d4c:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d50:	059b      	lsls	r3, r3, #22
 8003d52:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d56:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d5a:	02d2      	lsls	r2, r2, #11
 8003d5c:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d60:	432b      	orrs	r3, r5
 8003d62:	4313      	orrs	r3, r2
 8003d64:	04b2      	lsls	r2, r6, #18
 8003d66:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d6a:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d6c:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d70:	bf14      	ite	ne
 8003d72:	2100      	movne	r1, #0
 8003d74:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d78:	4323      	orrs	r3, r4
 8003d7a:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8003d7c:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d7e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8003d82:	d105      	bne.n	8003d90 <USB_HC_Init+0xc0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003d84:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d8c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d94:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8003d98:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d9c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003d9e:	dbb5      	blt.n	8003d0c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003da0:	f8de 0018 	ldr.w	r0, [lr, #24]
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f10c 	lsl.w	r1, r1, ip
 8003daa:	4301      	orrs	r1, r0
 8003dac:	f8ce 1018 	str.w	r1, [lr, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003db0:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8003db2:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003db4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003db8:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003dba:	4604      	mov	r4, r0
 8003dbc:	e7c4      	b.n	8003d48 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003dbe:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003dc2:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003dc6:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003dc8:	daea      	bge.n	8003da0 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003dca:	68e1      	ldr	r1, [r4, #12]
 8003dcc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003dd0:	e7a6      	b.n	8003d20 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e7a6      	b.n	8003d24 <USB_HC_Init+0x54>

08003dd6 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003dd6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003dda:	6940      	ldr	r0, [r0, #20]
}
 8003ddc:	b280      	uxth	r0, r0
 8003dde:	4770      	bx	lr

08003de0 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003de0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003de4:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8003de8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003dec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003df0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003dfc:	d11e      	bne.n	8003e3c <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003dfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e00:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e04:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e08:	d137      	bne.n	8003e7a <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e0e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e12:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003e1e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003e2a:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	d002      	beq.n	8003e38 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	2900      	cmp	r1, #0
 8003e36:	dbfa      	blt.n	8003e2e <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003e3c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003e40:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e44:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003e48:	d117      	bne.n	8003e7a <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e4e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e52:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003e5e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e66:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003e6a:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	d0e2      	beq.n	8003e38 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e72:	6811      	ldr	r1, [r2, #0]
 8003e74:	2900      	cmp	r1, #0
 8003e76:	dbfa      	blt.n	8003e6e <USB_HC_Halt+0x8e>
 8003e78:	e7de      	b.n	8003e38 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e7e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003e82:	e7d9      	b.n	8003e38 <USB_HC_Halt+0x58>

08003e84 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003e84:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003e88:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <USB_DoPing+0x20>)
 8003e8a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e8e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	80080000 	.word	0x80080000

08003ea8 <USB_HC_StartXfer>:
{
 8003ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003eac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003eae:	05db      	lsls	r3, r3, #23
{
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003eb4:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003eb6:	d517      	bpl.n	8003ee8 <USB_HC_StartXfer+0x40>
 8003eb8:	790d      	ldrb	r5, [r1, #4]
 8003eba:	b9ad      	cbnz	r5, 8003ee8 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003ebc:	b94e      	cbnz	r6, 8003ed2 <USB_HC_StartXfer+0x2a>
 8003ebe:	794b      	ldrb	r3, [r1, #5]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d111      	bne.n	8003ee8 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	f7ff ffdd 	bl	8003e84 <USB_DoPing>
}
 8003eca:	2000      	movs	r0, #0
 8003ecc:	b002      	add	sp, #8
 8003ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003ed2:	2e01      	cmp	r6, #1
 8003ed4:	d108      	bne.n	8003ee8 <USB_HC_StartXfer+0x40>
 8003ed6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003eda:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003ede:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003ee2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8003ee6:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8003ee8:	6908      	ldr	r0, [r1, #16]
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d062      	beq.n	8003fb4 <USB_HC_StartXfer+0x10c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003eee:	890b      	ldrh	r3, [r1, #8]
 8003ef0:	3801      	subs	r0, #1
 8003ef2:	4418      	add	r0, r3
 8003ef4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ef8:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8003efa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003efe:	d903      	bls.n	8003f08 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003f04:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8003f08:	78cf      	ldrb	r7, [r1, #3]
 8003f0a:	b117      	cbz	r7, 8003f12 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f0c:	890b      	ldrh	r3, [r1, #8]
 8003f0e:	4343      	muls	r3, r0
 8003f10:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f12:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f16:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f18:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003f1c:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f20:	f3c3 0812 	ubfx	r8, r3, #0, #19
 8003f24:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003f28:	ea4c 0c08 	orr.w	ip, ip, r8
 8003f2c:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f30:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8003f34:	b116      	cbz	r6, 8003f3c <USB_HC_StartXfer+0x94>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003f36:	68c8      	ldr	r0, [r1, #12]
 8003f38:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003f3c:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
 8003f40:	f8dc 0008 	ldr.w	r0, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003f44:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8003f48:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 8003f4c:	f8c5 e500 	str.w	lr, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003f50:	43c0      	mvns	r0, r0
 8003f52:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8003f56:	0740      	lsls	r0, r0, #29
 8003f58:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8003f5c:	ea40 000e 	orr.w	r0, r0, lr
 8003f60:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f64:	4825      	ldr	r0, [pc, #148]	; (8003ffc <USB_HC_StartXfer+0x154>)
 8003f66:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8003f6a:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f6e:	f8d0 e000 	ldr.w	lr, [r0]
 8003f72:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 8003f76:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003f7a:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
 8003f7e:	b1df      	cbz	r7, 8003fb8 <USB_HC_StartXfer+0x110>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003f80:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003f84:	f8c0 e000 	str.w	lr, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f88:	f8d0 e000 	ldr.w	lr, [r0]
 8003f8c:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 8003f90:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003f9a:	2e00      	cmp	r6, #0
 8003f9c:	d195      	bne.n	8003eca <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003f9e:	2f00      	cmp	r7, #0
 8003fa0:	d193      	bne.n	8003eca <USB_HC_StartXfer+0x22>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d091      	beq.n	8003eca <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003fa6:	79c8      	ldrb	r0, [r1, #7]
 8003fa8:	2803      	cmp	r0, #3
 8003faa:	d813      	bhi.n	8003fd4 <USB_HC_StartXfer+0x12c>
 8003fac:	e8df f000 	tbb	[pc, r0]
 8003fb0:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	e7a7      	b.n	8003f08 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003fb8:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8003fbc:	e7e2      	b.n	8003f84 <USB_HC_StartXfer+0xdc>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003fbe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003fc0:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003fc2:	b2ad      	uxth	r5, r5
 8003fc4:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8003fc8:	4285      	cmp	r5, r0
 8003fca:	d203      	bcs.n	8003fd4 <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003fcc:	69a0      	ldr	r0, [r4, #24]
 8003fce:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003fd2:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	9000      	str	r0, [sp, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	68c9      	ldr	r1, [r1, #12]
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff fd73 	bl	8003ac8 <USB_WritePacket>
 8003fe2:	e772      	b.n	8003eca <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003fe4:	f8dc 5010 	ldr.w	r5, [ip, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003fe8:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003fea:	b2ad      	uxth	r5, r5
 8003fec:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8003ff0:	4285      	cmp	r5, r0
 8003ff2:	d2ef      	bcs.n	8003fd4 <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003ff4:	69a0      	ldr	r0, [r4, #24]
 8003ff6:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003ffa:	e7ea      	b.n	8003fd2 <USB_HC_StartXfer+0x12a>
 8003ffc:	200007ac 	.word	0x200007ac

08004000 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004000:	6883      	ldr	r3, [r0, #8]
 8004002:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004006:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004008:	2110      	movs	r1, #16
{
 800400a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800400c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800400e:	f7ff fd39 	bl	8003a84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff fd48 	bl	8003aa8 <USB_FlushRxFifo>
 8004018:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800401c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8004020:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004022:	6811      	ldr	r1, [r2, #0]
 8004024:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004028:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800402c:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8004030:	4282      	cmp	r2, r0
 8004032:	d1f6      	bne.n	8004022 <USB_StopHost+0x22>
  uint32_t count = 0U;
 8004034:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800403c:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004040:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8004042:	3001      	adds	r0, #1
 8004044:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004048:	d802      	bhi.n	8004050 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	2900      	cmp	r1, #0
 800404e:	dbf8      	blt.n	8004042 <USB_StopHost+0x42>
 8004050:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8004052:	429a      	cmp	r2, r3
 8004054:	d1ef      	bne.n	8004036 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800405e:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004068:	2000      	movs	r0, #0
 800406a:	bd10      	pop	{r4, pc}

0800406c <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 800406c:	2000      	movs	r0, #0
 800406e:	4770      	bx	lr

08004070 <USBH_CDC_InterfaceDeInit>:
{
 8004070:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004072:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004076:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8004078:	7821      	ldrb	r1, [r4, #0]
{
 800407a:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 800407c:	b139      	cbz	r1, 800408e <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800407e:	f000 fe09 	bl	8004c94 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8004082:	7821      	ldrb	r1, [r4, #0]
 8004084:	4628      	mov	r0, r5
 8004086:	f000 fe21 	bl	8004ccc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800408a:	2300      	movs	r3, #0
 800408c:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800408e:	7b21      	ldrb	r1, [r4, #12]
 8004090:	b141      	cbz	r1, 80040a4 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004092:	4628      	mov	r0, r5
 8004094:	f000 fdfe 	bl	8004c94 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004098:	7b21      	ldrb	r1, [r4, #12]
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fe16 	bl	8004ccc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80040a0:	2300      	movs	r3, #0
 80040a2:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80040a4:	7b61      	ldrb	r1, [r4, #13]
 80040a6:	b141      	cbz	r1, 80040ba <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 fdf3 	bl	8004c94 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80040ae:	7b61      	ldrb	r1, [r4, #13]
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 fe0b 	bl	8004ccc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80040b6:	2300      	movs	r3, #0
 80040b8:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 80040ba:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80040be:	69d8      	ldr	r0, [r3, #28]
 80040c0:	b128      	cbz	r0, 80040ce <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 80040c2:	f009 fc7d 	bl	800d9c0 <free>
    phost->pActiveClass->pData = 0U;
 80040c6:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
}
 80040ce:	2000      	movs	r0, #0
 80040d0:	bd38      	pop	{r3, r4, r5, pc}

080040d2 <USBH_CDC_InterfaceInit>:
{
 80040d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 80040d4:	2202      	movs	r2, #2
{
 80040d6:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 80040d8:	2301      	movs	r3, #1
 80040da:	4611      	mov	r1, r2
{
 80040dc:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 80040de:	f000 f9a8 	bl	8004432 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80040e2:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 80040e4:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 80040e6:	d102      	bne.n	80040ee <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 80040e8:	2002      	movs	r0, #2
}
 80040ea:	b005      	add	sp, #20
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 80040ee:	4601      	mov	r1, r0
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f995 	bl	8004420 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80040f6:	2050      	movs	r0, #80	; 0x50
 80040f8:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 80040fc:	f009 fc58 	bl	800d9b0 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004100:	231a      	movs	r3, #26
 8004102:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004106:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004108:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800410c:	061f      	lsls	r7, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800410e:	bf42      	ittt	mi
 8004110:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004112:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8004116:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004118:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800411a:	7841      	ldrb	r1, [r0, #1]
 800411c:	4628      	mov	r0, r5
 800411e:	f000 fdbe 	bl	8004c9e <USBH_AllocPipe>
 8004122:	4601      	mov	r1, r0
 8004124:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8004126:	8960      	ldrh	r0, [r4, #10]
 8004128:	9002      	str	r0, [sp, #8]
 800412a:	2003      	movs	r0, #3
 800412c:	9001      	str	r0, [sp, #4]
 800412e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004132:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004136:	7862      	ldrb	r2, [r4, #1]
 8004138:	9000      	str	r0, [sp, #0]
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fd9b 	bl	8004c76 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004140:	2200      	movs	r2, #0
 8004142:	7821      	ldrb	r1, [r4, #0]
 8004144:	4628      	mov	r0, r5
 8004146:	f009 f800 	bl	800d14a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800414a:	2300      	movs	r3, #0
 800414c:	461a      	mov	r2, r3
 800414e:	210a      	movs	r1, #10
 8004150:	4628      	mov	r0, r5
 8004152:	f000 f96e 	bl	8004432 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8004156:	28ff      	cmp	r0, #255	; 0xff
 8004158:	d0c6      	beq.n	80040e8 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800415a:	231a      	movs	r3, #26
 800415c:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004160:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004164:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004168:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 800416c:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004170:	0616      	lsls	r6, r2, #24
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004172:	bf53      	iteet	pl
 8004174:	73a2      	strbpl	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004176:	73e2      	strbmi	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004178:	8361      	strhmi	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800417a:	8321      	strhpl	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800417c:	0619      	lsls	r1, r3, #24
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800417e:	bf58      	it	pl
 8004180:	73a3      	strbpl	r3, [r4, #14]
 8004182:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004186:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004188:	bf48      	it	mi
 800418a:	73e3      	strbmi	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800418c:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800418e:	bf4c      	ite	mi
 8004190:	8362      	strhmi	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004192:	8322      	strhpl	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004194:	f000 fd83 	bl	8004c9e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004198:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800419a:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800419c:	4628      	mov	r0, r5
 800419e:	f000 fd7e 	bl	8004c9e <USBH_AllocPipe>
 80041a2:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80041a4:	8b20      	ldrh	r0, [r4, #24]
 80041a6:	9002      	str	r0, [sp, #8]
 80041a8:	2602      	movs	r6, #2
 80041aa:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80041ae:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80041b2:	7ba2      	ldrb	r2, [r4, #14]
 80041b4:	7b61      	ldrb	r1, [r4, #13]
 80041b6:	9601      	str	r6, [sp, #4]
 80041b8:	9000      	str	r0, [sp, #0]
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 fd5b 	bl	8004c76 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 80041c0:	8b60      	ldrh	r0, [r4, #26]
 80041c2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80041c6:	7be2      	ldrb	r2, [r4, #15]
 80041c8:	7b21      	ldrb	r1, [r4, #12]
 80041ca:	e9cd 6001 	strd	r6, r0, [sp, #4]
 80041ce:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80041d2:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 80041d4:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 fd4d 	bl	8004c76 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80041dc:	4632      	mov	r2, r6
 80041de:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 80041e0:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80041e4:	4628      	mov	r0, r5
 80041e6:	f008 ffb0 	bl	800d14a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80041ea:	4632      	mov	r2, r6
 80041ec:	7b21      	ldrb	r1, [r4, #12]
 80041ee:	4628      	mov	r0, r5
 80041f0:	f008 ffab 	bl	800d14a <USBH_LL_SetToggle>
      status = USBH_OK;
 80041f4:	4630      	mov	r0, r6
 80041f6:	e778      	b.n	80040ea <USBH_CDC_InterfaceInit+0x18>

080041f8 <USBH_CDC_ClassRequest>:
{
 80041f8:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80041fa:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80041fe:	69d9      	ldr	r1, [r3, #28]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
 8004200:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8004204:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8004208:	e9c0 2304 	strd	r2, r3, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800420c:	3140      	adds	r1, #64	; 0x40
 800420e:	2207      	movs	r2, #7
{
 8004210:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004212:	f000 fac3 	bl	800479c <USBH_CtlReq>
  if(status == USBH_OK)
 8004216:	4605      	mov	r5, r0
 8004218:	b920      	cbnz	r0, 8004224 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800421a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800421e:	2102      	movs	r1, #2
 8004220:	4620      	mov	r0, r4
 8004222:	4798      	blx	r3
}
 8004224:	4628      	mov	r0, r5
 8004226:	bd38      	pop	{r3, r4, r5, pc}

08004228 <USBH_CDC_TransmitCallback>:
 8004228:	4770      	bx	lr

0800422a <USBH_CDC_ReceiveCallback>:
 800422a:	4770      	bx	lr

0800422c <USBH_CDC_LineCodingChanged>:
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{

}
 800422c:	4770      	bx	lr

0800422e <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800422e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004232:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004234:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8004236:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 800423a:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800423c:	2b04      	cmp	r3, #4
 800423e:	d813      	bhi.n	8004268 <USBH_CDC_Process+0x3a>
 8004240:	e8df f003 	tbb	[pc, r3]
 8004244:	381503a6 	.word	0x381503a6
 8004248:	9d          	.byte	0x9d
 8004249:	00          	.byte	0x00
  phost->Control.setup.b.wValue.w = 0U;
 800424a:	f242 0021 	movw	r0, #8225	; 0x2021
 800424e:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004252:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004254:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8004256:	e9c5 0304 	strd	r0, r3, [r5, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800425a:	4628      	mov	r0, r5
 800425c:	f000 fa9e 	bl	800479c <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004260:	bb20      	cbnz	r0, 80042ac <USBH_CDC_Process+0x7e>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004262:	2302      	movs	r3, #2
 8004264:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8004268:	2001      	movs	r0, #1
}
 800426a:	b002      	add	sp, #8
 800426c:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 800426e:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8004272:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8004276:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800427a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800427e:	2207      	movs	r2, #7
 8004280:	f000 fa8c 	bl	800479c <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004284:	b990      	cbnz	r0, 80042ac <USBH_CDC_Process+0x7e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004286:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 800428a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800428e:	684b      	ldr	r3, [r1, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004290:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004294:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004298:	429a      	cmp	r2, r3
 800429a:	d1e5      	bne.n	8004268 <USBH_CDC_Process+0x3a>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800429c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800429e:	680b      	ldr	r3, [r1, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1e1      	bne.n	8004268 <USBH_CDC_Process+0x3a>
        USBH_CDC_LineCodingChanged(phost);
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7ff ffc1 	bl	800422c <USBH_CDC_LineCodingChanged>
 80042aa:	e7dd      	b.n	8004268 <USBH_CDC_Process+0x3a>
      if(req_status != USBH_BUSY)
 80042ac:	2801      	cmp	r0, #1
 80042ae:	d0db      	beq.n	8004268 <USBH_CDC_Process+0x3a>
        CDC_Handle->state = CDC_ERROR_STATE;
 80042b0:	2304      	movs	r3, #4
 80042b2:	e7d7      	b.n	8004264 <USBH_CDC_Process+0x36>
  switch (CDC_Handle->data_tx_state)
 80042b4:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80042b8:	2801      	cmp	r0, #1
 80042ba:	d021      	beq.n	8004300 <USBH_CDC_Process+0xd2>
 80042bc:	2802      	cmp	r0, #2
 80042be:	d02e      	beq.n	800431e <USBH_CDC_Process+0xf0>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80042c0:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80042c4:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 80042c6:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d046      	beq.n	800435c <USBH_CDC_Process+0x12e>
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d1ca      	bne.n	8004268 <USBH_CDC_Process+0x3a>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80042d2:	7b31      	ldrb	r1, [r6, #12]
 80042d4:	4628      	mov	r0, r5
 80042d6:	f008 ff27 	bl	800d128 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80042da:	2801      	cmp	r0, #1
 80042dc:	d1c4      	bne.n	8004268 <USBH_CDC_Process+0x3a>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80042de:	7b31      	ldrb	r1, [r6, #12]
 80042e0:	4628      	mov	r0, r5
 80042e2:	f008 fedd 	bl	800d0a0 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80042e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80042e8:	4298      	cmp	r0, r3
 80042ea:	d041      	beq.n	8004370 <USBH_CDC_Process+0x142>
 80042ec:	8b72      	ldrh	r2, [r6, #26]
 80042ee:	4290      	cmp	r0, r2
 80042f0:	d93e      	bls.n	8004370 <USBH_CDC_Process+0x142>
        CDC_Handle->RxDataLength -= length ;
 80042f2:	1a1b      	subs	r3, r3, r0
 80042f4:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80042f6:	6a33      	ldr	r3, [r6, #32]
 80042f8:	4418      	add	r0, r3
 80042fa:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e034      	b.n	800436a <USBH_CDC_Process+0x13c>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004302:	8b22      	ldrh	r2, [r4, #24]
 8004304:	7b63      	ldrb	r3, [r4, #13]
 8004306:	69e1      	ldr	r1, [r4, #28]
      USBH_BulkSendData (phost,
 8004308:	9000      	str	r0, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800430a:	4296      	cmp	r6, r2
      USBH_BulkSendData (phost,
 800430c:	bf98      	it	ls
 800430e:	b2b2      	uxthls	r2, r6
 8004310:	4628      	mov	r0, r5
 8004312:	f000 fc89 	bl	8004c28 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004316:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004318:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800431c:	e7d0      	b.n	80042c0 <USBH_CDC_Process+0x92>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800431e:	7b61      	ldrb	r1, [r4, #13]
 8004320:	4628      	mov	r0, r5
 8004322:	f008 ff01 	bl	800d128 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8004326:	2801      	cmp	r0, #1
 8004328:	d115      	bne.n	8004356 <USBH_CDC_Process+0x128>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800432a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800432c:	8b22      	ldrh	r2, [r4, #24]
 800432e:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004330:	bf83      	ittte	hi
 8004332:	1a9b      	subhi	r3, r3, r2
 8004334:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004336:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8004338:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800433a:	bf8a      	itet	hi
 800433c:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800433e:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004340:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8004342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004344:	b10b      	cbz	r3, 800434a <USBH_CDC_Process+0x11c>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004346:	2301      	movs	r3, #1
 8004348:	e7e6      	b.n	8004318 <USBH_CDC_Process+0xea>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800434a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800434e:	4628      	mov	r0, r5
 8004350:	f7ff ff6a 	bl	8004228 <USBH_CDC_TransmitCallback>
 8004354:	e7b4      	b.n	80042c0 <USBH_CDC_Process+0x92>
      if (URB_Status == USBH_URB_NOTREADY)
 8004356:	2802      	cmp	r0, #2
 8004358:	d1b2      	bne.n	80042c0 <USBH_CDC_Process+0x92>
 800435a:	e7f4      	b.n	8004346 <USBH_CDC_Process+0x118>
    USBH_BulkReceiveData (phost,
 800435c:	7b33      	ldrb	r3, [r6, #12]
 800435e:	8b72      	ldrh	r2, [r6, #26]
 8004360:	6a31      	ldr	r1, [r6, #32]
 8004362:	4628      	mov	r0, r5
 8004364:	f000 fc77 	bl	8004c56 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004368:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800436a:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 800436e:	e77b      	b.n	8004268 <USBH_CDC_Process+0x3a>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004370:	2300      	movs	r3, #0
 8004372:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8004376:	4628      	mov	r0, r5
 8004378:	f7ff ff57 	bl	800422a <USBH_CDC_ReceiveCallback>
 800437c:	e774      	b.n	8004268 <USBH_CDC_Process+0x3a>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800437e:	2100      	movs	r1, #0
 8004380:	f000 fc0d 	bl	8004b9e <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8004384:	2800      	cmp	r0, #0
 8004386:	f47f af6f 	bne.w	8004268 <USBH_CDC_Process+0x3a>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800438a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800438e:	e76b      	b.n	8004268 <USBH_CDC_Process+0x3a>
    status = USBH_OK;
 8004390:	2000      	movs	r0, #0
 8004392:	e76a      	b.n	800426a <USBH_CDC_Process+0x3c>

08004394 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004394:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8004398:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800439c:	2100      	movs	r1, #0
 800439e:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d1fb      	bne.n	800439e <DeInitStateMachine+0xa>
 80043a6:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80043aa:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80043b4:	4291      	cmp	r1, r2
 80043b6:	d1fb      	bne.n	80043b0 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80043b8:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 80043ba:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80043bc:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80043be:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80043c0:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80043c4:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;
 80043c6:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80043c8:	2240      	movs	r2, #64	; 0x40

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80043ca:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80043ce:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80043d0:	f8a0 331c 	strh.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;

  return USBH_OK;
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	4770      	bx	lr

080043d8 <USBH_Init>:
{
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	460d      	mov	r5, r1
  if(phost == NULL)
 80043dc:	4604      	mov	r4, r0
 80043de:	b180      	cbz	r0, 8004402 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80043e0:	2300      	movs	r3, #0
  phost->id = id;
 80043e2:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80043e6:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80043ea:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 80043ee:	f7ff ffd1 	bl	8004394 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80043f2:	b10d      	cbz	r5, 80043f8 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80043f4:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f008 fdf3 	bl	800cfe4 <USBH_LL_Init>
  return USBH_OK;
 80043fe:	2000      	movs	r0, #0
}
 8004400:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8004402:	2002      	movs	r0, #2
 8004404:	e7fc      	b.n	8004400 <USBH_Init+0x28>

08004406 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8004406:	b149      	cbz	r1, 800441c <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004408:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800440c:	b933      	cbnz	r3, 800441c <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800440e:	2201      	movs	r2, #1
 8004410:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8004414:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8004418:	4618      	mov	r0, r3
 800441a:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800441c:	2002      	movs	r0, #2
  }

  return status;
}
 800441e:	4770      	bx	lr

08004420 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8004420:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004424:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004426:	bf86      	itte	hi
 8004428:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800442c:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800442e:	2002      	movls	r0, #2
  }
  return status;
}
 8004430:	4770      	bx	lr

08004432 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004436:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800443a:	428e      	cmp	r6, r1
 800443c:	b2e5      	uxtb	r5, r4
 800443e:	d001      	beq.n	8004444 <USBH_FindInterface+0x12>
 8004440:	29ff      	cmp	r1, #255	; 0xff
 8004442:	d10b      	bne.n	800445c <USBH_FindInterface+0x2a>
 8004444:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8004448:	4296      	cmp	r6, r2
 800444a:	d001      	beq.n	8004450 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800444c:	2aff      	cmp	r2, #255	; 0xff
 800444e:	d105      	bne.n	800445c <USBH_FindInterface+0x2a>
 8004450:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8004454:	429e      	cmp	r6, r3
 8004456:	d004      	beq.n	8004462 <USBH_FindInterface+0x30>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004458:	2bff      	cmp	r3, #255	; 0xff
 800445a:	d002      	beq.n	8004462 <USBH_FindInterface+0x30>
 800445c:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800445e:	b114      	cbz	r4, 8004466 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004460:	25ff      	movs	r5, #255	; 0xff
}
 8004462:	4628      	mov	r0, r5
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	2401      	movs	r4, #1
 8004468:	e7e5      	b.n	8004436 <USBH_FindInterface+0x4>

0800446a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800446a:	b510      	push	{r4, lr}
 800446c:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800446e:	f008 fddf 	bl	800d030 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004472:	2101      	movs	r1, #1
 8004474:	4620      	mov	r0, r4
 8004476:	f008 fe5b 	bl	800d130 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800447a:	2000      	movs	r0, #0
 800447c:	bd10      	pop	{r4, pc}

0800447e <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800447e:	b530      	push	{r4, r5, lr}
 8004480:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004482:	2302      	movs	r3, #2
 8004484:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8004488:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 800448c:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800448e:	b933      	cbnz	r3, 800449e <USBH_Process+0x20>
 8004490:	7802      	ldrb	r2, [r0, #0]
 8004492:	b122      	cbz	r2, 800449e <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8004494:	7802      	ldrb	r2, [r0, #0]
 8004496:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8004498:	bf1c      	itt	ne
 800449a:	2203      	movne	r2, #3
 800449c:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 800449e:	7822      	ldrb	r2, [r4, #0]
 80044a0:	2a0b      	cmp	r2, #11
 80044a2:	d818      	bhi.n	80044d6 <USBH_Process+0x58>
 80044a4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80044a8:	001a000c 	.word	0x001a000c
 80044ac:	0122001f 	.word	0x0122001f
 80044b0:	004f0017 	.word	0x004f0017
 80044b4:	00c80108 	.word	0x00c80108
 80044b8:	00db00d1 	.word	0x00db00d1
 80044bc:	011900e8 	.word	0x011900e8
    if (phost->device.is_connected)
 80044c0:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80044c4:	b13b      	cbz	r3, 80044d6 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80044c6:	2301      	movs	r3, #1
      USBH_Delay(200U);
 80044c8:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80044ca:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 80044cc:	f008 fe4c 	bl	800d168 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80044d0:	4620      	mov	r0, r4
 80044d2:	f008 fdd7 	bl	800d084 <USBH_LL_ResetPort>
}
 80044d6:	2000      	movs	r0, #0
 80044d8:	b007      	add	sp, #28
 80044da:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d1fa      	bne.n	80044d6 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 80044e0:	2302      	movs	r3, #2
        phost->gState  = HOST_INPUT;
 80044e2:	7023      	strb	r3, [r4, #0]
 80044e4:	e7f7      	b.n	80044d6 <USBH_Process+0x58>
    USBH_Delay(100U);
 80044e6:	2064      	movs	r0, #100	; 0x64
 80044e8:	f008 fe3e 	bl	800d168 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80044ec:	4620      	mov	r0, r4
 80044ee:	f008 fdbb 	bl	800d068 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80044f2:	2305      	movs	r3, #5
 80044f4:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80044f6:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80044fa:	2100      	movs	r1, #0
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 fbce 	bl	8004c9e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004502:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8004504:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004506:	4620      	mov	r0, r4
 8004508:	f000 fbc9 	bl	8004c9e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800450c:	79a2      	ldrb	r2, [r4, #6]
 800450e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004512:	7120      	strb	r0, [r4, #4]
 8004514:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8004516:	9202      	str	r2, [sp, #8]
 8004518:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 800451a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	9501      	str	r5, [sp, #4]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	4620      	mov	r0, r4
 8004526:	f000 fba6 	bl	8004c76 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800452a:	79a2      	ldrb	r2, [r4, #6]
 800452c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004530:	7961      	ldrb	r1, [r4, #5]
 8004532:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8004536:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800453a:	9200      	str	r2, [sp, #0]
 800453c:	4620      	mov	r0, r4
 800453e:	462a      	mov	r2, r5
 8004540:	f000 fb99 	bl	8004c76 <USBH_OpenPipe>
 8004544:	e7c7      	b.n	80044d6 <USBH_Process+0x58>
  switch (phost->EnumState)
 8004546:	7863      	ldrb	r3, [r4, #1]
 8004548:	2b07      	cmp	r3, #7
 800454a:	d8c4      	bhi.n	80044d6 <USBH_Process+0x58>
 800454c:	e8df f003 	tbb	[pc, r3]
 8004550:	301e1504 	.word	0x301e1504
 8004554:	5d4f4138 	.word	0x5d4f4138
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8004558:	2108      	movs	r1, #8
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f9fc 	bl	8004958 <USBH_Get_DevDesc>
 8004560:	4605      	mov	r5, r0
 8004562:	2800      	cmp	r0, #0
 8004564:	d1b7      	bne.n	80044d6 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004566:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004568:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800456c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800456e:	7921      	ldrb	r1, [r4, #4]
 8004570:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004574:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	e7cf      	b.n	800451a <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800457a:	2112      	movs	r1, #18
 800457c:	4620      	mov	r0, r4
 800457e:	f000 f9eb 	bl	8004958 <USBH_Get_DevDesc>
 8004582:	2800      	cmp	r0, #0
 8004584:	d1a7      	bne.n	80044d6 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8004586:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004588:	7063      	strb	r3, [r4, #1]
 800458a:	e7a4      	b.n	80044d6 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800458c:	2101      	movs	r1, #1
 800458e:	4620      	mov	r0, r4
 8004590:	f000 fade 	bl	8004b50 <USBH_SetAddress>
 8004594:	4605      	mov	r5, r0
 8004596:	2800      	cmp	r0, #0
 8004598:	d19d      	bne.n	80044d6 <USBH_Process+0x58>
      USBH_Delay(2U);
 800459a:	2002      	movs	r0, #2
 800459c:	f008 fde4 	bl	800d168 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80045a0:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 80045a2:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 80045a4:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80045a6:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 80045aa:	7921      	ldrb	r1, [r4, #4]
 80045ac:	79a2      	ldrb	r2, [r4, #6]
 80045ae:	e7e2      	b.n	8004576 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 80045b0:	2109      	movs	r1, #9
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 fa18 	bl	80049e8 <USBH_Get_CfgDesc>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d18c      	bne.n	80044d6 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80045bc:	2304      	movs	r3, #4
 80045be:	e7e3      	b.n	8004588 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 80045c0:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 fa0f 	bl	80049e8 <USBH_Get_CfgDesc>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d183      	bne.n	80044d6 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80045ce:	2305      	movs	r3, #5
 80045d0:	e7da      	b.n	8004588 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 80045d2:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80045d6:	b141      	cbz	r1, 80045ea <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 80045d8:	23ff      	movs	r3, #255	; 0xff
 80045da:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 fa8f 	bl	8004b02 <USBH_Get_StringDesc>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f47f af76 	bne.w	80044d6 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80045ea:	2306      	movs	r3, #6
 80045ec:	e7cc      	b.n	8004588 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 80045ee:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 80045f2:	b141      	cbz	r1, 8004606 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 80045f4:	23ff      	movs	r3, #255	; 0xff
 80045f6:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fa81 	bl	8004b02 <USBH_Get_StringDesc>
 8004600:	2800      	cmp	r0, #0
 8004602:	f47f af68 	bne.w	80044d6 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004606:	2307      	movs	r3, #7
 8004608:	e7be      	b.n	8004588 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800460a:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800460e:	b941      	cbnz	r1, 8004622 <USBH_Process+0x1a4>
      phost->device.current_interface = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004616:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10a      	bne.n	8004634 <USBH_Process+0x1b6>
        phost->gState = HOST_SET_CONFIGURATION;
 800461e:	2308      	movs	r3, #8
 8004620:	e75f      	b.n	80044e2 <USBH_Process+0x64>
      if ( USBH_Get_StringDesc(phost,
 8004622:	23ff      	movs	r3, #255	; 0xff
 8004624:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fa6a 	bl	8004b02 <USBH_Get_StringDesc>
 800462e:	2800      	cmp	r0, #0
 8004630:	d0ee      	beq.n	8004610 <USBH_Process+0x192>
 8004632:	e750      	b.n	80044d6 <USBH_Process+0x58>
        phost->gState  = HOST_INPUT;
 8004634:	2307      	movs	r3, #7
 8004636:	e754      	b.n	80044e2 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8004638:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800463c:	2b00      	cmp	r3, #0
 800463e:	f43f af4a 	beq.w	80044d6 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004642:	2101      	movs	r1, #1
 8004644:	4620      	mov	r0, r4
 8004646:	4798      	blx	r3
 8004648:	e7e9      	b.n	800461e <USBH_Process+0x1a0>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800464a:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800464e:	4620      	mov	r0, r4
 8004650:	f000 fa8b 	bl	8004b6a <USBH_SetCfg>
 8004654:	2800      	cmp	r0, #0
 8004656:	f47f af3e 	bne.w	80044d6 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800465a:	2309      	movs	r3, #9
 800465c:	e741      	b.n	80044e2 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800465e:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 8004662:	069b      	lsls	r3, r3, #26
 8004664:	d506      	bpl.n	8004674 <USBH_Process+0x1f6>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004666:	2101      	movs	r1, #1
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fa8b 	bl	8004b84 <USBH_SetFeature>
 800466e:	2800      	cmp	r0, #0
 8004670:	f47f af31 	bne.w	80044d6 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8004674:	230a      	movs	r3, #10
 8004676:	e734      	b.n	80044e2 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8004678:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800467c:	2b00      	cmp	r3, #0
 800467e:	f43f af2a 	beq.w	80044d6 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004688:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800468c:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8004690:	7919      	ldrb	r1, [r3, #4]
 8004692:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8004694:	bf08      	it	eq
 8004696:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800469a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800469e:	b1d3      	cbz	r3, 80046d6 <USBH_Process+0x258>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4620      	mov	r0, r4
 80046a4:	4798      	blx	r3
 80046a6:	b9b0      	cbnz	r0, 80046d6 <USBH_Process+0x258>
          phost->gState  = HOST_CLASS_REQUEST;
 80046a8:	2306      	movs	r3, #6
 80046aa:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80046ac:	2103      	movs	r1, #3
 80046ae:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80046b2:	4620      	mov	r0, r4
 80046b4:	4798      	blx	r3
 80046b6:	e70e      	b.n	80044d6 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 80046b8:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80046bc:	b15b      	cbz	r3, 80046d6 <USBH_Process+0x258>
      status = phost->pActiveClass->Requests(phost);
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	4620      	mov	r0, r4
 80046c2:	4798      	blx	r3
 80046c4:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80046c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f af02 	bne.w	80044d6 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 80046d2:	230b      	movs	r3, #11
 80046d4:	e705      	b.n	80044e2 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 80046d6:	230d      	movs	r3, #13
 80046d8:	e703      	b.n	80044e2 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 80046da:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f43f aef9 	beq.w	80044d6 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4620      	mov	r0, r4
 80046e8:	4798      	blx	r3
 80046ea:	e6f4      	b.n	80044d6 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff fe51 	bl	8004394 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80046f2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f43f aeed 	beq.w	80044d6 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4620      	mov	r0, r4
 8004700:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 8004708:	e6e5      	b.n	80044d6 <USBH_Process+0x58>

0800470a <USBH_LL_SetTimer>:
  phost->Timer = time;
 800470a:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 800470e:	4770      	bx	lr

08004710 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8004710:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8004714:	3201      	adds	r2, #1
 8004716:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800471a:	7802      	ldrb	r2, [r0, #0]
 800471c:	2a0b      	cmp	r2, #11
 800471e:	d104      	bne.n	800472a <USBH_LL_IncTimer+0x1a>
 8004720:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004724:	b10b      	cbz	r3, 800472a <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4718      	bx	r3
}
 800472a:	4770      	bx	lr

0800472c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800472c:	2301      	movs	r3, #1
 800472e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8004732:	4770      	bx	lr

08004734 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 800473a:	4770      	bx	lr

0800473c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 800473c:	7802      	ldrb	r2, [r0, #0]
{
 800473e:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8004740:	b94a      	cbnz	r2, 8004756 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8004742:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8004746:	2201      	movs	r2, #1
 8004748:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 800474c:	b10b      	cbz	r3, 8004752 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800474e:	2104      	movs	r1, #4
 8004750:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004752:	2000      	movs	r0, #0
 8004754:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8004756:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 800475a:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 800475c:	bf04      	itt	eq
 800475e:	2202      	moveq	r2, #2
 8004760:	7002      	strbeq	r2, [r0, #0]
 8004762:	e7f6      	b.n	8004752 <USBH_LL_Connect+0x16>

08004764 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8004768:	f008 fc70 	bl	800d04c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800476c:	7921      	ldrb	r1, [r4, #4]
 800476e:	4620      	mov	r0, r4
 8004770:	f000 faac 	bl	8004ccc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8004774:	7961      	ldrb	r1, [r4, #5]
 8004776:	4620      	mov	r0, r4
 8004778:	f000 faa8 	bl	8004ccc <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8004782:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004786:	b113      	cbz	r3, 800478e <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004788:	2105      	movs	r1, #5
 800478a:	4620      	mov	r0, r4
 800478c:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800478e:	4620      	mov	r0, r4
 8004790:	f008 fc4e 	bl	800d030 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8004794:	2303      	movs	r3, #3
 8004796:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004798:	2000      	movs	r0, #0
 800479a:	bd10      	pop	{r4, pc}

0800479c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800479c:	b513      	push	{r0, r1, r4, lr}
 800479e:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80047a0:	7880      	ldrb	r0, [r0, #2]
 80047a2:	2801      	cmp	r0, #1
 80047a4:	d003      	beq.n	80047ae <USBH_CtlReq+0x12>
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d008      	beq.n	80047bc <USBH_CtlReq+0x20>
    }
    else
    {
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
      {
        phost->Control.state = CTRL_ERROR;
 80047aa:	2001      	movs	r0, #1
  return status;
 80047ac:	e004      	b.n	80047b8 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 80047ae:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 80047b0:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 80047b2:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 80047b4:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 80047b6:	70a3      	strb	r3, [r4, #2]
}
 80047b8:	b002      	add	sp, #8
 80047ba:	bd10      	pop	{r4, pc}
  switch (phost->Control.state)
 80047bc:	7e23      	ldrb	r3, [r4, #24]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2101      	movs	r1, #1
 80047c2:	2b0a      	cmp	r3, #10
 80047c4:	d8f1      	bhi.n	80047aa <USBH_CtlReq+0xe>
 80047c6:	e8df f003 	tbb	[pc, r3]
 80047ca:	0f06      	.short	0x0f06
 80047cc:	4d41372c 	.word	0x4d41372c
 80047d0:	8d817065 	.word	0x8d817065
 80047d4:	96          	.byte	0x96
 80047d5:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80047d6:	7962      	ldrb	r2, [r4, #5]
 80047d8:	f104 0110 	add.w	r1, r4, #16
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 f9eb 	bl	8004bb8 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80047e2:	2302      	movs	r3, #2
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80047e4:	7623      	strb	r3, [r4, #24]
 80047e6:	e7e0      	b.n	80047aa <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80047e8:	7961      	ldrb	r1, [r4, #5]
 80047ea:	4620      	mov	r0, r4
 80047ec:	f008 fc9c 	bl	800d128 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80047f0:	2801      	cmp	r0, #1
 80047f2:	d110      	bne.n	8004816 <USBH_CtlReq+0x7a>
      if (phost->Control.setup.b.wLength.w != 0U)
 80047f4:	8ae2      	ldrh	r2, [r4, #22]
 80047f6:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80047fa:	b132      	cbz	r2, 800480a <USBH_CtlReq+0x6e>
        if (direction == USB_D2H)
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da02      	bge.n	8004806 <USBH_CtlReq+0x6a>
          phost->Control.state = CTRL_DATA_IN;
 8004800:	2303      	movs	r3, #3
 8004802:	7623      	strb	r3, [r4, #24]
 8004804:	e7d8      	b.n	80047b8 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8004806:	2305      	movs	r3, #5
 8004808:	e7ec      	b.n	80047e4 <USBH_CtlReq+0x48>
        if (direction == USB_D2H)
 800480a:	2b00      	cmp	r3, #0
 800480c:	da01      	bge.n	8004812 <USBH_CtlReq+0x76>
      phost->Control.state = CTRL_STATUS_OUT;
 800480e:	2309      	movs	r3, #9
 8004810:	e7e8      	b.n	80047e4 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8004812:	2307      	movs	r3, #7
 8004814:	e7e6      	b.n	80047e4 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004816:	2804      	cmp	r0, #4
 8004818:	d001      	beq.n	800481e <USBH_CtlReq+0x82>
 800481a:	2802      	cmp	r0, #2
 800481c:	d1c5      	bne.n	80047aa <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800481e:	230b      	movs	r3, #11
 8004820:	e7e0      	b.n	80047e4 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004822:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004826:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004828:	89a2      	ldrh	r2, [r4, #12]
 800482a:	7923      	ldrb	r3, [r4, #4]
 800482c:	68a1      	ldr	r1, [r4, #8]
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f9ea 	bl	8004c08 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004834:	2304      	movs	r3, #4
 8004836:	e7d5      	b.n	80047e4 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004838:	7921      	ldrb	r1, [r4, #4]
 800483a:	4620      	mov	r0, r4
 800483c:	f008 fc74 	bl	800d128 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004840:	2801      	cmp	r0, #1
 8004842:	d0e4      	beq.n	800480e <USBH_CtlReq+0x72>
    if  (URB_Status == USBH_URB_STALL)
 8004844:	2805      	cmp	r0, #5
 8004846:	d015      	beq.n	8004874 <USBH_CtlReq+0xd8>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8004848:	2804      	cmp	r0, #4
 800484a:	e7e7      	b.n	800481c <USBH_CtlReq+0x80>
    USBH_CtlSendData (phost,
 800484c:	7963      	ldrb	r3, [r4, #5]
 800484e:	9100      	str	r1, [sp, #0]
 8004850:	89a2      	ldrh	r2, [r4, #12]
 8004852:	68a1      	ldr	r1, [r4, #8]
 8004854:	4620      	mov	r0, r4
 8004856:	f000 f9c0 	bl	8004bda <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800485a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800485e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004860:	2306      	movs	r3, #6
 8004862:	e7bf      	b.n	80047e4 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004864:	7961      	ldrb	r1, [r4, #5]
 8004866:	4620      	mov	r0, r4
 8004868:	f008 fc5e 	bl	800d128 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800486c:	2801      	cmp	r0, #1
 800486e:	d0d0      	beq.n	8004812 <USBH_CtlReq+0x76>
    else if  (URB_Status == USBH_URB_STALL)
 8004870:	2805      	cmp	r0, #5
 8004872:	d105      	bne.n	8004880 <USBH_CtlReq+0xe4>
      phost->RequestState = CMD_SEND;
 8004874:	2301      	movs	r3, #1
 8004876:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8004878:	2300      	movs	r3, #0
 800487a:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800487c:	2003      	movs	r0, #3
 800487e:	e79b      	b.n	80047b8 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004880:	2802      	cmp	r0, #2
 8004882:	d0c0      	beq.n	8004806 <USBH_CtlReq+0x6a>
      if (URB_Status == USBH_URB_ERROR)
 8004884:	2804      	cmp	r0, #4
 8004886:	d190      	bne.n	80047aa <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8004888:	230b      	movs	r3, #11
 800488a:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800488c:	2301      	movs	r3, #1
 800488e:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8004890:	2002      	movs	r0, #2
 8004892:	e791      	b.n	80047b8 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8004894:	2200      	movs	r2, #0
 8004896:	7923      	ldrb	r3, [r4, #4]
 8004898:	4611      	mov	r1, r2
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f9b4 	bl	8004c08 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80048a0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048a4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80048a6:	2308      	movs	r3, #8
 80048a8:	e79c      	b.n	80047e4 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80048aa:	7921      	ldrb	r1, [r4, #4]
 80048ac:	4620      	mov	r0, r4
 80048ae:	f008 fc3b 	bl	800d128 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80048b2:	2801      	cmp	r0, #1
 80048b4:	d104      	bne.n	80048c0 <USBH_CtlReq+0x124>
      phost->RequestState = CMD_SEND;
 80048b6:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 80048b8:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80048ba:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 80048bc:	7620      	strb	r0, [r4, #24]
 80048be:	e77b      	b.n	80047b8 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 80048c0:	2804      	cmp	r0, #4
 80048c2:	d0ac      	beq.n	800481e <USBH_CtlReq+0x82>
      if(URB_Status == USBH_URB_STALL)
 80048c4:	2805      	cmp	r0, #5
 80048c6:	f47f af70 	bne.w	80047aa <USBH_CtlReq+0xe>
 80048ca:	e7d3      	b.n	8004874 <USBH_CtlReq+0xd8>
    USBH_CtlSendData (phost,
 80048cc:	2200      	movs	r2, #0
 80048ce:	7963      	ldrb	r3, [r4, #5]
 80048d0:	9100      	str	r1, [sp, #0]
 80048d2:	4620      	mov	r0, r4
 80048d4:	4611      	mov	r1, r2
 80048d6:	f000 f980 	bl	8004bda <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80048da:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048de:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80048e0:	230a      	movs	r3, #10
 80048e2:	e77f      	b.n	80047e4 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80048e4:	7961      	ldrb	r1, [r4, #5]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f008 fc1e 	bl	800d128 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80048ec:	2801      	cmp	r0, #1
 80048ee:	d0e2      	beq.n	80048b6 <USBH_CtlReq+0x11a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80048f0:	2802      	cmp	r0, #2
 80048f2:	d1a9      	bne.n	8004848 <USBH_CtlReq+0xac>
 80048f4:	e78b      	b.n	800480e <USBH_CtlReq+0x72>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80048f6:	7e63      	ldrb	r3, [r4, #25]
 80048f8:	3301      	adds	r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	7663      	strb	r3, [r4, #25]
 8004900:	d806      	bhi.n	8004910 <USBH_CtlReq+0x174>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8004902:	4620      	mov	r0, r4
 8004904:	f008 fba2 	bl	800d04c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8004908:	2001      	movs	r0, #1
 800490a:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 800490c:	70a0      	strb	r0, [r4, #2]
 800490e:	e753      	b.n	80047b8 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004910:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004914:	2106      	movs	r1, #6
 8004916:	4620      	mov	r0, r4
 8004918:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	7663      	strb	r3, [r4, #25]
 800491e:	e7b5      	b.n	800488c <USBH_CtlReq+0xf0>

08004920 <USBH_GetDescriptor>:
{
 8004920:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8004922:	7884      	ldrb	r4, [r0, #2]
{
 8004924:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8004928:	2c01      	cmp	r4, #1
 800492a:	d110      	bne.n	800494e <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800492c:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8004930:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004932:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004936:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 800493a:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800493c:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8004940:	bf0c      	ite	eq
 8004942:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8004946:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004948:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 800494a:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 800494c:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 800494e:	462a      	mov	r2, r5
 8004950:	4619      	mov	r1, r3
}
 8004952:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8004954:	f7ff bf22 	b.w	800479c <USBH_CtlReq>

08004958 <USBH_Get_DevDesc>:
{
 8004958:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800495a:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800495e:	460d      	mov	r5, r1
 8004960:	9100      	str	r1, [sp, #0]
 8004962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004966:	2100      	movs	r1, #0
{
 8004968:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800496a:	f7ff ffd9 	bl	8004920 <USBH_GetDescriptor>
 800496e:	bbc8      	cbnz	r0, 80049e4 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8004970:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8004974:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004978:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800497c:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8004980:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8004984:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8004988:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800498c:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004990:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8004994:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004998:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800499c:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 80049a0:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80049a2:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80049a6:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 80049aa:	d91b      	bls.n	80049e4 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 80049ac:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 80049b0:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 80049b4:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80049b8:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80049bc:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80049c0:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80049c4:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80049c8:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80049cc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 80049d0:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80049d4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80049d8:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80049dc:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80049e0:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 80049e4:	b003      	add	sp, #12
 80049e6:	bd30      	pop	{r4, r5, pc}

080049e8 <USBH_Get_CfgDesc>:
{
 80049e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80049ec:	f100 041c 	add.w	r4, r0, #28
{
 80049f0:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80049f2:	9100      	str	r1, [sp, #0]
 80049f4:	4623      	mov	r3, r4
 80049f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fa:	2100      	movs	r1, #0
{
 80049fc:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 80049fe:	f7ff ff8f 	bl	8004920 <USBH_GetDescriptor>
 8004a02:	bb40      	cbnz	r0, 8004a56 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004a04:	7f2b      	ldrb	r3, [r5, #28]
 8004a06:	f885 3334 	strb.w	r3, [r5, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004a0a:	7f6b      	ldrb	r3, [r5, #29]
 8004a0c:	f885 3335 	strb.w	r3, [r5, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004a10:	f895 3020 	ldrb.w	r3, [r5, #32]
 8004a14:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004a18:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8004a1c:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004a20:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8004a24:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004a28:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004a2c:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004a30:	f885 333b 	strb.w	r3, [r5, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004a34:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004a36:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004a3a:	f8a5 c336 	strh.w	ip, [r5, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004a3e:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004a42:	d908      	bls.n	8004a56 <USBH_Get_CfgDesc+0x6e>
 8004a44:	462b      	mov	r3, r5
 8004a46:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8004a48:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004a4a:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004a4e:	2f02      	cmp	r7, #2
 8004a50:	d001      	beq.n	8004a56 <USBH_Get_CfgDesc+0x6e>
 8004a52:	4594      	cmp	ip, r2
 8004a54:	d802      	bhi.n	8004a5c <USBH_Get_CfgDesc+0x74>
}
 8004a56:	b003      	add	sp, #12
 8004a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a5c:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004a5e:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a60:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004a62:	7861      	ldrb	r1, [r4, #1]
 8004a64:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a66:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004a68:	d1f1      	bne.n	8004a4e <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004a6a:	7821      	ldrb	r1, [r4, #0]
 8004a6c:	f883 133e 	strb.w	r1, [r3, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004a70:	7861      	ldrb	r1, [r4, #1]
 8004a72:	f883 133f 	strb.w	r1, [r3, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004a76:	78a1      	ldrb	r1, [r4, #2]
 8004a78:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004a7c:	78e1      	ldrb	r1, [r4, #3]
 8004a7e:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004a82:	7921      	ldrb	r1, [r4, #4]
 8004a84:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004a88:	7961      	ldrb	r1, [r4, #5]
 8004a8a:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004a8e:	79a1      	ldrb	r1, [r4, #6]
 8004a90:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004a94:	79e1      	ldrb	r1, [r4, #7]
 8004a96:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004a9a:	7a21      	ldrb	r1, [r4, #8]
 8004a9c:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004aa0:	fb0e f807 	mul.w	r8, lr, r7
        ep_ix = 0U;
 8004aa4:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004aa6:	f893 6342 	ldrb.w	r6, [r3, #834]	; 0x342
 8004aaa:	428e      	cmp	r6, r1
 8004aac:	d901      	bls.n	8004ab2 <USBH_Get_CfgDesc+0xca>
 8004aae:	4594      	cmp	ip, r2
 8004ab0:	d802      	bhi.n	8004ab8 <USBH_Get_CfgDesc+0xd0>
 8004ab2:	3701      	adds	r7, #1
 8004ab4:	331a      	adds	r3, #26
 8004ab6:	e7ca      	b.n	8004a4e <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004ab8:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004aba:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004abc:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004abe:	7866      	ldrb	r6, [r4, #1]
 8004ac0:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004ac2:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004ac4:	d1ef      	bne.n	8004aa6 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004ac6:	1c4e      	adds	r6, r1, #1
 8004ac8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 8004acc:	4429      	add	r1, r5
 8004ace:	f894 9000 	ldrb.w	r9, [r4]
 8004ad2:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004ad6:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004ada:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004ade:	f894 9002 	ldrb.w	r9, [r4, #2]
 8004ae2:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004ae6:	f894 9003 	ldrb.w	r9, [r4, #3]
 8004aea:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004aee:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8004af2:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004af6:	f894 9006 	ldrb.w	r9, [r4, #6]
 8004afa:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8004afe:	b2f1      	uxtb	r1, r6
 8004b00:	e7d1      	b.n	8004aa6 <USBH_Get_CfgDesc+0xbe>

08004b02 <USBH_Get_StringDesc>:
{
 8004b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8004b04:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004b12:	462b      	mov	r3, r5
 8004b14:	2100      	movs	r1, #0
{
 8004b16:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004b18:	f7ff ff02 	bl	8004920 <USBH_GetDescriptor>
 8004b1c:	b978      	cbnz	r0, 8004b3e <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004b1e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d10b      	bne.n	8004b3e <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004b26:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004b2a:	3b02      	subs	r3, #2
 8004b2c:	42bb      	cmp	r3, r7
 8004b2e:	bf28      	it	cs
 8004b30:	463b      	movcs	r3, r7
 8004b32:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b34:	4602      	mov	r2, r0
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d803      	bhi.n	8004b42 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	7023      	strb	r3, [r4, #0]
}
 8004b3e:	b003      	add	sp, #12
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004b42:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b44:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004b46:	7889      	ldrb	r1, [r1, #2]
 8004b48:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	e7f2      	b.n	8004b36 <USBH_Get_StringDesc+0x34>

08004b50 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004b50:	7883      	ldrb	r3, [r0, #2]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004b56:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004b5a:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b5c:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004b5e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b60:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8004b62:	2200      	movs	r2, #0
 8004b64:	4611      	mov	r1, r2
 8004b66:	f7ff be19 	b.w	800479c <USBH_CtlReq>

08004b6a <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004b6a:	7883      	ldrb	r3, [r0, #2]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004b70:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004b74:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b76:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004b78:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b7a:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U , 0U);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4611      	mov	r1, r2
 8004b80:	f7ff be0c 	b.w	800479c <USBH_CtlReq>

08004b84 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004b84:	7883      	ldrb	r3, [r0, #2]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b8e:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b90:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 8004b92:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b94:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8004b96:	2200      	movs	r2, #0
 8004b98:	4611      	mov	r1, r2
 8004b9a:	f7ff bdff 	b.w	800479c <USBH_CtlReq>

08004b9e <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004b9e:	7883      	ldrb	r3, [r0, #2]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004ba4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004ba8:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8004baa:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8004bac:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bae:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	f7ff bdf2 	b.w	800479c <USBH_CtlReq>

08004bb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004bb8:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004bba:	2308      	movs	r3, #8
{
 8004bbc:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004bbe:	2400      	movs	r4, #0
{
 8004bc0:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004bc2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004bc6:	e9cd 4100 	strd	r4, r1, [sp]
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f008 fa90 	bl	800d0f4 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	b005      	add	sp, #20
 8004bd8:	bd30      	pop	{r4, r5, pc}

08004bda <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004bda:	b530      	push	{r4, r5, lr}
 8004bdc:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004bde:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004be2:	9101      	str	r1, [sp, #4]
{
 8004be4:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004be6:	2d00      	cmp	r5, #0
{
 8004be8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 8004bec:	bf18      	it	ne
 8004bee:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f008 fa79 	bl	800d0f4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004c02:	2000      	movs	r0, #0
 8004c04:	b005      	add	sp, #20
 8004c06:	bd30      	pop	{r4, r5, pc}

08004c08 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004c08:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c0a:	2400      	movs	r4, #0
{
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c10:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004c14:	2201      	movs	r2, #1
 8004c16:	9101      	str	r1, [sp, #4]
 8004c18:	9200      	str	r2, [sp, #0]
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	f008 fa69 	bl	800d0f4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004c22:	4620      	mov	r0, r4
 8004c24:	b005      	add	sp, #20
 8004c26:	bd30      	pop	{r4, r5, pc}

08004c28 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8004c28:	b530      	push	{r4, r5, lr}
 8004c2a:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c2c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c30:	9101      	str	r1, [sp, #4]
{
 8004c32:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c34:	2d00      	cmp	r5, #0
{
 8004c36:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 8004c3a:	bf18      	it	ne
 8004c3c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c42:	2301      	movs	r3, #1
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	2302      	movs	r3, #2
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	f008 fa52 	bl	800d0f4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004c50:	2000      	movs	r0, #0
 8004c52:	b005      	add	sp, #20
 8004c54:	bd30      	pop	{r4, r5, pc}

08004c56 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004c56:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c58:	2400      	movs	r4, #0
{
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c5e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004c62:	2201      	movs	r2, #1
 8004c64:	9101      	str	r1, [sp, #4]
 8004c66:	9200      	str	r2, [sp, #0]
 8004c68:	2302      	movs	r3, #2
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f008 fa42 	bl	800d0f4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004c70:	4620      	mov	r0, r4
 8004c72:	b005      	add	sp, #20
 8004c74:	bd30      	pop	{r4, r5, pc}

08004c76 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004c76:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004c78:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004c7c:	9402      	str	r4, [sp, #8]
 8004c7e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004c82:	9401      	str	r4, [sp, #4]
 8004c84:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004c88:	9400      	str	r4, [sp, #0]
 8004c8a:	f008 fa0d 	bl	800d0a8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004c8e:	2000      	movs	r0, #0
 8004c90:	b004      	add	sp, #16
 8004c92:	bd10      	pop	{r4, pc}

08004c94 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004c94:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004c96:	f008 fa1f 	bl	800d0d8 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	bd08      	pop	{r3, pc}

08004c9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004c9e:	b530      	push	{r4, r5, lr}
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004ca6:	f854 5b04 	ldr.w	r5, [r4], #4
 8004caa:	042d      	lsls	r5, r5, #16
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	d407      	bmi.n	8004cc0 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004cb0:	33e0      	adds	r3, #224	; 0xe0
 8004cb2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004cb6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8004cba:	b292      	uxth	r2, r2
}
 8004cbc:	b2d0      	uxtb	r0, r2
 8004cbe:	bd30      	pop	{r4, r5, pc}
 8004cc0:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004cc2:	2b0b      	cmp	r3, #11
 8004cc4:	d1ef      	bne.n	8004ca6 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cca:	e7f7      	b.n	8004cbc <USBH_AllocPipe+0x1e>

08004ccc <USBH_FreePipe>:
   if(idx < 11U)
 8004ccc:	290a      	cmp	r1, #10
 8004cce:	bf9f      	itttt	ls
 8004cd0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004cd4:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004cd8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004cdc:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	4770      	bx	lr

08004ce4 <fs_open_custom>:

extern char json_orders[];
extern WebInterface wi;

int fs_open_custom(struct fs_file *file, const char *name)
{
 8004ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int len = 0;
  file->flags = 0;
 8004ce6:	2300      	movs	r3, #0
{
 8004ce8:	460d      	mov	r5, r1
 8004cea:	4604      	mov	r4, r0
  file->flags = 0;
 8004cec:	7403      	strb	r3, [r0, #16]

  if ( strcmp( name, "/!!" ) == 0 )
 8004cee:	495e      	ldr	r1, [pc, #376]	; (8004e68 <fs_open_custom+0x184>)
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7fb fa6d 	bl	80001d0 <strcmp>
 8004cf6:	bb20      	cbnz	r0, 8004d42 <fs_open_custom+0x5e>
  {
	len = strlen( json_orders );
 8004cf8:	485c      	ldr	r0, [pc, #368]	; (8004e6c <fs_open_custom+0x188>)
 8004cfa:	f7fb fa73 	bl	80001e4 <strlen>

	if ( len > 6 )
 8004cfe:	2806      	cmp	r0, #6
	len = strlen( json_orders );
 8004d00:	4606      	mov	r6, r0
	if ( len > 6 )
 8004d02:	d91a      	bls.n	8004d3a <fs_open_custom+0x56>
	{
		strcat( json_orders, "{}]}" );
 8004d04:	495a      	ldr	r1, [pc, #360]	; (8004e70 <fs_open_custom+0x18c>)
 8004d06:	4859      	ldr	r0, [pc, #356]	; (8004e6c <fs_open_custom+0x188>)
 8004d08:	f008 ff74 	bl	800dbf4 <strcat>
		len += 4;

		file->data = ( char * )malloc( len + 1 );
 8004d0c:	1d70      	adds	r0, r6, #5
 8004d0e:	f008 fe4f 	bl	800d9b0 <malloc>
		file->flags |= 0x04; // Must be deleted later
 8004d12:	7c23      	ldrb	r3, [r4, #16]

		strcpy( ( char * )file->data, json_orders );
 8004d14:	4955      	ldr	r1, [pc, #340]	; (8004e6c <fs_open_custom+0x188>)
		file->data = ( char * )malloc( len + 1 );
 8004d16:	6020      	str	r0, [r4, #0]
		file->flags |= 0x04; // Must be deleted later
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	7423      	strb	r3, [r4, #16]
		strcpy( ( char * )file->data, json_orders );
 8004d1e:	f008 ff85 	bl	800dc2c <strcpy>

		strcpy( json_orders, "{\"L\":[" );
 8004d22:	4954      	ldr	r1, [pc, #336]	; (8004e74 <fs_open_custom+0x190>)
 8004d24:	4851      	ldr	r0, [pc, #324]	; (8004e6c <fs_open_custom+0x188>)
		len += 4;
 8004d26:	1d35      	adds	r5, r6, #4
		strcpy( json_orders, "{\"L\":[" );
 8004d28:	f008 ff80 	bl	800dc2c <strcpy>
#endif
  }

  file->len = len;
  file->index = len;
  file->pextension = 0;
 8004d2c:	2300      	movs	r3, #0

  return len;
}
 8004d2e:	4628      	mov	r0, r5
  file->index = len;
 8004d30:	e9c4 5501 	strd	r5, r5, [r4, #4]
  file->pextension = 0;
 8004d34:	60e3      	str	r3, [r4, #12]
}
 8004d36:	b002      	add	sp, #8
 8004d38:	bd70      	pop	{r4, r5, r6, pc}
	    file->data = json_nil;
 8004d3a:	4b4f      	ldr	r3, [pc, #316]	; (8004e78 <fs_open_custom+0x194>)
	file->data = "ok";
 8004d3c:	6023      	str	r3, [r4, #0]
	len = 2;
 8004d3e:	2502      	movs	r5, #2
 8004d40:	e7f4      	b.n	8004d2c <fs_open_custom+0x48>
  else if ( strncmp( name, "/register_player", 16 ) == 0 )
 8004d42:	2210      	movs	r2, #16
 8004d44:	494d      	ldr	r1, [pc, #308]	; (8004e7c <fs_open_custom+0x198>)
 8004d46:	4628      	mov	r0, r5
 8004d48:	f008 ff78 	bl	800dc3c <strncmp>
 8004d4c:	b940      	cbnz	r0, 8004d60 <fs_open_custom+0x7c>
    file->data = ok;
 8004d4e:	4b4c      	ldr	r3, [pc, #304]	; (8004e80 <fs_open_custom+0x19c>)
    wi.button_register_player = 1;
 8004d50:	484c      	ldr	r0, [pc, #304]	; (8004e84 <fs_open_custom+0x1a0>)
    file->data = ok;
 8004d52:	6023      	str	r3, [r4, #0]
    wi.button_register_player = 1;
 8004d54:	2301      	movs	r3, #1
 8004d56:	7043      	strb	r3, [r0, #1]
    event_trigger( &wi.evt );
 8004d58:	f007 f917 	bl	800bf8a <event_trigger>
      len = strlen( ok );
 8004d5c:	2556      	movs	r5, #86	; 0x56
 8004d5e:	e7e5      	b.n	8004d2c <fs_open_custom+0x48>
  else if ( strncmp( name, "/acc/", 5 ) == 0 ) // FOR TEST ONLY
 8004d60:	2205      	movs	r2, #5
 8004d62:	4949      	ldr	r1, [pc, #292]	; (8004e88 <fs_open_custom+0x1a4>)
 8004d64:	4628      	mov	r0, r5
 8004d66:	f008 ff69 	bl	800dc3c <strncmp>
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	b9b0      	cbnz	r0, 8004d9c <fs_open_custom+0xb8>
    file->data = ok;
 8004d6e:	4b44      	ldr	r3, [pc, #272]	; (8004e80 <fs_open_custom+0x19c>)
 8004d70:	6023      	str	r3, [r4, #0]
    ax = strtol( name + 5, &endptr, 10 );
 8004d72:	1d68      	adds	r0, r5, #5
 8004d74:	220a      	movs	r2, #10
 8004d76:	a901      	add	r1, sp, #4
 8004d78:	f009 f81c 	bl	800ddb4 <strtol>
 8004d7c:	b245      	sxtb	r5, r0
    if ( *endptr ) ay = strtol( endptr + 1, 0, 10 );
 8004d7e:	9801      	ldr	r0, [sp, #4]
 8004d80:	7803      	ldrb	r3, [r0, #0]
 8004d82:	b12b      	cbz	r3, 8004d90 <fs_open_custom+0xac>
 8004d84:	220a      	movs	r2, #10
 8004d86:	4631      	mov	r1, r6
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f009 f813 	bl	800ddb4 <strtol>
 8004d8e:	b243      	sxtb	r3, r0
    wi.acc_x = ax;
 8004d90:	483c      	ldr	r0, [pc, #240]	; (8004e84 <fs_open_custom+0x1a0>)
    wi.acc_y = ay;
 8004d92:	7103      	strb	r3, [r0, #4]
    wi.button_acc = 1;
 8004d94:	2301      	movs	r3, #1
    wi.acc_x = ax;
 8004d96:	70c5      	strb	r5, [r0, #3]
    wi.button_acc = 1;
 8004d98:	7083      	strb	r3, [r0, #2]
 8004d9a:	e7dd      	b.n	8004d58 <fs_open_custom+0x74>
  else if ( strcmp( name, "/favicon.ico" ) == 0 )
 8004d9c:	493b      	ldr	r1, [pc, #236]	; (8004e8c <fs_open_custom+0x1a8>)
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f7fb fa16 	bl	80001d0 <strcmp>
 8004da4:	b920      	cbnz	r0, 8004db0 <fs_open_custom+0xcc>
	len = img_favicon_size;
 8004da6:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <fs_open_custom+0x1ac>)
 8004da8:	681d      	ldr	r5, [r3, #0]
	file->data = ( const char * )img_favicon;
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <fs_open_custom+0x1b0>)
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	e7bd      	b.n	8004d2c <fs_open_custom+0x48>
  else if ( strcmp( name, "/index.html" ) == 0 )
 8004db0:	4939      	ldr	r1, [pc, #228]	; (8004e98 <fs_open_custom+0x1b4>)
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7fb fa0c 	bl	80001d0 <strcmp>
 8004db8:	b920      	cbnz	r0, 8004dc4 <fs_open_custom+0xe0>
    file->data = ( const char * )file_index_html;
 8004dba:	4b38      	ldr	r3, [pc, #224]	; (8004e9c <fs_open_custom+0x1b8>)
 8004dbc:	6023      	str	r3, [r4, #0]
    len = file_index_html_size;
 8004dbe:	4b38      	ldr	r3, [pc, #224]	; (8004ea0 <fs_open_custom+0x1bc>)
    len = file_engine_js_size;
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	e7b3      	b.n	8004d2c <fs_open_custom+0x48>
  else if ( strcmp( name, "/engine.js" ) == 0 )
 8004dc4:	4937      	ldr	r1, [pc, #220]	; (8004ea4 <fs_open_custom+0x1c0>)
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f7fb fa02 	bl	80001d0 <strcmp>
 8004dcc:	b918      	cbnz	r0, 8004dd6 <fs_open_custom+0xf2>
    file->data = ( const char * )file_engine_js;
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <fs_open_custom+0x1c4>)
 8004dd0:	6023      	str	r3, [r4, #0]
    len = file_engine_js_size;
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <fs_open_custom+0x1c8>)
 8004dd4:	e7f4      	b.n	8004dc0 <fs_open_custom+0xdc>
  else if ( strcmp( name, "/xbee_log.html" ) == 0 )
 8004dd6:	4936      	ldr	r1, [pc, #216]	; (8004eb0 <fs_open_custom+0x1cc>)
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f7fb f9f9 	bl	80001d0 <strcmp>
 8004dde:	b930      	cbnz	r0, 8004dee <fs_open_custom+0x10a>
    file->data = xbee_log_get();
 8004de0:	f008 fd8a 	bl	800d8f8 <xbee_log_get>
 8004de4:	6020      	str	r0, [r4, #0]
    len = xbee_log_len();
 8004de6:	f008 fd8b 	bl	800d900 <xbee_log_len>
      len = sprintf( buffer, "ERROR %d", r );
 8004dea:	4605      	mov	r5, r0
 8004dec:	e79e      	b.n	8004d2c <fs_open_custom+0x48>
  else if ( strcmp( name, "/xbee_switch_to_api.html" ) == 0 )
 8004dee:	4931      	ldr	r1, [pc, #196]	; (8004eb4 <fs_open_custom+0x1d0>)
 8004df0:	4628      	mov	r0, r5
 8004df2:	f7fb f9ed 	bl	80001d0 <strcmp>
 8004df6:	b980      	cbnz	r0, 8004e1a <fs_open_custom+0x136>
	int r = xbee_AT_configure_API1();
 8004df8:	f008 fce2 	bl	800d7c0 <xbee_AT_configure_API1>
    file->data = buffer;
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <fs_open_custom+0x1d4>)
 8004dfe:	6023      	str	r3, [r4, #0]
    if ( r == 0 )
 8004e00:	4602      	mov	r2, r0
 8004e02:	b928      	cbnz	r0, 8004e10 <fs_open_custom+0x12c>
      len = sprintf( buffer, "SUCCESS" );
 8004e04:	492d      	ldr	r1, [pc, #180]	; (8004ebc <fs_open_custom+0x1d8>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f008 ff10 	bl	800dc2c <strcpy>
 8004e0c:	2507      	movs	r5, #7
 8004e0e:	e78d      	b.n	8004d2c <fs_open_custom+0x48>
      len = sprintf( buffer, "ERROR %d", r );
 8004e10:	492b      	ldr	r1, [pc, #172]	; (8004ec0 <fs_open_custom+0x1dc>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f008 fece 	bl	800dbb4 <siprintf>
 8004e18:	e7e7      	b.n	8004dea <fs_open_custom+0x106>
  else if ( strcmp( name, "/orange.html" ) == 0 )
 8004e1a:	492a      	ldr	r1, [pc, #168]	; (8004ec4 <fs_open_custom+0x1e0>)
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7fb f9d7 	bl	80001d0 <strcmp>
 8004e22:	b938      	cbnz	r0, 8004e34 <fs_open_custom+0x150>
      HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
 8004e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004e28:	4827      	ldr	r0, [pc, #156]	; (8004ec8 <fs_open_custom+0x1e4>)
 8004e2a:	f7fc ffb0 	bl	8001d8e <HAL_GPIO_TogglePin>
      file->data = ok;
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <fs_open_custom+0x19c>)
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	e793      	b.n	8004d5c <fs_open_custom+0x78>
    else if ( strcmp( name, "/green.html" ) == 0 )
 8004e34:	4925      	ldr	r1, [pc, #148]	; (8004ecc <fs_open_custom+0x1e8>)
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7fb f9ca 	bl	80001d0 <strcmp>
 8004e3c:	b910      	cbnz	r0, 8004e44 <fs_open_custom+0x160>
      HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 8004e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e42:	e7f1      	b.n	8004e28 <fs_open_custom+0x144>
    else if ( strcmp( name, "/red.html" ) == 0 )
 8004e44:	4922      	ldr	r1, [pc, #136]	; (8004ed0 <fs_open_custom+0x1ec>)
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9c2 	bl	80001d0 <strcmp>
 8004e4c:	b910      	cbnz	r0, 8004e54 <fs_open_custom+0x170>
      HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8004e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e52:	e7e9      	b.n	8004e28 <fs_open_custom+0x144>
    else if ( strcmp( name, "/blue.html" ) == 0 )
 8004e54:	491f      	ldr	r1, [pc, #124]	; (8004ed4 <fs_open_custom+0x1f0>)
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fb f9ba 	bl	80001d0 <strcmp>
 8004e5c:	b910      	cbnz	r0, 8004e64 <fs_open_custom+0x180>
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e62:	e7e1      	b.n	8004e28 <fs_open_custom+0x144>
	file->data = "ok";
 8004e64:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <fs_open_custom+0x1f4>)
 8004e66:	e769      	b.n	8004d3c <fs_open_custom+0x58>
 8004e68:	0800eda4 	.word	0x0800eda4
 8004e6c:	200087e4 	.word	0x200087e4
 8004e70:	0800eda8 	.word	0x0800eda8
 8004e74:	0800edad 	.word	0x0800edad
 8004e78:	0800ee59 	.word	0x0800ee59
 8004e7c:	0800edb4 	.word	0x0800edb4
 8004e80:	0800ee5c 	.word	0x0800ee5c
 8004e84:	20008a58 	.word	0x20008a58
 8004e88:	0800edc5 	.word	0x0800edc5
 8004e8c:	0800edcb 	.word	0x0800edcb
 8004e90:	200005a8 	.word	0x200005a8
 8004e94:	20000028 	.word	0x20000028
 8004e98:	0800edd8 	.word	0x0800edd8
 8004e9c:	08012084 	.word	0x08012084
 8004ea0:	080125d0 	.word	0x080125d0
 8004ea4:	0800ede4 	.word	0x0800ede4
 8004ea8:	08010c54 	.word	0x08010c54
 8004eac:	0801206c 	.word	0x0801206c
 8004eb0:	0800edef 	.word	0x0800edef
 8004eb4:	0800edfe 	.word	0x0800edfe
 8004eb8:	20001ac8 	.word	0x20001ac8
 8004ebc:	0800ee17 	.word	0x0800ee17
 8004ec0:	0800ee1f 	.word	0x0800ee1f
 8004ec4:	0800ee28 	.word	0x0800ee28
 8004ec8:	40020c00 	.word	0x40020c00
 8004ecc:	0800ee35 	.word	0x0800ee35
 8004ed0:	0800ee41 	.word	0x0800ee41
 8004ed4:	0800ee4b 	.word	0x0800ee4b
 8004ed8:	0800ee56 	.word	0x0800ee56

08004edc <fs_close_custom>:

/*-----------------------------------------------------------------------------------*/
void fs_close_custom(struct fs_file *file)
{
 8004edc:	b510      	push	{r4, lr}
	if ( file->flags & 0x04 )
 8004ede:	7c03      	ldrb	r3, [r0, #16]
 8004ee0:	075b      	lsls	r3, r3, #29
{
 8004ee2:	4604      	mov	r4, r0
	if ( file->flags & 0x04 )
 8004ee4:	d502      	bpl.n	8004eec <fs_close_custom+0x10>
	{
	  free( ( char * )file->data );
 8004ee6:	6800      	ldr	r0, [r0, #0]
 8004ee8:	f008 fd6a 	bl	800d9c0 <free>
	}
	file->data = 0;
 8004eec:	2300      	movs	r3, #0
	file->len = 0;
 8004eee:	e9c4 3300 	strd	r3, r3, [r4]
}
 8004ef2:	bd10      	pop	{r4, pc}

08004ef4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004ef4:	b510      	push	{r4, lr}
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	b158      	cbz	r0, 8004f12 <fs_open+0x1e>
 8004efa:	b151      	cbz	r1, 8004f12 <fs_open+0x1e>
     return ERR_ARG;
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8004efc:	f7ff fef2 	bl	8004ce4 <fs_open_custom>
 8004f00:	b118      	cbz	r0, 8004f0a <fs_open+0x16>
    file->is_custom_file = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	7463      	strb	r3, [r4, #17]
    return ERR_OK;
 8004f06:	2000      	movs	r0, #0
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 8004f08:	bd10      	pop	{r4, pc}
  file->is_custom_file = 0;
 8004f0a:	7460      	strb	r0, [r4, #17]
  return ERR_VAL;
 8004f0c:	f06f 0005 	mvn.w	r0, #5
 8004f10:	e7fa      	b.n	8004f08 <fs_open+0x14>
     return ERR_ARG;
 8004f12:	f06f 000f 	mvn.w	r0, #15
 8004f16:	e7f7      	b.n	8004f08 <fs_open+0x14>

08004f18 <fs_close>:
/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 8004f18:	7c43      	ldrb	r3, [r0, #17]
 8004f1a:	b10b      	cbz	r3, 8004f20 <fs_close+0x8>
    fs_close_custom(file);
 8004f1c:	f7ff bfde 	b.w	8004edc <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004f20:	4770      	bx	lr

08004f22 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8004f22:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8004f26:	1a10      	subs	r0, r2, r0
 8004f28:	4770      	bx	lr

08004f2a <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8004f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	4605      	mov	r5, r0
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8004f30:	8810      	ldrh	r0, [r2, #0]
{
 8004f32:	460f      	mov	r7, r1
 8004f34:	4616      	mov	r6, r2
 8004f36:	4698      	mov	r8, r3
  if (len == 0) {
 8004f38:	b310      	cbz	r0, 8004f80 <http_write+0x56>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004f3a:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8004f3c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8004f40:	0064      	lsls	r4, r4, #1
 8004f42:	b2a4      	uxth	r4, r4
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf28      	it	cs
 8004f48:	461c      	movcs	r4, r3
 8004f4a:	4284      	cmp	r4, r0
 8004f4c:	bf28      	it	cs
 8004f4e:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8004f50:	4643      	mov	r3, r8
 8004f52:	4622      	mov	r2, r4
 8004f54:	4639      	mov	r1, r7
 8004f56:	4628      	mov	r0, r5
 8004f58:	f003 fe78 	bl	8008c4c <tcp_write>
    if (err == ERR_MEM) {
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d10c      	bne.n	8004f7a <http_write+0x50>
      if ((tcp_sndbuf(pcb) == 0) ||
 8004f60:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8004f64:	b133      	cbz	r3, 8004f74 <http_write+0x4a>
 8004f66:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d802      	bhi.n	8004f74 <http_write+0x4a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 8004f6e:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004f70:	2c01      	cmp	r4, #1
 8004f72:	d8ed      	bhi.n	8004f50 <http_write+0x26>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	8033      	strh	r3, [r6, #0]
 8004f78:	e002      	b.n	8004f80 <http_write+0x56>
  if (err == ERR_OK) {
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1fa      	bne.n	8004f74 <http_write+0x4a>
    *length = len;
 8004f7e:	8034      	strh	r4, [r6, #0]
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 8004f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f84 <http_state_eof>:
{
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4604      	mov	r4, r0
  if(hs->handle) {
 8004f88:	6940      	ldr	r0, [r0, #20]
 8004f8a:	b118      	cbz	r0, 8004f94 <http_state_eof+0x10>
    fs_close(hs->handle);
 8004f8c:	f7ff ffc4 	bl	8004f18 <fs_close>
    hs->handle = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 8004f94:	6a20      	ldr	r0, [r4, #32]
 8004f96:	b118      	cbz	r0, 8004fa0 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8004f98:	f001 f90e 	bl	80061b8 <pbuf_free>
    hs->req = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6223      	str	r3, [r4, #32]
}
 8004fa0:	bd10      	pop	{r4, pc}
	...

08004fa4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8004fa8:	490a      	ldr	r1, [pc, #40]	; (8004fd4 <http_get_404_file+0x30>)
 8004faa:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004fac:	4604      	mov	r4, r0
 8004fae:	f7ff ffa1 	bl	8004ef4 <fs_open>
  if (err != ERR_OK) {
 8004fb2:	b168      	cbz	r0, 8004fd0 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004fb4:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <http_get_404_file+0x34>)
 8004fb6:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7ff ff9b 	bl	8004ef4 <fs_open>
    if (err != ERR_OK) {
 8004fbe:	b138      	cbz	r0, 8004fd0 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004fc0:	4906      	ldr	r1, [pc, #24]	; (8004fdc <http_get_404_file+0x38>)
 8004fc2:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff ff95 	bl	8004ef4 <fs_open>
      if (err != ERR_OK) {
 8004fca:	b108      	cbz	r0, 8004fd0 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8004fcc:	2400      	movs	r4, #0
 8004fce:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	0800f18f 	.word	0x0800f18f
 8004fd8:	0800f199 	.word	0x0800f199
 8004fdc:	0800f1a2 	.word	0x0800f1a2

08004fe0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004fe4:	4615      	mov	r5, r2
 8004fe6:	bb42      	cbnz	r2, 800503a <http_accept+0x5a>
 8004fe8:	b339      	cbz	r1, 800503a <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004fea:	2101      	movs	r1, #1
 8004fec:	4620      	mov	r0, r4
 8004fee:	f001 fd37 	bl	8006a60 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004ff2:	2054      	movs	r0, #84	; 0x54
 8004ff4:	f000 fe7e 	bl	8005cf4 <mem_malloc>
  if (ret != NULL) {
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	b308      	cbz	r0, 8005040 <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 8004ffc:	2254      	movs	r2, #84	; 0x54
 8004ffe:	4629      	mov	r1, r5
 8005000:	f008 fd00 	bl	800da04 <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8005004:	2305      	movs	r3, #5
 8005006:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800500a:	4631      	mov	r1, r6
 800500c:	4620      	mov	r0, r4
  hs->pcb = pcb;
 800500e:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8005010:	f001 fd3e 	bl	8006a90 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8005014:	490c      	ldr	r1, [pc, #48]	; (8005048 <http_accept+0x68>)
 8005016:	4620      	mov	r0, r4
 8005018:	f001 fd3e 	bl	8006a98 <tcp_recv>
  tcp_err(pcb, http_err);
 800501c:	490b      	ldr	r1, [pc, #44]	; (800504c <http_accept+0x6c>)
 800501e:	4620      	mov	r0, r4
 8005020:	f001 fd68 	bl	8006af4 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005024:	490a      	ldr	r1, [pc, #40]	; (8005050 <http_accept+0x70>)
 8005026:	4620      	mov	r0, r4
 8005028:	2204      	movs	r2, #4
 800502a:	f001 fd81 	bl	8006b30 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800502e:	4909      	ldr	r1, [pc, #36]	; (8005054 <http_accept+0x74>)
 8005030:	4620      	mov	r0, r4
 8005032:	f001 fd49 	bl	8006ac8 <tcp_sent>

  return ERR_OK;
}
 8005036:	4628      	mov	r0, r5
 8005038:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800503a:	f06f 0505 	mvn.w	r5, #5
 800503e:	e7fa      	b.n	8005036 <http_accept+0x56>
    return ERR_MEM;
 8005040:	f04f 35ff 	mov.w	r5, #4294967295
 8005044:	e7f7      	b.n	8005036 <http_accept+0x56>
 8005046:	bf00      	nop
 8005048:	0800559d 	.word	0x0800559d
 800504c:	080058ed 	.word	0x080058ed
 8005050:	08005563 	.word	0x08005563
 8005054:	0800554b 	.word	0x0800554b

08005058 <http_find_file>:
{
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	b085      	sub	sp, #20
 800505e:	4604      	mov	r4, r0
  size_t uri_len = strlen(uri);
 8005060:	4608      	mov	r0, r1
{
 8005062:	9103      	str	r1, [sp, #12]
 8005064:	9201      	str	r2, [sp, #4]
  size_t uri_len = strlen(uri);
 8005066:	460d      	mov	r5, r1
 8005068:	f7fb f8bc 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800506c:	4682      	mov	sl, r0
 800506e:	2800      	cmp	r0, #0
 8005070:	d040      	beq.n	80050f4 <http_find_file+0x9c>
 8005072:	1e46      	subs	r6, r0, #1
 8005074:	5daa      	ldrb	r2, [r5, r6]
 8005076:	2a2f      	cmp	r2, #47	; 0x2f
 8005078:	d13c      	bne.n	80050f4 <http_find_file+0x9c>
 800507a:	4a87      	ldr	r2, [pc, #540]	; (8005298 <http_find_file+0x240>)
 800507c:	4295      	cmp	r5, r2
 800507e:	4690      	mov	r8, r2
 8005080:	d101      	bne.n	8005086 <http_find_file+0x2e>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005082:	2801      	cmp	r0, #1
 8005084:	d136      	bne.n	80050f4 <http_find_file+0x9c>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005086:	2e3f      	cmp	r6, #63	; 0x3f
 8005088:	bf28      	it	cs
 800508a:	263f      	movcs	r6, #63	; 0x3f
    if (copy_len > 0) {
 800508c:	f1ba 0f01 	cmp.w	sl, #1
 8005090:	d007      	beq.n	80050a2 <http_find_file+0x4a>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005092:	4632      	mov	r2, r6
 8005094:	4629      	mov	r1, r5
 8005096:	4880      	ldr	r0, [pc, #512]	; (8005298 <http_find_file+0x240>)
 8005098:	f008 fca9 	bl	800d9ee <memcpy>
      http_uri_buf[copy_len] = 0;
 800509c:	2200      	movs	r2, #0
 800509e:	f808 2006 	strb.w	r2, [r8, r6]
        file_name = g_psDefaultFilenames[loop].name;
 80050a2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80052e0 <http_find_file+0x288>
        file_name = http_uri_buf;
 80050a6:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8005298 <http_find_file+0x240>
{
 80050aa:	2700      	movs	r7, #0
      if (copy_len > 0) {
 80050ac:	f1ba 0f01 	cmp.w	sl, #1
 80050b0:	d013      	beq.n	80050da <http_find_file+0x82>
        if (len_left > 0) {
 80050b2:	f1d6 023f 	rsbs	r2, r6, #63	; 0x3f
 80050b6:	d00e      	beq.n	80050d6 <http_find_file+0x7e>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 80050b8:	f859 5037 	ldr.w	r5, [r9, r7, lsl #3]
 80050bc:	9202      	str	r2, [sp, #8]
 80050be:	4628      	mov	r0, r5
 80050c0:	f7fb f890 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 80050c4:	9a02      	ldr	r2, [sp, #8]
 80050c6:	4282      	cmp	r2, r0
 80050c8:	bf28      	it	cs
 80050ca:	4602      	movcs	r2, r0
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb08 0006 	add.w	r0, r8, r6
 80050d2:	f008 fc8c 	bl	800d9ee <memcpy>
        file_name = http_uri_buf;
 80050d6:	465a      	mov	r2, fp
 80050d8:	e001      	b.n	80050de <http_find_file+0x86>
        file_name = g_psDefaultFilenames[loop].name;
 80050da:	f859 2037 	ldr.w	r2, [r9, r7, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80050de:	9202      	str	r2, [sp, #8]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7ff ff06 	bl	8004ef4 <fs_open>
 80050e8:	4625      	mov	r5, r4
      if(err == ERR_OK) {
 80050ea:	9a02      	ldr	r2, [sp, #8]
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d15a      	bne.n	80051a6 <http_find_file+0x14e>
        uri = file_name;
 80050f0:	9203      	str	r2, [sp, #12]
  if (file == NULL) {
 80050f2:	b9bc      	cbnz	r4, 8005124 <http_find_file+0xcc>
    params = (char *)strchr(uri, '?');
 80050f4:	213f      	movs	r1, #63	; 0x3f
 80050f6:	9803      	ldr	r0, [sp, #12]
 80050f8:	f008 fd8b 	bl	800dc12 <strchr>
    if (params != NULL) {
 80050fc:	b108      	cbz	r0, 8005102 <http_find_file+0xaa>
      *params = '\0';
 80050fe:	2300      	movs	r3, #0
 8005100:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8005102:	9903      	ldr	r1, [sp, #12]
 8005104:	4620      	mov	r0, r4
 8005106:	4625      	mov	r5, r4
 8005108:	f7ff fef4 	bl	8004ef4 <fs_open>
    if (err == ERR_OK) {
 800510c:	b120      	cbz	r0, 8005118 <http_find_file+0xc0>
      file = http_get_404_file(hs, &uri);
 800510e:	a903      	add	r1, sp, #12
 8005110:	4620      	mov	r0, r4
 8005112:	f7ff ff47 	bl	8004fa4 <http_get_404_file>
 8005116:	4605      	mov	r5, r0
  if (file == NULL) {
 8005118:	b925      	cbnz	r5, 8005124 <http_find_file+0xcc>
    file = http_get_404_file(hs, &uri);
 800511a:	a903      	add	r1, sp, #12
 800511c:	4620      	mov	r0, r4
 800511e:	f7ff ff41 	bl	8004fa4 <http_get_404_file>
 8005122:	4605      	mov	r5, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005124:	9f03      	ldr	r7, [sp, #12]
    hs->handle = file;
 8005126:	6165      	str	r5, [r4, #20]
  if (file != NULL) {
 8005128:	2d00      	cmp	r5, #0
 800512a:	d043      	beq.n	80051b4 <http_find_file+0x15c>
    hs->file = file->data;
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005130:	686b      	ldr	r3, [r5, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da06      	bge.n	8005144 <http_find_file+0xec>
 8005136:	4b59      	ldr	r3, [pc, #356]	; (800529c <http_find_file+0x244>)
 8005138:	4959      	ldr	r1, [pc, #356]	; (80052a0 <http_find_file+0x248>)
 800513a:	485a      	ldr	r0, [pc, #360]	; (80052a4 <http_find_file+0x24c>)
 800513c:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8005140:	f008 fd10 	bl	800db64 <iprintf>
    if (file->is_custom_file && (file->data == NULL)) {
 8005144:	7c6b      	ldrb	r3, [r5, #17]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d032      	beq.n	80051b0 <http_find_file+0x158>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d12f      	bne.n	80051b0 <http_find_file+0x158>
      hs->left = file->len;
 8005150:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	b183      	cbz	r3, 800517e <http_find_file+0x126>
 800515c:	6963      	ldr	r3, [r4, #20]
 800515e:	7c1b      	ldrb	r3, [r3, #16]
 8005160:	07da      	lsls	r2, r3, #31
 8005162:	d50c      	bpl.n	800517e <http_find_file+0x126>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005166:	4950      	ldr	r1, [pc, #320]	; (80052a8 <http_find_file+0x250>)
 8005168:	69a0      	ldr	r0, [r4, #24]
 800516a:	f000 fc10 	bl	800598e <lwip_strnstr>
      if (file_start != NULL) {
 800516e:	b130      	cbz	r0, 800517e <http_find_file+0x126>
        size_t diff = file_start + 4 - hs->file;
 8005170:	69a3      	ldr	r3, [r4, #24]
 8005172:	3004      	adds	r0, #4
 8005174:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8005176:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8005178:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	b113      	cbz	r3, 8005188 <http_find_file+0x130>
 8005182:	7c1b      	ldrb	r3, [r3, #16]
 8005184:	07db      	lsls	r3, r3, #31
 8005186:	d40a      	bmi.n	800519e <http_find_file+0x146>
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8005188:	4b48      	ldr	r3, [pc, #288]	; (80052ac <http_find_file+0x254>)
 800518a:	6323      	str	r3, [r4, #48]	; 0x30
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = NULL;
 800518c:	2300      	movs	r3, #0
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800518e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  if (uri == NULL) {
 8005192:	b9a7      	cbnz	r7, 80051be <http_find_file+0x166>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005194:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <http_find_file+0x258>)
 8005196:	62e3      	str	r3, [r4, #44]	; 0x2c
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 8005198:	4b46      	ldr	r3, [pc, #280]	; (80052b4 <http_find_file+0x25c>)
 800519a:	63e3      	str	r3, [r4, #60]	; 0x3c
    hs->hdr_pos = 0;
 800519c:	64e7      	str	r7, [r4, #76]	; 0x4c
}
 800519e:	2000      	movs	r0, #0
 80051a0:	b005      	add	sp, #20
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80051a6:	3701      	adds	r7, #1
 80051a8:	2f05      	cmp	r7, #5
 80051aa:	f47f af7f 	bne.w	80050ac <http_find_file+0x54>
 80051ae:	e7a1      	b.n	80050f4 <http_find_file+0x9c>
      hs->left = file->len;
 80051b0:	686b      	ldr	r3, [r5, #4]
 80051b2:	e7cd      	b.n	8005150 <http_find_file+0xf8>
    hs->file = NULL;
 80051b4:	61a5      	str	r5, [r4, #24]
    hs->left = 0;
 80051b6:	6265      	str	r5, [r4, #36]	; 0x24
    hs->retries = 0;
 80051b8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80051bc:	e7df      	b.n	800517e <http_find_file+0x126>
  if (strstr(uri, "404")) {
 80051be:	493e      	ldr	r1, [pc, #248]	; (80052b8 <http_find_file+0x260>)
 80051c0:	4638      	mov	r0, r7
 80051c2:	f008 fd62 	bl	800dc8a <strstr>
 80051c6:	b328      	cbz	r0, 8005214 <http_find_file+0x1bc>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <http_find_file+0x258>)
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80051ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  vars = strchr(uri, '?');
 80051cc:	213f      	movs	r1, #63	; 0x3f
 80051ce:	4638      	mov	r0, r7
 80051d0:	f008 fd1f 	bl	800dc12 <strchr>
  if(vars) {
 80051d4:	4606      	mov	r6, r0
 80051d6:	b108      	cbz	r0, 80051dc <http_find_file+0x184>
    *vars = '\0';
 80051d8:	2300      	movs	r3, #0
 80051da:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 80051dc:	4638      	mov	r0, r7
 80051de:	212e      	movs	r1, #46	; 0x2e
 80051e0:	f008 fd17 	bl	800dc12 <strchr>
  ext = NULL;
 80051e4:	2700      	movs	r7, #0
  while (tmp) {
 80051e6:	bb28      	cbnz	r0, 8005234 <http_find_file+0x1dc>
  if (ext != NULL) {
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	d050      	beq.n	800528e <http_find_file+0x236>
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80051ec:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80052e4 <http_find_file+0x28c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80051f0:	4605      	mov	r5, r0
 80051f2:	46c8      	mov	r8, r9
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80051f4:	4639      	mov	r1, r7
 80051f6:	f859 0035 	ldr.w	r0, [r9, r5, lsl #3]
 80051fa:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 80051fe:	f000 fbe6 	bl	80059ce <lwip_stricmp>
 8005202:	b1e8      	cbz	r0, 8005240 <http_find_file+0x1e8>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8005204:	3501      	adds	r5, #1
 8005206:	2d14      	cmp	r5, #20
 8005208:	d1f4      	bne.n	80051f4 <http_find_file+0x19c>
  if (vars) {
 800520a:	b10e      	cbz	r6, 8005210 <http_find_file+0x1b8>
    *vars = '?';
 800520c:	233f      	movs	r3, #63	; 0x3f
 800520e:	7033      	strb	r3, [r6, #0]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <http_find_file+0x264>)
 8005212:	e01b      	b.n	800524c <http_find_file+0x1f4>
  } else if (strstr(uri, "400")) {
 8005214:	492a      	ldr	r1, [pc, #168]	; (80052c0 <http_find_file+0x268>)
 8005216:	4638      	mov	r0, r7
 8005218:	f008 fd37 	bl	800dc8a <strstr>
 800521c:	b108      	cbz	r0, 8005222 <http_find_file+0x1ca>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <http_find_file+0x26c>)
 8005220:	e7d3      	b.n	80051ca <http_find_file+0x172>
  } else if (strstr(uri, "501")) {
 8005222:	4929      	ldr	r1, [pc, #164]	; (80052c8 <http_find_file+0x270>)
 8005224:	4638      	mov	r0, r7
 8005226:	f008 fd30 	bl	800dc8a <strstr>
 800522a:	b108      	cbz	r0, 8005230 <http_find_file+0x1d8>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <http_find_file+0x274>)
 800522e:	e7cc      	b.n	80051ca <http_find_file+0x172>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <http_find_file+0x278>)
 8005232:	e7ca      	b.n	80051ca <http_find_file+0x172>
    ext = tmp + 1;
 8005234:	1c47      	adds	r7, r0, #1
    tmp = strchr(ext, '.');
 8005236:	212e      	movs	r1, #46	; 0x2e
 8005238:	4638      	mov	r0, r7
 800523a:	f008 fcea 	bl	800dc12 <strchr>
 800523e:	e7d2      	b.n	80051e6 <http_find_file+0x18e>
  if (vars) {
 8005240:	b10e      	cbz	r6, 8005246 <http_find_file+0x1ee>
    *vars = '?';
 8005242:	233f      	movs	r3, #63	; 0x3f
 8005244:	7033      	strb	r3, [r6, #0]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8005246:	44d0      	add	r8, sl
 8005248:	f8d8 3004 	ldr.w	r3, [r8, #4]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800524c:	63e3      	str	r3, [r4, #60]	; 0x3c
  if ((hs->handle == NULL) ||
 800524e:	6963      	ldr	r3, [r4, #20]
 8005250:	b1d3      	cbz	r3, 8005288 <http_find_file+0x230>
 8005252:	7c1a      	ldrb	r2, [r3, #16]
 8005254:	f002 0203 	and.w	r2, r2, #3
 8005258:	2a01      	cmp	r2, #1
 800525a:	d015      	beq.n	8005288 <http_find_file+0x230>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800525c:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	210c      	movs	r1, #12
 8005264:	4628      	mov	r0, r5
 8005266:	f000 fbc9 	bl	80059fc <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800526a:	4628      	mov	r0, r5
 800526c:	f7fa ffba 	bl	80001e4 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8005270:	2809      	cmp	r0, #9
 8005272:	d809      	bhi.n	8005288 <http_find_file+0x230>
      SMEMCPY(&hs->hdr_content_len[len], CRLF "\0", 3);
 8005274:	3040      	adds	r0, #64	; 0x40
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <http_find_file+0x27c>)
 8005278:	1822      	adds	r2, r4, r0
 800527a:	8819      	ldrh	r1, [r3, #0]
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	5221      	strh	r1, [r4, r0]
 8005280:	7093      	strb	r3, [r2, #2]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <http_find_file+0x280>)
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8005284:	63a5      	str	r5, [r4, #56]	; 0x38
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005286:	6363      	str	r3, [r4, #52]	; 0x34
  hs->hdr_pos = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	64e3      	str	r3, [r4, #76]	; 0x4c
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800528c:	e787      	b.n	800519e <http_find_file+0x146>
  if (vars) {
 800528e:	b10e      	cbz	r6, 8005294 <http_find_file+0x23c>
    *vars = '?';
 8005290:	233f      	movs	r3, #63	; 0x3f
 8005292:	7033      	strb	r3, [r6, #0]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <http_find_file+0x284>)
 8005296:	e7d9      	b.n	800524c <http_find_file+0x1f4>
 8005298:	200007b0 	.word	0x200007b0
 800529c:	0800efb3 	.word	0x0800efb3
 80052a0:	0800efea 	.word	0x0800efea
 80052a4:	0800f008 	.word	0x0800f008
 80052a8:	0800f2d5 	.word	0x0800f2d5
 80052ac:	0800f030 	.word	0x0800f030
 80052b0:	0800f070 	.word	0x0800f070
 80052b4:	0800f08e 	.word	0x0800f08e
 80052b8:	0800f0de 	.word	0x0800f0de
 80052bc:	0800f172 	.word	0x0800f172
 80052c0:	0800f0e2 	.word	0x0800f0e2
 80052c4:	0800f0e6 	.word	0x0800f0e6
 80052c8:	0800f101 	.word	0x0800f101
 80052cc:	0800f105 	.word	0x0800f105
 80052d0:	0800f124 	.word	0x0800f124
 80052d4:	0800ed9c 	.word	0x0800ed9c
 80052d8:	0800f161 	.word	0x0800f161
 80052dc:	0800f136 	.word	0x0800f136
 80052e0:	0800eeb4 	.word	0x0800eeb4
 80052e4:	0800eedc 	.word	0x0800eedc

080052e8 <http_post_rxpbuf>:
{
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4604      	mov	r4, r0
  if (p != NULL) {
 80052ec:	b131      	cbz	r1, 80052fc <http_post_rxpbuf+0x14>
    if (hs->post_content_len_left < p->tot_len) {
 80052ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80052f0:	890a      	ldrh	r2, [r1, #8]
 80052f2:	4293      	cmp	r3, r2
      hs->post_content_len_left = 0;
 80052f4:	bf34      	ite	cc
 80052f6:	2300      	movcc	r3, #0
      hs->post_content_len_left -= p->tot_len;
 80052f8:	1a9b      	subcs	r3, r3, r2
 80052fa:	6503      	str	r3, [r0, #80]	; 0x50
  err = httpd_post_receive_data(hs, p);
 80052fc:	4620      	mov	r0, r4
 80052fe:	f007 fb2c 	bl	800c95a <httpd_post_receive_data>
  if (err != ERR_OK) {
 8005302:	b108      	cbz	r0, 8005308 <http_post_rxpbuf+0x20>
    hs->post_content_len_left = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	6523      	str	r3, [r4, #80]	; 0x50
  if (hs->post_content_len_left == 0) {
 8005308:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800530a:	b96e      	cbnz	r6, 8005328 <http_post_rxpbuf+0x40>
  http_uri_buf[0] = 0;
 800530c:	4d07      	ldr	r5, [pc, #28]	; (800532c <http_post_rxpbuf+0x44>)
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8005314:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005316:	f007 fb22 	bl	800c95e <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800531a:	4632      	mov	r2, r6
 800531c:	4629      	mov	r1, r5
 800531e:	4620      	mov	r0, r4
}
 8005320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8005324:	f7ff be98 	b.w	8005058 <http_find_file>
}
 8005328:	2000      	movs	r0, #0
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	200007b0 	.word	0x200007b0

08005330 <http_close_conn>:
{
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4604      	mov	r4, r0
  if (hs != NULL) {
 8005334:	460d      	mov	r5, r1
 8005336:	b141      	cbz	r1, 800534a <http_close_conn+0x1a>
    if ((hs->post_content_len_left != 0)
 8005338:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800533a:	b133      	cbz	r3, 800534a <http_close_conn+0x1a>
      http_uri_buf[0] = 0;
 800533c:	4917      	ldr	r1, [pc, #92]	; (800539c <http_close_conn+0x6c>)
 800533e:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005340:	223f      	movs	r2, #63	; 0x3f
 8005342:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8005344:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005346:	f007 fb0a 	bl	800c95e <httpd_post_finished>
  tcp_arg(pcb, NULL);
 800534a:	2100      	movs	r1, #0
 800534c:	4620      	mov	r0, r4
 800534e:	f001 fb9f 	bl	8006a90 <tcp_arg>
  tcp_recv(pcb, NULL);
 8005352:	2100      	movs	r1, #0
 8005354:	4620      	mov	r0, r4
 8005356:	f001 fb9f 	bl	8006a98 <tcp_recv>
  tcp_err(pcb, NULL);
 800535a:	2100      	movs	r1, #0
 800535c:	4620      	mov	r0, r4
 800535e:	f001 fbc9 	bl	8006af4 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8005362:	2200      	movs	r2, #0
 8005364:	4611      	mov	r1, r2
 8005366:	4620      	mov	r0, r4
 8005368:	f001 fbe2 	bl	8006b30 <tcp_poll>
  tcp_sent(pcb, NULL);
 800536c:	2100      	movs	r1, #0
 800536e:	4620      	mov	r0, r4
 8005370:	f001 fbaa 	bl	8006ac8 <tcp_sent>
  if (hs != NULL) {
 8005374:	b12d      	cbz	r5, 8005382 <http_close_conn+0x52>
    http_state_eof(hs);
 8005376:	4628      	mov	r0, r5
 8005378:	f7ff fe04 	bl	8004f84 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fb99 	bl	8005ab4 <mem_free>
  err = tcp_close(pcb);
 8005382:	4620      	mov	r0, r4
 8005384:	f001 fee2 	bl	800714c <tcp_close>
  if (err != ERR_OK) {
 8005388:	4605      	mov	r5, r0
 800538a:	b120      	cbz	r0, 8005396 <http_close_conn+0x66>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800538c:	2204      	movs	r2, #4
 800538e:	4904      	ldr	r1, [pc, #16]	; (80053a0 <http_close_conn+0x70>)
 8005390:	4620      	mov	r0, r4
 8005392:	f001 fbcd 	bl	8006b30 <tcp_poll>
}
 8005396:	4628      	mov	r0, r5
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	200007b0 	.word	0x200007b0
 80053a0:	08005563 	.word	0x08005563

080053a4 <http_check_eof>:
{
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4605      	mov	r5, r0
  if (hs->handle == NULL) {
 80053a8:	6948      	ldr	r0, [r1, #20]
{
 80053aa:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 80053ac:	b928      	cbnz	r0, 80053ba <http_check_eof+0x16>
    http_close_conn(pcb, hs);
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff ffbd 	bl	8005330 <http_close_conn>
    return 0;
 80053b6:	2000      	movs	r0, #0
}
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
  bytes_left = fs_bytes_left(hs->handle);
 80053ba:	f7ff fdb2 	bl	8004f22 <fs_bytes_left>
  if (bytes_left <= 0) {
 80053be:	2800      	cmp	r0, #0
 80053c0:	ddf5      	ble.n	80053ae <http_check_eof+0xa>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80053c2:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <http_check_eof+0x30>)
 80053c4:	4904      	ldr	r1, [pc, #16]	; (80053d8 <http_check_eof+0x34>)
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <http_check_eof+0x38>)
 80053c8:	f240 4283 	movw	r2, #1155	; 0x483
 80053cc:	f008 fbca 	bl	800db64 <iprintf>
 80053d0:	2001      	movs	r0, #1
 80053d2:	e7f1      	b.n	80053b8 <http_check_eof+0x14>
 80053d4:	0800efb3 	.word	0x0800efb3
 80053d8:	0800ef7c 	.word	0x0800ef7c
 80053dc:	0800f008 	.word	0x0800f008

080053e0 <http_send>:
{
 80053e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	4605      	mov	r5, r0
  if (hs == NULL) {
 80053e6:	460c      	mov	r4, r1
 80053e8:	b921      	cbnz	r1, 80053f4 <http_send+0x14>
    return 0;
 80053ea:	2600      	movs	r6, #0
}
 80053ec:	4630      	mov	r0, r6
 80053ee:	b003      	add	sp, #12
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 80053f4:	f8b1 304e 	ldrh.w	r3, [r1, #78]	; 0x4e
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d864      	bhi.n	80054c6 <http_send+0xe6>
  sendlen = len;
 80053fc:	af02      	add	r7, sp, #8
  len = tcp_sndbuf(pcb);
 80053fe:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  sendlen = len;
 8005402:	f827 6d02 	strh.w	r6, [r7, #-2]!
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	f8b4 a04e 	ldrh.w	sl, [r4, #78]	; 0x4e
  while(len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800540e:	2e00      	cmp	r6, #0
 8005410:	d04e      	beq.n	80054b0 <http_send+0xd0>
 8005412:	f1ba 0f04 	cmp.w	sl, #4
 8005416:	d84e      	bhi.n	80054b6 <http_send+0xd6>
 8005418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800541c:	b92b      	cbnz	r3, 800542a <http_send+0x4a>
  if((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800541e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8005422:	2b04      	cmp	r3, #4
 8005424:	d84f      	bhi.n	80054c6 <http_send+0xe6>
    return HTTP_DATA_TO_SEND_BREAK;
 8005426:	2602      	movs	r6, #2
 8005428:	e7e0      	b.n	80053ec <http_send+0xc>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800542a:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 800542e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8005432:	4658      	mov	r0, fp
 8005434:	f7fa fed6 	bl	80001e4 <strlen>
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005438:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800543c:	fa1f f980 	uxth.w	r9, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005440:	4648      	mov	r0, r9
 8005442:	1a40      	subs	r0, r0, r1
 8005444:	42b0      	cmp	r0, r6
 8005446:	bfa8      	it	ge
 8005448:	4630      	movge	r0, r6
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800544a:	f1ba 0f03 	cmp.w	sl, #3
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800544e:	f8ad 0006 	strh.w	r0, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8005452:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8005454:	d02a      	beq.n	80054ac <http_send+0xcc>
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8005456:	f1ba 0f04 	cmp.w	sl, #4
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800545a:	f04f 0300 	mov.w	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800545e:	d001      	beq.n	8005464 <http_send+0x84>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8005460:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8005464:	463a      	mov	r2, r7
 8005466:	4628      	mov	r0, r5
 8005468:	f7ff fd5f 	bl	8004f2a <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800546c:	b108      	cbz	r0, 8005472 <http_send+0x92>
      sendlen = 0;
 800546e:	f8ad 8006 	strh.w	r8, [sp, #6]
    hs->hdr_pos += sendlen;
 8005472:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005476:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800547a:	4413      	add	r3, r2
 800547c:	b29b      	uxth	r3, r3
    len -= sendlen;
 800547e:	1ab6      	subs	r6, r6, r2
    if(hs->hdr_pos == hdrlen) {
 8005480:	4599      	cmp	r9, r3
    hs->hdr_pos += sendlen;
 8005482:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    len -= sendlen;
 8005486:	b2b6      	uxth	r6, r6
    if(hs->hdr_pos == hdrlen) {
 8005488:	d1bf      	bne.n	800540a <http_send+0x2a>
      hs->hdr_index++;
 800548a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        hs->hdr_index++;
 800548e:	3301      	adds	r3, #1
 8005490:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8005494:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8005498:	2b04      	cmp	r3, #4
 800549a:	d804      	bhi.n	80054a6 <http_send+0xc6>
         (hs->hdrs[hs->hdr_index] == NULL)) {
 800549c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80054a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a2:	2a00      	cmp	r2, #0
 80054a4:	d0f3      	beq.n	800548e <http_send+0xae>
      hs->hdr_pos = 0;
 80054a6:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
 80054aa:	e7ae      	b.n	800540a <http_send+0x2a>
      apiflags |= TCP_WRITE_FLAG_COPY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e7d7      	b.n	8005460 <http_send+0x80>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 80054b0:	f1ba 0f04 	cmp.w	sl, #4
 80054b4:	d9b3      	bls.n	800541e <http_send+0x3e>
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1b0      	bne.n	800541e <http_send+0x3e>
    if(http_check_eof(pcb, hs)) {
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f7ff ff70 	bl	80053a4 <http_check_eof>
 80054c4:	e7ab      	b.n	800541e <http_send+0x3e>
  if (hs->left == 0) {
 80054c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c8:	b16b      	cbz	r3, 80054e6 <http_send+0x106>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054cc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80054d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054d4:	428a      	cmp	r2, r1
 80054d6:	bf98      	it	ls
 80054d8:	4613      	movls	r3, r2
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054da:	69a1      	ldr	r1, [r4, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054dc:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054e0:	b941      	cbnz	r1, 80054f4 <http_send+0x114>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e010      	b.n	8005508 <http_send+0x128>
    if (!http_check_eof(pcb, hs)) {
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7ff ff5b 	bl	80053a4 <http_check_eof>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d1eb      	bne.n	80054ca <http_send+0xea>
 80054f2:	e77a      	b.n	80053ea <http_send+0xa>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054f4:	6960      	ldr	r0, [r4, #20]
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0f3      	beq.n	80054e2 <http_send+0x102>
 80054fa:	6843      	ldr	r3, [r0, #4]
 80054fc:	1a9a      	subs	r2, r3, r2
 80054fe:	6803      	ldr	r3, [r0, #0]
 8005500:	4413      	add	r3, r2
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	bf18      	it	ne
 8005506:	2301      	movne	r3, #1
 8005508:	f10d 0206 	add.w	r2, sp, #6
 800550c:	4628      	mov	r0, r5
 800550e:	f7ff fd0c 	bl	8004f2a <http_write>
  if (err == ERR_OK) {
 8005512:	b9c0      	cbnz	r0, 8005546 <http_send+0x166>
    hs->file += len;
 8005514:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005518:	69a2      	ldr	r2, [r4, #24]
    hs->left -= len;
 800551a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hs->file += len;
 800551c:	440a      	add	r2, r1
    hs->left -= len;
 800551e:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8005520:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 8005522:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 8005524:	2601      	movs	r6, #1
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005526:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005528:	2f00      	cmp	r7, #0
 800552a:	f47f af5f 	bne.w	80053ec <http_send+0xc>
 800552e:	6960      	ldr	r0, [r4, #20]
 8005530:	f7ff fcf7 	bl	8004f22 <fs_bytes_left>
 8005534:	2800      	cmp	r0, #0
 8005536:	f73f af59 	bgt.w	80053ec <http_send+0xc>
    http_close_conn(pcb, hs);
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f7ff fef7 	bl	8005330 <http_close_conn>
    return 0;
 8005542:	463e      	mov	r6, r7
 8005544:	e752      	b.n	80053ec <http_send+0xc>
  u8_t data_to_send = 0;
 8005546:	2600      	movs	r6, #0
 8005548:	e7ed      	b.n	8005526 <http_send+0x146>

0800554a <http_sent>:
{
 800554a:	b508      	push	{r3, lr}
 800554c:	460b      	mov	r3, r1
  if (hs == NULL) {
 800554e:	4601      	mov	r1, r0
 8005550:	b128      	cbz	r0, 800555e <http_sent+0x14>
  hs->retries = 0;
 8005552:	2200      	movs	r2, #0
 8005554:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff41 	bl	80053e0 <http_send>
}
 800555e:	2000      	movs	r0, #0
 8005560:	bd08      	pop	{r3, pc}

08005562 <http_poll>:
{
 8005562:	b510      	push	{r4, lr}
 8005564:	460c      	mov	r4, r1
  if (hs == NULL) {
 8005566:	4601      	mov	r1, r0
 8005568:	b920      	cbnz	r0, 8005574 <http_poll+0x12>
      http_close_conn(pcb, hs);
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff fee0 	bl	8005330 <http_close_conn>
}
 8005570:	2000      	movs	r0, #0
 8005572:	bd10      	pop	{r4, pc}
    hs->retries++;
 8005574:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005578:	3301      	adds	r3, #1
 800557a:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800557c:	2b04      	cmp	r3, #4
    hs->retries++;
 800557e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005582:	d0f2      	beq.n	800556a <http_poll+0x8>
    if(hs && (hs->handle)) {
 8005584:	6943      	ldr	r3, [r0, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f2      	beq.n	8005570 <http_poll+0xe>
      if(http_send(pcb, hs)) {
 800558a:	4620      	mov	r0, r4
 800558c:	f7ff ff28 	bl	80053e0 <http_send>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0ed      	beq.n	8005570 <http_poll+0xe>
        tcp_output(pcb);
 8005594:	4620      	mov	r0, r4
 8005596:	f003 fed1 	bl	800933c <tcp_output>
 800559a:	e7e9      	b.n	8005570 <http_poll+0xe>

0800559c <http_recv>:
{
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	b08d      	sub	sp, #52	; 0x34
 80055a2:	4604      	mov	r4, r0
 80055a4:	9108      	str	r1, [sp, #32]
 80055a6:	4617      	mov	r7, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80055a8:	461d      	mov	r5, r3
 80055aa:	b94b      	cbnz	r3, 80055c0 <http_recv+0x24>
 80055ac:	b152      	cbz	r2, 80055c4 <http_recv+0x28>
 80055ae:	b988      	cbnz	r0, 80055d4 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 80055b0:	9808      	ldr	r0, [sp, #32]
 80055b2:	8939      	ldrh	r1, [r7, #8]
 80055b4:	f001 fa00 	bl	80069b8 <tcp_recved>
      pbuf_free(p);
 80055b8:	4638      	mov	r0, r7
 80055ba:	f000 fdfd 	bl	80061b8 <pbuf_free>
 80055be:	e001      	b.n	80055c4 <http_recv+0x28>
    if (p != NULL) {
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	d1f5      	bne.n	80055b0 <http_recv+0x14>
    http_close_conn(pcb, hs);
 80055c4:	4621      	mov	r1, r4
 80055c6:	9808      	ldr	r0, [sp, #32]
 80055c8:	f7ff feb2 	bl	8005330 <http_close_conn>
}
 80055cc:	2000      	movs	r0, #0
 80055ce:	b00d      	add	sp, #52	; 0x34
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 80055d4:	8911      	ldrh	r1, [r2, #8]
 80055d6:	9808      	ldr	r0, [sp, #32]
 80055d8:	f001 f9ee 	bl	80069b8 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80055dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055de:	b16b      	cbz	r3, 80055fc <http_recv+0x60>
    hs->retries = 0;
 80055e0:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 80055e4:	4639      	mov	r1, r7
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7ff fe7e 	bl	80052e8 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 80055ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ec      	bne.n	80055cc <http_recv+0x30>
      http_send(pcb, hs);
 80055f2:	4621      	mov	r1, r4
 80055f4:	9808      	ldr	r0, [sp, #32]
 80055f6:	f7ff fef3 	bl	80053e0 <http_send>
 80055fa:	e7e7      	b.n	80055cc <http_recv+0x30>
    if (hs->handle == NULL) {
 80055fc:	6963      	ldr	r3, [r4, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 8149 	bne.w	8005896 <http_recv+0x2fa>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	6a20      	ldr	r0, [r4, #32]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 8156 	bne.w	80058ba <http_recv+0x31e>
  if (hs->req == NULL) {
 800560e:	2800      	cmp	r0, #0
 8005610:	f040 8098 	bne.w	8005744 <http_recv+0x1a8>
    hs->req = p;
 8005614:	6227      	str	r7, [r4, #32]
  pbuf_ref(p);
 8005616:	4638      	mov	r0, r7
 8005618:	f000 ff88 	bl	800652c <pbuf_ref>
  if (hs->req->next != NULL) {
 800561c:	6a20      	ldr	r0, [r4, #32]
 800561e:	6803      	ldr	r3, [r0, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8093 	beq.w	800574c <http_recv+0x1b0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005626:	8906      	ldrh	r6, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005628:	49a5      	ldr	r1, [pc, #660]	; (80058c0 <http_recv+0x324>)
    data = httpd_req_buf;
 800562a:	4da5      	ldr	r5, [pc, #660]	; (80058c0 <http_recv+0x324>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800562c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005630:	429e      	cmp	r6, r3
 8005632:	bf28      	it	cs
 8005634:	461e      	movcs	r6, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005636:	4632      	mov	r2, r6
 8005638:	2300      	movs	r3, #0
 800563a:	f001 f84b 	bl	80066d4 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800563e:	2e06      	cmp	r6, #6
 8005640:	f240 8111 	bls.w	8005866 <http_recv+0x2ca>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005644:	4632      	mov	r2, r6
 8005646:	499f      	ldr	r1, [pc, #636]	; (80058c4 <http_recv+0x328>)
 8005648:	4628      	mov	r0, r5
 800564a:	f000 f9a0 	bl	800598e <lwip_strnstr>
    if (crlf != NULL) {
 800564e:	2800      	cmp	r0, #0
 8005650:	f000 8109 	beq.w	8005866 <http_recv+0x2ca>
      if (!strncmp(data, "GET ", 4)) {
 8005654:	2204      	movs	r2, #4
 8005656:	499c      	ldr	r1, [pc, #624]	; (80058c8 <http_recv+0x32c>)
 8005658:	4628      	mov	r0, r5
 800565a:	f008 faef 	bl	800dc3c <strncmp>
 800565e:	4681      	mov	r9, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	d176      	bne.n	8005752 <http_recv+0x1b6>
        sp1 = data + 3;
 8005664:	1ceb      	adds	r3, r5, #3
 8005666:	9306      	str	r3, [sp, #24]
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8005668:	9b06      	ldr	r3, [sp, #24]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800566a:	4998      	ldr	r1, [pc, #608]	; (80058cc <http_recv+0x330>)
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800566c:	f103 0801 	add.w	r8, r3, #1
 8005670:	eba8 0a05 	sub.w	sl, r8, r5
 8005674:	eba6 0a0a 	sub.w	sl, r6, sl
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005678:	fa1f fa8a 	uxth.w	sl, sl
 800567c:	4652      	mov	r2, sl
 800567e:	4640      	mov	r0, r8
 8005680:	f000 f985 	bl	800598e <lwip_strnstr>
      if (sp2 == NULL) {
 8005684:	4683      	mov	fp, r0
 8005686:	2800      	cmp	r0, #0
 8005688:	d17b      	bne.n	8005782 <http_recv+0x1e6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800568a:	4652      	mov	r2, sl
 800568c:	498d      	ldr	r1, [pc, #564]	; (80058c4 <http_recv+0x328>)
 800568e:	4640      	mov	r0, r8
 8005690:	f000 f97d 	bl	800598e <lwip_strnstr>
 8005694:	4683      	mov	fp, r0
        if (is_post) {
 8005696:	f1b9 0f00 	cmp.w	r9, #0
 800569a:	d167      	bne.n	800576c <http_recv+0x1d0>
      if ((sp2 != 0) && (sp2 > sp1)) {
 800569c:	2800      	cmp	r0, #0
 800569e:	f000 80e2 	beq.w	8005866 <http_recv+0x2ca>
        is_09 = 1;
 80056a2:	f04f 0a01 	mov.w	sl, #1
      if ((sp2 != 0) && (sp2 > sp1)) {
 80056a6:	9b06      	ldr	r3, [sp, #24]
 80056a8:	455b      	cmp	r3, fp
 80056aa:	f080 80dc 	bcs.w	8005866 <http_recv+0x2ca>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80056ae:	4632      	mov	r2, r6
 80056b0:	4987      	ldr	r1, [pc, #540]	; (80058d0 <http_recv+0x334>)
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f96b 	bl	800598e <lwip_strnstr>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f000 80d4 	beq.w	8005866 <http_recv+0x2ca>
          *sp1 = 0;
 80056be:	9a06      	ldr	r2, [sp, #24]
 80056c0:	2300      	movs	r3, #0
 80056c2:	7013      	strb	r3, [r2, #0]
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80056c4:	ebab 0208 	sub.w	r2, fp, r8
          uri[uri_len] = 0;
 80056c8:	b292      	uxth	r2, r2
 80056ca:	9209      	str	r2, [sp, #36]	; 0x24
 80056cc:	f808 3002 	strb.w	r3, [r8, r2]
          if (is_post) {
 80056d0:	f1b9 0f00 	cmp.w	r9, #0
 80056d4:	f000 80be 	beq.w	8005854 <http_recv+0x2b8>
            struct pbuf *q = hs->req;
 80056d8:	6a23      	ldr	r3, [r4, #32]
 80056da:	9304      	str	r3, [sp, #16]
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80056dc:	f10b 0301 	add.w	r3, fp, #1
 80056e0:	1b5a      	subs	r2, r3, r5
 80056e2:	1ab2      	subs	r2, r6, r2
 80056e4:	497a      	ldr	r1, [pc, #488]	; (80058d0 <http_recv+0x334>)
 80056e6:	9305      	str	r3, [sp, #20]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f950 	bl	800598e <lwip_strnstr>
  if (crlfcrlf != NULL) {
 80056ee:	9007      	str	r0, [sp, #28]
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f000 80ac 	beq.w	800584e <http_recv+0x2b2>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80056f6:	9a05      	ldr	r2, [sp, #20]
 80056f8:	4976      	ldr	r1, [pc, #472]	; (80058d4 <http_recv+0x338>)
 80056fa:	1a82      	subs	r2, r0, r2
 80056fc:	9805      	ldr	r0, [sp, #20]
 80056fe:	f000 f946 	bl	800598e <lwip_strnstr>
    if (scontent_len != NULL) {
 8005702:	4682      	mov	sl, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	d13f      	bne.n	8005788 <http_recv+0x1ec>
    return ERR_ARG;
 8005708:	f06f 060f 	mvn.w	r6, #15
              *sp1 = ' ';
 800570c:	9a06      	ldr	r2, [sp, #24]
 800570e:	2320      	movs	r3, #32
 8005710:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8005712:	9a09      	ldr	r2, [sp, #36]	; 0x24
              *sp2 = ' ';
 8005714:	f88b 3000 	strb.w	r3, [fp]
            if (err == ERR_ARG) {
 8005718:	f116 0f10 	cmn.w	r6, #16
              uri[uri_len] = ' ';
 800571c:	f808 3002 	strb.w	r3, [r8, r2]
            if (err == ERR_ARG) {
 8005720:	d024      	beq.n	800576c <http_recv+0x1d0>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005722:	1d73      	adds	r3, r6, #5
 8005724:	f000 80ab 	beq.w	800587e <http_recv+0x2e2>
 8005728:	f116 0f10 	cmn.w	r6, #16
 800572c:	d01e      	beq.n	800576c <http_recv+0x1d0>
 800572e:	f116 0f08 	cmn.w	r6, #8
 8005732:	d01d      	beq.n	8005770 <http_recv+0x1d4>
 8005734:	4b68      	ldr	r3, [pc, #416]	; (80058d8 <http_recv+0x33c>)
 8005736:	4969      	ldr	r1, [pc, #420]	; (80058dc <http_recv+0x340>)
 8005738:	4869      	ldr	r0, [pc, #420]	; (80058e0 <http_recv+0x344>)
 800573a:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800573e:	f008 fa11 	bl	800db64 <iprintf>
 8005742:	e015      	b.n	8005770 <http_recv+0x1d4>
    pbuf_cat(hs->req, p);
 8005744:	4639      	mov	r1, r7
 8005746:	f000 ff05 	bl	8006554 <pbuf_cat>
 800574a:	e764      	b.n	8005616 <http_recv+0x7a>
    data = (char *)p->payload;
 800574c:	687d      	ldr	r5, [r7, #4]
    data_len = p->len;
 800574e:	897e      	ldrh	r6, [r7, #10]
 8005750:	e775      	b.n	800563e <http_recv+0xa2>
      } else if (!strncmp(data, "POST ", 5)) {
 8005752:	2205      	movs	r2, #5
 8005754:	4963      	ldr	r1, [pc, #396]	; (80058e4 <http_recv+0x348>)
 8005756:	4628      	mov	r0, r5
 8005758:	f008 fa70 	bl	800dc3c <strncmp>
 800575c:	b920      	cbnz	r0, 8005768 <http_recv+0x1cc>
        sp1 = data + 4;
 800575e:	1d2b      	adds	r3, r5, #4
 8005760:	9306      	str	r3, [sp, #24]
        is_post = 1;
 8005762:	f04f 0901 	mov.w	r9, #1
 8005766:	e77f      	b.n	8005668 <http_recv+0xcc>
        data[4] = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	712b      	strb	r3, [r5, #4]
 800576c:	f06f 060f 	mvn.w	r6, #15
        if (hs->req != NULL) {
 8005770:	6a20      	ldr	r0, [r4, #32]
 8005772:	2800      	cmp	r0, #0
 8005774:	f000 8085 	beq.w	8005882 <http_recv+0x2e6>
          pbuf_free(hs->req);
 8005778:	f000 fd1e 	bl	80061b8 <pbuf_free>
          hs->req = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	6223      	str	r3, [r4, #32]
 8005780:	e07f      	b.n	8005882 <http_recv+0x2e6>
      int is_09 = 0;
 8005782:	f04f 0a00 	mov.w	sl, #0
 8005786:	e78e      	b.n	80056a6 <http_recv+0x10a>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8005788:	f100 0910 	add.w	r9, r0, #16
 800578c:	220a      	movs	r2, #10
 800578e:	494d      	ldr	r1, [pc, #308]	; (80058c4 <http_recv+0x328>)
 8005790:	4648      	mov	r0, r9
 8005792:	f000 f8fc 	bl	800598e <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8005796:	2800      	cmp	r0, #0
 8005798:	d0b6      	beq.n	8005708 <http_recv+0x16c>
        content_len = atoi(content_len_num);
 800579a:	4648      	mov	r0, r9
 800579c:	f008 f8df 	bl	800d95e <atoi>
        if (content_len == 0) {
 80057a0:	f1b0 0900 	subs.w	r9, r0, #0
 80057a4:	d140      	bne.n	8005828 <http_recv+0x28c>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 80057a6:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80057aa:	2b30      	cmp	r3, #48	; 0x30
 80057ac:	d1ac      	bne.n	8005708 <http_recv+0x16c>
 80057ae:	f89a 3011 	ldrb.w	r3, [sl, #17]
 80057b2:	2b0d      	cmp	r3, #13
 80057b4:	d1a8      	bne.n	8005708 <http_recv+0x16c>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80057b6:	9b07      	ldr	r3, [sp, #28]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80057b8:	9a05      	ldr	r2, [sp, #20]
          *crlfcrlf = 0;
 80057ba:	9907      	ldr	r1, [sp, #28]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80057bc:	3304      	adds	r3, #4
 80057be:	1b5d      	subs	r5, r3, r5
 80057c0:	42ae      	cmp	r6, r5
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80057c2:	eba3 0302 	sub.w	r3, r3, r2
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80057c6:	bfb4      	ite	lt
 80057c8:	4635      	movlt	r5, r6
 80057ca:	b2ad      	uxthge	r5, r5
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80057cc:	429e      	cmp	r6, r3
 80057ce:	bfa8      	it	ge
 80057d0:	b29e      	uxthge	r6, r3
          u8_t post_auto_wnd = 1;
 80057d2:	ab0c      	add	r3, sp, #48	; 0x30
 80057d4:	2201      	movs	r2, #1
 80057d6:	f803 2d01 	strb.w	r2, [r3, #-1]!
          http_uri_buf[0] = 0;
 80057da:	4a43      	ldr	r2, [pc, #268]	; (80058e8 <http_recv+0x34c>)
 80057dc:	f04f 0a00 	mov.w	sl, #0
 80057e0:	f882 a000 	strb.w	sl, [r2]
          *crlfcrlf = 0;
 80057e4:	f881 a000 	strb.w	sl, [r1]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	233f      	movs	r3, #63	; 0x3f
 80057ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80057f0:	f8cd 9000 	str.w	r9, [sp]
 80057f4:	4633      	mov	r3, r6
 80057f6:	9a05      	ldr	r2, [sp, #20]
 80057f8:	4641      	mov	r1, r8
 80057fa:	4620      	mov	r0, r4
 80057fc:	f007 f8ab 	bl	800c956 <httpd_post_begin>
          if (err == ERR_OK) {
 8005800:	4606      	mov	r6, r0
 8005802:	b9c8      	cbnz	r0, 8005838 <http_recv+0x29c>
            hs->post_content_len_left = (u32_t)content_len;
 8005804:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            while((q != NULL) && (q->len <= start_offset)) {
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d047      	beq.n	800589e <http_recv+0x302>
 800580e:	8959      	ldrh	r1, [r3, #10]
 8005810:	428d      	cmp	r5, r1
 8005812:	d20b      	bcs.n	800582c <http_recv+0x290>
              pbuf_header(q, -(s16_t)start_offset);
 8005814:	4269      	negs	r1, r5
 8005816:	b209      	sxth	r1, r1
 8005818:	9804      	ldr	r0, [sp, #16]
 800581a:	f000 fcc7 	bl	80061ac <pbuf_header>
              pbuf_ref(q);
 800581e:	9804      	ldr	r0, [sp, #16]
 8005820:	f000 fe84 	bl	800652c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8005824:	9904      	ldr	r1, [sp, #16]
 8005826:	e044      	b.n	80058b2 <http_recv+0x316>
        if (content_len >= 0) {
 8005828:	dac5      	bge.n	80057b6 <http_recv+0x21a>
 800582a:	e76d      	b.n	8005708 <http_recv+0x16c>
              q = q->next;
 800582c:	9b04      	ldr	r3, [sp, #16]
              start_offset -= q->len;
 800582e:	1a6d      	subs	r5, r5, r1
              q = q->next;
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	9304      	str	r3, [sp, #16]
              start_offset -= q->len;
 8005834:	b2ad      	uxth	r5, r5
 8005836:	e7e7      	b.n	8005808 <http_recv+0x26c>
            return http_find_file(hs, http_uri_buf, 0);
 8005838:	4652      	mov	r2, sl
 800583a:	492b      	ldr	r1, [pc, #172]	; (80058e8 <http_recv+0x34c>)
 800583c:	4620      	mov	r0, r4
 800583e:	f7ff fc0b 	bl	8005058 <http_find_file>
 8005842:	4606      	mov	r6, r0
            if (err != ERR_OK) {
 8005844:	2800      	cmp	r0, #0
 8005846:	f47f af61 	bne.w	800570c <http_recv+0x170>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800584a:	2600      	movs	r6, #0
 800584c:	e790      	b.n	8005770 <http_recv+0x1d4>
  return ERR_INPROGRESS;
 800584e:	f06f 0604 	mvn.w	r6, #4
 8005852:	e75b      	b.n	800570c <http_recv+0x170>
            return http_find_file(hs, uri, is_09);
 8005854:	4652      	mov	r2, sl
 8005856:	4641      	mov	r1, r8
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff fbfd 	bl	8005058 <http_find_file>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800585e:	4606      	mov	r6, r0
 8005860:	2800      	cmp	r0, #0
 8005862:	d0f2      	beq.n	800584a <http_recv+0x2ae>
 8005864:	e75d      	b.n	8005722 <http_recv+0x186>
  clen = pbuf_clen(hs->req);
 8005866:	6a20      	ldr	r0, [r4, #32]
 8005868:	f000 fe58 	bl	800651c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800586c:	6a23      	ldr	r3, [r4, #32]
 800586e:	891b      	ldrh	r3, [r3, #8]
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	f4bf af7a 	bcs.w	800576c <http_recv+0x1d0>
 8005878:	2805      	cmp	r0, #5
 800587a:	f63f af77 	bhi.w	800576c <http_recv+0x1d0>
    return ERR_ARG;
 800587e:	f06f 0604 	mvn.w	r6, #4
      pbuf_free(p);
 8005882:	4638      	mov	r0, r7
 8005884:	f000 fc98 	bl	80061b8 <pbuf_free>
      if (parsed == ERR_OK) {
 8005888:	2e00      	cmp	r6, #0
 800588a:	f43f aeaf 	beq.w	80055ec <http_recv+0x50>
      } else if (parsed == ERR_ARG) {
 800588e:	3610      	adds	r6, #16
 8005890:	f47f ae9c 	bne.w	80055cc <http_recv+0x30>
 8005894:	e696      	b.n	80055c4 <http_recv+0x28>
      pbuf_free(p);
 8005896:	4638      	mov	r0, r7
 8005898:	f000 fc8e 	bl	80061b8 <pbuf_free>
 800589c:	e696      	b.n	80055cc <http_recv+0x30>
            } else if (hs->post_content_len_left == 0) {
 800589e:	f1b9 0f00 	cmp.w	r9, #0
 80058a2:	f47f af65 	bne.w	8005770 <http_recv+0x1d4>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80058a6:	4649      	mov	r1, r9
 80058a8:	2202      	movs	r2, #2
 80058aa:	2004      	movs	r0, #4
 80058ac:	f000 fce6 	bl	800627c <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 80058b0:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff fd18 	bl	80052e8 <http_post_rxpbuf>
 80058b8:	e7c3      	b.n	8005842 <http_recv+0x2a6>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80058ba:	f06f 0607 	mvn.w	r6, #7
 80058be:	e757      	b.n	8005770 <http_recv+0x1d4>
 80058c0:	200007f0 	.word	0x200007f0
 80058c4:	0800f2d7 	.word	0x0800f2d7
 80058c8:	0800f1ad 	.word	0x0800f1ad
 80058cc:	080127fa 	.word	0x080127fa
 80058d0:	0800f2d5 	.word	0x0800f2d5
 80058d4:	0800f161 	.word	0x0800f161
 80058d8:	0800efb3 	.word	0x0800efb3
 80058dc:	0800f1b8 	.word	0x0800f1b8
 80058e0:	0800f008 	.word	0x0800f008
 80058e4:	0800f1b2 	.word	0x0800f1b2
 80058e8:	200007b0 	.word	0x200007b0

080058ec <http_err>:
{
 80058ec:	b510      	push	{r4, lr}
  if (hs != NULL) {
 80058ee:	4604      	mov	r4, r0
 80058f0:	b130      	cbz	r0, 8005900 <http_err+0x14>
    http_state_eof(hs);
 80058f2:	f7ff fb47 	bl	8004f84 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80058f6:	4620      	mov	r0, r4
}
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80058fc:	f000 b8da 	b.w	8005ab4 <mem_free>
}
 8005900:	bd10      	pop	{r4, pc}
	...

08005904 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005904:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005906:	202e      	movs	r0, #46	; 0x2e
 8005908:	f001 fdf6 	bl	80074f8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800590c:	4604      	mov	r4, r0
 800590e:	b930      	cbnz	r0, 800591e <httpd_init+0x1a>
 8005910:	4b15      	ldr	r3, [pc, #84]	; (8005968 <httpd_init+0x64>)
 8005912:	4916      	ldr	r1, [pc, #88]	; (800596c <httpd_init+0x68>)
 8005914:	4816      	ldr	r0, [pc, #88]	; (8005970 <httpd_init+0x6c>)
 8005916:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800591a:	f008 f923 	bl	800db64 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800591e:	2101      	movs	r1, #1
 8005920:	4620      	mov	r0, r4
 8005922:	f001 f89d 	bl	8006a60 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8005926:	2250      	movs	r2, #80	; 0x50
 8005928:	4912      	ldr	r1, [pc, #72]	; (8005974 <httpd_init+0x70>)
 800592a:	4620      	mov	r0, r4
 800592c:	f000 ff72 	bl	8006814 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005930:	b130      	cbz	r0, 8005940 <httpd_init+0x3c>
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <httpd_init+0x64>)
 8005934:	4910      	ldr	r1, [pc, #64]	; (8005978 <httpd_init+0x74>)
 8005936:	480e      	ldr	r0, [pc, #56]	; (8005970 <httpd_init+0x6c>)
 8005938:	f640 2215 	movw	r2, #2581	; 0xa15
 800593c:	f008 f912 	bl	800db64 <iprintf>
  pcb = tcp_listen(pcb);
 8005940:	4620      	mov	r0, r4
 8005942:	21ff      	movs	r1, #255	; 0xff
 8005944:	f001 f808 	bl	8006958 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005948:	4604      	mov	r4, r0
 800594a:	b930      	cbnz	r0, 800595a <httpd_init+0x56>
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <httpd_init+0x64>)
 800594e:	490b      	ldr	r1, [pc, #44]	; (800597c <httpd_init+0x78>)
 8005950:	4807      	ldr	r0, [pc, #28]	; (8005970 <httpd_init+0x6c>)
 8005952:	f640 2217 	movw	r2, #2583	; 0xa17
 8005956:	f008 f905 	bl	800db64 <iprintf>
  tcp_accept(pcb, http_accept);
 800595a:	4620      	mov	r0, r4
 800595c:	4908      	ldr	r1, [pc, #32]	; (8005980 <httpd_init+0x7c>)
}
 800595e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8005962:	f001 b8df 	b.w	8006b24 <tcp_accept>
 8005966:	bf00      	nop
 8005968:	0800efb3 	.word	0x0800efb3
 800596c:	0800f1e4 	.word	0x0800f1e4
 8005970:	0800f008 	.word	0x0800f008
 8005974:	080109b0 	.word	0x080109b0
 8005978:	0800f1ff 	.word	0x0800f1ff
 800597c:	0800f21b 	.word	0x0800f21b
 8005980:	08004fe1 	.word	0x08004fe1

08005984 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005984:	ba40      	rev16	r0, r0
}
 8005986:	b280      	uxth	r0, r0
 8005988:	4770      	bx	lr

0800598a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800598a:	ba00      	rev	r0, r0
 800598c:	4770      	bx	lr

0800598e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800598e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005990:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8005992:	4608      	mov	r0, r1
{
 8005994:	460f      	mov	r7, r1
 8005996:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8005998:	f7fa fc24 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 800599c:	4606      	mov	r6, r0
 800599e:	b130      	cbz	r0, 80059ae <lwip_strnstr+0x20>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80059a0:	4425      	add	r5, r4
 80059a2:	7823      	ldrb	r3, [r4, #0]
 80059a4:	b18b      	cbz	r3, 80059ca <lwip_strnstr+0x3c>
 80059a6:	19a2      	adds	r2, r4, r6
 80059a8:	4295      	cmp	r5, r2
 80059aa:	d202      	bcs.n	80059b2 <lwip_strnstr+0x24>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80059ac:	2400      	movs	r4, #0
}
 80059ae:	4620      	mov	r0, r4
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80059b2:	783a      	ldrb	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <lwip_strnstr+0x38>
 80059b8:	4632      	mov	r2, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	4620      	mov	r0, r4
 80059be:	f008 f93d 	bl	800dc3c <strncmp>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0f3      	beq.n	80059ae <lwip_strnstr+0x20>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80059c6:	3401      	adds	r4, #1
 80059c8:	e7eb      	b.n	80059a2 <lwip_strnstr+0x14>
  return NULL;
 80059ca:	461c      	mov	r4, r3
 80059cc:	e7ef      	b.n	80059ae <lwip_strnstr+0x20>

080059ce <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 80059ce:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 80059d0:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80059d4:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 80059dc:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80059e0:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80059e4:	2d19      	cmp	r5, #25
 80059e6:	d807      	bhi.n	80059f8 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80059e8:	f042 0220 	orr.w	r2, r2, #32
 80059ec:	4294      	cmp	r4, r2
 80059ee:	d103      	bne.n	80059f8 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ed      	bne.n	80059d0 <lwip_stricmp+0x2>
  return 0;
 80059f4:	4618      	mov	r0, r3
}
 80059f6:	bd30      	pop	{r4, r5, pc}
        return 1;
 80059f8:	2001      	movs	r0, #1
 80059fa:	e7fc      	b.n	80059f6 <lwip_stricmp+0x28>

080059fc <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
    number /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 80059fe:	4e13      	ldr	r6, [pc, #76]	; (8005a4c <lwip_itoa+0x50>)
  char* ptr = result, *ptr1 = result, tmp_char;
 8005a00:	4601      	mov	r1, r0
    number /= base;
 8005a02:	f04f 0c0a 	mov.w	ip, #10
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005a06:	f06f 0709 	mvn.w	r7, #9
    number /= base;
 8005a0a:	fb92 f4fc 	sdiv	r4, r2, ip
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005a0e:	fb07 6504 	mla	r5, r7, r4, r6
 8005a12:	4415      	add	r5, r2
 8005a14:	460b      	mov	r3, r1
 8005a16:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8005a1a:	f803 5b01 	strb.w	r5, [r3], #1
  } while(number);
 8005a1e:	b954      	cbnz	r4, 8005a36 <lwip_itoa+0x3a>

   /* Apply negative sign */
  if (tmp_value < 0) {
 8005a20:	2a00      	cmp	r2, #0
     *ptr++ = '-';
 8005a22:	bfbe      	ittt	lt
 8005a24:	1c8b      	addlt	r3, r1, #2
 8005a26:	222d      	movlt	r2, #45	; 0x2d
 8005a28:	704a      	strblt	r2, [r1, #1]
  }
  *ptr-- = '\0';
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	1e5a      	subs	r2, r3, #1
 8005a2e:	7019      	strb	r1, [r3, #0]
  while(ptr1 < ptr) {
 8005a30:	4282      	cmp	r2, r0
 8005a32:	d803      	bhi.n	8005a3c <lwip_itoa+0x40>
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }
}
 8005a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a36:	4619      	mov	r1, r3
 8005a38:	4622      	mov	r2, r4
 8005a3a:	e7e6      	b.n	8005a0a <lwip_itoa+0xe>
    tmp_char = *ptr;
 8005a3c:	7813      	ldrb	r3, [r2, #0]
    *ptr--= *ptr1;
 8005a3e:	7801      	ldrb	r1, [r0, #0]
 8005a40:	f802 1901 	strb.w	r1, [r2], #-1
    *ptr1++ = tmp_char;
 8005a44:	f800 3b01 	strb.w	r3, [r0], #1
 8005a48:	e7f2      	b.n	8005a30 <lwip_itoa+0x34>
 8005a4a:	bf00      	nop
 8005a4c:	0800f471 	.word	0x0800f471

08005a50 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005a50:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005a52:	f000 f80d 	bl	8005a70 <mem_init>
  memp_init();
 8005a56:	f000 fa21 	bl	8005e9c <memp_init>
  pbuf_init();
  netif_init();
 8005a5a:	f000 fa6c 	bl	8005f36 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005a5e:	f004 f813 	bl	8009a88 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005a62:	f000 fed5 	bl	8006810 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005a6a:	f003 bfb5 	b.w	80099d8 <sys_timeouts_init>
	...

08005a70 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <mem_init+0x30>)
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <mem_init+0x34>)
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8005a7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a7e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8005a80:	2200      	movs	r2, #0
 8005a82:	711a      	strb	r2, [r3, #4]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <mem_init+0x38>)
 8005a86:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 8005a8a:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8005a8c:	4a07      	ldr	r2, [pc, #28]	; (8005aac <mem_init+0x3c>)
 8005a8e:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005a98:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <mem_init+0x40>)
 8005a9a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20001b47 	.word	0x20001b47
 8005aa4:	20000bf4 	.word	0x20000bf4
 8005aa8:	20000bf8 	.word	0x20000bf8
 8005aac:	06400640 	.word	0x06400640
 8005ab0:	20000bf0 	.word	0x20000bf0

08005ab4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005ab8:	4604      	mov	r4, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f000 8088 	beq.w	8005bd0 <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005ac0:	0783      	lsls	r3, r0, #30
 8005ac2:	d006      	beq.n	8005ad2 <mem_free+0x1e>
 8005ac4:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <mem_free+0x120>)
 8005ac6:	4944      	ldr	r1, [pc, #272]	; (8005bd8 <mem_free+0x124>)
 8005ac8:	4844      	ldr	r0, [pc, #272]	; (8005bdc <mem_free+0x128>)
 8005aca:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005ace:	f008 f849 	bl	800db64 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005ad2:	4f43      	ldr	r7, [pc, #268]	; (8005be0 <mem_free+0x12c>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	d803      	bhi.n	8005ae2 <mem_free+0x2e>
 8005ada:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <mem_free+0x130>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	d806      	bhi.n	8005af0 <mem_free+0x3c>
 8005ae2:	4b3c      	ldr	r3, [pc, #240]	; (8005bd4 <mem_free+0x120>)
 8005ae4:	4940      	ldr	r1, [pc, #256]	; (8005be8 <mem_free+0x134>)
 8005ae6:	483d      	ldr	r0, [pc, #244]	; (8005bdc <mem_free+0x128>)
 8005ae8:	f240 12af 	movw	r2, #431	; 0x1af
 8005aec:	f008 f83a 	bl	800db64 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	d86c      	bhi.n	8005bd0 <mem_free+0x11c>
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <mem_free+0x130>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	42a2      	cmp	r2, r4
 8005afc:	4698      	mov	r8, r3
 8005afe:	d967      	bls.n	8005bd0 <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005b00:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005b04:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005b08:	b933      	cbnz	r3, 8005b18 <mem_free+0x64>
 8005b0a:	4b32      	ldr	r3, [pc, #200]	; (8005bd4 <mem_free+0x120>)
 8005b0c:	4937      	ldr	r1, [pc, #220]	; (8005bec <mem_free+0x138>)
 8005b0e:	4833      	ldr	r0, [pc, #204]	; (8005bdc <mem_free+0x128>)
 8005b10:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005b14:	f008 f826 	bl	800db64 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8005b18:	4e35      	ldr	r6, [pc, #212]	; (8005bf0 <mem_free+0x13c>)
  mem->used = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	42ab      	cmp	r3, r5
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b24:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005b26:	bf88      	it	hi
 8005b28:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b2a:	429d      	cmp	r5, r3
 8005b2c:	d206      	bcs.n	8005b3c <mem_free+0x88>
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <mem_free+0x120>)
 8005b30:	4930      	ldr	r1, [pc, #192]	; (8005bf4 <mem_free+0x140>)
 8005b32:	482a      	ldr	r0, [pc, #168]	; (8005bdc <mem_free+0x128>)
 8005b34:	f240 125d 	movw	r2, #349	; 0x15d
 8005b38:	f008 f814 	bl	800db64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b40:	429d      	cmp	r5, r3
 8005b42:	d306      	bcc.n	8005b52 <mem_free+0x9e>
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <mem_free+0x120>)
 8005b46:	492c      	ldr	r1, [pc, #176]	; (8005bf8 <mem_free+0x144>)
 8005b48:	4824      	ldr	r0, [pc, #144]	; (8005bdc <mem_free+0x128>)
 8005b4a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005b4e:	f008 f809 	bl	800db64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005b52:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005b56:	b133      	cbz	r3, 8005b66 <mem_free+0xb2>
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <mem_free+0x120>)
 8005b5a:	4928      	ldr	r1, [pc, #160]	; (8005bfc <mem_free+0x148>)
 8005b5c:	481f      	ldr	r0, [pc, #124]	; (8005bdc <mem_free+0x128>)
 8005b5e:	f240 125f 	movw	r2, #351	; 0x15f
 8005b62:	f007 ffff 	bl	800db64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005b66:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8005b6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b6e:	d906      	bls.n	8005b7e <mem_free+0xca>
 8005b70:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <mem_free+0x120>)
 8005b72:	4923      	ldr	r1, [pc, #140]	; (8005c00 <mem_free+0x14c>)
 8005b74:	4819      	ldr	r0, [pc, #100]	; (8005bdc <mem_free+0x128>)
 8005b76:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005b7a:	f007 fff3 	bl	800db64 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005b84:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005b86:	4295      	cmp	r5, r2
 8005b88:	d010      	beq.n	8005bac <mem_free+0xf8>
 8005b8a:	7910      	ldrb	r0, [r2, #4]
 8005b8c:	b970      	cbnz	r0, 8005bac <mem_free+0xf8>
 8005b8e:	f8d8 0000 	ldr.w	r0, [r8]
 8005b92:	4282      	cmp	r2, r0
 8005b94:	d00a      	beq.n	8005bac <mem_free+0xf8>
    if (lfree == nmem) {
 8005b96:	6830      	ldr	r0, [r6, #0]
 8005b98:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8005b9a:	5a5a      	ldrh	r2, [r3, r1]
 8005b9c:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005ba0:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8005ba2:	bf08      	it	eq
 8005ba4:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005ba6:	441a      	add	r2, r3
 8005ba8:	1ae9      	subs	r1, r5, r3
 8005baa:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005bac:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8005bb0:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005bb2:	428d      	cmp	r5, r1
 8005bb4:	d00c      	beq.n	8005bd0 <mem_free+0x11c>
 8005bb6:	7908      	ldrb	r0, [r1, #4]
 8005bb8:	b950      	cbnz	r0, 8005bd0 <mem_free+0x11c>
    if (lfree == mem) {
 8005bba:	6830      	ldr	r0, [r6, #0]
 8005bbc:	4285      	cmp	r5, r0
      lfree = pmem;
 8005bbe:	bf08      	it	eq
 8005bc0:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8005bc2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005bc6:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005bc8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005bcc:	440b      	add	r3, r1
 8005bce:	805a      	strh	r2, [r3, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	0800f4b9 	.word	0x0800f4b9
 8005bd8:	0800f4e8 	.word	0x0800f4e8
 8005bdc:	0800f008 	.word	0x0800f008
 8005be0:	20000bf4 	.word	0x20000bf4
 8005be4:	20000bf8 	.word	0x20000bf8
 8005be8:	0800f509 	.word	0x0800f509
 8005bec:	0800f520 	.word	0x0800f520
 8005bf0:	20000bf0 	.word	0x20000bf0
 8005bf4:	0800f534 	.word	0x0800f534
 8005bf8:	0800f54b 	.word	0x0800f54b
 8005bfc:	0800f565 	.word	0x0800f565
 8005c00:	0800f580 	.word	0x0800f580

08005c04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005c06:	3103      	adds	r1, #3
 8005c08:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005c0c:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8005c0e:	2d0b      	cmp	r5, #11
{
 8005c10:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8005c12:	d904      	bls.n	8005c1e <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005c14:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005c18:	d902      	bls.n	8005c20 <mem_trim+0x1c>
    return NULL;
 8005c1a:	2400      	movs	r4, #0
 8005c1c:	e05a      	b.n	8005cd4 <mem_trim+0xd0>
    newsize = MIN_SIZE_ALIGNED;
 8005c1e:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005c20:	4e2d      	ldr	r6, [pc, #180]	; (8005cd8 <mem_trim+0xd4>)
 8005c22:	6832      	ldr	r2, [r6, #0]
 8005c24:	42a2      	cmp	r2, r4
 8005c26:	d803      	bhi.n	8005c30 <mem_trim+0x2c>
 8005c28:	4b2c      	ldr	r3, [pc, #176]	; (8005cdc <mem_trim+0xd8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d806      	bhi.n	8005c3e <mem_trim+0x3a>
 8005c30:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <mem_trim+0xdc>)
 8005c32:	492c      	ldr	r1, [pc, #176]	; (8005ce4 <mem_trim+0xe0>)
 8005c34:	482c      	ldr	r0, [pc, #176]	; (8005ce8 <mem_trim+0xe4>)
 8005c36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c3a:	f007 ff93 	bl	800db64 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d847      	bhi.n	8005cd4 <mem_trim+0xd0>
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <mem_trim+0xd8>)
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	42a2      	cmp	r2, r4
 8005c4a:	d943      	bls.n	8005cd4 <mem_trim+0xd0>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005c4c:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005c50:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005c54:	1ad2      	subs	r2, r2, r3
 8005c56:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005c58:	f1a0 0108 	sub.w	r1, r0, #8
 8005c5c:	1a89      	subs	r1, r1, r2
 8005c5e:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005c60:	42a9      	cmp	r1, r5
 8005c62:	d219      	bcs.n	8005c98 <mem_trim+0x94>
 8005c64:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <mem_trim+0xdc>)
 8005c66:	4921      	ldr	r1, [pc, #132]	; (8005cec <mem_trim+0xe8>)
 8005c68:	481f      	ldr	r0, [pc, #124]	; (8005ce8 <mem_trim+0xe4>)
 8005c6a:	f240 2206 	movw	r2, #518	; 0x206
 8005c6e:	f007 ff79 	bl	800db64 <iprintf>
 8005c72:	e7d2      	b.n	8005c1a <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c74:	f105 0614 	add.w	r6, r5, #20
 8005c78:	428e      	cmp	r6, r1
 8005c7a:	d82b      	bhi.n	8005cd4 <mem_trim+0xd0>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8005c7c:	4e1c      	ldr	r6, [pc, #112]	; (8005cf0 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c7e:	f102 0108 	add.w	r1, r2, #8
 8005c82:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8005c84:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c86:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005c88:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8005c8a:	428f      	cmp	r7, r1
      lfree = mem2;
 8005c8c:	bf88      	it	hi
 8005c8e:	6031      	strhi	r1, [r6, #0]
    }
    mem2->used = 0;
 8005c90:	2600      	movs	r6, #0
 8005c92:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 8005c94:	5358      	strh	r0, [r3, r5]
 8005c96:	e014      	b.n	8005cc2 <mem_trim+0xbe>
  if (newsize == size) {
 8005c98:	d01c      	beq.n	8005cd4 <mem_trim+0xd0>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005c9a:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 8005c9c:	7937      	ldrb	r7, [r6, #4]
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	d1e8      	bne.n	8005c74 <mem_trim+0x70>
    next = mem2->next;
 8005ca2:	f833 c000 	ldrh.w	ip, [r3, r0]
    if (lfree == mem2) {
 8005ca6:	4812      	ldr	r0, [pc, #72]	; (8005cf0 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005ca8:	f102 0108 	add.w	r1, r2, #8
    if (lfree == mem2) {
 8005cac:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005cae:	440d      	add	r5, r1
 8005cb0:	b2ad      	uxth	r5, r5
 8005cb2:	1959      	adds	r1, r3, r5
    if (lfree == mem2) {
 8005cb4:	42b7      	cmp	r7, r6
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005cb6:	bf08      	it	eq
 8005cb8:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 8005cba:	2000      	movs	r0, #0
 8005cbc:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 8005cbe:	f823 c005 	strh.w	ip, [r3, r5]
    mem2->prev = ptr;
 8005cc2:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 8005cc4:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cc8:	5b5a      	ldrh	r2, [r3, r5]
 8005cca:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8005cce:	d001      	beq.n	8005cd4 <mem_trim+0xd0>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005cd0:	4413      	add	r3, r2
 8005cd2:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd8:	20000bf4 	.word	0x20000bf4
 8005cdc:	20000bf8 	.word	0x20000bf8
 8005ce0:	0800f4b9 	.word	0x0800f4b9
 8005ce4:	0800f645 	.word	0x0800f645
 8005ce8:	0800f008 	.word	0x0800f008
 8005cec:	0800f65c 	.word	0x0800f65c
 8005cf0:	20000bf0 	.word	0x20000bf0

08005cf4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d071      	beq.n	8005de0 <mem_malloc+0xec>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005cfc:	3003      	adds	r0, #3
 8005cfe:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005d02:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8005d04:	2d0b      	cmp	r5, #11
 8005d06:	d904      	bls.n	8005d12 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005d08:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005d0c:	d902      	bls.n	8005d14 <mem_malloc+0x20>
    return NULL;
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e066      	b.n	8005de0 <mem_malloc+0xec>
    size = MIN_SIZE_ALIGNED;
 8005d12:	250c      	movs	r5, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d14:	4837      	ldr	r0, [pc, #220]	; (8005df4 <mem_malloc+0x100>)
 8005d16:	4e38      	ldr	r6, [pc, #224]	; (8005df8 <mem_malloc+0x104>)
 8005d18:	6807      	ldr	r7, [r0, #0]
 8005d1a:	6831      	ldr	r1, [r6, #0]
 8005d1c:	1a7b      	subs	r3, r7, r1
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d24:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d28:	4543      	cmp	r3, r8
 8005d2a:	d2f0      	bcs.n	8005d0e <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 8005d2c:	18cc      	adds	r4, r1, r3
 8005d2e:	f831 c003 	ldrh.w	ip, [r1, r3]
      if ((!mem->used) &&
 8005d32:	f894 e004 	ldrb.w	lr, [r4, #4]
 8005d36:	f1be 0f00 	cmp.w	lr, #0
 8005d3a:	d159      	bne.n	8005df0 <mem_malloc+0xfc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d3c:	eba9 0203 	sub.w	r2, r9, r3
 8005d40:	4462      	add	r2, ip
      if ((!mem->used) &&
 8005d42:	42aa      	cmp	r2, r5
 8005d44:	d354      	bcc.n	8005df0 <mem_malloc+0xfc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d46:	f105 0814 	add.w	r8, r5, #20
 8005d4a:	4542      	cmp	r2, r8
 8005d4c:	d34a      	bcc.n	8005de4 <mem_malloc+0xf0>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8005d4e:	f105 0208 	add.w	r2, r5, #8
 8005d52:	441a      	add	r2, r3
 8005d54:	b292      	uxth	r2, r2
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005d56:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8005d5a:	f888 e004 	strb.w	lr, [r8, #4]
          mem2->next = mem->next;
 8005d5e:	f821 c002 	strh.w	ip, [r1, r2]
          mem2->prev = ptr;
 8005d62:	f8a8 3002 	strh.w	r3, [r8, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 8005d66:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005d68:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8005d6a:	7123      	strb	r3, [r4, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d6c:	5a8b      	ldrh	r3, [r1, r2]
 8005d6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d72:	d001      	beq.n	8005d78 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005d74:	4419      	add	r1, r3
 8005d76:	804a      	strh	r2, [r1, #2]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005d78:	42a7      	cmp	r7, r4
 8005d7a:	4f20      	ldr	r7, [pc, #128]	; (8005dfc <mem_malloc+0x108>)
 8005d7c:	d112      	bne.n	8005da4 <mem_malloc+0xb0>
 8005d7e:	683a      	ldr	r2, [r7, #0]
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8005d80:	6836      	ldr	r6, [r6, #0]
 8005d82:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8005d84:	7919      	ldrb	r1, [r3, #4]
 8005d86:	b111      	cbz	r1, 8005d8e <mem_malloc+0x9a>
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d12e      	bne.n	8005dea <mem_malloc+0xf6>
 8005d8c:	4613      	mov	r3, r2
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005d8e:	429a      	cmp	r2, r3
          lfree = cur;
 8005d90:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005d92:	d007      	beq.n	8005da4 <mem_malloc+0xb0>
 8005d94:	b131      	cbz	r1, 8005da4 <mem_malloc+0xb0>
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <mem_malloc+0x10c>)
 8005d98:	491a      	ldr	r1, [pc, #104]	; (8005e04 <mem_malloc+0x110>)
 8005d9a:	481b      	ldr	r0, [pc, #108]	; (8005e08 <mem_malloc+0x114>)
 8005d9c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005da0:	f007 fee0 	bl	800db64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005da4:	3508      	adds	r5, #8
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4425      	add	r5, r4
 8005daa:	42ab      	cmp	r3, r5
 8005dac:	d206      	bcs.n	8005dbc <mem_malloc+0xc8>
 8005dae:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <mem_malloc+0x10c>)
 8005db0:	4916      	ldr	r1, [pc, #88]	; (8005e0c <mem_malloc+0x118>)
 8005db2:	4815      	ldr	r0, [pc, #84]	; (8005e08 <mem_malloc+0x114>)
 8005db4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8005db8:	f007 fed4 	bl	800db64 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005dbc:	07a3      	lsls	r3, r4, #30
 8005dbe:	d00d      	beq.n	8005ddc <mem_malloc+0xe8>
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <mem_malloc+0x10c>)
 8005dc2:	4913      	ldr	r1, [pc, #76]	; (8005e10 <mem_malloc+0x11c>)
 8005dc4:	4810      	ldr	r0, [pc, #64]	; (8005e08 <mem_malloc+0x114>)
 8005dc6:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005dca:	f007 fecb 	bl	800db64 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <mem_malloc+0x10c>)
 8005dd0:	4910      	ldr	r1, [pc, #64]	; (8005e14 <mem_malloc+0x120>)
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <mem_malloc+0x114>)
 8005dd4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8005dd8:	f007 fec4 	bl	800db64 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005ddc:	f104 0008 	add.w	r0, r4, #8
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8005de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8005de4:	2301      	movs	r3, #1
 8005de6:	7123      	strb	r3, [r4, #4]
 8005de8:	e7c6      	b.n	8005d78 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	4433      	add	r3, r6
 8005dee:	e7c9      	b.n	8005d84 <mem_malloc+0x90>
 8005df0:	4663      	mov	r3, ip
 8005df2:	e799      	b.n	8005d28 <mem_malloc+0x34>
 8005df4:	20000bf0 	.word	0x20000bf0
 8005df8:	20000bf4 	.word	0x20000bf4
 8005dfc:	20000bf8 	.word	0x20000bf8
 8005e00:	0800f4b9 	.word	0x0800f4b9
 8005e04:	0800f5aa 	.word	0x0800f5aa
 8005e08:	0800f008 	.word	0x0800f008
 8005e0c:	0800f5c3 	.word	0x0800f5c3
 8005e10:	0800f5f3 	.word	0x0800f5f3
 8005e14:	0800f622 	.word	0x0800f622

08005e18 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005e18:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005e1a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005e1c:	b154      	cbz	r4, 8005e34 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005e22:	07a3      	lsls	r3, r4, #30
 8005e24:	d006      	beq.n	8005e34 <do_memp_malloc_pool.isra.0+0x1c>
 8005e26:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <do_memp_malloc_pool.isra.0+0x20>)
 8005e28:	4904      	ldr	r1, [pc, #16]	; (8005e3c <do_memp_malloc_pool.isra.0+0x24>)
 8005e2a:	4805      	ldr	r0, [pc, #20]	; (8005e40 <do_memp_malloc_pool.isra.0+0x28>)
 8005e2c:	f240 1249 	movw	r2, #329	; 0x149
 8005e30:	f007 fe98 	bl	800db64 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8005e34:	4620      	mov	r0, r4
 8005e36:	bd10      	pop	{r4, pc}
 8005e38:	0800f69c 	.word	0x0800f69c
 8005e3c:	0800f6cc 	.word	0x0800f6cc
 8005e40:	0800f008 	.word	0x0800f008

08005e44 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005e44:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005e46:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005e4c:	d006      	beq.n	8005e5c <do_memp_free_pool.isra.1+0x18>
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <do_memp_free_pool.isra.1+0x24>)
 8005e50:	4906      	ldr	r1, [pc, #24]	; (8005e6c <do_memp_free_pool.isra.1+0x28>)
 8005e52:	4807      	ldr	r0, [pc, #28]	; (8005e70 <do_memp_free_pool.isra.1+0x2c>)
 8005e54:	f240 129d 	movw	r2, #413	; 0x19d
 8005e58:	f007 fe84 	bl	800db64 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8005e62:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	bf00      	nop
 8005e68:	0800f69c 	.word	0x0800f69c
 8005e6c:	0800f67c 	.word	0x0800f67c
 8005e70:	0800f008 	.word	0x0800f008

08005e74 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005e74:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005e76:	6881      	ldr	r1, [r0, #8]
{
 8005e78:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8005e7a:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005e7c:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005e7e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005e80:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005e82:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005e86:	4294      	cmp	r4, r2
 8005e88:	dc00      	bgt.n	8005e8c <memp_init_pool+0x18>
}
 8005e8a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005e8c:	680d      	ldr	r5, [r1, #0]
 8005e8e:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005e90:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005e92:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005e94:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005e96:	442b      	add	r3, r5
 8005e98:	e7f5      	b.n	8005e86 <memp_init_pool+0x12>
	...

08005e9c <memp_init>:
{
 8005e9c:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8005e9e:	4d05      	ldr	r5, [pc, #20]	; (8005eb4 <memp_init+0x18>)
{
 8005ea0:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005ea2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005ea6:	3401      	adds	r4, #1
 8005ea8:	f7ff ffe4 	bl	8005e74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005eac:	2c09      	cmp	r4, #9
 8005eae:	d1f8      	bne.n	8005ea2 <memp_init+0x6>
}
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop
 8005eb4:	0800f794 	.word	0x0800f794

08005eb8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005eb8:	2808      	cmp	r0, #8
{
 8005eba:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005ebc:	d807      	bhi.n	8005ece <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <memp_malloc+0x28>)
 8005ec0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005ec4:	6898      	ldr	r0, [r3, #8]
}
 8005ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005eca:	f7ff bfa5 	b.w	8005e18 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <memp_malloc+0x2c>)
 8005ed0:	4905      	ldr	r1, [pc, #20]	; (8005ee8 <memp_malloc+0x30>)
 8005ed2:	4806      	ldr	r0, [pc, #24]	; (8005eec <memp_malloc+0x34>)
 8005ed4:	f240 1287 	movw	r2, #391	; 0x187
 8005ed8:	f007 fe44 	bl	800db64 <iprintf>
}
 8005edc:	2000      	movs	r0, #0
 8005ede:	bd08      	pop	{r3, pc}
 8005ee0:	0800f794 	.word	0x0800f794
 8005ee4:	0800f69c 	.word	0x0800f69c
 8005ee8:	0800f777 	.word	0x0800f777
 8005eec:	0800f008 	.word	0x0800f008

08005ef0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005ef0:	2808      	cmp	r0, #8
 8005ef2:	d906      	bls.n	8005f02 <memp_free+0x12>
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <memp_free+0x24>)
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <memp_free+0x28>)
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <memp_free+0x2c>)
 8005efa:	f240 12db 	movw	r2, #475	; 0x1db
 8005efe:	f007 be31 	b.w	800db64 <iprintf>

  if (mem == NULL) {
 8005f02:	b129      	cbz	r1, 8005f10 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <memp_free+0x30>)
 8005f06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005f0a:	3008      	adds	r0, #8
 8005f0c:	f7ff bf9a 	b.w	8005e44 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	0800f69c 	.word	0x0800f69c
 8005f18:	0800f75c 	.word	0x0800f75c
 8005f1c:	0800f008 	.word	0x0800f008
 8005f20:	0800f794 	.word	0x0800f794

08005f24 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f24:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005f28:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005f2a:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f2c:	d502      	bpl.n	8005f34 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8005f2e:	3104      	adds	r1, #4
 8005f30:	f004 b814 	b.w	8009f5c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005f34:	4770      	bx	lr

08005f36 <netif_init>:
}
 8005f36:	4770      	bx	lr

08005f38 <netif_set_ipaddr>:
{
 8005f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f3a:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	b191      	cbz	r1, 8005f66 <netif_set_ipaddr+0x2e>
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005f44:	9a01      	ldr	r2, [sp, #4]
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d00a      	beq.n	8005f62 <netif_set_ipaddr+0x2a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005f4c:	1d26      	adds	r6, r4, #4
 8005f4e:	a901      	add	r1, sp, #4
 8005f50:	4630      	mov	r0, r6
 8005f52:	f001 faf1 	bl	8007538 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005f56:	a901      	add	r1, sp, #4
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f003 fe2d 	bl	8009bb8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005f5e:	b92d      	cbnz	r5, 8005f6c <netif_set_ipaddr+0x34>
 8005f60:	6065      	str	r5, [r4, #4]
}
 8005f62:	b002      	add	sp, #8
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <netif_set_ipaddr+0x44>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	e7ea      	b.n	8005f42 <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f6      	beq.n	8005f62 <netif_set_ipaddr+0x2a>
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff ffd5 	bl	8005f24 <netif_issue_reports.part.0>
}
 8005f7a:	e7f2      	b.n	8005f62 <netif_set_ipaddr+0x2a>
 8005f7c:	080109b0 	.word	0x080109b0

08005f80 <netif_set_addr>:
{
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4606      	mov	r6, r0
 8005f84:	4615      	mov	r5, r2
 8005f86:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005f88:	b109      	cbz	r1, 8005f8e <netif_set_addr+0xe>
 8005f8a:	680b      	ldr	r3, [r1, #0]
 8005f8c:	b94b      	cbnz	r3, 8005fa2 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7ff ffd2 	bl	8005f38 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005f94:	b105      	cbz	r5, 8005f98 <netif_set_addr+0x18>
 8005f96:	682d      	ldr	r5, [r5, #0]
 8005f98:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005f9a:	b104      	cbz	r4, 8005f9e <netif_set_addr+0x1e>
 8005f9c:	6824      	ldr	r4, [r4, #0]
 8005f9e:	60f4      	str	r4, [r6, #12]
}
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005fa2:	b102      	cbz	r2, 8005fa6 <netif_set_addr+0x26>
 8005fa4:	6815      	ldr	r5, [r2, #0]
 8005fa6:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005fa8:	b104      	cbz	r4, 8005fac <netif_set_addr+0x2c>
 8005faa:	6824      	ldr	r4, [r4, #0]
 8005fac:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8005fae:	4630      	mov	r0, r6
}
 8005fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8005fb4:	f7ff bfc0 	b.w	8005f38 <netif_set_ipaddr>

08005fb8 <netif_add>:
{
 8005fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	4690      	mov	r8, r2
 8005fc4:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8005fc6:	b92e      	cbnz	r6, 8005fd4 <netif_add+0x1c>
 8005fc8:	4b15      	ldr	r3, [pc, #84]	; (8006020 <netif_add+0x68>)
 8005fca:	4916      	ldr	r1, [pc, #88]	; (8006024 <netif_add+0x6c>)
 8005fcc:	4816      	ldr	r0, [pc, #88]	; (8006028 <netif_add+0x70>)
 8005fce:	22fb      	movs	r2, #251	; 0xfb
 8005fd0:	f007 fdc8 	bl	800db64 <iprintf>
  netif->num = netif_num++;
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8005fdc:	9b08      	ldr	r3, [sp, #32]
 8005fde:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005fe0:	7813      	ldrb	r3, [r2, #0]
 8005fe2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005fe6:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8005fe8:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8005fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8005fec:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8005fee:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005ff0:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->netmask);
 8005ff2:	e9c4 5501 	strd	r5, r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ff6:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8005ff8:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	4642      	mov	r2, r8
 8006000:	4639      	mov	r1, r7
 8006002:	f7ff ffbd 	bl	8005f80 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006006:	4620      	mov	r0, r4
 8006008:	47b0      	blx	r6
 800600a:	b930      	cbnz	r0, 800601a <netif_add+0x62>
  netif->next = netif_list;
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <netif_add+0x78>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8006012:	601c      	str	r4, [r3, #0]
}
 8006014:	4620      	mov	r0, r4
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800601a:	462c      	mov	r4, r5
 800601c:	e7fa      	b.n	8006014 <netif_add+0x5c>
 800601e:	bf00      	nop
 8006020:	0800f7b8 	.word	0x0800f7b8
 8006024:	0800f7e9 	.word	0x0800f7e9
 8006028:	0800f008 	.word	0x0800f008
 800602c:	20000c20 	.word	0x20000c20
 8006030:	20005044 	.word	0x20005044

08006034 <netif_set_default>:
  netif_default = netif;
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <netif_set_default+0x8>)
 8006036:	6018      	str	r0, [r3, #0]
}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20005048 	.word	0x20005048

08006040 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006040:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006044:	07d1      	lsls	r1, r2, #31
 8006046:	d409      	bmi.n	800605c <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8006048:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800604c:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800604e:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006052:	d503      	bpl.n	800605c <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006054:	6843      	ldr	r3, [r0, #4]
 8006056:	b10b      	cbz	r3, 800605c <netif_set_up+0x1c>
 8006058:	f7ff bf64 	b.w	8005f24 <netif_issue_reports.part.0>
}
 800605c:	4770      	bx	lr

0800605e <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800605e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006062:	07d9      	lsls	r1, r3, #31
 8006064:	d507      	bpl.n	8006076 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8006066:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800606a:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800606c:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006070:	d501      	bpl.n	8006076 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8006072:	f003 bec1 	b.w	8009df8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006076:	4770      	bx	lr

08006078 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006078:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800607a:	4604      	mov	r4, r0
 800607c:	bb70      	cbnz	r0, 80060dc <pbuf_header_impl+0x64>
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <pbuf_header_impl+0x88>)
 8006080:	4920      	ldr	r1, [pc, #128]	; (8006104 <pbuf_header_impl+0x8c>)
 8006082:	4821      	ldr	r0, [pc, #132]	; (8006108 <pbuf_header_impl+0x90>)
 8006084:	f240 223f 	movw	r2, #575	; 0x23f
 8006088:	f007 fd6c 	bl	800db64 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800608c:	2000      	movs	r0, #0
}
 800608e:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8006090:	461d      	mov	r5, r3
  type = p->type;
 8006092:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 8006094:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006096:	b10e      	cbz	r6, 800609c <pbuf_header_impl+0x24>
 8006098:	2e03      	cmp	r6, #3
 800609a:	d106      	bne.n	80060aa <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800609c:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800609e:	f104 0210 	add.w	r2, r4, #16
 80060a2:	4290      	cmp	r0, r2
 80060a4:	d20a      	bcs.n	80060bc <pbuf_header_impl+0x44>
      return 1;
 80060a6:	2001      	movs	r0, #1
 80060a8:	e7f1      	b.n	800608e <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80060aa:	3e01      	subs	r6, #1
 80060ac:	2e01      	cmp	r6, #1
 80060ae:	d810      	bhi.n	80060d2 <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80060b0:	2900      	cmp	r1, #0
 80060b2:	da0b      	bge.n	80060cc <pbuf_header_impl+0x54>
 80060b4:	8962      	ldrh	r2, [r4, #10]
 80060b6:	42aa      	cmp	r2, r5
 80060b8:	d3f5      	bcc.n	80060a6 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80060ba:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 80060bc:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80060be:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 80060c0:	441a      	add	r2, r3
 80060c2:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 80060c4:	8922      	ldrh	r2, [r4, #8]
 80060c6:	4413      	add	r3, r2
 80060c8:	8123      	strh	r3, [r4, #8]
 80060ca:	e7df      	b.n	800608c <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d1f4      	bne.n	80060ba <pbuf_header_impl+0x42>
 80060d0:	e7e9      	b.n	80060a6 <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <pbuf_header_impl+0x88>)
 80060d4:	490d      	ldr	r1, [pc, #52]	; (800610c <pbuf_header_impl+0x94>)
 80060d6:	f240 2277 	movw	r2, #631	; 0x277
 80060da:	e00c      	b.n	80060f6 <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 80060dc:	2900      	cmp	r1, #0
 80060de:	d0d5      	beq.n	800608c <pbuf_header_impl+0x14>
 80060e0:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 80060e2:	dad5      	bge.n	8006090 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 80060e4:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80060e6:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80060e8:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80060ea:	42a8      	cmp	r0, r5
 80060ec:	d2d1      	bcs.n	8006092 <pbuf_header_impl+0x1a>
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <pbuf_header_impl+0x88>)
 80060f0:	4907      	ldr	r1, [pc, #28]	; (8006110 <pbuf_header_impl+0x98>)
 80060f2:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 80060f6:	4804      	ldr	r0, [pc, #16]	; (8006108 <pbuf_header_impl+0x90>)
 80060f8:	f007 fd34 	bl	800db64 <iprintf>
 80060fc:	e7d3      	b.n	80060a6 <pbuf_header_impl+0x2e>
 80060fe:	bf00      	nop
 8006100:	0800fa65 	.word	0x0800fa65
 8006104:	0800facf 	.word	0x0800facf
 8006108:	0800f008 	.word	0x0800f008
 800610c:	0800fab3 	.word	0x0800fab3
 8006110:	0800fa95 	.word	0x0800fa95

08006114 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <pbuf_free_ooseq+0x20>)
 8006116:	2200      	movs	r2, #0
{
 8006118:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800611a:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <pbuf_free_ooseq+0x24>)
 800611e:	681c      	ldr	r4, [r3, #0]
 8006120:	b12c      	cbz	r4, 800612e <pbuf_free_ooseq+0x1a>
    if (NULL != pcb->ooseq) {
 8006122:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006124:	b120      	cbz	r0, 8006130 <pbuf_free_ooseq+0x1c>
      tcp_segs_free(pcb->ooseq);
 8006126:	f000 fc93 	bl	8006a50 <tcp_segs_free>
      pcb->ooseq = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	6723      	str	r3, [r4, #112]	; 0x70
}
 800612e:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006130:	68e4      	ldr	r4, [r4, #12]
 8006132:	e7f5      	b.n	8006120 <pbuf_free_ooseq+0xc>
 8006134:	2000504c 	.word	0x2000504c
 8006138:	20005054 	.word	0x20005054

0800613c <pbuf_alloced_custom>:
{
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8006140:	2804      	cmp	r0, #4
 8006142:	d81e      	bhi.n	8006182 <pbuf_alloced_custom+0x46>
 8006144:	e8df f000 	tbb	[pc, r0]
 8006148:	1b280326 	.word	0x1b280326
 800614c:	1b          	.byte	0x1b
 800614d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800614e:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006150:	3003      	adds	r0, #3
 8006152:	f020 0403 	bic.w	r4, r0, #3
 8006156:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800615a:	190e      	adds	r6, r1, r4
 800615c:	4286      	cmp	r6, r0
 800615e:	f04f 0000 	mov.w	r0, #0
 8006162:	d816      	bhi.n	8006192 <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 8006164:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8006166:	b1cd      	cbz	r5, 800619c <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006168:	442c      	add	r4, r5
 800616a:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800616c:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800616e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006170:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006172:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006174:	8119      	strh	r1, [r3, #8]
 8006176:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8006178:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800617a:	4618      	mov	r0, r3
 800617c:	e009      	b.n	8006192 <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800617e:	2000      	movs	r0, #0
    break;
 8006180:	e7e6      	b.n	8006150 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <pbuf_alloced_custom+0x64>)
 8006184:	4907      	ldr	r1, [pc, #28]	; (80061a4 <pbuf_alloced_custom+0x68>)
 8006186:	4808      	ldr	r0, [pc, #32]	; (80061a8 <pbuf_alloced_custom+0x6c>)
 8006188:	f240 12c5 	movw	r2, #453	; 0x1c5
 800618c:	f007 fcea 	bl	800db64 <iprintf>
    return NULL;
 8006190:	2000      	movs	r0, #0
}
 8006192:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006194:	2036      	movs	r0, #54	; 0x36
 8006196:	e7db      	b.n	8006150 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006198:	200e      	movs	r0, #14
 800619a:	e7d9      	b.n	8006150 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 800619c:	605d      	str	r5, [r3, #4]
 800619e:	e7e5      	b.n	800616c <pbuf_alloced_custom+0x30>
 80061a0:	0800fa65 	.word	0x0800fa65
 80061a4:	0800f8a8 	.word	0x0800f8a8
 80061a8:	0800f008 	.word	0x0800f008

080061ac <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	f7ff bf63 	b.w	8006078 <pbuf_header_impl>

080061b2 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 80061b2:	2201      	movs	r2, #1
 80061b4:	f7ff bf60 	b.w	8006078 <pbuf_header_impl>

080061b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80061bc:	4604      	mov	r4, r0
 80061be:	b950      	cbnz	r0, 80061d6 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <pbuf_free+0xac>)
 80061c2:	4929      	ldr	r1, [pc, #164]	; (8006268 <pbuf_free+0xb0>)
 80061c4:	4829      	ldr	r0, [pc, #164]	; (800626c <pbuf_free+0xb4>)
 80061c6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80061ca:	f007 fccb 	bl	800db64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80061ce:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80061d0:	4628      	mov	r0, r5
 80061d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80061d6:	7b03      	ldrb	r3, [r0, #12]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d906      	bls.n	80061ea <pbuf_free+0x32>
 80061dc:	4b21      	ldr	r3, [pc, #132]	; (8006264 <pbuf_free+0xac>)
 80061de:	4924      	ldr	r1, [pc, #144]	; (8006270 <pbuf_free+0xb8>)
 80061e0:	4822      	ldr	r0, [pc, #136]	; (800626c <pbuf_free+0xb4>)
 80061e2:	f240 22de 	movw	r2, #734	; 0x2de
 80061e6:	f007 fcbd 	bl	800db64 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80061ea:	4e1e      	ldr	r6, [pc, #120]	; (8006264 <pbuf_free+0xac>)
 80061ec:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006278 <pbuf_free+0xc0>
 80061f0:	4f1e      	ldr	r7, [pc, #120]	; (800626c <pbuf_free+0xb4>)
{
 80061f2:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80061f4:	89e3      	ldrh	r3, [r4, #14]
 80061f6:	b933      	cbnz	r3, 8006206 <pbuf_free+0x4e>
 80061f8:	4633      	mov	r3, r6
 80061fa:	f240 22eb 	movw	r2, #747	; 0x2eb
 80061fe:	4641      	mov	r1, r8
 8006200:	4638      	mov	r0, r7
 8006202:	f007 fcaf 	bl	800db64 <iprintf>
    ref = --(p->ref);
 8006206:	89e3      	ldrh	r3, [r4, #14]
 8006208:	3b01      	subs	r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1de      	bne.n	80061d0 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006212:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8006214:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006218:	079b      	lsls	r3, r3, #30
 800621a:	d511      	bpl.n	8006240 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	b933      	cbnz	r3, 800622e <pbuf_free+0x76>
 8006220:	4633      	mov	r3, r6
 8006222:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006226:	4913      	ldr	r1, [pc, #76]	; (8006274 <pbuf_free+0xbc>)
 8006228:	4638      	mov	r0, r7
 800622a:	f007 fc9b 	bl	800db64 <iprintf>
        pc->custom_free_function(p);
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	4620      	mov	r0, r4
 8006232:	4798      	blx	r3
      count++;
 8006234:	3501      	adds	r5, #1
  while (p != NULL) {
 8006236:	464c      	mov	r4, r9
      count++;
 8006238:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800623a:	2c00      	cmp	r4, #0
 800623c:	d1da      	bne.n	80061f4 <pbuf_free+0x3c>
 800623e:	e7c7      	b.n	80061d0 <pbuf_free+0x18>
      type = p->type;
 8006240:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8006242:	2b03      	cmp	r3, #3
 8006244:	d104      	bne.n	8006250 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8006246:	4621      	mov	r1, r4
 8006248:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 800624a:	f7ff fe51 	bl	8005ef0 <memp_free>
 800624e:	e7f1      	b.n	8006234 <pbuf_free+0x7c>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006250:	3b01      	subs	r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	d802      	bhi.n	800625c <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8006256:	4621      	mov	r1, r4
 8006258:	2007      	movs	r0, #7
 800625a:	e7f6      	b.n	800624a <pbuf_free+0x92>
          mem_free(p);
 800625c:	4620      	mov	r0, r4
 800625e:	f7ff fc29 	bl	8005ab4 <mem_free>
 8006262:	e7e7      	b.n	8006234 <pbuf_free+0x7c>
 8006264:	0800fa65 	.word	0x0800fa65
 8006268:	0800facf 	.word	0x0800facf
 800626c:	0800f008 	.word	0x0800f008
 8006270:	0800fa19 	.word	0x0800fa19
 8006274:	0800fa44 	.word	0x0800fa44
 8006278:	0800fa2e 	.word	0x0800fa2e

0800627c <pbuf_alloc>:
{
 800627c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460e      	mov	r6, r1
 8006282:	4617      	mov	r7, r2
  switch (layer) {
 8006284:	2804      	cmp	r0, #4
 8006286:	d80e      	bhi.n	80062a6 <pbuf_alloc+0x2a>
 8006288:	e8df f000 	tbb	[pc, r0]
 800628c:	0b170315 	.word	0x0b170315
 8006290:	0b          	.byte	0x0b
 8006291:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006292:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8006294:	2f03      	cmp	r7, #3
 8006296:	f200 80bc 	bhi.w	8006412 <pbuf_alloc+0x196>
 800629a:	e8df f007 	tbb	[pc, r7]
 800629e:	ad92      	.short	0xad92
 80062a0:	10ad      	.short	0x10ad
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80062a2:	2500      	movs	r5, #0
    break;
 80062a4:	e7f6      	b.n	8006294 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80062a6:	4b5d      	ldr	r3, [pc, #372]	; (800641c <pbuf_alloc+0x1a0>)
 80062a8:	495d      	ldr	r1, [pc, #372]	; (8006420 <pbuf_alloc+0x1a4>)
 80062aa:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80062ae:	485d      	ldr	r0, [pc, #372]	; (8006424 <pbuf_alloc+0x1a8>)
 80062b0:	f007 fc58 	bl	800db64 <iprintf>
 80062b4:	e04b      	b.n	800634e <pbuf_alloc+0xd2>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80062b6:	2536      	movs	r5, #54	; 0x36
 80062b8:	e7ec      	b.n	8006294 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80062ba:	250e      	movs	r5, #14
 80062bc:	e7ea      	b.n	8006294 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062be:	2008      	movs	r0, #8
 80062c0:	f7ff fdfa 	bl	8005eb8 <memp_malloc>
    if (p == NULL) {
 80062c4:	4604      	mov	r4, r0
 80062c6:	b928      	cbnz	r0, 80062d4 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80062c8:	4b57      	ldr	r3, [pc, #348]	; (8006428 <pbuf_alloc+0x1ac>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
}
 80062ce:	4620      	mov	r0, r4
 80062d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 80062d4:	2303      	movs	r3, #3
 80062d6:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80062dc:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80062de:	3503      	adds	r5, #3
 80062e0:	f025 0503 	bic.w	r5, r5, #3
 80062e4:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 80062e8:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80062ea:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80062ee:	bf28      	it	cs
 80062f0:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80062f8:	f500 7718 	add.w	r7, r0, #608	; 0x260
 80062fc:	442b      	add	r3, r5
 80062fe:	429f      	cmp	r7, r3
    p->tot_len = length;
 8006300:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006302:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006304:	d206      	bcs.n	8006314 <pbuf_alloc+0x98>
 8006306:	4b45      	ldr	r3, [pc, #276]	; (800641c <pbuf_alloc+0x1a0>)
 8006308:	4948      	ldr	r1, [pc, #288]	; (800642c <pbuf_alloc+0x1b0>)
 800630a:	4846      	ldr	r0, [pc, #280]	; (8006424 <pbuf_alloc+0x1a8>)
 800630c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006310:	f007 fc28 	bl	800db64 <iprintf>
    p->ref = 1;
 8006314:	2301      	movs	r3, #1
 8006316:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8006318:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800631a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800641c <pbuf_alloc+0x1a0>
 800631e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8006438 <pbuf_alloc+0x1bc>
 8006322:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006424 <pbuf_alloc+0x1a8>
    rem_len = length - p->len;
 8006326:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8006328:	46a3      	mov	fp, r4
 800632a:	2e00      	cmp	r6, #0
 800632c:	dc04      	bgt.n	8006338 <pbuf_alloc+0xbc>
  p->ref = 1;
 800632e:	2301      	movs	r3, #1
 8006330:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	7363      	strb	r3, [r4, #13]
  return p;
 8006336:	e7ca      	b.n	80062ce <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006338:	2008      	movs	r0, #8
 800633a:	f7ff fdbd 	bl	8005eb8 <memp_malloc>
      if (q == NULL) {
 800633e:	4605      	mov	r5, r0
 8006340:	b938      	cbnz	r0, 8006352 <pbuf_alloc+0xd6>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <pbuf_alloc+0x1ac>)
 8006344:	2201      	movs	r2, #1
        pbuf_free(p);
 8006346:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006348:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 800634a:	f7ff ff35 	bl	80061b8 <pbuf_free>
    return NULL;
 800634e:	2400      	movs	r4, #0
 8006350:	e7bd      	b.n	80062ce <pbuf_alloc+0x52>
      q->type = type;
 8006352:	2303      	movs	r3, #3
 8006354:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800635a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800635c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006360:	429e      	cmp	r6, r3
      r->next = q;
 8006362:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006366:	d106      	bne.n	8006376 <pbuf_alloc+0xfa>
 8006368:	4643      	mov	r3, r8
 800636a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800636e:	4651      	mov	r1, sl
 8006370:	4648      	mov	r0, r9
 8006372:	f007 fbf7 	bl	800db64 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006376:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006378:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800637c:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800637e:	bf28      	it	cs
 8006380:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006384:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006386:	f105 0310 	add.w	r3, r5, #16
 800638a:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800638c:	079b      	lsls	r3, r3, #30
 800638e:	d006      	beq.n	800639e <pbuf_alloc+0x122>
 8006390:	4643      	mov	r3, r8
 8006392:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006396:	4926      	ldr	r1, [pc, #152]	; (8006430 <pbuf_alloc+0x1b4>)
 8006398:	4648      	mov	r0, r9
 800639a:	f007 fbe3 	bl	800db64 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800639e:	8962      	ldrh	r2, [r4, #10]
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	429f      	cmp	r7, r3
 80063a6:	d206      	bcs.n	80063b6 <pbuf_alloc+0x13a>
 80063a8:	4643      	mov	r3, r8
 80063aa:	f240 1255 	movw	r2, #341	; 0x155
 80063ae:	491f      	ldr	r1, [pc, #124]	; (800642c <pbuf_alloc+0x1b0>)
 80063b0:	4648      	mov	r0, r9
 80063b2:	f007 fbd7 	bl	800db64 <iprintf>
      q->ref = 1;
 80063b6:	2301      	movs	r3, #1
 80063b8:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 80063ba:	896b      	ldrh	r3, [r5, #10]
 80063bc:	46ab      	mov	fp, r5
 80063be:	1af6      	subs	r6, r6, r3
 80063c0:	e7b3      	b.n	800632a <pbuf_alloc+0xae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80063c2:	f105 0013 	add.w	r0, r5, #19
 80063c6:	1cf3      	adds	r3, r6, #3
 80063c8:	f023 0303 	bic.w	r3, r3, #3
 80063cc:	f020 0003 	bic.w	r0, r0, #3
 80063d0:	4418      	add	r0, r3
 80063d2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80063d4:	4298      	cmp	r0, r3
 80063d6:	d3ba      	bcc.n	800634e <pbuf_alloc+0xd2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80063d8:	f7ff fc8c 	bl	8005cf4 <mem_malloc>
    if (p == NULL) {
 80063dc:	4604      	mov	r4, r0
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0b5      	beq.n	800634e <pbuf_alloc+0xd2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80063e2:	4405      	add	r5, r0
 80063e4:	3513      	adds	r5, #19
    p->next = NULL;
 80063e6:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80063e8:	f025 0503 	bic.w	r5, r5, #3
 80063ec:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 80063ee:	8106      	strh	r6, [r0, #8]
 80063f0:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80063f2:	6003      	str	r3, [r0, #0]
    p->type = type;
 80063f4:	7303      	strb	r3, [r0, #12]
 80063f6:	e79a      	b.n	800632e <pbuf_alloc+0xb2>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80063f8:	2007      	movs	r0, #7
 80063fa:	f7ff fd5d 	bl	8005eb8 <memp_malloc>
    if (p == NULL) {
 80063fe:	4604      	mov	r4, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d0a4      	beq.n	800634e <pbuf_alloc+0xd2>
    p->payload = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006408:	8106      	strh	r6, [r0, #8]
 800640a:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800640c:	6003      	str	r3, [r0, #0]
    p->type = type;
 800640e:	7307      	strb	r7, [r0, #12]
    break;
 8006410:	e78d      	b.n	800632e <pbuf_alloc+0xb2>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006412:	4b02      	ldr	r3, [pc, #8]	; (800641c <pbuf_alloc+0x1a0>)
 8006414:	4907      	ldr	r1, [pc, #28]	; (8006434 <pbuf_alloc+0x1b8>)
 8006416:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800641a:	e748      	b.n	80062ae <pbuf_alloc+0x32>
 800641c:	0800fa65 	.word	0x0800fa65
 8006420:	0800f800 	.word	0x0800f800
 8006424:	0800f008 	.word	0x0800f008
 8006428:	2000504c 	.word	0x2000504c
 800642c:	0800f81b 	.word	0x0800f81b
 8006430:	0800f860 	.word	0x0800f860
 8006434:	0800f88d 	.word	0x0800f88d
 8006438:	0800f84c 	.word	0x0800f84c

0800643c <pbuf_realloc>:
{
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006440:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006442:	4604      	mov	r4, r0
 8006444:	b930      	cbnz	r0, 8006454 <pbuf_realloc+0x18>
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <pbuf_realloc+0xc4>)
 8006448:	492e      	ldr	r1, [pc, #184]	; (8006504 <pbuf_realloc+0xc8>)
 800644a:	482f      	ldr	r0, [pc, #188]	; (8006508 <pbuf_realloc+0xcc>)
 800644c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006450:	f007 fb88 	bl	800db64 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006454:	7b23      	ldrb	r3, [r4, #12]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d906      	bls.n	8006468 <pbuf_realloc+0x2c>
 800645a:	4b29      	ldr	r3, [pc, #164]	; (8006500 <pbuf_realloc+0xc4>)
 800645c:	492b      	ldr	r1, [pc, #172]	; (800650c <pbuf_realloc+0xd0>)
 800645e:	482a      	ldr	r0, [pc, #168]	; (8006508 <pbuf_realloc+0xcc>)
 8006460:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006464:	f007 fb7e 	bl	800db64 <iprintf>
  if (new_len >= p->tot_len) {
 8006468:	8926      	ldrh	r6, [r4, #8]
 800646a:	42ae      	cmp	r6, r5
 800646c:	d945      	bls.n	80064fa <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800646e:	4f24      	ldr	r7, [pc, #144]	; (8006500 <pbuf_realloc+0xc4>)
 8006470:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006518 <pbuf_realloc+0xdc>
 8006474:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006508 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8006478:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800647a:	8963      	ldrh	r3, [r4, #10]
 800647c:	42ab      	cmp	r3, r5
 800647e:	d319      	bcc.n	80064b4 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006480:	7b22      	ldrb	r2, [r4, #12]
 8006482:	2a00      	cmp	r2, #0
 8006484:	d131      	bne.n	80064ea <pbuf_realloc+0xae>
 8006486:	42ab      	cmp	r3, r5
 8006488:	d02f      	beq.n	80064ea <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800648a:	7b63      	ldrb	r3, [r4, #13]
 800648c:	079b      	lsls	r3, r3, #30
 800648e:	d42c      	bmi.n	80064ea <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006490:	6861      	ldr	r1, [r4, #4]
 8006492:	1b09      	subs	r1, r1, r4
 8006494:	4429      	add	r1, r5
 8006496:	4620      	mov	r0, r4
 8006498:	b289      	uxth	r1, r1
 800649a:	f7ff fbb3 	bl	8005c04 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800649e:	4604      	mov	r4, r0
 80064a0:	bb18      	cbnz	r0, 80064ea <pbuf_realloc+0xae>
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <pbuf_realloc+0xc4>)
 80064a4:	491a      	ldr	r1, [pc, #104]	; (8006510 <pbuf_realloc+0xd4>)
 80064a6:	4818      	ldr	r0, [pc, #96]	; (8006508 <pbuf_realloc+0xcc>)
 80064a8:	f240 221d 	movw	r2, #541	; 0x21d
 80064ac:	f007 fb5a 	bl	800db64 <iprintf>
  q->len = rem_len;
 80064b0:	8164      	strh	r4, [r4, #10]
 80064b2:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80064b4:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80064b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80064ba:	429e      	cmp	r6, r3
    rem_len -= q->len;
 80064bc:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80064be:	dd06      	ble.n	80064ce <pbuf_realloc+0x92>
 80064c0:	463b      	mov	r3, r7
 80064c2:	f240 220b 	movw	r2, #523	; 0x20b
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	f007 fb4b 	bl	800db64 <iprintf>
    q->tot_len += (u16_t)grow;
 80064ce:	8923      	ldrh	r3, [r4, #8]
 80064d0:	4433      	add	r3, r6
 80064d2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80064d4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d1cf      	bne.n	800647a <pbuf_realloc+0x3e>
 80064da:	463b      	mov	r3, r7
 80064dc:	f240 220f 	movw	r2, #527	; 0x20f
 80064e0:	490c      	ldr	r1, [pc, #48]	; (8006514 <pbuf_realloc+0xd8>)
 80064e2:	4640      	mov	r0, r8
 80064e4:	f007 fb3e 	bl	800db64 <iprintf>
 80064e8:	e7c7      	b.n	800647a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80064ea:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80064ec:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80064ee:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80064f0:	b108      	cbz	r0, 80064f6 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80064f2:	f7ff fe61 	bl	80061b8 <pbuf_free>
  q->next = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	6023      	str	r3, [r4, #0]
}
 80064fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fe:	bf00      	nop
 8006500:	0800fa65 	.word	0x0800fa65
 8006504:	0800fac1 	.word	0x0800fac1
 8006508:	0800f008 	.word	0x0800f008
 800650c:	0800fad9 	.word	0x0800fad9
 8006510:	0800fb1d 	.word	0x0800fb1d
 8006514:	0800fb05 	.word	0x0800fb05
 8006518:	0800faf4 	.word	0x0800faf4

0800651c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800651c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800651e:	2200      	movs	r2, #0
 8006520:	b290      	uxth	r0, r2
 8006522:	3201      	adds	r2, #1
 8006524:	b903      	cbnz	r3, 8006528 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8006526:	4770      	bx	lr
    p = p->next;
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	e7f9      	b.n	8006520 <pbuf_clen+0x4>

0800652c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800652c:	b158      	cbz	r0, 8006546 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800652e:	89c3      	ldrh	r3, [r0, #14]
 8006530:	3301      	adds	r3, #1
 8006532:	b29b      	uxth	r3, r3
 8006534:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006536:	b933      	cbnz	r3, 8006546 <pbuf_ref+0x1a>
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <pbuf_ref+0x1c>)
 800653a:	4904      	ldr	r1, [pc, #16]	; (800654c <pbuf_ref+0x20>)
 800653c:	4804      	ldr	r0, [pc, #16]	; (8006550 <pbuf_ref+0x24>)
 800653e:	f240 3239 	movw	r2, #825	; 0x339
 8006542:	f007 bb0f 	b.w	800db64 <iprintf>
  }
}
 8006546:	4770      	bx	lr
 8006548:	0800fa65 	.word	0x0800fa65
 800654c:	0800fb39 	.word	0x0800fb39
 8006550:	0800f008 	.word	0x0800f008

08006554 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006558:	4604      	mov	r4, r0
 800655a:	b100      	cbz	r0, 800655e <pbuf_cat+0xa>
 800655c:	b961      	cbnz	r1, 8006578 <pbuf_cat+0x24>
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <pbuf_cat+0x60>)
 8006560:	4915      	ldr	r1, [pc, #84]	; (80065b8 <pbuf_cat+0x64>)
 8006562:	4816      	ldr	r0, [pc, #88]	; (80065bc <pbuf_cat+0x68>)
 8006564:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800656c:	f007 bafa 	b.w	800db64 <iprintf>
    p->tot_len += t->tot_len;
 8006570:	8929      	ldrh	r1, [r5, #8]
 8006572:	440b      	add	r3, r1
 8006574:	8123      	strh	r3, [r4, #8]
 8006576:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	8923      	ldrh	r3, [r4, #8]
 800657c:	2a00      	cmp	r2, #0
 800657e:	d1f7      	bne.n	8006570 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006580:	8962      	ldrh	r2, [r4, #10]
 8006582:	429a      	cmp	r2, r3
 8006584:	d006      	beq.n	8006594 <pbuf_cat+0x40>
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <pbuf_cat+0x60>)
 8006588:	490d      	ldr	r1, [pc, #52]	; (80065c0 <pbuf_cat+0x6c>)
 800658a:	480c      	ldr	r0, [pc, #48]	; (80065bc <pbuf_cat+0x68>)
 800658c:	f240 3255 	movw	r2, #853	; 0x355
 8006590:	f007 fae8 	bl	800db64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	b133      	cbz	r3, 80065a6 <pbuf_cat+0x52>
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <pbuf_cat+0x60>)
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <pbuf_cat+0x70>)
 800659c:	4807      	ldr	r0, [pc, #28]	; (80065bc <pbuf_cat+0x68>)
 800659e:	f240 3256 	movw	r2, #854	; 0x356
 80065a2:	f007 fadf 	bl	800db64 <iprintf>
  p->tot_len += t->tot_len;
 80065a6:	892a      	ldrh	r2, [r5, #8]
 80065a8:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80065aa:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80065ac:	4413      	add	r3, r2
 80065ae:	8123      	strh	r3, [r4, #8]
}
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	bf00      	nop
 80065b4:	0800fa65 	.word	0x0800fa65
 80065b8:	0800f8cc 	.word	0x0800f8cc
 80065bc:	0800f008 	.word	0x0800f008
 80065c0:	0800f901 	.word	0x0800f901
 80065c4:	0800f92e 	.word	0x0800f92e

080065c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80065c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80065ce:	4605      	mov	r5, r0
 80065d0:	b120      	cbz	r0, 80065dc <pbuf_copy+0x14>
 80065d2:	b119      	cbz	r1, 80065dc <pbuf_copy+0x14>
 80065d4:	8902      	ldrh	r2, [r0, #8]
 80065d6:	890b      	ldrh	r3, [r1, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d20a      	bcs.n	80065f2 <pbuf_copy+0x2a>
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <pbuf_copy+0xf0>)
 80065de:	4937      	ldr	r1, [pc, #220]	; (80066bc <pbuf_copy+0xf4>)
 80065e0:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80065e4:	4836      	ldr	r0, [pc, #216]	; (80066c0 <pbuf_copy+0xf8>)
 80065e6:	f007 fabd 	bl	800db64 <iprintf>
 80065ea:	f06f 000f 	mvn.w	r0, #15
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80065ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 80065f2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80065f6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80066b8 <pbuf_copy+0xf0>
 80065fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80066d0 <pbuf_copy+0x108>
 80065fe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80066c0 <pbuf_copy+0xf8>
  u16_t offset_to=0, offset_from=0, len;
 8006602:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006604:	896e      	ldrh	r6, [r5, #10]
 8006606:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006608:	6868      	ldr	r0, [r5, #4]
 800660a:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800660c:	1bf6      	subs	r6, r6, r7
 800660e:	eba3 030b 	sub.w	r3, r3, fp
 8006612:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8006614:	bfac      	ite	ge
 8006616:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8006618:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800661a:	4632      	mov	r2, r6
 800661c:	4459      	add	r1, fp
 800661e:	4438      	add	r0, r7
 8006620:	f007 f9e5 	bl	800d9ee <memcpy>
    offset_to += len;
 8006624:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006626:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8006628:	b2bf      	uxth	r7, r7
    offset_from += len;
 800662a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800662c:	42bb      	cmp	r3, r7
    offset_from += len;
 800662e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006632:	d206      	bcs.n	8006642 <pbuf_copy+0x7a>
 8006634:	4643      	mov	r3, r8
 8006636:	f240 32cd 	movw	r2, #973	; 0x3cd
 800663a:	4651      	mov	r1, sl
 800663c:	4648      	mov	r0, r9
 800663e:	f007 fa91 	bl	800db64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006642:	8963      	ldrh	r3, [r4, #10]
 8006644:	455b      	cmp	r3, fp
 8006646:	d206      	bcs.n	8006656 <pbuf_copy+0x8e>
 8006648:	4643      	mov	r3, r8
 800664a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800664e:	491d      	ldr	r1, [pc, #116]	; (80066c4 <pbuf_copy+0xfc>)
 8006650:	4648      	mov	r0, r9
 8006652:	f007 fa87 	bl	800db64 <iprintf>
    if (offset_from >= p_from->len) {
 8006656:	8963      	ldrh	r3, [r4, #10]
 8006658:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800665a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800665c:	bf9c      	itt	ls
 800665e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8006660:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8006664:	42bb      	cmp	r3, r7
 8006666:	d108      	bne.n	800667a <pbuf_copy+0xb2>
      p_to = p_to->next;
 8006668:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800666a:	b92d      	cbnz	r5, 8006678 <pbuf_copy+0xb0>
 800666c:	b314      	cbz	r4, 80066b4 <pbuf_copy+0xec>
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <pbuf_copy+0xf0>)
 8006670:	4915      	ldr	r1, [pc, #84]	; (80066c8 <pbuf_copy+0x100>)
 8006672:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006676:	e7b5      	b.n	80065e4 <pbuf_copy+0x1c>
      offset_to = 0;
 8006678:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800667a:	b17c      	cbz	r4, 800669c <pbuf_copy+0xd4>
 800667c:	8962      	ldrh	r2, [r4, #10]
 800667e:	8923      	ldrh	r3, [r4, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	d10b      	bne.n	800669c <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	b14b      	cbz	r3, 800669c <pbuf_copy+0xd4>
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <pbuf_copy+0xf0>)
 800668a:	f240 32de 	movw	r2, #990	; 0x3de
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800668e:	490f      	ldr	r1, [pc, #60]	; (80066cc <pbuf_copy+0x104>)
 8006690:	480b      	ldr	r0, [pc, #44]	; (80066c0 <pbuf_copy+0xf8>)
 8006692:	f007 fa67 	bl	800db64 <iprintf>
 8006696:	f06f 0005 	mvn.w	r0, #5
 800669a:	e7a8      	b.n	80065ee <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800669c:	896a      	ldrh	r2, [r5, #10]
 800669e:	892b      	ldrh	r3, [r5, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d105      	bne.n	80066b0 <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b11b      	cbz	r3, 80066b0 <pbuf_copy+0xe8>
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <pbuf_copy+0xf0>)
 80066aa:	f240 32e3 	movw	r2, #995	; 0x3e3
 80066ae:	e7ee      	b.n	800668e <pbuf_copy+0xc6>
  } while (p_from);
 80066b0:	2c00      	cmp	r4, #0
 80066b2:	d1a7      	bne.n	8006604 <pbuf_copy+0x3c>
  return ERR_OK;
 80066b4:	4620      	mov	r0, r4
 80066b6:	e79a      	b.n	80065ee <pbuf_copy+0x26>
 80066b8:	0800fa65 	.word	0x0800fa65
 80066bc:	0800f93e 	.word	0x0800f93e
 80066c0:	0800f008 	.word	0x0800f008
 80066c4:	0800f985 	.word	0x0800f985
 80066c8:	0800f9a0 	.word	0x0800f9a0
 80066cc:	0800f9ad 	.word	0x0800f9ad
 80066d0:	0800f96e 	.word	0x0800f96e

080066d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80066d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d8:	460f      	mov	r7, r1
 80066da:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80066dc:	4606      	mov	r6, r0
 80066de:	b950      	cbnz	r0, 80066f6 <pbuf_copy_partial+0x22>
 80066e0:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <pbuf_copy_partial+0x7c>)
 80066e2:	491c      	ldr	r1, [pc, #112]	; (8006754 <pbuf_copy_partial+0x80>)
 80066e4:	481c      	ldr	r0, [pc, #112]	; (8006758 <pbuf_copy_partial+0x84>)
 80066e6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80066ea:	f007 fa3b 	bl	800db64 <iprintf>
 80066ee:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80066f0:	4628      	mov	r0, r5
 80066f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80066f6:	bb41      	cbnz	r1, 800674a <pbuf_copy_partial+0x76>
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <pbuf_copy_partial+0x7c>)
 80066fa:	4918      	ldr	r1, [pc, #96]	; (800675c <pbuf_copy_partial+0x88>)
 80066fc:	4816      	ldr	r0, [pc, #88]	; (8006758 <pbuf_copy_partial+0x84>)
 80066fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006702:	f007 fa2f 	bl	800db64 <iprintf>
 8006706:	463d      	mov	r5, r7
 8006708:	e7f2      	b.n	80066f0 <pbuf_copy_partial+0x1c>
 800670a:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 800670c:	b153      	cbz	r3, 8006724 <pbuf_copy_partial+0x50>
 800670e:	4293      	cmp	r3, r2
 8006710:	d308      	bcc.n	8006724 <pbuf_copy_partial+0x50>
      offset -= p->len;
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006716:	6836      	ldr	r6, [r6, #0]
 8006718:	f1b8 0f00 	cmp.w	r8, #0
 800671c:	d0e8      	beq.n	80066f0 <pbuf_copy_partial+0x1c>
 800671e:	2e00      	cmp	r6, #0
 8006720:	d1f3      	bne.n	800670a <pbuf_copy_partial+0x36>
 8006722:	e7e5      	b.n	80066f0 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	b294      	uxth	r4, r2
 8006728:	4544      	cmp	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800672a:	6871      	ldr	r1, [r6, #4]
 800672c:	bf28      	it	cs
 800672e:	4644      	movcs	r4, r8
 8006730:	4622      	mov	r2, r4
 8006732:	4419      	add	r1, r3
 8006734:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8006736:	4425      	add	r5, r4
      len -= buf_copy_len;
 8006738:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800673c:	f007 f957 	bl	800d9ee <memcpy>
      copied_total += buf_copy_len;
 8006740:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8006742:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	e7e5      	b.n	8006716 <pbuf_copy_partial+0x42>
  left = 0;
 800674a:	2500      	movs	r5, #0
 800674c:	e7e4      	b.n	8006718 <pbuf_copy_partial+0x44>
 800674e:	bf00      	nop
 8006750:	0800fa65 	.word	0x0800fa65
 8006754:	0800f9d7 	.word	0x0800f9d7
 8006758:	0800f008 	.word	0x0800f008
 800675c:	0800f9f6 	.word	0x0800f9f6

08006760 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006760:	4911      	ldr	r1, [pc, #68]	; (80067a8 <tcp_new_port+0x48>)
 8006762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006764:	880a      	ldrh	r2, [r1, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006766:	4f11      	ldr	r7, [pc, #68]	; (80067ac <tcp_new_port+0x4c>)
{
 8006768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800676c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006770:	42b2      	cmp	r2, r6
 8006772:	bf1a      	itte	ne
 8006774:	1c50      	addne	r0, r2, #1
 8006776:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006778:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 800677c:	2400      	movs	r4, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800677e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8006782:	6815      	ldr	r5, [r2, #0]
 8006784:	b925      	cbnz	r5, 8006790 <tcp_new_port+0x30>
 8006786:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006788:	2c04      	cmp	r4, #4
 800678a:	d1f8      	bne.n	800677e <tcp_new_port+0x1e>
 800678c:	8008      	strh	r0, [r1, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800678e:	e008      	b.n	80067a2 <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 8006790:	8aea      	ldrh	r2, [r5, #22]
 8006792:	4282      	cmp	r2, r0
 8006794:	d106      	bne.n	80067a4 <tcp_new_port+0x44>
 8006796:	3b01      	subs	r3, #1
 8006798:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e8      	bne.n	8006770 <tcp_new_port+0x10>
 800679e:	8008      	strh	r0, [r1, #0]
          return 0;
 80067a0:	4618      	mov	r0, r3
}
 80067a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80067a4:	68ed      	ldr	r5, [r5, #12]
 80067a6:	e7ed      	b.n	8006784 <tcp_new_port+0x24>
 80067a8:	200005b0 	.word	0x200005b0
 80067ac:	0800fc50 	.word	0x0800fc50

080067b0 <tcp_close_shutdown_fin>:
{
 80067b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80067b2:	4604      	mov	r4, r0
 80067b4:	b930      	cbnz	r0, 80067c4 <tcp_close_shutdown_fin+0x14>
 80067b6:	4b13      	ldr	r3, [pc, #76]	; (8006804 <tcp_close_shutdown_fin+0x54>)
 80067b8:	4913      	ldr	r1, [pc, #76]	; (8006808 <tcp_close_shutdown_fin+0x58>)
 80067ba:	4814      	ldr	r0, [pc, #80]	; (800680c <tcp_close_shutdown_fin+0x5c>)
 80067bc:	f240 124d 	movw	r2, #333	; 0x14d
 80067c0:	f007 f9d0 	bl	800db64 <iprintf>
  switch (pcb->state) {
 80067c4:	7d23      	ldrb	r3, [r4, #20]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d003      	beq.n	80067d2 <tcp_close_shutdown_fin+0x22>
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	d00c      	beq.n	80067e8 <tcp_close_shutdown_fin+0x38>
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d108      	bne.n	80067e4 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 80067d2:	4620      	mov	r0, r4
 80067d4:	f002 fd5a 	bl	800928c <tcp_send_fin>
    if (err == ERR_OK) {
 80067d8:	b960      	cbnz	r0, 80067f4 <tcp_close_shutdown_fin+0x44>
      pcb->state = FIN_WAIT_1;
 80067da:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80067dc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80067de:	4620      	mov	r0, r4
 80067e0:	f002 fdac 	bl	800933c <tcp_output>
    return ERR_OK;
 80067e4:	2000      	movs	r0, #0
}
 80067e6:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80067e8:	4620      	mov	r0, r4
 80067ea:	f002 fd4f 	bl	800928c <tcp_send_fin>
    if (err == ERR_OK) {
 80067ee:	b908      	cbnz	r0, 80067f4 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 80067f0:	2309      	movs	r3, #9
 80067f2:	e7f3      	b.n	80067dc <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d1f6      	bne.n	80067e6 <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 80067f8:	7ea3      	ldrb	r3, [r4, #26]
 80067fa:	f043 0308 	orr.w	r3, r3, #8
 80067fe:	76a3      	strb	r3, [r4, #26]
 8006800:	e7f0      	b.n	80067e4 <tcp_close_shutdown_fin+0x34>
 8006802:	bf00      	nop
 8006804:	0800fbca 	.word	0x0800fbca
 8006808:	0800fbf9 	.word	0x0800fbf9
 800680c:	0800f008 	.word	0x0800f008

08006810 <tcp_init>:
}
 8006810:	4770      	bx	lr
	...

08006814 <tcp_bind>:
{
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8006816:	4d1e      	ldr	r5, [pc, #120]	; (8006890 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006818:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800681a:	2900      	cmp	r1, #0
 800681c:	bf18      	it	ne
 800681e:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006820:	b140      	cbz	r0, 8006834 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006822:	7d03      	ldrb	r3, [r0, #20]
 8006824:	b14b      	cbz	r3, 800683a <tcp_bind+0x26>
 8006826:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <tcp_bind+0x80>)
 8006828:	491b      	ldr	r1, [pc, #108]	; (8006898 <tcp_bind+0x84>)
 800682a:	481c      	ldr	r0, [pc, #112]	; (800689c <tcp_bind+0x88>)
 800682c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006830:	f007 f998 	bl	800db64 <iprintf>
    return ERR_VAL;
 8006834:	f06f 0005 	mvn.w	r0, #5
 8006838:	e01a      	b.n	8006870 <tcp_bind+0x5c>
  if (port == 0) {
 800683a:	b932      	cbnz	r2, 800684a <tcp_bind+0x36>
    port = tcp_new_port();
 800683c:	f7ff ff90 	bl	8006760 <tcp_new_port>
    if (port == 0) {
 8006840:	4602      	mov	r2, r0
 8006842:	b950      	cbnz	r0, 800685a <tcp_bind+0x46>
      return ERR_BUF;
 8006844:	f06f 0001 	mvn.w	r0, #1
 8006848:	e012      	b.n	8006870 <tcp_bind+0x5c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800684a:	4f15      	ldr	r7, [pc, #84]	; (80068a0 <tcp_bind+0x8c>)
 800684c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	b970      	cbnz	r0, 8006872 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8006854:	3301      	adds	r3, #1
 8006856:	2b04      	cmp	r3, #4
 8006858:	d1f8      	bne.n	800684c <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	b103      	cbz	r3, 8006860 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800685e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <tcp_bind+0x90>)
  pcb->local_port = port;
 8006862:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	60e2      	str	r2, [r4, #12]
 8006868:	601c      	str	r4, [r3, #0]
 800686a:	f003 f87f 	bl	800996c <tcp_timer_needed>
  return ERR_OK;
 800686e:	2000      	movs	r0, #0
}
 8006870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8006872:	8ac1      	ldrh	r1, [r0, #22]
 8006874:	4291      	cmp	r1, r2
 8006876:	d105      	bne.n	8006884 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006878:	6806      	ldr	r6, [r0, #0]
 800687a:	b12e      	cbz	r6, 8006888 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800687c:	6829      	ldr	r1, [r5, #0]
 800687e:	b119      	cbz	r1, 8006888 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006880:	428e      	cmp	r6, r1
 8006882:	d001      	beq.n	8006888 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006884:	68c0      	ldr	r0, [r0, #12]
 8006886:	e7e4      	b.n	8006852 <tcp_bind+0x3e>
              return ERR_USE;
 8006888:	f06f 0007 	mvn.w	r0, #7
 800688c:	e7f0      	b.n	8006870 <tcp_bind+0x5c>
 800688e:	bf00      	nop
 8006890:	080109b0 	.word	0x080109b0
 8006894:	0800fbca 	.word	0x0800fbca
 8006898:	0800fb89 	.word	0x0800fb89
 800689c:	0800f008 	.word	0x0800f008
 80068a0:	0800fc50 	.word	0x0800fc50
 80068a4:	20005060 	.word	0x20005060

080068a8 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80068a8:	7d03      	ldrb	r3, [r0, #20]
{
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	4605      	mov	r5, r0
 80068ae:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80068b0:	b16b      	cbz	r3, 80068ce <tcp_listen_with_backlog_and_err+0x26>
 80068b2:	4b23      	ldr	r3, [pc, #140]	; (8006940 <tcp_listen_with_backlog_and_err+0x98>)
 80068b4:	4923      	ldr	r1, [pc, #140]	; (8006944 <tcp_listen_with_backlog_and_err+0x9c>)
 80068b6:	4824      	ldr	r0, [pc, #144]	; (8006948 <tcp_listen_with_backlog_and_err+0xa0>)
 80068b8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80068bc:	f007 f952 	bl	800db64 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 80068c0:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80068c2:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 80068c6:	b106      	cbz	r6, 80068ca <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 80068c8:	7033      	strb	r3, [r6, #0]
}
 80068ca:	4620      	mov	r0, r4
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80068ce:	2002      	movs	r0, #2
 80068d0:	f7ff faf2 	bl	8005eb8 <memp_malloc>
  if (lpcb == NULL) {
 80068d4:	4604      	mov	r4, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d02f      	beq.n	800693a <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 80068da:	692b      	ldr	r3, [r5, #16]
 80068dc:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 80068de:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80068e0:	8aeb      	ldrh	r3, [r5, #22]
 80068e2:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80068e4:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80068e6:	7d6a      	ldrb	r2, [r5, #21]
 80068e8:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80068ea:	7a2a      	ldrb	r2, [r5, #8]
 80068ec:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80068ee:	7aaa      	ldrb	r2, [r5, #10]
 80068f0:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80068f2:	7a6a      	ldrb	r2, [r5, #9]
 80068f4:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80068f6:	682a      	ldr	r2, [r5, #0]
 80068f8:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80068fa:	b13b      	cbz	r3, 800690c <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <tcp_listen_with_backlog_and_err+0xa4>)
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	42ab      	cmp	r3, r5
 8006902:	d112      	bne.n	800692a <tcp_listen_with_backlog_and_err+0x82>
 8006904:	68eb      	ldr	r3, [r5, #12]
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 800690c:	4629      	mov	r1, r5
 800690e:	2001      	movs	r0, #1
 8006910:	f7ff faee 	bl	8005ef0 <memp_free>
  lpcb->accept = tcp_accept_null;
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <tcp_listen_with_backlog_and_err+0xa8>)
 8006916:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006918:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <tcp_listen_with_backlog_and_err+0xac>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	60e2      	str	r2, [r4, #12]
 800691e:	601c      	str	r4, [r3, #0]
 8006920:	f003 f824 	bl	800996c <tcp_timer_needed>
  res = ERR_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e7ce      	b.n	80068c6 <tcp_listen_with_backlog_and_err+0x1e>
 8006928:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ec      	beq.n	8006908 <tcp_listen_with_backlog_and_err+0x60>
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	42aa      	cmp	r2, r5
 8006932:	d1f9      	bne.n	8006928 <tcp_listen_with_backlog_and_err+0x80>
 8006934:	68ea      	ldr	r2, [r5, #12]
 8006936:	60da      	str	r2, [r3, #12]
 8006938:	e7e6      	b.n	8006908 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	e7c2      	b.n	80068c6 <tcp_listen_with_backlog_and_err+0x1e>
 8006940:	0800fbca 	.word	0x0800fbca
 8006944:	0800fc2b 	.word	0x0800fc2b
 8006948:	0800f008 	.word	0x0800f008
 800694c:	20005060 	.word	0x20005060
 8006950:	08007383 	.word	0x08007383
 8006954:	2000505c 	.word	0x2000505c

08006958 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006958:	2200      	movs	r2, #0
 800695a:	f7ff bfa5 	b.w	80068a8 <tcp_listen_with_backlog_and_err>
	...

08006960 <tcp_update_rcv_ann_wnd>:
{
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006964:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006966:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006968:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800696a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800696c:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800696e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006972:	4428      	add	r0, r5
 8006974:	bf94      	ite	ls
 8006976:	1a82      	subls	r2, r0, r2
 8006978:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 800697c:	2a00      	cmp	r2, #0
 800697e:	db01      	blt.n	8006984 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006980:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8006982:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006984:	1aea      	subs	r2, r5, r3
 8006986:	2a00      	cmp	r2, #0
 8006988:	dd02      	ble.n	8006990 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800698a:	2000      	movs	r0, #0
 800698c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800698e:	e7f8      	b.n	8006982 <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006990:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006992:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006996:	d306      	bcc.n	80069a6 <tcp_update_rcv_ann_wnd+0x46>
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <tcp_update_rcv_ann_wnd+0x4c>)
 800699a:	4905      	ldr	r1, [pc, #20]	; (80069b0 <tcp_update_rcv_ann_wnd+0x50>)
 800699c:	4805      	ldr	r0, [pc, #20]	; (80069b4 <tcp_update_rcv_ann_wnd+0x54>)
 800699e:	f44f 7242 	mov.w	r2, #776	; 0x308
 80069a2:	f007 f8df 	bl	800db64 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80069a6:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7ea      	b.n	8006982 <tcp_update_rcv_ann_wnd+0x22>
 80069ac:	0800fbca 	.word	0x0800fbca
 80069b0:	0800feb4 	.word	0x0800feb4
 80069b4:	0800f008 	.word	0x0800f008

080069b8 <tcp_recved>:
{
 80069b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80069ba:	7d03      	ldrb	r3, [r0, #20]
 80069bc:	2b01      	cmp	r3, #1
{
 80069be:	4604      	mov	r4, r0
 80069c0:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80069c2:	d106      	bne.n	80069d2 <tcp_recved+0x1a>
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <tcp_recved+0x6c>)
 80069c6:	4918      	ldr	r1, [pc, #96]	; (8006a28 <tcp_recved+0x70>)
 80069c8:	4818      	ldr	r0, [pc, #96]	; (8006a2c <tcp_recved+0x74>)
 80069ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069ce:	f007 f8c9 	bl	800db64 <iprintf>
  pcb->rcv_wnd += len;
 80069d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80069d4:	4429      	add	r1, r5
 80069d6:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80069d8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80069dc:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80069de:	d911      	bls.n	8006a04 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80069e0:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80069e4:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ffba 	bl	8006960 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80069ec:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80069f0:	db17      	blt.n	8006a22 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 80069f2:	7ea3      	ldrb	r3, [r4, #26]
 80069f4:	f043 0302 	orr.w	r3, r3, #2
 80069f8:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80069fa:	4620      	mov	r0, r4
}
 80069fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8006a00:	f002 bc9c 	b.w	800933c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d1ee      	bne.n	80069e6 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006a08:	7d23      	ldrb	r3, [r4, #20]
 8006a0a:	2b07      	cmp	r3, #7
 8006a0c:	d0e8      	beq.n	80069e0 <tcp_recved+0x28>
 8006a0e:	2b09      	cmp	r3, #9
 8006a10:	d0e6      	beq.n	80069e0 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006a12:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <tcp_recved+0x6c>)
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <tcp_recved+0x78>)
 8006a16:	4805      	ldr	r0, [pc, #20]	; (8006a2c <tcp_recved+0x74>)
 8006a18:	f240 322d 	movw	r2, #813	; 0x32d
 8006a1c:	f007 f8a2 	bl	800db64 <iprintf>
 8006a20:	e7e1      	b.n	80069e6 <tcp_recved+0x2e>
}
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	0800fbca 	.word	0x0800fbca
 8006a28:	0800fcf4 	.word	0x0800fcf4
 8006a2c:	0800f008 	.word	0x0800f008
 8006a30:	0800fd1a 	.word	0x0800fd1a

08006a34 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a34:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8006a36:	4604      	mov	r4, r0
 8006a38:	b148      	cbz	r0, 8006a4e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8006a3a:	6840      	ldr	r0, [r0, #4]
 8006a3c:	b108      	cbz	r0, 8006a42 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006a3e:	f7ff fbbb 	bl	80061b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006a42:	4621      	mov	r1, r4
 8006a44:	2003      	movs	r0, #3
  }
}
 8006a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8006a4a:	f7ff ba51 	b.w	8005ef0 <memp_free>
}
 8006a4e:	bd10      	pop	{r4, pc}

08006a50 <tcp_segs_free>:
{
 8006a50:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8006a52:	b900      	cbnz	r0, 8006a56 <tcp_segs_free+0x6>
}
 8006a54:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8006a56:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006a58:	f7ff ffec 	bl	8006a34 <tcp_seg_free>
    seg = next;
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	e7f8      	b.n	8006a52 <tcp_segs_free+0x2>

08006a60 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8006a60:	7541      	strb	r1, [r0, #21]
}
 8006a62:	4770      	bx	lr

08006a64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006a68:	2003      	movs	r0, #3
 8006a6a:	f7ff fa25 	bl	8005eb8 <memp_malloc>
  if (cseg == NULL) {
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b160      	cbz	r0, 8006a8c <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006a72:	4620      	mov	r0, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f104 0210 	add.w	r2, r4, #16
 8006a7a:	f850 1b04 	ldr.w	r1, [r0], #4
 8006a7e:	f843 1b04 	str.w	r1, [r3], #4
 8006a82:	4290      	cmp	r0, r2
 8006a84:	d1f9      	bne.n	8006a7a <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8006a86:	6868      	ldr	r0, [r5, #4]
 8006a88:	f7ff fd50 	bl	800652c <pbuf_ref>
  return cseg;
}
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}

08006a90 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006a90:	b100      	cbz	r0, 8006a94 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006a92:	6101      	str	r1, [r0, #16]
  }
}
 8006a94:	4770      	bx	lr
	...

08006a98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	b158      	cbz	r0, 8006ab8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006aa0:	7d03      	ldrb	r3, [r0, #20]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d106      	bne.n	8006ab4 <tcp_recv+0x1c>
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <tcp_recv+0x24>)
 8006aa8:	4905      	ldr	r1, [pc, #20]	; (8006ac0 <tcp_recv+0x28>)
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <tcp_recv+0x2c>)
 8006aac:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8006ab0:	f007 f858 	bl	800db64 <iprintf>
    pcb->recv = recv;
 8006ab4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8006ab8:	bd38      	pop	{r3, r4, r5, pc}
 8006aba:	bf00      	nop
 8006abc:	0800fbca 	.word	0x0800fbca
 8006ac0:	0800fccd 	.word	0x0800fccd
 8006ac4:	0800f008 	.word	0x0800f008

08006ac8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006acc:	4604      	mov	r4, r0
 8006ace:	b150      	cbz	r0, 8006ae6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006ad0:	7d03      	ldrb	r3, [r0, #20]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d106      	bne.n	8006ae4 <tcp_sent+0x1c>
 8006ad6:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <tcp_sent+0x20>)
 8006ad8:	4904      	ldr	r1, [pc, #16]	; (8006aec <tcp_sent+0x24>)
 8006ada:	4805      	ldr	r0, [pc, #20]	; (8006af0 <tcp_sent+0x28>)
 8006adc:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8006ae0:	f007 f840 	bl	800db64 <iprintf>
    pcb->sent = sent;
 8006ae4:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	0800fbca 	.word	0x0800fbca
 8006aec:	0800fd3b 	.word	0x0800fd3b
 8006af0:	0800f008 	.word	0x0800f008

08006af4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006af8:	4604      	mov	r4, r0
 8006afa:	b158      	cbz	r0, 8006b14 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006afc:	7d03      	ldrb	r3, [r0, #20]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d106      	bne.n	8006b10 <tcp_err+0x1c>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <tcp_err+0x24>)
 8006b04:	4905      	ldr	r1, [pc, #20]	; (8006b1c <tcp_err+0x28>)
 8006b06:	4806      	ldr	r0, [pc, #24]	; (8006b20 <tcp_err+0x2c>)
 8006b08:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006b0c:	f007 f82a 	bl	800db64 <iprintf>
    pcb->errf = err;
 8006b10:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	0800fbca 	.word	0x0800fbca
 8006b1c:	0800fc05 	.word	0x0800fc05
 8006b20:	0800f008 	.word	0x0800f008

08006b24 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006b24:	b118      	cbz	r0, 8006b2e <tcp_accept+0xa>
 8006b26:	7d03      	ldrb	r3, [r0, #20]
 8006b28:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8006b2a:	bf08      	it	eq
 8006b2c:	6181      	streq	r1, [r0, #24]
  }
}
 8006b2e:	4770      	bx	lr

08006b30 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006b30:	7d03      	ldrb	r3, [r0, #20]
 8006b32:	2b01      	cmp	r3, #1
{
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4604      	mov	r4, r0
 8006b38:	460e      	mov	r6, r1
 8006b3a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006b3c:	d106      	bne.n	8006b4c <tcp_poll+0x1c>
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <tcp_poll+0x24>)
 8006b40:	4905      	ldr	r1, [pc, #20]	; (8006b58 <tcp_poll+0x28>)
 8006b42:	4806      	ldr	r0, [pc, #24]	; (8006b5c <tcp_poll+0x2c>)
 8006b44:	f240 7203 	movw	r2, #1795	; 0x703
 8006b48:	f007 f80c 	bl	800db64 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006b4c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006b50:	7725      	strb	r5, [r4, #28]
}
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	0800fbca 	.word	0x0800fbca
 8006b58:	0800fcaf 	.word	0x0800fcaf
 8006b5c:	0800f008 	.word	0x0800f008

08006b60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006b60:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8006b62:	7d03      	ldrb	r3, [r0, #20]
 8006b64:	2b01      	cmp	r3, #1
{
 8006b66:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8006b68:	d919      	bls.n	8006b9e <tcp_pcb_purge+0x3e>
 8006b6a:	2b0a      	cmp	r3, #10
 8006b6c:	d017      	beq.n	8006b9e <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006b6e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006b70:	b118      	cbz	r0, 8006b7a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006b72:	f7ff fb21 	bl	80061b8 <pbuf_free>
      pcb->refused_data = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006b7a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006b7c:	f7ff ff68 	bl	8006a50 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006b80:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b86:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006b88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8006b8a:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8006b8c:	f7ff ff60 	bl	8006a50 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006b90:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b92:	f7ff ff5d 	bl	8006a50 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006b96:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006b9a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}

08006ba0 <tcp_slowtmr>:
{
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8006ba4:	4eb0      	ldr	r6, [pc, #704]	; (8006e68 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 8006ba6:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8006e9c <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8006baa:	6833      	ldr	r3, [r6, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8006bb0:	4bae      	ldr	r3, [pc, #696]	; (8006e6c <tcp_slowtmr+0x2cc>)
 8006bb2:	781a      	ldrb	r2, [r3, #0]
{
 8006bb4:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8006bb6:	3201      	adds	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8006bbc:	4fac      	ldr	r7, [pc, #688]	; (8006e70 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006bbe:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8006ea0 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8006bc2:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8006bc4:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8006bc8:	b96c      	cbnz	r4, 8006be6 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8006bca:	4faa      	ldr	r7, [pc, #680]	; (8006e74 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006bcc:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006ea0 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8006bd0:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006bd2:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8006ea4 <tcp_slowtmr+0x304>
 8006bd6:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006e7c <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	f040 8185 	bne.w	8006eea <tcp_slowtmr+0x34a>
}
 8006be0:	b005      	add	sp, #20
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006be6:	7d23      	ldrb	r3, [r4, #20]
 8006be8:	b933      	cbnz	r3, 8006bf8 <tcp_slowtmr+0x58>
 8006bea:	464b      	mov	r3, r9
 8006bec:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006bf0:	49a1      	ldr	r1, [pc, #644]	; (8006e78 <tcp_slowtmr+0x2d8>)
 8006bf2:	48a2      	ldr	r0, [pc, #648]	; (8006e7c <tcp_slowtmr+0x2dc>)
 8006bf4:	f006 ffb6 	bl	800db64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006bf8:	7d23      	ldrb	r3, [r4, #20]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <tcp_slowtmr+0x6c>
 8006bfe:	464b      	mov	r3, r9
 8006c00:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006c04:	499e      	ldr	r1, [pc, #632]	; (8006e80 <tcp_slowtmr+0x2e0>)
 8006c06:	489d      	ldr	r0, [pc, #628]	; (8006e7c <tcp_slowtmr+0x2dc>)
 8006c08:	f006 ffac 	bl	800db64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006c0c:	7d23      	ldrb	r3, [r4, #20]
 8006c0e:	2b0a      	cmp	r3, #10
 8006c10:	d106      	bne.n	8006c20 <tcp_slowtmr+0x80>
 8006c12:	464b      	mov	r3, r9
 8006c14:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006c18:	499a      	ldr	r1, [pc, #616]	; (8006e84 <tcp_slowtmr+0x2e4>)
 8006c1a:	4898      	ldr	r0, [pc, #608]	; (8006e7c <tcp_slowtmr+0x2dc>)
 8006c1c:	f006 ffa2 	bl	800db64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	7f62      	ldrb	r2, [r4, #29]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d104      	bne.n	8006c34 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006c2a:	68e5      	ldr	r5, [r4, #12]
 8006c2c:	4644      	mov	r4, r8
 8006c2e:	46a0      	mov	r8, r4
 8006c30:	462c      	mov	r4, r5
 8006c32:	e7c9      	b.n	8006bc8 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006c34:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8006c36:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006c38:	2902      	cmp	r1, #2
 8006c3a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006c3e:	f040 809e 	bne.w	8006d7e <tcp_slowtmr+0x1de>
 8006c42:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006c44:	f200 80e5 	bhi.w	8006e12 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8006c48:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006c4c:	f1bb 0f00 	cmp.w	fp, #0
 8006c50:	f000 80a8 	beq.w	8006da4 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006c54:	488c      	ldr	r0, [pc, #560]	; (8006e88 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8006c56:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006c5a:	4483      	add	fp, r0
 8006c5c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8006c60:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 8006c62:	bf3c      	itt	cc
 8006c64:	3301      	addcc	r3, #1
 8006c66:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006c6a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	f080 8087 	bcs.w	8006d82 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8006c74:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006c78:	7d23      	ldrb	r3, [r4, #20]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d10b      	bne.n	8006c96 <tcp_slowtmr+0xf6>
      if (pcb->flags & TF_RXCLOSED) {
 8006c7e:	7ea2      	ldrb	r2, [r4, #26]
 8006c80:	06d2      	lsls	r2, r2, #27
 8006c82:	d508      	bpl.n	8006c96 <tcp_slowtmr+0xf6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c84:	6832      	ldr	r2, [r6, #0]
 8006c86:	6a21      	ldr	r1, [r4, #32]
 8006c88:	1a52      	subs	r2, r2, r1
 8006c8a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006c8c:	bf84      	itt	hi
 8006c8e:	f10b 0b01 	addhi.w	fp, fp, #1
 8006c92:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c96:	7a25      	ldrb	r5, [r4, #8]
 8006c98:	f015 0508 	ands.w	r5, r5, #8
 8006c9c:	d019      	beq.n	8006cd2 <tcp_slowtmr+0x132>
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d002      	beq.n	8006ca8 <tcp_slowtmr+0x108>
       ((pcb->state == ESTABLISHED) ||
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	f040 80ca 	bne.w	8006e3c <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ca8:	6831      	ldr	r1, [r6, #0]
 8006caa:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006cac:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cb0:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006cb2:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8006cb6:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8006cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cbe:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f240 80a8 	bls.w	8006e18 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8006cc8:	f10b 0b01 	add.w	fp, fp, #1
 8006ccc:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8006cd0:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 8006cd2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006cd4:	b168      	cbz	r0, 8006cf2 <tcp_slowtmr+0x152>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	6a22      	ldr	r2, [r4, #32]
 8006cda:	1a9a      	subs	r2, r3, r2
 8006cdc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006ce0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8006ce4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8006ce8:	d303      	bcc.n	8006cf2 <tcp_slowtmr+0x152>
      tcp_segs_free(pcb->ooseq);
 8006cea:	f7ff feb1 	bl	8006a50 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8006cf2:	7d23      	ldrb	r3, [r4, #20]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	f040 80a3 	bne.w	8006e40 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cfa:	6833      	ldr	r3, [r6, #0]
 8006cfc:	6a22      	ldr	r2, [r4, #32]
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d02:	d803      	bhi.n	8006d0c <tcp_slowtmr+0x16c>
    if (pcb_remove) {
 8006d04:	f1bb 0f00 	cmp.w	fp, #0
 8006d08:	f000 80ce 	beq.w	8006ea8 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8006d0c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8006d0e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8006d12:	f7ff ff25 	bl	8006b60 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006d16:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006d18:	f1b8 0f00 	cmp.w	r8, #0
 8006d1c:	f000 8098 	beq.w	8006e50 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d106      	bne.n	8006d32 <tcp_slowtmr+0x192>
 8006d24:	464b      	mov	r3, r9
 8006d26:	f240 4289 	movw	r2, #1161	; 0x489
 8006d2a:	4958      	ldr	r1, [pc, #352]	; (8006e8c <tcp_slowtmr+0x2ec>)
 8006d2c:	4853      	ldr	r0, [pc, #332]	; (8006e7c <tcp_slowtmr+0x2dc>)
 8006d2e:	f006 ff19 	bl	800db64 <iprintf>
        prev->next = pcb->next;
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006d38:	b14d      	cbz	r5, 8006d4e <tcp_slowtmr+0x1ae>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d3a:	8b23      	ldrh	r3, [r4, #24]
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	8ae3      	ldrh	r3, [r4, #22]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	4622      	mov	r2, r4
 8006d44:	1d23      	adds	r3, r4, #4
 8006d46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006d4a:	f002 fc6f 	bl	800962c <tcp_rst>
      err_arg = pcb->callback_arg;
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006d52:	4621      	mov	r1, r4
 8006d54:	2001      	movs	r0, #1
      pcb = pcb->next;
 8006d56:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006d58:	f7ff f8ca 	bl	8005ef0 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006d62:	f1bb 0f00 	cmp.w	fp, #0
 8006d66:	d004      	beq.n	8006d72 <tcp_slowtmr+0x1d2>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	f06f 010c 	mvn.w	r1, #12
 8006d6e:	4618      	mov	r0, r3
 8006d70:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8006d72:	f89a 3000 	ldrb.w	r3, [sl]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f43f af58 	beq.w	8006c2c <tcp_slowtmr+0x8c>
tcp_slowtmr_start:
 8006d7c:	e71e      	b.n	8006bbc <tcp_slowtmr+0x1c>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006d7e:	2a0b      	cmp	r2, #11
 8006d80:	e760      	b.n	8006c44 <tcp_slowtmr+0xa4>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006d82:	4620      	mov	r0, r4
 8006d84:	f002 fd42 	bl	800980c <tcp_zero_window_probe>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f47f af73 	bne.w	8006c74 <tcp_slowtmr+0xd4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006d8e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8006d92:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	f63f af6c 	bhi.w	8006c74 <tcp_slowtmr+0xd4>
              pcb->persist_backoff++;
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8006da2:	e767      	b.n	8006c74 <tcp_slowtmr+0xd4>
        if (pcb->rtime >= 0) {
 8006da4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8006da8:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8006daa:	bfa4      	itt	ge
 8006dac:	3301      	addge	r3, #1
 8006dae:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006db0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f43f af5e 	beq.w	8006c74 <tcp_slowtmr+0xd4>
 8006db8:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8006dbc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	f6ff af57 	blt.w	8006c74 <tcp_slowtmr+0xd4>
          if (pcb->state != SYN_SENT) {
 8006dc6:	2902      	cmp	r1, #2
 8006dc8:	d00a      	beq.n	8006de0 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006dca:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8006dce:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8006dd2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006dd6:	492e      	ldr	r1, [pc, #184]	; (8006e90 <tcp_slowtmr+0x2f0>)
 8006dd8:	5c8a      	ldrb	r2, [r1, r2]
 8006dda:	4093      	lsls	r3, r2
 8006ddc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8006de0:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006de2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8006de6:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006de8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006dec:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8006dee:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8006df2:	4293      	cmp	r3, r2
 8006df4:	bf28      	it	cs
 8006df6:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006df8:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8006dfa:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006dfc:	b292      	uxth	r2, r2
 8006dfe:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8006e00:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006e04:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8006e06:	bf38      	it	cc
 8006e08:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006e0c:	f002 fc68 	bl	80096e0 <tcp_rexmit_rto>
 8006e10:	e732      	b.n	8006c78 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8006e12:	f04f 0b01 	mov.w	fp, #1
 8006e16:	e72f      	b.n	8006c78 <tcp_slowtmr+0xd8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006e18:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <tcp_slowtmr+0x2f4>)
 8006e1e:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8006e22:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d908      	bls.n	8006e3c <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f002 fcc4 	bl	80097b8 <tcp_keepalive>
        if (err == ERR_OK) {
 8006e30:	b920      	cbnz	r0, 8006e3c <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8006e32:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006e36:	3301      	adds	r3, #1
 8006e38:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	e748      	b.n	8006cd2 <tcp_slowtmr+0x132>
    if (pcb->state == LAST_ACK) {
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	f47f af5f 	bne.w	8006d04 <tcp_slowtmr+0x164>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e46:	6833      	ldr	r3, [r6, #0]
 8006e48:	6a22      	ldr	r2, [r4, #32]
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	2bf0      	cmp	r3, #240	; 0xf0
 8006e4e:	e758      	b.n	8006d02 <tcp_slowtmr+0x162>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	d006      	beq.n	8006e62 <tcp_slowtmr+0x2c2>
 8006e54:	464b      	mov	r3, r9
 8006e56:	f240 428d 	movw	r2, #1165	; 0x48d
 8006e5a:	490f      	ldr	r1, [pc, #60]	; (8006e98 <tcp_slowtmr+0x2f8>)
 8006e5c:	4807      	ldr	r0, [pc, #28]	; (8006e7c <tcp_slowtmr+0x2dc>)
 8006e5e:	f006 fe81 	bl	800db64 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	603b      	str	r3, [r7, #0]
 8006e66:	e767      	b.n	8006d38 <tcp_slowtmr+0x198>
 8006e68:	20005058 	.word	0x20005058
 8006e6c:	20000c22 	.word	0x20000c22
 8006e70:	20005054 	.word	0x20005054
 8006e74:	20005064 	.word	0x20005064
 8006e78:	0800fd62 	.word	0x0800fd62
 8006e7c:	0800f008 	.word	0x0800f008
 8006e80:	0800fd8c 	.word	0x0800fd8c
 8006e84:	0800fdb6 	.word	0x0800fdb6
 8006e88:	0800fca8 	.word	0x0800fca8
 8006e8c:	0800fde3 	.word	0x0800fde3
 8006e90:	0800fb7c 	.word	0x0800fb7c
 8006e94:	000124f8 	.word	0x000124f8
 8006e98:	0800fe0e 	.word	0x0800fe0e
 8006e9c:	20005050 	.word	0x20005050
 8006ea0:	0800fbca 	.word	0x0800fbca
 8006ea4:	0800fe38 	.word	0x0800fe38
      ++prev->polltmr;
 8006ea8:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006eaa:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8006eac:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006eb2:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006eb4:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006eb6:	f63f aeba 	bhi.w	8006c2e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006eba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8006ebe:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8006ec2:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8006ec6:	b173      	cbz	r3, 8006ee6 <tcp_slowtmr+0x346>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	6920      	ldr	r0, [r4, #16]
 8006ecc:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006ece:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f ae72 	bne.w	8006bbc <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	f47f aea8 	bne.w	8006c2e <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f002 fa2c 	bl	800933c <tcp_output>
 8006ee4:	e6a3      	b.n	8006c2e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	e7f1      	b.n	8006ece <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006eea:	7d2b      	ldrb	r3, [r5, #20]
 8006eec:	2b0a      	cmp	r3, #10
 8006eee:	d006      	beq.n	8006efe <tcp_slowtmr+0x35e>
 8006ef0:	4643      	mov	r3, r8
 8006ef2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	4648      	mov	r0, r9
 8006efa:	f006 fe33 	bl	800db64 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006efe:	6833      	ldr	r3, [r6, #0]
 8006f00:	6a2a      	ldr	r2, [r5, #32]
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	2bf0      	cmp	r3, #240	; 0xf0
 8006f06:	d802      	bhi.n	8006f0e <tcp_slowtmr+0x36e>
      pcb = pcb->next;
 8006f08:	462c      	mov	r4, r5
 8006f0a:	68ed      	ldr	r5, [r5, #12]
 8006f0c:	e665      	b.n	8006bda <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f7ff fe26 	bl	8006b60 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006f14:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006f16:	b194      	cbz	r4, 8006f3e <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	d106      	bne.n	8006f2a <tcp_slowtmr+0x38a>
 8006f1c:	4643      	mov	r3, r8
 8006f1e:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006f22:	490d      	ldr	r1, [pc, #52]	; (8006f58 <tcp_slowtmr+0x3b8>)
 8006f24:	4648      	mov	r0, r9
 8006f26:	f006 fe1d 	bl	800db64 <iprintf>
        prev->next = pcb->next;
 8006f2a:	68eb      	ldr	r3, [r5, #12]
 8006f2c:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006f2e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006f32:	4629      	mov	r1, r5
 8006f34:	2001      	movs	r0, #1
 8006f36:	f7fe ffdb 	bl	8005ef0 <memp_free>
      pcb = pcb->next;
 8006f3a:	465d      	mov	r5, fp
 8006f3c:	e64d      	b.n	8006bda <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006f3e:	42ab      	cmp	r3, r5
 8006f40:	d006      	beq.n	8006f50 <tcp_slowtmr+0x3b0>
 8006f42:	4643      	mov	r3, r8
 8006f44:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006f48:	4904      	ldr	r1, [pc, #16]	; (8006f5c <tcp_slowtmr+0x3bc>)
 8006f4a:	4648      	mov	r0, r9
 8006f4c:	f006 fe0a 	bl	800db64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006f50:	68eb      	ldr	r3, [r5, #12]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	e7eb      	b.n	8006f2e <tcp_slowtmr+0x38e>
 8006f56:	bf00      	nop
 8006f58:	0800fe67 	.word	0x0800fe67
 8006f5c:	0800fe8e 	.word	0x0800fe8e

08006f60 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006f60:	6803      	ldr	r3, [r0, #0]
 8006f62:	428b      	cmp	r3, r1
{
 8006f64:	b510      	push	{r4, lr}
 8006f66:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006f68:	d137      	bne.n	8006fda <tcp_pcb_remove+0x7a>
 8006f6a:	68cb      	ldr	r3, [r1, #12]
 8006f6c:	6003      	str	r3, [r0, #0]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff fdf4 	bl	8006b60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006f78:	7d23      	ldrb	r3, [r4, #20]
 8006f7a:	2b0a      	cmp	r3, #10
 8006f7c:	d00a      	beq.n	8006f94 <tcp_pcb_remove+0x34>
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d008      	beq.n	8006f94 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8006f82:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8006f84:	07da      	lsls	r2, r3, #31
 8006f86:	d505      	bpl.n	8006f94 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f002 f9d4 	bl	800933c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006f94:	7d23      	ldrb	r3, [r4, #20]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d01a      	beq.n	8006fd0 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006f9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006f9c:	b133      	cbz	r3, 8006fac <tcp_pcb_remove+0x4c>
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <tcp_pcb_remove+0x8c>)
 8006fa0:	4913      	ldr	r1, [pc, #76]	; (8006ff0 <tcp_pcb_remove+0x90>)
 8006fa2:	4814      	ldr	r0, [pc, #80]	; (8006ff4 <tcp_pcb_remove+0x94>)
 8006fa4:	f240 7253 	movw	r2, #1875	; 0x753
 8006fa8:	f006 fddc 	bl	800db64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006fac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006fae:	b133      	cbz	r3, 8006fbe <tcp_pcb_remove+0x5e>
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <tcp_pcb_remove+0x8c>)
 8006fb2:	4911      	ldr	r1, [pc, #68]	; (8006ff8 <tcp_pcb_remove+0x98>)
 8006fb4:	480f      	ldr	r0, [pc, #60]	; (8006ff4 <tcp_pcb_remove+0x94>)
 8006fb6:	f240 7254 	movw	r2, #1876	; 0x754
 8006fba:	f006 fdd3 	bl	800db64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006fbe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006fc0:	b133      	cbz	r3, 8006fd0 <tcp_pcb_remove+0x70>
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <tcp_pcb_remove+0x8c>)
 8006fc4:	490d      	ldr	r1, [pc, #52]	; (8006ffc <tcp_pcb_remove+0x9c>)
 8006fc6:	480b      	ldr	r0, [pc, #44]	; (8006ff4 <tcp_pcb_remove+0x94>)
 8006fc8:	f240 7256 	movw	r2, #1878	; 0x756
 8006fcc:	f006 fdca 	bl	800db64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006fd4:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0c7      	beq.n	8006f6e <tcp_pcb_remove+0xe>
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	42a2      	cmp	r2, r4
 8006fe2:	d1f9      	bne.n	8006fd8 <tcp_pcb_remove+0x78>
 8006fe4:	68e2      	ldr	r2, [r4, #12]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	e7c1      	b.n	8006f6e <tcp_pcb_remove+0xe>
 8006fea:	bf00      	nop
 8006fec:	0800fbca 	.word	0x0800fbca
 8006ff0:	0800fc60 	.word	0x0800fc60
 8006ff4:	0800f008 	.word	0x0800f008
 8006ff8:	0800fc78 	.word	0x0800fc78
 8006ffc:	0800fc91 	.word	0x0800fc91

08007000 <tcp_close_shutdown>:
{
 8007000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007002:	7d03      	ldrb	r3, [r0, #20]
 8007004:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007006:	2900      	cmp	r1, #0
 8007008:	d049      	beq.n	800709e <tcp_close_shutdown+0x9e>
 800700a:	2b04      	cmp	r3, #4
 800700c:	d001      	beq.n	8007012 <tcp_close_shutdown+0x12>
 800700e:	2b07      	cmp	r3, #7
 8007010:	d145      	bne.n	800709e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007012:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007014:	b91a      	cbnz	r2, 800701e <tcp_close_shutdown+0x1e>
 8007016:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007018:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800701c:	d03f      	beq.n	800709e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800701e:	7ea3      	ldrb	r3, [r4, #26]
 8007020:	06db      	lsls	r3, r3, #27
 8007022:	d406      	bmi.n	8007032 <tcp_close_shutdown+0x32>
 8007024:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <tcp_close_shutdown+0x124>)
 8007026:	4940      	ldr	r1, [pc, #256]	; (8007128 <tcp_close_shutdown+0x128>)
 8007028:	4840      	ldr	r0, [pc, #256]	; (800712c <tcp_close_shutdown+0x12c>)
 800702a:	f240 120f 	movw	r2, #271	; 0x10f
 800702e:	f006 fd99 	bl	800db64 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007032:	8b23      	ldrh	r3, [r4, #24]
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	8ae3      	ldrh	r3, [r4, #22]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4622      	mov	r2, r4
 800703c:	1d23      	adds	r3, r4, #4
 800703e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007040:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007042:	f002 faf3 	bl	800962c <tcp_rst>
      tcp_pcb_purge(pcb);
 8007046:	4620      	mov	r0, r4
 8007048:	f7ff fd8a 	bl	8006b60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800704c:	4a38      	ldr	r2, [pc, #224]	; (8007130 <tcp_close_shutdown+0x130>)
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	42a3      	cmp	r3, r4
 8007052:	d115      	bne.n	8007080 <tcp_close_shutdown+0x80>
 8007054:	68e3      	ldr	r3, [r4, #12]
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	2300      	movs	r3, #0
 800705a:	60e3      	str	r3, [r4, #12]
 800705c:	4b35      	ldr	r3, [pc, #212]	; (8007134 <tcp_close_shutdown+0x134>)
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007062:	7d23      	ldrb	r3, [r4, #20]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d113      	bne.n	8007090 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8007068:	230a      	movs	r3, #10
 800706a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800706c:	4b32      	ldr	r3, [pc, #200]	; (8007138 <tcp_close_shutdown+0x138>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	60e2      	str	r2, [r4, #12]
 8007072:	601c      	str	r4, [r3, #0]
 8007074:	f002 fc7a 	bl	800996c <tcp_timer_needed>
}
 8007078:	2000      	movs	r0, #0
 800707a:	b003      	add	sp, #12
 800707c:	bd30      	pop	{r4, r5, pc}
 800707e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0e9      	beq.n	8007058 <tcp_close_shutdown+0x58>
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	42a2      	cmp	r2, r4
 8007088:	d1f9      	bne.n	800707e <tcp_close_shutdown+0x7e>
 800708a:	68e2      	ldr	r2, [r4, #12]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e7e3      	b.n	8007058 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8007090:	4b2a      	ldr	r3, [pc, #168]	; (800713c <tcp_close_shutdown+0x13c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	42a3      	cmp	r3, r4
 8007096:	d117      	bne.n	80070c8 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8007098:	f001 fcfe 	bl	8008a98 <tcp_trigger_input_pcb_close>
 800709c:	e7ec      	b.n	8007078 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d020      	beq.n	80070e4 <tcp_close_shutdown+0xe4>
 80070a2:	d307      	bcc.n	80070b4 <tcp_close_shutdown+0xb4>
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d033      	beq.n	8007110 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 80070a8:	4620      	mov	r0, r4
}
 80070aa:	b003      	add	sp, #12
 80070ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 80070b0:	f7ff bb7e 	b.w	80067b0 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 80070b4:	8ae3      	ldrh	r3, [r4, #22]
 80070b6:	b13b      	cbz	r3, 80070c8 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <tcp_close_shutdown+0x140>)
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d109      	bne.n	80070d4 <tcp_close_shutdown+0xd4>
 80070c0:	68e3      	ldr	r3, [r4, #12]
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80070c8:	4621      	mov	r1, r4
 80070ca:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80070cc:	f7fe ff10 	bl	8005ef0 <memp_free>
    break;
 80070d0:	e7d2      	b.n	8007078 <tcp_close_shutdown+0x78>
 80070d2:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0f5      	beq.n	80070c4 <tcp_close_shutdown+0xc4>
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	42a2      	cmp	r2, r4
 80070dc:	d1f9      	bne.n	80070d2 <tcp_close_shutdown+0xd2>
 80070de:	68e2      	ldr	r2, [r4, #12]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e7ef      	b.n	80070c4 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80070e4:	4917      	ldr	r1, [pc, #92]	; (8007144 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 80070e6:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80070e8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80070ec:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80070ee:	b94a      	cbnz	r2, 8007104 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80070f0:	3301      	adds	r3, #1
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d1f8      	bne.n	80070e8 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80070f6:	4621      	mov	r1, r4
 80070f8:	4813      	ldr	r0, [pc, #76]	; (8007148 <tcp_close_shutdown+0x148>)
 80070fa:	f7ff ff31 	bl	8006f60 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80070fe:	4621      	mov	r1, r4
 8007100:	2002      	movs	r0, #2
 8007102:	e7e3      	b.n	80070cc <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8007104:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8007106:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007108:	bf08      	it	eq
 800710a:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800710c:	68d2      	ldr	r2, [r2, #12]
 800710e:	e7ee      	b.n	80070ee <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007110:	4621      	mov	r1, r4
 8007112:	4807      	ldr	r0, [pc, #28]	; (8007130 <tcp_close_shutdown+0x130>)
 8007114:	f7ff ff24 	bl	8006f60 <tcp_pcb_remove>
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <tcp_close_shutdown+0x134>)
 800711a:	2001      	movs	r0, #1
 800711c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800711e:	4621      	mov	r1, r4
 8007120:	e7d4      	b.n	80070cc <tcp_close_shutdown+0xcc>
 8007122:	bf00      	nop
 8007124:	0800fbca 	.word	0x0800fbca
 8007128:	0800fbb1 	.word	0x0800fbb1
 800712c:	0800f008 	.word	0x0800f008
 8007130:	20005054 	.word	0x20005054
 8007134:	20005050 	.word	0x20005050
 8007138:	20005064 	.word	0x20005064
 800713c:	20005068 	.word	0x20005068
 8007140:	20005060 	.word	0x20005060
 8007144:	0800fc50 	.word	0x0800fc50
 8007148:	2000505c 	.word	0x2000505c

0800714c <tcp_close>:
  if (pcb->state != LISTEN) {
 800714c:	7d03      	ldrb	r3, [r0, #20]
 800714e:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8007150:	bf1e      	ittt	ne
 8007152:	7e83      	ldrbne	r3, [r0, #26]
 8007154:	f043 0310 	orrne.w	r3, r3, #16
 8007158:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800715a:	2101      	movs	r1, #1
 800715c:	f7ff bf50 	b.w	8007000 <tcp_close_shutdown>

08007160 <tcp_recv_null>:
{
 8007160:	b510      	push	{r4, lr}
 8007162:	4608      	mov	r0, r1
  if (p != NULL) {
 8007164:	4614      	mov	r4, r2
 8007166:	b13a      	cbz	r2, 8007178 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8007168:	8911      	ldrh	r1, [r2, #8]
 800716a:	f7ff fc25 	bl	80069b8 <tcp_recved>
    pbuf_free(p);
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff f822 	bl	80061b8 <pbuf_free>
}
 8007174:	2000      	movs	r0, #0
 8007176:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1fb      	bne.n	8007174 <tcp_recv_null+0x14>
}
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007180:	f7ff bfe4 	b.w	800714c <tcp_close>

08007184 <tcp_process_refused_data>:
{
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8007186:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007188:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800718c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800718e:	2300      	movs	r3, #0
{
 8007190:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8007192:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007194:	b1dd      	cbz	r5, 80071ce <tcp_process_refused_data+0x4a>
 8007196:	4601      	mov	r1, r0
 8007198:	4632      	mov	r2, r6
 800719a:	6900      	ldr	r0, [r0, #16]
 800719c:	47a8      	blx	r5
 800719e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80071a0:	b9e0      	cbnz	r0, 80071dc <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80071a2:	06bb      	lsls	r3, r7, #26
 80071a4:	d511      	bpl.n	80071ca <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80071a8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80071b0:	bf1c      	itt	ne
 80071b2:	3301      	addne	r3, #1
 80071b4:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80071b6:	b146      	cbz	r6, 80071ca <tcp_process_refused_data+0x46>
 80071b8:	2300      	movs	r3, #0
 80071ba:	461a      	mov	r2, r3
 80071bc:	4621      	mov	r1, r4
 80071be:	6920      	ldr	r0, [r4, #16]
 80071c0:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80071c2:	300d      	adds	r0, #13
 80071c4:	d101      	bne.n	80071ca <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80071c6:	f06f 050c 	mvn.w	r5, #12
}
 80071ca:	4628      	mov	r0, r5
 80071cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80071ce:	4601      	mov	r1, r0
 80071d0:	462b      	mov	r3, r5
 80071d2:	4632      	mov	r2, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	f7ff ffc3 	bl	8007160 <tcp_recv_null>
 80071da:	e7e0      	b.n	800719e <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 80071dc:	f110 050d 	adds.w	r5, r0, #13
 80071e0:	d0f1      	beq.n	80071c6 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 80071e2:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80071e4:	f06f 0504 	mvn.w	r5, #4
 80071e8:	e7ef      	b.n	80071ca <tcp_process_refused_data+0x46>
	...

080071ec <tcp_fasttmr>:
{
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80071f0:	4d1b      	ldr	r5, [pc, #108]	; (8007260 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80071f2:	4f1c      	ldr	r7, [pc, #112]	; (8007264 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80071f4:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80071f6:	4e1c      	ldr	r6, [pc, #112]	; (8007268 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80071f8:	3301      	adds	r3, #1
 80071fa:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80071fc:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80071fe:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007202:	b90c      	cbnz	r4, 8007208 <tcp_fasttmr+0x1c>
}
 8007204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8007208:	782b      	ldrb	r3, [r5, #0]
 800720a:	7f62      	ldrb	r2, [r4, #29]
 800720c:	429a      	cmp	r2, r3
 800720e:	d024      	beq.n	800725a <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007210:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007212:	7ea3      	ldrb	r3, [r4, #26]
 8007214:	07d9      	lsls	r1, r3, #31
 8007216:	d509      	bpl.n	800722c <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8007218:	f043 0302 	orr.w	r3, r3, #2
 800721c:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800721e:	4620      	mov	r0, r4
 8007220:	f002 f88c 	bl	800933c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007224:	7ea3      	ldrb	r3, [r4, #26]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800722c:	7ea3      	ldrb	r3, [r4, #26]
 800722e:	071a      	lsls	r2, r3, #28
 8007230:	d505      	bpl.n	800723e <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007232:	f023 0308 	bic.w	r3, r3, #8
 8007236:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff fab9 	bl	80067b0 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800723e:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8007240:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007244:	b13b      	cbz	r3, 8007256 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8007246:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8007248:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800724c:	f7ff ff9a 	bl	8007184 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007250:	7833      	ldrb	r3, [r6, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1d2      	bne.n	80071fc <tcp_fasttmr+0x10>
{
 8007256:	464c      	mov	r4, r9
 8007258:	e7d3      	b.n	8007202 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800725a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800725e:	e7fa      	b.n	8007256 <tcp_fasttmr+0x6a>
 8007260:	20000c22 	.word	0x20000c22
 8007264:	20005054 	.word	0x20005054
 8007268:	20005050 	.word	0x20005050

0800726c <tcp_tmr>:
{
 800726c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800726e:	f7ff ffbd 	bl	80071ec <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007272:	4a06      	ldr	r2, [pc, #24]	; (800728c <tcp_tmr+0x20>)
 8007274:	7813      	ldrb	r3, [r2, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	b2db      	uxtb	r3, r3
 800727a:	7013      	strb	r3, [r2, #0]
 800727c:	07db      	lsls	r3, r3, #31
 800727e:	d503      	bpl.n	8007288 <tcp_tmr+0x1c>
}
 8007280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007284:	f7ff bc8c 	b.w	8006ba0 <tcp_slowtmr>
}
 8007288:	bd08      	pop	{r3, pc}
 800728a:	bf00      	nop
 800728c:	20000c21 	.word	0x20000c21

08007290 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007290:	7d03      	ldrb	r3, [r0, #20]
 8007292:	2b01      	cmp	r3, #1
{
 8007294:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4604      	mov	r4, r0
 800729a:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800729c:	d106      	bne.n	80072ac <tcp_abandon+0x1c>
 800729e:	4b30      	ldr	r3, [pc, #192]	; (8007360 <tcp_abandon+0xd0>)
 80072a0:	4930      	ldr	r1, [pc, #192]	; (8007364 <tcp_abandon+0xd4>)
 80072a2:	4831      	ldr	r0, [pc, #196]	; (8007368 <tcp_abandon+0xd8>)
 80072a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80072a8:	f006 fc5c 	bl	800db64 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80072ac:	7d23      	ldrb	r3, [r4, #20]
 80072ae:	2b0a      	cmp	r3, #10
 80072b0:	d10a      	bne.n	80072c8 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80072b2:	4621      	mov	r1, r4
 80072b4:	482d      	ldr	r0, [pc, #180]	; (800736c <tcp_abandon+0xdc>)
 80072b6:	f7ff fe53 	bl	8006f60 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80072ba:	4621      	mov	r1, r4
 80072bc:	2001      	movs	r0, #1
}
 80072be:	b002      	add	sp, #8
 80072c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80072c4:	f7fe be14 	b.w	8005ef0 <memp_free>
    seqno = pcb->snd_nxt;
 80072c8:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80072cc:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80072d0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80072d4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80072d8:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80072da:	b99b      	cbnz	r3, 8007304 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80072dc:	b13d      	cbz	r5, 80072ee <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <tcp_abandon+0xe0>)
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	d106      	bne.n	80072f4 <tcp_abandon+0x64>
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	2500      	movs	r5, #0
 80072ec:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80072ee:	462e      	mov	r6, r5
 80072f0:	e00f      	b.n	8007312 <tcp_abandon+0x82>
 80072f2:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f8      	beq.n	80072ea <tcp_abandon+0x5a>
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	42a2      	cmp	r2, r4
 80072fc:	d1f9      	bne.n	80072f2 <tcp_abandon+0x62>
 80072fe:	68e2      	ldr	r2, [r4, #12]
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	e7f2      	b.n	80072ea <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007304:	4621      	mov	r1, r4
 8007306:	481b      	ldr	r0, [pc, #108]	; (8007374 <tcp_abandon+0xe4>)
 8007308:	f7ff fe2a 	bl	8006f60 <tcp_pcb_remove>
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <tcp_abandon+0xe8>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007312:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007314:	b108      	cbz	r0, 800731a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8007316:	f7ff fb9b 	bl	8006a50 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800731a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800731c:	b108      	cbz	r0, 8007322 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800731e:	f7ff fb97 	bl	8006a50 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007322:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007324:	b108      	cbz	r0, 800732a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8007326:	f7ff fb93 	bl	8006a50 <tcp_segs_free>
    if (send_rst) {
 800732a:	b146      	cbz	r6, 800733e <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800732c:	8b23      	ldrh	r3, [r4, #24]
 800732e:	4622      	mov	r2, r4
 8007330:	e9cd 5300 	strd	r5, r3, [sp]
 8007334:	4651      	mov	r1, sl
 8007336:	1d23      	adds	r3, r4, #4
 8007338:	4648      	mov	r0, r9
 800733a:	f002 f977 	bl	800962c <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800733e:	4621      	mov	r1, r4
 8007340:	2001      	movs	r0, #1
 8007342:	f7fe fdd5 	bl	8005ef0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007346:	b13f      	cbz	r7, 8007358 <tcp_abandon+0xc8>
 8007348:	f06f 010c 	mvn.w	r1, #12
 800734c:	4640      	mov	r0, r8
 800734e:	463b      	mov	r3, r7
}
 8007350:	b002      	add	sp, #8
 8007352:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007356:	4718      	bx	r3
}
 8007358:	b002      	add	sp, #8
 800735a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735e:	bf00      	nop
 8007360:	0800fbca 	.word	0x0800fbca
 8007364:	0800fb4b 	.word	0x0800fb4b
 8007368:	0800f008 	.word	0x0800f008
 800736c:	20005064 	.word	0x20005064
 8007370:	20005060 	.word	0x20005060
 8007374:	20005054 	.word	0x20005054
 8007378:	20005050 	.word	0x20005050

0800737c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800737c:	2101      	movs	r1, #1
 800737e:	f7ff bf87 	b.w	8007290 <tcp_abandon>

08007382 <tcp_accept_null>:
{
 8007382:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8007384:	4608      	mov	r0, r1
 8007386:	f7ff fff9 	bl	800737c <tcp_abort>
}
 800738a:	f06f 000c 	mvn.w	r0, #12
 800738e:	bd08      	pop	{r3, pc}

08007390 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007394:	b901      	cbnz	r1, 8007398 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8007396:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007398:	680a      	ldr	r2, [r1, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	68cd      	ldr	r5, [r1, #12]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d102      	bne.n	80073a8 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80073a2:	4608      	mov	r0, r1
 80073a4:	f7ff ffea 	bl	800737c <tcp_abort>
{
 80073a8:	4629      	mov	r1, r5
 80073aa:	e7f3      	b.n	8007394 <tcp_netif_ip_addr_changed_pcblist+0x4>

080073ac <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <tcp_kill_state+0x34>)
 80073ae:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <tcp_kill_state+0x38>)
{
 80073b2:	b430      	push	{r4, r5}
  inactivity = 0;
 80073b4:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073b6:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80073b8:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ba:	b921      	cbnz	r1, 80073c6 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 80073bc:	b172      	cbz	r2, 80073dc <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 80073be:	4610      	mov	r0, r2
}
 80073c0:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80073c2:	f7ff bf65 	b.w	8007290 <tcp_abandon>
    if (pcb->state == state) {
 80073c6:	7d0b      	ldrb	r3, [r1, #20]
 80073c8:	4283      	cmp	r3, r0
 80073ca:	d105      	bne.n	80073d8 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073cc:	6a0b      	ldr	r3, [r1, #32]
 80073ce:	1aeb      	subs	r3, r5, r3
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	bf24      	itt	cs
 80073d4:	461c      	movcs	r4, r3
 80073d6:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073d8:	68c9      	ldr	r1, [r1, #12]
 80073da:	e7ee      	b.n	80073ba <tcp_kill_state+0xe>
}
 80073dc:	bc30      	pop	{r4, r5}
 80073de:	4770      	bx	lr
 80073e0:	20005054 	.word	0x20005054
 80073e4:	20005058 	.word	0x20005058

080073e8 <tcp_alloc>:
{
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80073ec:	2001      	movs	r0, #1
 80073ee:	f7fe fd63 	bl	8005eb8 <memp_malloc>
 80073f2:	4c39      	ldr	r4, [pc, #228]	; (80074d8 <tcp_alloc+0xf0>)
  if (pcb == NULL) {
 80073f4:	4603      	mov	r3, r0
 80073f6:	bb90      	cbnz	r0, 800745e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073f8:	4a38      	ldr	r2, [pc, #224]	; (80074dc <tcp_alloc+0xf4>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073fa:	6826      	ldr	r6, [r4, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d154      	bne.n	80074ac <tcp_alloc+0xc4>
  if (inactive != NULL) {
 8007402:	b113      	cbz	r3, 800740a <tcp_alloc+0x22>
    tcp_abort(inactive);
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff ffb9 	bl	800737c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800740a:	2001      	movs	r0, #1
 800740c:	f7fe fd54 	bl	8005eb8 <memp_malloc>
    if (pcb == NULL) {
 8007410:	4603      	mov	r3, r0
 8007412:	bb20      	cbnz	r0, 800745e <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8007414:	2009      	movs	r0, #9
 8007416:	f7ff ffc9 	bl	80073ac <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800741a:	2001      	movs	r0, #1
 800741c:	f7fe fd4c 	bl	8005eb8 <memp_malloc>
      if (pcb == NULL) {
 8007420:	4603      	mov	r3, r0
 8007422:	b9e0      	cbnz	r0, 800745e <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8007424:	2008      	movs	r0, #8
 8007426:	f7ff ffc1 	bl	80073ac <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800742a:	2001      	movs	r0, #1
 800742c:	f7fe fd44 	bl	8005eb8 <memp_malloc>
        if (pcb == NULL) {
 8007430:	4603      	mov	r3, r0
 8007432:	b9a0      	cbnz	r0, 800745e <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007434:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <tcp_alloc+0xf8>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007436:	f8d4 c000 	ldr.w	ip, [r4]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800743a:	6812      	ldr	r2, [r2, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800743c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007440:	bf0c      	ite	eq
 8007442:	4628      	moveq	r0, r5
 8007444:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 8007446:	461e      	mov	r6, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007448:	2a00      	cmp	r2, #0
 800744a:	d137      	bne.n	80074bc <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800744c:	b113      	cbz	r3, 8007454 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff ff94 	bl	800737c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007454:	2001      	movs	r0, #1
 8007456:	f7fe fd2f 	bl	8005eb8 <memp_malloc>
  if (pcb != NULL) {
 800745a:	4603      	mov	r3, r0
 800745c:	b320      	cbz	r0, 80074a8 <tcp_alloc+0xc0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800745e:	2298      	movs	r2, #152	; 0x98
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f006 face 	bl	800da04 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007468:	491e      	ldr	r1, [pc, #120]	; (80074e4 <tcp_alloc+0xfc>)
 800746a:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800746c:	21ff      	movs	r1, #255	; 0xff
 800746e:	7281      	strb	r1, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007470:	2106      	movs	r1, #6
 8007472:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007476:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 8007478:	491b      	ldr	r1, [pc, #108]	; (80074e8 <tcp_alloc+0x100>)
 800747a:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 800747c:	2101      	movs	r1, #1
 800747e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007482:	6821      	ldr	r1, [r4, #0]
 8007484:	6201      	str	r1, [r0, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8007486:	f44f 6286 	mov.w	r2, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 800748a:	4918      	ldr	r1, [pc, #96]	; (80074ec <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 800748c:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8007490:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8007494:	4a16      	ldr	r2, [pc, #88]	; (80074f0 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 8007496:	7809      	ldrb	r1, [r1, #0]
    pcb->recv = tcp_recv_null;
 8007498:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 800749e:	7545      	strb	r5, [r0, #21]
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80074a0:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 80074a2:	7741      	strb	r1, [r0, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80074a4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074ac:	6a11      	ldr	r1, [r2, #32]
 80074ae:	1a71      	subs	r1, r6, r1
 80074b0:	4281      	cmp	r1, r0
 80074b2:	bf24      	itt	cs
 80074b4:	4613      	movcs	r3, r2
 80074b6:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074b8:	68d2      	ldr	r2, [r2, #12]
 80074ba:	e7a0      	b.n	80073fe <tcp_alloc+0x16>
    if (pcb->prio <= mprio &&
 80074bc:	7d57      	ldrb	r7, [r2, #21]
 80074be:	4287      	cmp	r7, r0
 80074c0:	d807      	bhi.n	80074d2 <tcp_alloc+0xea>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074c2:	6a11      	ldr	r1, [r2, #32]
 80074c4:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 80074c8:	42b1      	cmp	r1, r6
 80074ca:	bf22      	ittt	cs
 80074cc:	4638      	movcs	r0, r7
 80074ce:	460e      	movcs	r6, r1
 80074d0:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074d2:	68d2      	ldr	r2, [r2, #12]
 80074d4:	e7b8      	b.n	8007448 <tcp_alloc+0x60>
 80074d6:	bf00      	nop
 80074d8:	20005058 	.word	0x20005058
 80074dc:	20005064 	.word	0x20005064
 80074e0:	20005054 	.word	0x20005054
 80074e4:	08600860 	.word	0x08600860
 80074e8:	0218ffff 	.word	0x0218ffff
 80074ec:	20000c22 	.word	0x20000c22
 80074f0:	08007161 	.word	0x08007161
 80074f4:	006ddd00 	.word	0x006ddd00

080074f8 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80074f8:	2040      	movs	r0, #64	; 0x40
 80074fa:	f7ff bf75 	b.w	80073e8 <tcp_alloc>
	...

08007500 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <tcp_next_iss+0x10>)
 8007502:	4a04      	ldr	r2, [pc, #16]	; (8007514 <tcp_next_iss+0x14>)
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	4410      	add	r0, r2
 800750a:	6018      	str	r0, [r3, #0]
}
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	200005ac 	.word	0x200005ac
 8007514:	20005058 	.word	0x20005058

08007518 <tcp_eff_send_mss_impl>:
{
 8007518:	b510      	push	{r4, lr}
 800751a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800751c:	4608      	mov	r0, r1
 800751e:	f002 ffdd 	bl	800a4dc <ip4_route>
    if (outif == NULL) {
 8007522:	b130      	cbz	r0, 8007532 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8007524:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8007526:	b123      	cbz	r3, 8007532 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007528:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800752a:	b29b      	uxth	r3, r3
 800752c:	429c      	cmp	r4, r3
 800752e:	bf28      	it	cs
 8007530:	461c      	movcs	r4, r3
}
 8007532:	4620      	mov	r0, r4
 8007534:	bd10      	pop	{r4, pc}
	...

08007538 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800753c:	4604      	mov	r4, r0
 800753e:	b180      	cbz	r0, 8007562 <tcp_netif_ip_addr_changed+0x2a>
 8007540:	6803      	ldr	r3, [r0, #0]
 8007542:	b173      	cbz	r3, 8007562 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <tcp_netif_ip_addr_changed+0x40>)
 8007546:	6819      	ldr	r1, [r3, #0]
 8007548:	f7ff ff22 	bl	8007390 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <tcp_netif_ip_addr_changed+0x44>)
 800754e:	4620      	mov	r0, r4
 8007550:	6819      	ldr	r1, [r3, #0]
 8007552:	f7ff ff1d 	bl	8007390 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007556:	b125      	cbz	r5, 8007562 <tcp_netif_ip_addr_changed+0x2a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b113      	cbz	r3, 8007562 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <tcp_netif_ip_addr_changed+0x48>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	b903      	cbnz	r3, 8007564 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8007562:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8007568:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800756a:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800756c:	bf04      	itt	eq
 800756e:	6829      	ldreq	r1, [r5, #0]
 8007570:	6019      	streq	r1, [r3, #0]
{
 8007572:	4613      	mov	r3, r2
 8007574:	e7f4      	b.n	8007560 <tcp_netif_ip_addr_changed+0x28>
 8007576:	bf00      	nop
 8007578:	20005054 	.word	0x20005054
 800757c:	20005060 	.word	0x20005060
 8007580:	2000505c 	.word	0x2000505c

08007584 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007586:	68c3      	ldr	r3, [r0, #12]
{
 8007588:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800758a:	8998      	ldrh	r0, [r3, #12]
{
 800758c:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800758e:	f7fe f9f9 	bl	8005984 <lwip_htons>
 8007592:	07c2      	lsls	r2, r0, #31
 8007594:	d414      	bmi.n	80075c0 <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007596:	4e18      	ldr	r6, [pc, #96]	; (80075f8 <tcp_oos_insert_segment+0x74>)
 8007598:	68e7      	ldr	r7, [r4, #12]
 800759a:	6830      	ldr	r0, [r6, #0]
 800759c:	892b      	ldrh	r3, [r5, #8]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	8922      	ldrh	r2, [r4, #8]
 80075a2:	4403      	add	r3, r0
 80075a4:	440a      	add	r2, r1
 80075a6:	1a9a      	subs	r2, r3, r2
    while (next &&
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	da0f      	bge.n	80075cc <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80075ac:	1a5b      	subs	r3, r3, r1
    if (next &&
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd0a      	ble.n	80075c8 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80075b2:	1a09      	subs	r1, r1, r0
 80075b4:	b289      	uxth	r1, r1
 80075b6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80075b8:	6868      	ldr	r0, [r5, #4]
 80075ba:	f7fe ff3f 	bl	800643c <pbuf_realloc>
 80075be:	e003      	b.n	80075c8 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff fa45 	bl	8006a50 <tcp_segs_free>
    next = NULL;
 80075c6:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80075c8:	602c      	str	r4, [r5, #0]
}
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80075cc:	89b8      	ldrh	r0, [r7, #12]
 80075ce:	f7fe f9d9 	bl	8005984 <lwip_htons>
 80075d2:	07c3      	lsls	r3, r0, #31
 80075d4:	d507      	bpl.n	80075e6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80075d6:	68eb      	ldr	r3, [r5, #12]
 80075d8:	2001      	movs	r0, #1
 80075da:	899f      	ldrh	r7, [r3, #12]
 80075dc:	f7fe f9d2 	bl	8005984 <lwip_htons>
 80075e0:	68eb      	ldr	r3, [r5, #12]
 80075e2:	4338      	orrs	r0, r7
 80075e4:	8198      	strh	r0, [r3, #12]
      next = next->next;
 80075e6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fa23 	bl	8006a34 <tcp_seg_free>
 80075ee:	463c      	mov	r4, r7
    while (next &&
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	d1d1      	bne.n	8007598 <tcp_oos_insert_segment+0x14>
 80075f4:	e7e8      	b.n	80075c8 <tcp_oos_insert_segment+0x44>
 80075f6:	bf00      	nop
 80075f8:	20000c48 	.word	0x20000c48

080075fc <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80075fc:	7d03      	ldrb	r3, [r0, #20]
 80075fe:	2b03      	cmp	r3, #3
{
 8007600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007606:	d806      	bhi.n	8007616 <tcp_receive+0x1a>
 8007608:	4b83      	ldr	r3, [pc, #524]	; (8007818 <tcp_receive+0x21c>)
 800760a:	4984      	ldr	r1, [pc, #528]	; (800781c <tcp_receive+0x220>)
 800760c:	4884      	ldr	r0, [pc, #528]	; (8007820 <tcp_receive+0x224>)
 800760e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007612:	f006 faa7 	bl	800db64 <iprintf>

  if (flags & TCP_ACK) {
 8007616:	4b83      	ldr	r3, [pc, #524]	; (8007824 <tcp_receive+0x228>)
 8007618:	4e83      	ldr	r6, [pc, #524]	; (8007828 <tcp_receive+0x22c>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f013 0f10 	tst.w	r3, #16
 8007620:	f000 8174 	beq.w	800790c <tcp_receive+0x310>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007624:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 8007628:	6831      	ldr	r1, [r6, #0]
 800762a:	4d80      	ldr	r5, [pc, #512]	; (800782c <tcp_receive+0x230>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800762c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8007630:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007632:	1a47      	subs	r7, r0, r1
 8007634:	2f00      	cmp	r7, #0
 8007636:	db0c      	blt.n	8007652 <tcp_receive+0x56>
 8007638:	4288      	cmp	r0, r1
 800763a:	d103      	bne.n	8007644 <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800763c:	ebac 0003 	sub.w	r0, ip, r3
 8007640:	2800      	cmp	r0, #0
 8007642:	db06      	blt.n	8007652 <tcp_receive+0x56>
 8007644:	459c      	cmp	ip, r3
 8007646:	d11a      	bne.n	800767e <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007648:	4879      	ldr	r0, [pc, #484]	; (8007830 <tcp_receive+0x234>)
 800764a:	6800      	ldr	r0, [r0, #0]
 800764c:	89c0      	ldrh	r0, [r0, #14]
 800764e:	4290      	cmp	r0, r2
 8007650:	d915      	bls.n	800767e <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007652:	4877      	ldr	r0, [pc, #476]	; (8007830 <tcp_receive+0x234>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007654:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007658:	6800      	ldr	r0, [r0, #0]
 800765a:	89c0      	ldrh	r0, [r0, #14]
 800765c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
 8007660:	b287      	uxth	r7, r0
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007662:	45be      	cmp	lr, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 8007664:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007668:	bf38      	it	cc
 800766a:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
 800766e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8007672:	bb97      	cbnz	r7, 80076da <tcp_receive+0xde>
        if (pcb->persist_backoff == 0) {
 8007674:	b919      	cbnz	r1, 800767e <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800767a:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800767e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007680:	4f6c      	ldr	r7, [pc, #432]	; (8007834 <tcp_receive+0x238>)
 8007682:	1a19      	subs	r1, r3, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	dc37      	bgt.n	80076f8 <tcp_receive+0xfc>
      /* Clause 2 */
      if (tcplen == 0) {
 8007688:	496b      	ldr	r1, [pc, #428]	; (8007838 <tcp_receive+0x23c>)
 800768a:	8809      	ldrh	r1, [r1, #0]
 800768c:	bb81      	cbnz	r1, 80076f0 <tcp_receive+0xf4>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800768e:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
 8007692:	6d61      	ldr	r1, [r4, #84]	; 0x54
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007694:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007696:	4471      	add	r1, lr
 8007698:	4291      	cmp	r1, r2
 800769a:	d129      	bne.n	80076f0 <tcp_receive+0xf4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800769c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	db25      	blt.n	80076f0 <tcp_receive+0xf4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80076a4:	4298      	cmp	r0, r3
 80076a6:	d123      	bne.n	80076f0 <tcp_receive+0xf4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80076a8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076ac:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 80076ae:	bf1c      	itt	ne
 80076b0:	3301      	addne	r3, #1
 80076b2:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80076b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d913      	bls.n	80076e6 <tcp_receive+0xea>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80076be:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80076c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80076c4:	4413      	add	r3, r2
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d201      	bcs.n	80076d0 <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 80076cc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80076d0:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007818 <tcp_receive+0x21c>
 80076d4:	f8df a148 	ldr.w	sl, [pc, #328]	; 8007820 <tcp_receive+0x224>
 80076d8:	e10b      	b.n	80078f2 <tcp_receive+0x2f6>
      } else if (pcb->persist_backoff > 0) {
 80076da:	2900      	cmp	r1, #0
 80076dc:	d0cf      	beq.n	800767e <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 80076de:	2100      	movs	r1, #0
 80076e0:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 80076e4:	e7cb      	b.n	800767e <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 80076e6:	d1f3      	bne.n	80076d0 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 80076e8:	4620      	mov	r0, r4
 80076ea:	f002 f83e 	bl	800976a <tcp_rexmit_fast>
 80076ee:	e7ef      	b.n	80076d0 <tcp_receive+0xd4>
        pcb->dupacks = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f6:	e7eb      	b.n	80076d0 <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80076f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076fa:	1a9a      	subs	r2, r3, r2
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	f300 8087 	bgt.w	8007810 <tcp_receive+0x214>
      if (pcb->flags & TF_INFR) {
 8007702:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007704:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8007708:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 800770a:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 800770c:	bf41      	itttt	mi
 800770e:	f022 0204 	bicmi.w	r2, r2, #4
 8007712:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8007714:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8007718:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800771c:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800771e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8007720:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007722:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8007726:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8007728:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800772c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8007730:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8007734:	d90f      	bls.n	8007756 <tcp_receive+0x15a>
        if (pcb->cwnd < pcb->ssthresh) {
 8007736:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800773a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800773e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007740:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007742:	bf9c      	itt	ls
 8007744:	435b      	mulls	r3, r3
 8007746:	fb93 f3f2 	sdivls	r3, r3, r2
 800774a:	4413      	add	r3, r2
 800774c:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800774e:	429a      	cmp	r2, r3
 8007750:	d201      	bcs.n	8007756 <tcp_receive+0x15a>
            pcb->cwnd = new_cwnd;
 8007752:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007756:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8007818 <tcp_receive+0x21c>
 800775a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007820 <tcp_receive+0x224>
 800775e:	e04a      	b.n	80077f6 <tcp_receive+0x1fa>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	6858      	ldr	r0, [r3, #4]
 8007764:	f7fe f911 	bl	800598a <lwip_htonl>
 8007768:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800776a:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4683      	mov	fp, r0
 8007772:	8998      	ldrh	r0, [r3, #12]
 8007774:	f7fe f906 	bl	8005984 <lwip_htons>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	f010 0003 	ands.w	r0, r0, #3
 800777e:	eba8 0803 	sub.w	r8, r8, r3
 8007782:	bf18      	it	ne
 8007784:	2001      	movne	r0, #1
 8007786:	44d8      	add	r8, fp
 8007788:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 800778a:	f1b8 0f00 	cmp.w	r8, #0
 800778e:	dc35      	bgt.n	80077fc <tcp_receive+0x200>
        next = pcb->unacked;
 8007790:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007794:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8007798:	f8d8 3000 	ldr.w	r3, [r8]
 800779c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800779e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077a2:	f7fe febb 	bl	800651c <pbuf_clen>
 80077a6:	4583      	cmp	fp, r0
 80077a8:	d206      	bcs.n	80077b8 <tcp_receive+0x1bc>
 80077aa:	464b      	mov	r3, r9
 80077ac:	f240 429e 	movw	r2, #1182	; 0x49e
 80077b0:	4922      	ldr	r1, [pc, #136]	; (800783c <tcp_receive+0x240>)
 80077b2:	4650      	mov	r0, sl
 80077b4:	f006 f9d6 	bl	800db64 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077bc:	f7fe feae 	bl	800651c <pbuf_clen>
 80077c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80077c4:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077c6:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80077c8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077cc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 80077d0:	4413      	add	r3, r2
        tcp_seg_free(next);
 80077d2:	4640      	mov	r0, r8
        recv_acked += next->len;
 80077d4:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 80077d6:	f7ff f92d 	bl	8006a34 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80077da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80077de:	b153      	cbz	r3, 80077f6 <tcp_receive+0x1fa>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80077e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80077e2:	b943      	cbnz	r3, 80077f6 <tcp_receive+0x1fa>
 80077e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80077e6:	b933      	cbnz	r3, 80077f6 <tcp_receive+0x1fa>
 80077e8:	464b      	mov	r3, r9
 80077ea:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80077ee:	4914      	ldr	r1, [pc, #80]	; (8007840 <tcp_receive+0x244>)
 80077f0:	4650      	mov	r0, sl
 80077f2:	f006 f9b7 	bl	800db64 <iprintf>
      while (pcb->unacked != NULL &&
 80077f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1b1      	bne.n	8007760 <tcp_receive+0x164>
      if (pcb->unacked == NULL) {
 80077fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80077fe:	2300      	movs	r3, #0
 8007800:	b922      	cbnz	r2, 800780c <tcp_receive+0x210>
        pcb->rtime = -1;
 8007802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007806:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8007808:	76e3      	strb	r3, [r4, #27]
 800780a:	e761      	b.n	80076d0 <tcp_receive+0xd4>
        pcb->rtime = 0;
 800780c:	8623      	strh	r3, [r4, #48]	; 0x30
 800780e:	e7fb      	b.n	8007808 <tcp_receive+0x20c>
      tcp_send_empty_ack(pcb);
 8007810:	4620      	mov	r0, r4
 8007812:	f001 fd5e 	bl	80092d2 <tcp_send_empty_ack>
 8007816:	e75b      	b.n	80076d0 <tcp_receive+0xd4>
 8007818:	08010084 	.word	0x08010084
 800781c:	080100b6 	.word	0x080100b6
 8007820:	0800f008 	.word	0x0800f008
 8007824:	20000c28 	.word	0x20000c28
 8007828:	20000c48 	.word	0x20000c48
 800782c:	20000c24 	.word	0x20000c24
 8007830:	20000c50 	.word	0x20000c50
 8007834:	20000c3c 	.word	0x20000c3c
 8007838:	20000c5e 	.word	0x20000c5e
 800783c:	080100cf 	.word	0x080100cf
 8007840:	080100f7 	.word	0x080100f7
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007844:	682a      	ldr	r2, [r5, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	9201      	str	r2, [sp, #4]
 800784a:	6858      	ldr	r0, [r3, #4]
 800784c:	f7fe f89d 	bl	800598a <lwip_htonl>
 8007850:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007852:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4683      	mov	fp, r0
 800785a:	8998      	ldrh	r0, [r3, #12]
 800785c:	f7fe f892 	bl	8005984 <lwip_htons>
 8007860:	9a01      	ldr	r2, [sp, #4]
 8007862:	f010 0003 	ands.w	r0, r0, #3
 8007866:	eba2 0808 	sub.w	r8, r2, r8
 800786a:	bf18      	it	ne
 800786c:	2001      	movne	r0, #1
 800786e:	eba8 080b 	sub.w	r8, r8, fp
 8007872:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8007876:	f1b8 0f00 	cmp.w	r8, #0
 800787a:	db3d      	blt.n	80078f8 <tcp_receive+0x2fc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	dc38      	bgt.n	80078f8 <tcp_receive+0x2fc>
      next = pcb->unsent;
 8007886:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800788a:	f8d8 3000 	ldr.w	r3, [r8]
 800788e:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8007890:	b90b      	cbnz	r3, 8007896 <tcp_receive+0x29a>
        pcb->unsent_oversize = 0;
 8007892:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007896:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800789a:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800789e:	f7fe fe3d 	bl	800651c <pbuf_clen>
 80078a2:	4583      	cmp	fp, r0
 80078a4:	d206      	bcs.n	80078b4 <tcp_receive+0x2b8>
 80078a6:	464b      	mov	r3, r9
 80078a8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80078ac:	49b5      	ldr	r1, [pc, #724]	; (8007b84 <tcp_receive+0x588>)
 80078ae:	4650      	mov	r0, sl
 80078b0:	f006 f958 	bl	800db64 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80078b8:	f7fe fe30 	bl	800651c <pbuf_clen>
 80078bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80078c0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078c2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 80078c4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078c8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80078cc:	4413      	add	r3, r2
      tcp_seg_free(next);
 80078ce:	4640      	mov	r0, r8
      recv_acked += next->len;
 80078d0:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 80078d2:	f7ff f8af 	bl	8006a34 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80078d6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80078da:	b153      	cbz	r3, 80078f2 <tcp_receive+0x2f6>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80078dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078de:	b943      	cbnz	r3, 80078f2 <tcp_receive+0x2f6>
 80078e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80078e2:	b933      	cbnz	r3, 80078f2 <tcp_receive+0x2f6>
 80078e4:	464b      	mov	r3, r9
 80078e6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80078ea:	49a7      	ldr	r1, [pc, #668]	; (8007b88 <tcp_receive+0x58c>)
 80078ec:	4650      	mov	r0, sl
 80078ee:	f006 f939 	bl	800db64 <iprintf>
    while (pcb->unsent != NULL &&
 80078f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1a5      	bne.n	8007844 <tcp_receive+0x248>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80078f8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80078fc:	883a      	ldrh	r2, [r7, #0]
 80078fe:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007900:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8007902:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007906:	2a00      	cmp	r2, #0
 8007908:	f040 8118 	bne.w	8007b3c <tcp_receive+0x540>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800790c:	4f9f      	ldr	r7, [pc, #636]	; (8007b8c <tcp_receive+0x590>)
 800790e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007910:	8838      	ldrh	r0, [r7, #0]
 8007912:	6833      	ldr	r3, [r6, #0]
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 831b 	beq.w	8007f50 <tcp_receive+0x954>
 800791a:	7d21      	ldrb	r1, [r4, #20]
 800791c:	2906      	cmp	r1, #6
 800791e:	f200 8317 	bhi.w	8007f50 <tcp_receive+0x954>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007922:	eba2 0a03 	sub.w	sl, r2, r3
 8007926:	f1ba 0f01 	cmp.w	sl, #1
 800792a:	f100 815a 	bmi.w	8007be2 <tcp_receive+0x5e6>
 800792e:	f1c3 0101 	rsb	r1, r3, #1
 8007932:	1a09      	subs	r1, r1, r0
 8007934:	4411      	add	r1, r2
 8007936:	2900      	cmp	r1, #0
 8007938:	f300 8153 	bgt.w	8007be2 <tcp_receive+0x5e6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800793c:	4d94      	ldr	r5, [pc, #592]	; (8007b90 <tcp_receive+0x594>)
 800793e:	f8d5 8004 	ldr.w	r8, [r5, #4]
      off = pcb->rcv_nxt - seqno;
 8007942:	46d1      	mov	r9, sl
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007944:	f1b8 0f00 	cmp.w	r8, #0
 8007948:	d106      	bne.n	8007958 <tcp_receive+0x35c>
 800794a:	4b92      	ldr	r3, [pc, #584]	; (8007b94 <tcp_receive+0x598>)
 800794c:	4992      	ldr	r1, [pc, #584]	; (8007b98 <tcp_receive+0x59c>)
 800794e:	4893      	ldr	r0, [pc, #588]	; (8007b9c <tcp_receive+0x5a0>)
 8007950:	f240 523c 	movw	r2, #1340	; 0x53c
 8007954:	f006 f906 	bl	800db64 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007958:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800795c:	459a      	cmp	sl, r3
 800795e:	dd06      	ble.n	800796e <tcp_receive+0x372>
 8007960:	4b8c      	ldr	r3, [pc, #560]	; (8007b94 <tcp_receive+0x598>)
 8007962:	498f      	ldr	r1, [pc, #572]	; (8007ba0 <tcp_receive+0x5a4>)
 8007964:	488d      	ldr	r0, [pc, #564]	; (8007b9c <tcp_receive+0x5a0>)
 8007966:	f240 523d 	movw	r2, #1341	; 0x53d
 800796a:	f006 f8fb 	bl	800db64 <iprintf>
      if (inseg.p->len < off) {
 800796e:	6868      	ldr	r0, [r5, #4]
 8007970:	8943      	ldrh	r3, [r0, #10]
 8007972:	4553      	cmp	r3, sl
 8007974:	fa1f fb8a 	uxth.w	fp, sl
 8007978:	f280 8127 	bge.w	8007bca <tcp_receive+0x5ce>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800797c:	8903      	ldrh	r3, [r0, #8]
 800797e:	4553      	cmp	r3, sl
 8007980:	da06      	bge.n	8007990 <tcp_receive+0x394>
 8007982:	4b84      	ldr	r3, [pc, #528]	; (8007b94 <tcp_receive+0x598>)
 8007984:	4987      	ldr	r1, [pc, #540]	; (8007ba4 <tcp_receive+0x5a8>)
 8007986:	4885      	ldr	r0, [pc, #532]	; (8007b9c <tcp_receive+0x5a0>)
 8007988:	f240 523f 	movw	r2, #1343	; 0x53f
 800798c:	f006 f8ea 	bl	800db64 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007990:	686b      	ldr	r3, [r5, #4]
 8007992:	8919      	ldrh	r1, [r3, #8]
 8007994:	eba1 010b 	sub.w	r1, r1, fp
 8007998:	b289      	uxth	r1, r1
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800799a:	2200      	movs	r2, #0
        while (p->len < off) {
 800799c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80079a0:	454b      	cmp	r3, r9
 80079a2:	f2c0 8109 	blt.w	8007bb8 <tcp_receive+0x5bc>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80079a6:	f1c9 0100 	rsb	r1, r9, #0
 80079aa:	b209      	sxth	r1, r1
 80079ac:	4640      	mov	r0, r8
 80079ae:	f7fe fbfd 	bl	80061ac <pbuf_header>
 80079b2:	b130      	cbz	r0, 80079c2 <tcp_receive+0x3c6>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80079b4:	4b77      	ldr	r3, [pc, #476]	; (8007b94 <tcp_receive+0x598>)
 80079b6:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80079ba:	497b      	ldr	r1, [pc, #492]	; (8007ba8 <tcp_receive+0x5ac>)
 80079bc:	4877      	ldr	r0, [pc, #476]	; (8007b9c <tcp_receive+0x5a0>)
 80079be:	f006 f8d1 	bl	800db64 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80079c2:	8929      	ldrh	r1, [r5, #8]
 80079c4:	6833      	ldr	r3, [r6, #0]
 80079c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80079c8:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80079ca:	440b      	add	r3, r1
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80079d0:	68eb      	ldr	r3, [r5, #12]
 80079d2:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80079d4:	6831      	ldr	r1, [r6, #0]
 80079d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079d8:	1a8b      	subs	r3, r1, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f2c0 82b2 	blt.w	8007f44 <tcp_receive+0x948>
 80079e0:	1c4b      	adds	r3, r1, #1
 80079e2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	1a1b      	subs	r3, r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f300 82ab 	bgt.w	8007f44 <tcp_receive+0x948>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80079ee:	4291      	cmp	r1, r2
 80079f0:	f040 81c7 	bne.w	8007d82 <tcp_receive+0x786>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80079f4:	4d66      	ldr	r5, [pc, #408]	; (8007b90 <tcp_receive+0x594>)
 80079f6:	68eb      	ldr	r3, [r5, #12]
 80079f8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80079fc:	8998      	ldrh	r0, [r3, #12]
 80079fe:	f7fd ffc1 	bl	8005984 <lwip_htons>
 8007a02:	f010 0003 	ands.w	r0, r0, #3
 8007a06:	bf18      	it	ne
 8007a08:	2001      	movne	r0, #1
 8007a0a:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8007a0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8007a0e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8007a10:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8007a12:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8007a14:	d242      	bcs.n	8007a9c <tcp_receive+0x4a0>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007a16:	68eb      	ldr	r3, [r5, #12]
 8007a18:	8998      	ldrh	r0, [r3, #12]
 8007a1a:	f7fd ffb3 	bl	8005984 <lwip_htons>
 8007a1e:	07c2      	lsls	r2, r0, #31
 8007a20:	d510      	bpl.n	8007a44 <tcp_receive+0x448>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007a22:	68eb      	ldr	r3, [r5, #12]
 8007a24:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8007a28:	4640      	mov	r0, r8
 8007a2a:	f7fd ffab 	bl	8005984 <lwip_htons>
 8007a2e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007a32:	f7fd ffa7 	bl	8005984 <lwip_htons>
 8007a36:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007a3a:	68eb      	ldr	r3, [r5, #12]
 8007a3c:	ea40 0808 	orr.w	r8, r0, r8
 8007a40:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007a44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a46:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007a48:	68eb      	ldr	r3, [r5, #12]
 8007a4a:	8998      	ldrh	r0, [r3, #12]
 8007a4c:	f7fd ff9a 	bl	8005984 <lwip_htons>
 8007a50:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8007a52:	bf48      	it	mi
 8007a54:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007a56:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8007a58:	bf44      	itt	mi
 8007a5a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007a5e:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8007a60:	8929      	ldrh	r1, [r5, #8]
 8007a62:	f7fe fceb 	bl	800643c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007a66:	68eb      	ldr	r3, [r5, #12]
 8007a68:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007a6c:	8998      	ldrh	r0, [r3, #12]
 8007a6e:	f7fd ff89 	bl	8005984 <lwip_htons>
 8007a72:	f010 0003 	ands.w	r0, r0, #3
 8007a76:	bf18      	it	ne
 8007a78:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8007a7e:	4440      	add	r0, r8
 8007a80:	b280      	uxth	r0, r0
 8007a82:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007a84:	4418      	add	r0, r3
 8007a86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a88:	4413      	add	r3, r2
 8007a8a:	4298      	cmp	r0, r3
 8007a8c:	d006      	beq.n	8007a9c <tcp_receive+0x4a0>
 8007a8e:	4b41      	ldr	r3, [pc, #260]	; (8007b94 <tcp_receive+0x598>)
 8007a90:	4946      	ldr	r1, [pc, #280]	; (8007bac <tcp_receive+0x5b0>)
 8007a92:	4842      	ldr	r0, [pc, #264]	; (8007b9c <tcp_receive+0x5a0>)
 8007a94:	f240 527f 	movw	r2, #1407	; 0x57f
 8007a98:	f006 f864 	bl	800db64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007a9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80ae 	beq.w	8007c00 <tcp_receive+0x604>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007aa4:	68eb      	ldr	r3, [r5, #12]
 8007aa6:	8998      	ldrh	r0, [r3, #12]
 8007aa8:	f7fd ff6c 	bl	8005984 <lwip_htons>
 8007aac:	07c0      	lsls	r0, r0, #31
 8007aae:	f100 80a4 	bmi.w	8007bfa <tcp_receive+0x5fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8007ab2:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 8007ab6:	6830      	ldr	r0, [r6, #0]
 8007ab8:	883b      	ldrh	r3, [r7, #0]
 8007aba:	4403      	add	r3, r0
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007abc:	f1b8 0f00 	cmp.w	r8, #0
 8007ac0:	d039      	beq.n	8007b36 <tcp_receive+0x53a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007ac2:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8007ac6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007aca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007ace:	4411      	add	r1, r2
 8007ad0:	1a59      	subs	r1, r3, r1
            while (next &&
 8007ad2:	2900      	cmp	r1, #0
 8007ad4:	f280 80c1 	bge.w	8007c5a <tcp_receive+0x65e>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8007ad8:	1a9b      	subs	r3, r3, r2
            if (next &&
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dd2b      	ble.n	8007b36 <tcp_receive+0x53a>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007ade:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007ae0:	1a12      	subs	r2, r2, r0
 8007ae2:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007ae4:	8998      	ldrh	r0, [r3, #12]
 8007ae6:	f7fd ff4d 	bl	8005984 <lwip_htons>
 8007aea:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8007aec:	bf48      	it	mi
 8007aee:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007af0:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8007af2:	bf44      	itt	mi
 8007af4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007af8:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8007afa:	8929      	ldrh	r1, [r5, #8]
 8007afc:	f7fe fc9e 	bl	800643c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007b00:	68eb      	ldr	r3, [r5, #12]
 8007b02:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8007b06:	8998      	ldrh	r0, [r3, #12]
 8007b08:	f7fd ff3c 	bl	8005984 <lwip_htons>
 8007b0c:	f010 0003 	ands.w	r0, r0, #3
 8007b10:	bf18      	it	ne
 8007b12:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007b14:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8007b16:	4448      	add	r0, r9
 8007b18:	b280      	uxth	r0, r0
 8007b1a:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007b1c:	4418      	add	r0, r3
 8007b1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4298      	cmp	r0, r3
 8007b26:	d006      	beq.n	8007b36 <tcp_receive+0x53a>
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <tcp_receive+0x598>)
 8007b2a:	4921      	ldr	r1, [pc, #132]	; (8007bb0 <tcp_receive+0x5b4>)
 8007b2c:	481b      	ldr	r0, [pc, #108]	; (8007b9c <tcp_receive+0x5a0>)
 8007b2e:	f240 52af 	movw	r2, #1455	; 0x5af
 8007b32:	f006 f817 	bl	800db64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007b36:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8007b3a:	e061      	b.n	8007c00 <tcp_receive+0x604>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b3e:	6829      	ldr	r1, [r5, #0]
 8007b40:	1a5b      	subs	r3, r3, r1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f6bf aee2 	bge.w	800790c <tcp_receive+0x310>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007b48:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <tcp_receive+0x5b8>)
      m = m - (pcb->sa >> 3);
 8007b4a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8007b52:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8007b56:	b289      	uxth	r1, r1
 8007b58:	b20b      	sxth	r3, r1
      if (m < 0) {
 8007b5a:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8007b5c:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8007b60:	4408      	add	r0, r1
        m = -m;
 8007b62:	bfbc      	itt	lt
 8007b64:	4249      	neglt	r1, r1
 8007b66:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8007b68:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8007b6c:	4413      	add	r3, r2
      pcb->sa += m;
 8007b6e:	b200      	sxth	r0, r0
      pcb->sv += m;
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007b74:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8007b78:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8007b7c:	2300      	movs	r3, #0
      pcb->sa += m;
 8007b7e:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8007b80:	6363      	str	r3, [r4, #52]	; 0x34
 8007b82:	e6c3      	b.n	800790c <tcp_receive+0x310>
 8007b84:	080100cf 	.word	0x080100cf
 8007b88:	080100f7 	.word	0x080100f7
 8007b8c:	20000c5e 	.word	0x20000c5e
 8007b90:	20000c2c 	.word	0x20000c2c
 8007b94:	08010084 	.word	0x08010084
 8007b98:	08010117 	.word	0x08010117
 8007b9c:	0800f008 	.word	0x0800f008
 8007ba0:	08010127 	.word	0x08010127
 8007ba4:	08010136 	.word	0x08010136
 8007ba8:	08010146 	.word	0x08010146
 8007bac:	08010159 	.word	0x08010159
 8007bb0:	08010190 	.word	0x08010190
 8007bb4:	20005058 	.word	0x20005058
          p->tot_len = new_tot_len;
 8007bb8:	f8a8 1008 	strh.w	r1, [r8, #8]
          p->len = 0;
 8007bbc:	f8a8 200a 	strh.w	r2, [r8, #10]
          off -= p->len;
 8007bc0:	eba9 0903 	sub.w	r9, r9, r3
          p = p->next;
 8007bc4:	f8d8 8000 	ldr.w	r8, [r8]
 8007bc8:	e6e8      	b.n	800799c <tcp_receive+0x3a0>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007bca:	f1cb 0100 	rsb	r1, fp, #0
 8007bce:	b209      	sxth	r1, r1
 8007bd0:	f7fe faec 	bl	80061ac <pbuf_header>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f43f aef4 	beq.w	80079c2 <tcp_receive+0x3c6>
          LWIP_ASSERT("pbuf_header failed", 0);
 8007bda:	4b9b      	ldr	r3, [pc, #620]	; (8007e48 <tcp_receive+0x84c>)
 8007bdc:	f240 5251 	movw	r2, #1361	; 0x551
 8007be0:	e6eb      	b.n	80079ba <tcp_receive+0x3be>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8007be6:	bfbe      	ittt	lt
 8007be8:	7ea3      	ldrblt	r3, [r4, #26]
 8007bea:	f043 0302 	orrlt.w	r3, r3, #2
 8007bee:	76a3      	strblt	r3, [r4, #26]
 8007bf0:	e6f0      	b.n	80079d4 <tcp_receive+0x3d8>
              pcb->ooseq = pcb->ooseq->next;
 8007bf2:	6803      	ldr	r3, [r0, #0]
 8007bf4:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8007bf6:	f7fe ff1d 	bl	8006a34 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007bfa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1f8      	bne.n	8007bf2 <tcp_receive+0x5f6>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007c00:	883a      	ldrh	r2, [r7, #0]
 8007c02:	6833      	ldr	r3, [r6, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007c08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d206      	bcs.n	8007c1c <tcp_receive+0x620>
 8007c0e:	4b8e      	ldr	r3, [pc, #568]	; (8007e48 <tcp_receive+0x84c>)
 8007c10:	498e      	ldr	r1, [pc, #568]	; (8007e4c <tcp_receive+0x850>)
 8007c12:	488f      	ldr	r0, [pc, #572]	; (8007e50 <tcp_receive+0x854>)
 8007c14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007c18:	f005 ffa4 	bl	800db64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007c1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c1e:	883a      	ldrh	r2, [r7, #0]
 8007c20:	1a9b      	subs	r3, r3, r2
 8007c22:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7fe fe9b 	bl	8006960 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007c2a:	686b      	ldr	r3, [r5, #4]
 8007c2c:	891a      	ldrh	r2, [r3, #8]
 8007c2e:	b11a      	cbz	r2, 8007c38 <tcp_receive+0x63c>
          recv_data = inseg.p;
 8007c30:	4a88      	ldr	r2, [pc, #544]	; (8007e54 <tcp_receive+0x858>)
 8007c32:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007c38:	68eb      	ldr	r3, [r5, #12]
 8007c3a:	8998      	ldrh	r0, [r3, #12]
 8007c3c:	f7fd fea2 	bl	8005984 <lwip_htons>
 8007c40:	07c5      	lsls	r5, r0, #31
 8007c42:	d504      	bpl.n	8007c4e <tcp_receive+0x652>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007c44:	4a84      	ldr	r2, [pc, #528]	; (8007e58 <tcp_receive+0x85c>)
 8007c46:	7813      	ldrb	r3, [r2, #0]
 8007c48:	f043 0320 	orr.w	r3, r3, #32
 8007c4c:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007c4e:	4f7e      	ldr	r7, [pc, #504]	; (8007e48 <tcp_receive+0x84c>)
 8007c50:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8007e60 <tcp_receive+0x864>
 8007c54:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007e50 <tcp_receive+0x854>
 8007c58:	e07c      	b.n	8007d54 <tcp_receive+0x758>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007c5a:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8007c5e:	f7fd fe91 	bl	8005984 <lwip_htons>
 8007c62:	07c1      	lsls	r1, r0, #31
 8007c64:	d51b      	bpl.n	8007c9e <tcp_receive+0x6a2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007c66:	68eb      	ldr	r3, [r5, #12]
 8007c68:	8998      	ldrh	r0, [r3, #12]
 8007c6a:	f7fd fe8b 	bl	8005984 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007c6e:	0782      	lsls	r2, r0, #30
 8007c70:	d415      	bmi.n	8007c9e <tcp_receive+0x6a2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007c72:	68eb      	ldr	r3, [r5, #12]
 8007c74:	2001      	movs	r0, #1
 8007c76:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8007c7a:	f7fd fe83 	bl	8005984 <lwip_htons>
 8007c7e:	68eb      	ldr	r3, [r5, #12]
 8007c80:	ea49 0000 	orr.w	r0, r9, r0
 8007c84:	b280      	uxth	r0, r0
 8007c86:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007c88:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8007c8c:	f7fd fe7a 	bl	8005984 <lwip_htons>
 8007c90:	f010 0003 	ands.w	r0, r0, #3
 8007c94:	bf18      	it	ne
 8007c96:	2001      	movne	r0, #1
 8007c98:	4481      	add	r9, r0
 8007c9a:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8007c9e:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7fe fec6 	bl	8006a34 <tcp_seg_free>
              next = next->next;
 8007ca8:	46c8      	mov	r8, r9
 8007caa:	e704      	b.n	8007ab6 <tcp_receive+0x4ba>
          seqno = pcb->ooseq->tcphdr->seqno;
 8007cac:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007cae:	8990      	ldrh	r0, [r2, #12]
 8007cb0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007cb4:	f7fd fe66 	bl	8005984 <lwip_htons>
 8007cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007cba:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007cbe:	f010 0003 	ands.w	r0, r0, #3
 8007cc2:	449a      	add	sl, r3
 8007cc4:	bf18      	it	ne
 8007cc6:	2001      	movne	r0, #1
 8007cc8:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007cca:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007ccc:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007cce:	8998      	ldrh	r0, [r3, #12]
 8007cd0:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8007cd4:	f7fd fe56 	bl	8005984 <lwip_htons>
 8007cd8:	f010 0003 	ands.w	r0, r0, #3
 8007cdc:	bf18      	it	ne
 8007cde:	2001      	movne	r0, #1
 8007ce0:	4458      	add	r0, fp
 8007ce2:	4582      	cmp	sl, r0
 8007ce4:	d206      	bcs.n	8007cf4 <tcp_receive+0x6f8>
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	f240 52de 	movw	r2, #1502	; 0x5de
 8007cec:	4641      	mov	r1, r8
 8007cee:	4648      	mov	r0, r9
 8007cf0:	f005 ff38 	bl	800db64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007cf4:	68eb      	ldr	r3, [r5, #12]
 8007cf6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007cfa:	8998      	ldrh	r0, [r3, #12]
 8007cfc:	f7fd fe42 	bl	8005984 <lwip_htons>
 8007d00:	f010 0003 	ands.w	r0, r0, #3
 8007d04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d06:	bf18      	it	ne
 8007d08:	2001      	movne	r0, #1
 8007d0a:	4450      	add	r0, sl
 8007d0c:	1a18      	subs	r0, r3, r0
 8007d0e:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7fe fe25 	bl	8006960 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007d16:	6869      	ldr	r1, [r5, #4]
 8007d18:	890b      	ldrh	r3, [r1, #8]
 8007d1a:	b133      	cbz	r3, 8007d2a <tcp_receive+0x72e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007d1c:	4b4d      	ldr	r3, [pc, #308]	; (8007e54 <tcp_receive+0x858>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	b338      	cbz	r0, 8007d72 <tcp_receive+0x776>
              pbuf_cat(recv_data, cseg->p);
 8007d22:	f7fe fc17 	bl	8006554 <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007d2a:	68eb      	ldr	r3, [r5, #12]
 8007d2c:	8998      	ldrh	r0, [r3, #12]
 8007d2e:	f7fd fe29 	bl	8005984 <lwip_htons>
 8007d32:	07c0      	lsls	r0, r0, #31
 8007d34:	d509      	bpl.n	8007d4a <tcp_receive+0x74e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007d36:	4a48      	ldr	r2, [pc, #288]	; (8007e58 <tcp_receive+0x85c>)
 8007d38:	7813      	ldrb	r3, [r2, #0]
 8007d3a:	f043 0320 	orr.w	r3, r3, #32
 8007d3e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007d40:	7d23      	ldrb	r3, [r4, #20]
 8007d42:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8007d44:	bf04      	itt	eq
 8007d46:	2307      	moveq	r3, #7
 8007d48:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f7fe fe70 	bl	8006a34 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007d54:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007d56:	b125      	cbz	r5, 8007d62 <tcp_receive+0x766>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007d58:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8007d5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007d5c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8007d5e:	428b      	cmp	r3, r1
 8007d60:	d0a4      	beq.n	8007cac <tcp_receive+0x6b0>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007d62:	7ea3      	ldrb	r3, [r4, #26]
 8007d64:	07d9      	lsls	r1, r3, #31
 8007d66:	d506      	bpl.n	8007d76 <tcp_receive+0x77a>
 8007d68:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8007d6c:	f043 0302 	orr.w	r3, r3, #2
 8007d70:	e003      	b.n	8007d7a <tcp_receive+0x77e>
              recv_data = cseg->p;
 8007d72:	6019      	str	r1, [r3, #0]
 8007d74:	e7d7      	b.n	8007d26 <tcp_receive+0x72a>
        tcp_ack(pcb);
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8007d7c:	b003      	add	sp, #12
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8007d82:	4620      	mov	r0, r4
 8007d84:	f001 faa5 	bl	80092d2 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8007d88:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007d8a:	b925      	cbnz	r5, 8007d96 <tcp_receive+0x79a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007d8c:	4833      	ldr	r0, [pc, #204]	; (8007e5c <tcp_receive+0x860>)
 8007d8e:	f7fe fe69 	bl	8006a64 <tcp_seg_copy>
 8007d92:	6720      	str	r0, [r4, #112]	; 0x70
 8007d94:	e7f2      	b.n	8007d7c <tcp_receive+0x780>
            if (seqno == next->tcphdr->seqno) {
 8007d96:	6833      	ldr	r3, [r6, #0]
          prev = NULL;
 8007d98:	f04f 0800 	mov.w	r8, #0
 8007d9c:	f103 3eff 	add.w	lr, r3, #4294967295
 8007da0:	f103 0c01 	add.w	ip, r3, #1
            if (seqno == next->tcphdr->seqno) {
 8007da4:	68e8      	ldr	r0, [r5, #12]
 8007da6:	6842      	ldr	r2, [r0, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d117      	bne.n	8007ddc <tcp_receive+0x7e0>
              if (inseg.len > next->len) {
 8007dac:	482b      	ldr	r0, [pc, #172]	; (8007e5c <tcp_receive+0x860>)
 8007dae:	892b      	ldrh	r3, [r5, #8]
 8007db0:	8902      	ldrh	r2, [r0, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d9e2      	bls.n	8007d7c <tcp_receive+0x780>
                cseg = tcp_seg_copy(&inseg);
 8007db6:	f7fe fe55 	bl	8006a64 <tcp_seg_copy>
                if (cseg != NULL) {
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0de      	beq.n	8007d7c <tcp_receive+0x780>
                  if (prev != NULL) {
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d009      	beq.n	8007dd8 <tcp_receive+0x7dc>
                    prev->next = cseg;
 8007dc4:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007dc8:	4629      	mov	r1, r5
}
 8007dca:	b003      	add	sp, #12
 8007dcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8007dd0:	f7ff bbd8 	b.w	8007584 <tcp_oos_insert_segment>
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	e7e5      	b.n	8007da4 <tcp_receive+0x7a8>
                    pcb->ooseq = cseg;
 8007dd8:	6720      	str	r0, [r4, #112]	; 0x70
 8007dda:	e7f5      	b.n	8007dc8 <tcp_receive+0x7cc>
              if (prev == NULL) {
 8007ddc:	f1b8 0f00 	cmp.w	r8, #0
 8007de0:	d109      	bne.n	8007df6 <tcp_receive+0x7fa>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007de2:	1a99      	subs	r1, r3, r2
 8007de4:	2900      	cmp	r1, #0
 8007de6:	da3d      	bge.n	8007e64 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 8007de8:	481c      	ldr	r0, [pc, #112]	; (8007e5c <tcp_receive+0x860>)
 8007dea:	f7fe fe3b 	bl	8006a64 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d0c4      	beq.n	8007d7c <tcp_receive+0x780>
                    pcb->ooseq = cseg;
 8007df2:	6720      	str	r0, [r4, #112]	; 0x70
 8007df4:	e7e8      	b.n	8007dc8 <tcp_receive+0x7cc>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007df6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007dfa:	6849      	ldr	r1, [r1, #4]
 8007dfc:	ebae 0101 	sub.w	r1, lr, r1
 8007e00:	2900      	cmp	r1, #0
 8007e02:	db2f      	blt.n	8007e64 <tcp_receive+0x868>
 8007e04:	ebac 0102 	sub.w	r1, ip, r2
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	dc2b      	bgt.n	8007e64 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 8007e0c:	4813      	ldr	r0, [pc, #76]	; (8007e5c <tcp_receive+0x860>)
 8007e0e:	f7fe fe29 	bl	8006a64 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007e12:	4604      	mov	r4, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d0b1      	beq.n	8007d7c <tcp_receive+0x780>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007e18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e1c:	6831      	ldr	r1, [r6, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007e24:	4413      	add	r3, r2
 8007e26:	1a5b      	subs	r3, r3, r1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dd07      	ble.n	8007e3c <tcp_receive+0x840>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007e2c:	1a89      	subs	r1, r1, r2
 8007e2e:	b289      	uxth	r1, r1
 8007e30:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007e34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e38:	f7fe fb00 	bl	800643c <pbuf_realloc>
                    prev->next = cseg;
 8007e3c:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007e40:	4629      	mov	r1, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	e7c1      	b.n	8007dca <tcp_receive+0x7ce>
 8007e46:	bf00      	nop
 8007e48:	08010084 	.word	0x08010084
 8007e4c:	080101cb 	.word	0x080101cb
 8007e50:	0800f008 	.word	0x0800f008
 8007e54:	20000c40 	.word	0x20000c40
 8007e58:	20000c44 	.word	0x20000c44
 8007e5c:	20000c2c 	.word	0x20000c2c
 8007e60:	080101ea 	.word	0x080101ea
              if (next->next == NULL &&
 8007e64:	6829      	ldr	r1, [r5, #0]
 8007e66:	46a8      	mov	r8, r5
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d1b3      	bne.n	8007dd4 <tcp_receive+0x7d8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007e6c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd84      	ble.n	8007d7c <tcp_receive+0x780>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e72:	8980      	ldrh	r0, [r0, #12]
 8007e74:	f7fd fd86 	bl	8005984 <lwip_htons>
 8007e78:	07c2      	lsls	r2, r0, #31
 8007e7a:	f53f af7f 	bmi.w	8007d7c <tcp_receive+0x780>
                next->next = tcp_seg_copy(&inseg);
 8007e7e:	483a      	ldr	r0, [pc, #232]	; (8007f68 <tcp_receive+0x96c>)
 8007e80:	f7fe fdf0 	bl	8006a64 <tcp_seg_copy>
 8007e84:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f af78 	beq.w	8007d7c <tcp_receive+0x780>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007e8c:	68eb      	ldr	r3, [r5, #12]
 8007e8e:	6831      	ldr	r1, [r6, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	892b      	ldrh	r3, [r5, #8]
 8007e94:	4413      	add	r3, r2
 8007e96:	1a5b      	subs	r3, r3, r1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd05      	ble.n	8007ea8 <tcp_receive+0x8ac>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007e9c:	1a89      	subs	r1, r1, r2
 8007e9e:	b289      	uxth	r1, r1
 8007ea0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8007ea2:	6868      	ldr	r0, [r5, #4]
 8007ea4:	f7fe faca 	bl	800643c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007ea8:	6832      	ldr	r2, [r6, #0]
 8007eaa:	883b      	ldrh	r3, [r7, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f77f af60 	ble.w	8007d7c <tcp_receive+0x780>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	8998      	ldrh	r0, [r3, #12]
 8007ec2:	f7fd fd5f 	bl	8005984 <lwip_htons>
 8007ec6:	07c3      	lsls	r3, r0, #31
 8007ec8:	d512      	bpl.n	8007ef0 <tcp_receive+0x8f4>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007eca:	682b      	ldr	r3, [r5, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7fd fd56 	bl	8005984 <lwip_htons>
 8007ed8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007edc:	f7fd fd52 	bl	8005984 <lwip_htons>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	ea40 0808 	orr.w	r8, r0, r8
 8007eec:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007ef0:	6832      	ldr	r2, [r6, #0]
 8007ef2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	1a89      	subs	r1, r1, r2
 8007ef8:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8007efa:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007efc:	4411      	add	r1, r2
 8007efe:	b289      	uxth	r1, r1
 8007f00:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007f02:	f7fe fa9b 	bl	800643c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	891d      	ldrh	r5, [r3, #8]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	8998      	ldrh	r0, [r3, #12]
 8007f0e:	f7fd fd39 	bl	8005984 <lwip_htons>
 8007f12:	f010 0003 	ands.w	r0, r0, #3
 8007f16:	bf18      	it	ne
 8007f18:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007f1a:	6833      	ldr	r3, [r6, #0]
 8007f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8007f1e:	4428      	add	r0, r5
 8007f20:	b280      	uxth	r0, r0
 8007f22:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007f24:	4418      	add	r0, r3
 8007f26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007f28:	4413      	add	r3, r2
 8007f2a:	4298      	cmp	r0, r3
 8007f2c:	f43f af26 	beq.w	8007d7c <tcp_receive+0x780>
 8007f30:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <tcp_receive+0x970>)
 8007f32:	490f      	ldr	r1, [pc, #60]	; (8007f70 <tcp_receive+0x974>)
 8007f34:	480f      	ldr	r0, [pc, #60]	; (8007f74 <tcp_receive+0x978>)
 8007f36:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007f40:	f005 be10 	b.w	800db64 <iprintf>
      tcp_send_empty_ack(pcb);
 8007f44:	4620      	mov	r0, r4
}
 8007f46:	b003      	add	sp, #12
 8007f48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8007f4c:	f001 b9c1 	b.w	80092d2 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007f50:	1a99      	subs	r1, r3, r2
 8007f52:	2900      	cmp	r1, #0
 8007f54:	db06      	blt.n	8007f64 <tcp_receive+0x968>
 8007f56:	3301      	adds	r3, #1
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007f5c:	1a9b      	subs	r3, r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f77f af0c 	ble.w	8007d7c <tcp_receive+0x780>
      tcp_ack_now(pcb);
 8007f64:	7ea3      	ldrb	r3, [r4, #26]
 8007f66:	e701      	b.n	8007d6c <tcp_receive+0x770>
 8007f68:	20000c2c 	.word	0x20000c2c
 8007f6c:	08010084 	.word	0x08010084
 8007f70:	08010159 	.word	0x08010159
 8007f74:	0800f008 	.word	0x0800f008

08007f78 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007f78:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <tcp_getoptbyte+0x30>)
 8007f7a:	490c      	ldr	r1, [pc, #48]	; (8007fac <tcp_getoptbyte+0x34>)
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	880b      	ldrh	r3, [r1, #0]
 8007f80:	1c5a      	adds	r2, r3, #1
{
 8007f82:	b530      	push	{r4, r5, lr}
 8007f84:	b292      	uxth	r2, r2
 8007f86:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007f88:	b118      	cbz	r0, 8007f92 <tcp_getoptbyte+0x1a>
 8007f8a:	4c09      	ldr	r4, [pc, #36]	; (8007fb0 <tcp_getoptbyte+0x38>)
 8007f8c:	8824      	ldrh	r4, [r4, #0]
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d905      	bls.n	8007f9e <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007f92:	4908      	ldr	r1, [pc, #32]	; (8007fb4 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8007f94:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007f96:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 8007f98:	440b      	add	r3, r1
 8007f9a:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 8007f9c:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007f9e:	1b1b      	subs	r3, r3, r4
    return tcphdr_opt2[idx];
 8007fa0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007fa2:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 8007fa4:	5cc0      	ldrb	r0, [r0, r3]
 8007fa6:	e7f9      	b.n	8007f9c <tcp_getoptbyte+0x24>
 8007fa8:	20000c58 	.word	0x20000c58
 8007fac:	20000c4c 	.word	0x20000c4c
 8007fb0:	20000c54 	.word	0x20000c54
 8007fb4:	20000c50 	.word	0x20000c50

08007fb8 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007fba:	4e1a      	ldr	r6, [pc, #104]	; (8008024 <tcp_parseopt.isra.1+0x6c>)
 8007fbc:	8833      	ldrh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 8007fbe:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 8007fc0:	b133      	cbz	r3, 8007fd0 <tcp_parseopt.isra.1+0x18>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007fc2:	4d19      	ldr	r5, [pc, #100]	; (8008028 <tcp_parseopt.isra.1+0x70>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	802b      	strh	r3, [r5, #0]
 8007fc8:	8834      	ldrh	r4, [r6, #0]
 8007fca:	882b      	ldrh	r3, [r5, #0]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d300      	bcc.n	8007fd2 <tcp_parseopt.isra.1+0x1a>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8007fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8007fd2:	f7ff ffd1 	bl	8007f78 <tcp_getoptbyte>
      switch (opt) {
 8007fd6:	2801      	cmp	r0, #1
 8007fd8:	d0f6      	beq.n	8007fc8 <tcp_parseopt.isra.1+0x10>
 8007fda:	d3f9      	bcc.n	8007fd0 <tcp_parseopt.isra.1+0x18>
 8007fdc:	2802      	cmp	r0, #2
 8007fde:	d117      	bne.n	8008010 <tcp_parseopt.isra.1+0x58>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007fe0:	f7ff ffca 	bl	8007f78 <tcp_getoptbyte>
 8007fe4:	2804      	cmp	r0, #4
 8007fe6:	d1f3      	bne.n	8007fd0 <tcp_parseopt.isra.1+0x18>
 8007fe8:	882b      	ldrh	r3, [r5, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	daef      	bge.n	8007fd0 <tcp_parseopt.isra.1+0x18>
        mss = (tcp_getoptbyte() << 8);
 8007ff0:	f7ff ffc2 	bl	8007f78 <tcp_getoptbyte>
 8007ff4:	0200      	lsls	r0, r0, #8
 8007ff6:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007ff8:	f7ff ffbe 	bl	8007f78 <tcp_getoptbyte>
 8007ffc:	4320      	orrs	r0, r4
 8007ffe:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008000:	1e43      	subs	r3, r0, #1
 8008002:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008006:	bf28      	it	cs
 8008008:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800800c:	8038      	strh	r0, [r7, #0]
 800800e:	e7db      	b.n	8007fc8 <tcp_parseopt.isra.1+0x10>
        data = tcp_getoptbyte();
 8008010:	f7ff ffb2 	bl	8007f78 <tcp_getoptbyte>
        if (data < 2) {
 8008014:	2801      	cmp	r0, #1
 8008016:	d9db      	bls.n	8007fd0 <tcp_parseopt.isra.1+0x18>
        tcp_optidx += data - 2;
 8008018:	882b      	ldrh	r3, [r5, #0]
 800801a:	3b02      	subs	r3, #2
 800801c:	4418      	add	r0, r3
 800801e:	8028      	strh	r0, [r5, #0]
 8008020:	e7d2      	b.n	8007fc8 <tcp_parseopt.isra.1+0x10>
 8008022:	bf00      	nop
 8008024:	20000c5c 	.word	0x20000c5c
 8008028:	20000c4c 	.word	0x20000c4c

0800802c <tcp_input_delayed_close>:
{
 800802c:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <tcp_input_delayed_close+0x38>)
{
 8008030:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8008032:	7818      	ldrb	r0, [r3, #0]
 8008034:	f010 0010 	ands.w	r0, r0, #16
 8008038:	d012      	beq.n	8008060 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800803a:	7ea3      	ldrb	r3, [r4, #26]
 800803c:	06db      	lsls	r3, r3, #27
 800803e:	d406      	bmi.n	800804e <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008040:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008044:	b11b      	cbz	r3, 800804e <tcp_input_delayed_close+0x22>
 8008046:	f06f 010e 	mvn.w	r1, #14
 800804a:	6920      	ldr	r0, [r4, #16]
 800804c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800804e:	4621      	mov	r1, r4
 8008050:	4805      	ldr	r0, [pc, #20]	; (8008068 <tcp_input_delayed_close+0x3c>)
 8008052:	f7fe ff85 	bl	8006f60 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008056:	2001      	movs	r0, #1
 8008058:	4621      	mov	r1, r4
 800805a:	f7fd ff49 	bl	8005ef0 <memp_free>
 800805e:	2001      	movs	r0, #1
}
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	20000c44 	.word	0x20000c44
 8008068:	20005054 	.word	0x20005054

0800806c <tcp_input>:
{
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8008070:	4ea3      	ldr	r6, [pc, #652]	; (8008300 <tcp_input+0x294>)
 8008072:	6843      	ldr	r3, [r0, #4]
 8008074:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008076:	8943      	ldrh	r3, [r0, #10]
 8008078:	2b13      	cmp	r3, #19
{
 800807a:	b089      	sub	sp, #36	; 0x24
 800807c:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 800807e:	f240 81b7 	bls.w	80083f0 <tcp_input+0x384>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008082:	4fa0      	ldr	r7, [pc, #640]	; (8008304 <tcp_input+0x298>)
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	f002 fb9f 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800808c:	46b8      	mov	r8, r7
 800808e:	4604      	mov	r4, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	f040 81ad 	bne.w	80083f0 <tcp_input+0x384>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800809c:	2be0      	cmp	r3, #224	; 0xe0
 800809e:	f000 81a7 	beq.w	80083f0 <tcp_input+0x384>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80080a2:	6833      	ldr	r3, [r6, #0]
 80080a4:	8998      	ldrh	r0, [r3, #12]
 80080a6:	f7fd fc6d 	bl	8005984 <lwip_htons>
 80080aa:	0a81      	lsrs	r1, r0, #10
 80080ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80080b0:	2913      	cmp	r1, #19
 80080b2:	f240 819d 	bls.w	80083f0 <tcp_input+0x384>
 80080b6:	892b      	ldrh	r3, [r5, #8]
 80080b8:	b289      	uxth	r1, r1
 80080ba:	428b      	cmp	r3, r1
 80080bc:	f0c0 8198 	bcc.w	80083f0 <tcp_input+0x384>
  if (p->len >= hdrlen_bytes) {
 80080c0:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80080c2:	4a91      	ldr	r2, [pc, #580]	; (8008308 <tcp_input+0x29c>)
  tcphdr_opt2 = NULL;
 80080c4:	4f91      	ldr	r7, [pc, #580]	; (800830c <tcp_input+0x2a0>)
 80080c6:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800835c <tcp_input+0x2f0>
 80080ca:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80080cc:	f1a1 0314 	sub.w	r3, r1, #20
 80080d0:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 80080d2:	4288      	cmp	r0, r1
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80080d4:	8013      	strh	r3, [r2, #0]
 80080d6:	4614      	mov	r4, r2
  if (p->len >= hdrlen_bytes) {
 80080d8:	d34a      	bcc.n	8008170 <tcp_input+0x104>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80080da:	4249      	negs	r1, r1
 80080dc:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80080de:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80080e2:	f7fe f863 	bl	80061ac <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080e6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80080e8:	f8df a274 	ldr.w	sl, [pc, #628]	; 8008360 <tcp_input+0x2f4>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080ec:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80080ee:	4f88      	ldr	r7, [pc, #544]	; (8008310 <tcp_input+0x2a4>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80080f0:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008324 <tcp_input+0x2b8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080f4:	f7fd fc46 	bl	8005984 <lwip_htons>
 80080f8:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80080fa:	6834      	ldr	r4, [r6, #0]
 80080fc:	8860      	ldrh	r0, [r4, #2]
 80080fe:	f7fd fc41 	bl	8005984 <lwip_htons>
 8008102:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008104:	6834      	ldr	r4, [r6, #0]
 8008106:	6860      	ldr	r0, [r4, #4]
 8008108:	f7fd fc3f 	bl	800598a <lwip_htonl>
 800810c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800810e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008110:	f8ca 0000 	str.w	r0, [sl]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008114:	68a0      	ldr	r0, [r4, #8]
 8008116:	f7fd fc38 	bl	800598a <lwip_htonl>
 800811a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800811c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800811e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008120:	89e0      	ldrh	r0, [r4, #14]
 8008122:	f7fd fc2f 	bl	8005984 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8008126:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008128:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800812a:	8998      	ldrh	r0, [r3, #12]
 800812c:	f7fd fc2a 	bl	8005984 <lwip_htons>
 8008130:	4a78      	ldr	r2, [pc, #480]	; (8008314 <tcp_input+0x2a8>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008132:	8929      	ldrh	r1, [r5, #8]
 8008134:	f8cd a00c 	str.w	sl, [sp, #12]
  flags = TCPH_FLAGS(tcphdr);
 8008138:	b2c0      	uxtb	r0, r0
 800813a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800813e:	f010 0003 	ands.w	r0, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8008142:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008144:	bf18      	it	ne
 8008146:	2001      	movne	r0, #1
 8008148:	4b73      	ldr	r3, [pc, #460]	; (8008318 <tcp_input+0x2ac>)
 800814a:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800814c:	4973      	ldr	r1, [pc, #460]	; (800831c <tcp_input+0x2b0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800814e:	8018      	strh	r0, [r3, #0]
 8008150:	e9cd 2304 	strd	r2, r3, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008154:	680c      	ldr	r4, [r1, #0]
 8008156:	46ba      	mov	sl, r7
  prev = NULL;
 8008158:	f04f 0900 	mov.w	r9, #0
 800815c:	460f      	mov	r7, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800815e:	2c00      	cmp	r4, #0
 8008160:	d140      	bne.n	80081e4 <tcp_input+0x178>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008162:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <tcp_input+0x2b4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008164:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8008324 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008168:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800816a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800832c <tcp_input+0x2c0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800816e:	e146      	b.n	80083fe <tcp_input+0x392>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	b92b      	cbnz	r3, 8008180 <tcp_input+0x114>
 8008174:	4b6b      	ldr	r3, [pc, #428]	; (8008324 <tcp_input+0x2b8>)
 8008176:	496c      	ldr	r1, [pc, #432]	; (8008328 <tcp_input+0x2bc>)
 8008178:	486c      	ldr	r0, [pc, #432]	; (800832c <tcp_input+0x2c0>)
 800817a:	22b2      	movs	r2, #178	; 0xb2
 800817c:	f005 fcf2 	bl	800db64 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8008180:	f06f 0113 	mvn.w	r1, #19
 8008184:	4628      	mov	r0, r5
 8008186:	f7fe f811 	bl	80061ac <pbuf_header>
    tcphdr_opt1len = p->len;
 800818a:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800818c:	8824      	ldrh	r4, [r4, #0]
    tcphdr_opt1len = p->len;
 800818e:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008192:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008194:	4249      	negs	r1, r1
 8008196:	b209      	sxth	r1, r1
 8008198:	4628      	mov	r0, r5
 800819a:	f7fe f807 	bl	80061ac <pbuf_header>
    if (opt2len > p->next->len) {
 800819e:	6828      	ldr	r0, [r5, #0]
 80081a0:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80081a2:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	f0c0 8123 	bcc.w	80083f0 <tcp_input+0x384>
    pbuf_header(p->next, -(s16_t)opt2len);
 80081aa:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80081ac:	6843      	ldr	r3, [r0, #4]
 80081ae:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80081b0:	b209      	sxth	r1, r1
 80081b2:	f7fd fffb 	bl	80061ac <pbuf_header>
    p->tot_len -= opt2len;
 80081b6:	892b      	ldrh	r3, [r5, #8]
 80081b8:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80081ba:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80081bc:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80081be:	b12b      	cbz	r3, 80081cc <tcp_input+0x160>
 80081c0:	4b58      	ldr	r3, [pc, #352]	; (8008324 <tcp_input+0x2b8>)
 80081c2:	495b      	ldr	r1, [pc, #364]	; (8008330 <tcp_input+0x2c4>)
 80081c4:	4859      	ldr	r0, [pc, #356]	; (800832c <tcp_input+0x2c0>)
 80081c6:	22cf      	movs	r2, #207	; 0xcf
 80081c8:	f005 fccc 	bl	800db64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	892a      	ldrh	r2, [r5, #8]
 80081d0:	891b      	ldrh	r3, [r3, #8]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d087      	beq.n	80080e6 <tcp_input+0x7a>
 80081d6:	4b53      	ldr	r3, [pc, #332]	; (8008324 <tcp_input+0x2b8>)
 80081d8:	4956      	ldr	r1, [pc, #344]	; (8008334 <tcp_input+0x2c8>)
 80081da:	4854      	ldr	r0, [pc, #336]	; (800832c <tcp_input+0x2c0>)
 80081dc:	22d0      	movs	r2, #208	; 0xd0
 80081de:	f005 fcc1 	bl	800db64 <iprintf>
 80081e2:	e780      	b.n	80080e6 <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081e4:	7d23      	ldrb	r3, [r4, #20]
 80081e6:	b92b      	cbnz	r3, 80081f4 <tcp_input+0x188>
 80081e8:	465b      	mov	r3, fp
 80081ea:	22e2      	movs	r2, #226	; 0xe2
 80081ec:	4952      	ldr	r1, [pc, #328]	; (8008338 <tcp_input+0x2cc>)
 80081ee:	484f      	ldr	r0, [pc, #316]	; (800832c <tcp_input+0x2c0>)
 80081f0:	f005 fcb8 	bl	800db64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80081f4:	7d23      	ldrb	r3, [r4, #20]
 80081f6:	2b0a      	cmp	r3, #10
 80081f8:	d105      	bne.n	8008206 <tcp_input+0x19a>
 80081fa:	465b      	mov	r3, fp
 80081fc:	22e3      	movs	r2, #227	; 0xe3
 80081fe:	494f      	ldr	r1, [pc, #316]	; (800833c <tcp_input+0x2d0>)
 8008200:	484a      	ldr	r0, [pc, #296]	; (800832c <tcp_input+0x2c0>)
 8008202:	f005 fcaf 	bl	800db64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008206:	7d23      	ldrb	r3, [r4, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d105      	bne.n	8008218 <tcp_input+0x1ac>
 800820c:	465b      	mov	r3, fp
 800820e:	22e4      	movs	r2, #228	; 0xe4
 8008210:	494b      	ldr	r1, [pc, #300]	; (8008340 <tcp_input+0x2d4>)
 8008212:	4846      	ldr	r0, [pc, #280]	; (800832c <tcp_input+0x2c0>)
 8008214:	f005 fca6 	bl	800db64 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008218:	6832      	ldr	r2, [r6, #0]
 800821a:	8b21      	ldrh	r1, [r4, #24]
 800821c:	8813      	ldrh	r3, [r2, #0]
 800821e:	4299      	cmp	r1, r3
 8008220:	68e3      	ldr	r3, [r4, #12]
 8008222:	d16a      	bne.n	80082fa <tcp_input+0x28e>
 8008224:	8ae1      	ldrh	r1, [r4, #22]
 8008226:	8852      	ldrh	r2, [r2, #2]
 8008228:	4291      	cmp	r1, r2
 800822a:	d166      	bne.n	80082fa <tcp_input+0x28e>
        pcb->local_port == tcphdr->dest &&
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008232:	4291      	cmp	r1, r2
 8008234:	d161      	bne.n	80082fa <tcp_input+0x28e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008236:	6821      	ldr	r1, [r4, #0]
 8008238:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800823c:	4291      	cmp	r1, r2
 800823e:	d15c      	bne.n	80082fa <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008240:	42a3      	cmp	r3, r4
 8008242:	f040 8416 	bne.w	8008a72 <tcp_input+0xa06>
 8008246:	4b37      	ldr	r3, [pc, #220]	; (8008324 <tcp_input+0x2b8>)
 8008248:	493e      	ldr	r1, [pc, #248]	; (8008344 <tcp_input+0x2d8>)
 800824a:	4838      	ldr	r0, [pc, #224]	; (800832c <tcp_input+0x2c0>)
 800824c:	22ec      	movs	r2, #236	; 0xec
 800824e:	f005 fc89 	bl	800db64 <iprintf>
      if (prev != NULL) {
 8008252:	f1b9 0f00 	cmp.w	r9, #0
 8008256:	d005      	beq.n	8008264 <tcp_input+0x1f8>
        prev->next = pcb->next;
 8008258:	68e3      	ldr	r3, [r4, #12]
 800825a:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8008262:	603c      	str	r4, [r7, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008264:	68e3      	ldr	r3, [r4, #12]
 8008266:	42a3      	cmp	r3, r4
 8008268:	d105      	bne.n	8008276 <tcp_input+0x20a>
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <tcp_input+0x2b8>)
 800826c:	4936      	ldr	r1, [pc, #216]	; (8008348 <tcp_input+0x2dc>)
 800826e:	482f      	ldr	r0, [pc, #188]	; (800832c <tcp_input+0x2c0>)
 8008270:	22f4      	movs	r2, #244	; 0xf4
 8008272:	f005 fc77 	bl	800db64 <iprintf>
    inseg.next = NULL;
 8008276:	4b35      	ldr	r3, [pc, #212]	; (800834c <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
 8008278:	8929      	ldrh	r1, [r5, #8]
 800827a:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 800827c:	6831      	ldr	r1, [r6, #0]
    recv_acked = 0;
 800827e:	4834      	ldr	r0, [pc, #208]	; (8008350 <tcp_input+0x2e4>)
    inseg.tcphdr = tcphdr;
 8008280:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8008282:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008364 <tcp_input+0x2f8>
    recv_data = NULL;
 8008286:	4933      	ldr	r1, [pc, #204]	; (8008354 <tcp_input+0x2e8>)
    inseg.p = p;
 8008288:	605d      	str	r5, [r3, #4]
    inseg.next = NULL;
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800828e:	600a      	str	r2, [r1, #0]
    recv_flags = 0;
 8008290:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 8008294:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 8008296:	9a04      	ldr	r2, [sp, #16]
 8008298:	9306      	str	r3, [sp, #24]
 800829a:	7812      	ldrb	r2, [r2, #0]
 800829c:	f012 0f08 	tst.w	r2, #8
 80082a0:	4681      	mov	r9, r0
 80082a2:	468b      	mov	fp, r1
 80082a4:	d003      	beq.n	80082ae <tcp_input+0x242>
      p->flags |= PBUF_FLAG_PUSH;
 80082a6:	7b6b      	ldrb	r3, [r5, #13]
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80082ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 813e 	beq.w	8008532 <tcp_input+0x4c6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7fe ff64 	bl	8007184 <tcp_process_refused_data>
 80082bc:	300d      	adds	r0, #13
 80082be:	d008      	beq.n	80082d2 <tcp_input+0x266>
 80082c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8135 	beq.w	8008532 <tcp_input+0x4c6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80082c8:	9b05      	ldr	r3, [sp, #20]
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 8130 	beq.w	8008532 <tcp_input+0x4c6>
        if (pcb->rcv_ann_wnd == 0) {
 80082d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80082d4:	b913      	cbnz	r3, 80082dc <tcp_input+0x270>
          tcp_send_empty_ack(pcb);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fffb 	bl	80092d2 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <tcp_input+0x2ec>)
 80082de:	2400      	movs	r4, #0
 80082e0:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 80082e2:	9b06      	ldr	r3, [sp, #24]
    recv_data = NULL;
 80082e4:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL)
 80082e8:	6858      	ldr	r0, [r3, #4]
 80082ea:	b118      	cbz	r0, 80082f4 <tcp_input+0x288>
      pbuf_free(inseg.p);
 80082ec:	f7fd ff64 	bl	80061b8 <pbuf_free>
      inseg.p = NULL;
 80082f0:	9b06      	ldr	r3, [sp, #24]
 80082f2:	605c      	str	r4, [r3, #4]
}
 80082f4:	b009      	add	sp, #36	; 0x24
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082fa:	46a1      	mov	r9, r4
 80082fc:	461c      	mov	r4, r3
 80082fe:	e72e      	b.n	800815e <tcp_input+0xf2>
 8008300:	20000c50 	.word	0x20000c50
 8008304:	20001b2c 	.word	0x20001b2c
 8008308:	20000c5c 	.word	0x20000c5c
 800830c:	20000c58 	.word	0x20000c58
 8008310:	20000c24 	.word	0x20000c24
 8008314:	20000c28 	.word	0x20000c28
 8008318:	20000c5e 	.word	0x20000c5e
 800831c:	20005054 	.word	0x20005054
 8008320:	20005064 	.word	0x20005064
 8008324:	08010084 	.word	0x08010084
 8008328:	0800fece 	.word	0x0800fece
 800832c:	0800f008 	.word	0x0800f008
 8008330:	0800fede 	.word	0x0800fede
 8008334:	0800feea 	.word	0x0800feea
 8008338:	0800ff09 	.word	0x0800ff09
 800833c:	0800ff30 	.word	0x0800ff30
 8008340:	0800ff5a 	.word	0x0800ff5a
 8008344:	0800ff81 	.word	0x0800ff81
 8008348:	0800ffac 	.word	0x0800ffac
 800834c:	20000c2c 	.word	0x20000c2c
 8008350:	20000c3c 	.word	0x20000c3c
 8008354:	20000c40 	.word	0x20000c40
 8008358:	20005068 	.word	0x20005068
 800835c:	20000c54 	.word	0x20000c54
 8008360:	20000c48 	.word	0x20000c48
 8008364:	20000c44 	.word	0x20000c44
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008368:	7d23      	ldrb	r3, [r4, #20]
 800836a:	2b0a      	cmp	r3, #10
 800836c:	d005      	beq.n	800837a <tcp_input+0x30e>
 800836e:	464b      	mov	r3, r9
 8008370:	22fe      	movs	r2, #254	; 0xfe
 8008372:	49a6      	ldr	r1, [pc, #664]	; (800860c <tcp_input+0x5a0>)
 8008374:	4658      	mov	r0, fp
 8008376:	f005 fbf5 	bl	800db64 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800837a:	6833      	ldr	r3, [r6, #0]
 800837c:	8b22      	ldrh	r2, [r4, #24]
 800837e:	8818      	ldrh	r0, [r3, #0]
 8008380:	4290      	cmp	r0, r2
 8008382:	d13b      	bne.n	80083fc <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8008384:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008386:	885a      	ldrh	r2, [r3, #2]
 8008388:	428a      	cmp	r2, r1
 800838a:	d137      	bne.n	80083fc <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800838c:	6861      	ldr	r1, [r4, #4]
 800838e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008392:	4299      	cmp	r1, r3
 8008394:	d132      	bne.n	80083fc <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008396:	6821      	ldr	r1, [r4, #0]
 8008398:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800839c:	4299      	cmp	r1, r3
 800839e:	d12d      	bne.n	80083fc <tcp_input+0x390>
  if (flags & TCP_RST) {
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	075e      	lsls	r6, r3, #29
 80083a6:	d423      	bmi.n	80083f0 <tcp_input+0x384>
 80083a8:	9905      	ldr	r1, [sp, #20]
 80083aa:	880e      	ldrh	r6, [r1, #0]
  if (flags & TCP_SYN) {
 80083ac:	0799      	lsls	r1, r3, #30
 80083ae:	d512      	bpl.n	80083d6 <tcp_input+0x36a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b6:	1acb      	subs	r3, r1, r3
 80083b8:	d412      	bmi.n	80083e0 <tcp_input+0x374>
 80083ba:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80083bc:	1bdb      	subs	r3, r3, r7
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dc0e      	bgt.n	80083e0 <tcp_input+0x374>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083c2:	4b93      	ldr	r3, [pc, #588]	; (8008610 <tcp_input+0x5a4>)
 80083c4:	e9cd 2000 	strd	r2, r0, [sp]
 80083c8:	4431      	add	r1, r6
 80083ca:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083cc:	f8da 0000 	ldr.w	r0, [sl]
 80083d0:	f001 f92c 	bl	800962c <tcp_rst>
 80083d4:	e00c      	b.n	80083f0 <tcp_input+0x384>
  } else if (flags & TCP_FIN) {
 80083d6:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 80083d8:	bf42      	ittt	mi
 80083da:	4b8e      	ldrmi	r3, [pc, #568]	; (8008614 <tcp_input+0x5a8>)
 80083dc:	681b      	ldrmi	r3, [r3, #0]
 80083de:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 80083e0:	b136      	cbz	r6, 80083f0 <tcp_input+0x384>
    pcb->flags |= TF_ACK_NOW;
 80083e2:	7ea3      	ldrb	r3, [r4, #26]
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 ffa6 	bl	800933c <tcp_output>
  pbuf_free(p);
 80083f0:	4628      	mov	r0, r5
}
 80083f2:	b009      	add	sp, #36	; 0x24
 80083f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80083f8:	f7fd bede 	b.w	80061b8 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80083fc:	68e4      	ldr	r4, [r4, #12]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d1b2      	bne.n	8008368 <tcp_input+0x2fc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008402:	4b85      	ldr	r3, [pc, #532]	; (8008618 <tcp_input+0x5ac>)
      if (lpcb->local_port == tcphdr->dest) {
 8008404:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008406:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008408:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800840c:	4689      	mov	r9, r1
 800840e:	f1b9 0f00 	cmp.w	r9, #0
 8008412:	d111      	bne.n	8008438 <tcp_input+0x3cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008414:	8990      	ldrh	r0, [r2, #12]
 8008416:	f7fd fab5 	bl	8005984 <lwip_htons>
 800841a:	0743      	lsls	r3, r0, #29
 800841c:	d4e8      	bmi.n	80083f0 <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800841e:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008420:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008422:	8810      	ldrh	r0, [r2, #0]
 8008424:	9a03      	ldr	r2, [sp, #12]
 8008426:	6811      	ldr	r1, [r2, #0]
 8008428:	881a      	ldrh	r2, [r3, #0]
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	4b77      	ldr	r3, [pc, #476]	; (8008610 <tcp_input+0x5a4>)
 8008432:	4401      	add	r1, r0
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	e7c9      	b.n	80083cc <tcp_input+0x360>
      if (lpcb->local_port == tcphdr->dest) {
 8008438:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800843c:	8853      	ldrh	r3, [r2, #2]
 800843e:	4283      	cmp	r3, r0
 8008440:	d107      	bne.n	8008452 <tcp_input+0x3e6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008442:	f8d9 3000 	ldr.w	r3, [r9]
 8008446:	4563      	cmp	r3, ip
 8008448:	f000 82f6 	beq.w	8008a38 <tcp_input+0x9cc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 82f3 	beq.w	8008a38 <tcp_input+0x9cc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008452:	464c      	mov	r4, r9
 8008454:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8008458:	e7d9      	b.n	800840e <tcp_input+0x3a2>
  } else if (flags & TCP_SYN) {
 800845a:	0799      	lsls	r1, r3, #30
 800845c:	d5c8      	bpl.n	80083f0 <tcp_input+0x384>
    npcb = tcp_alloc(pcb->prio);
 800845e:	f899 0015 	ldrb.w	r0, [r9, #21]
 8008462:	f7fe ffc1 	bl	80073e8 <tcp_alloc>
    if (npcb == NULL) {
 8008466:	4682      	mov	sl, r0
 8008468:	b950      	cbnz	r0, 8008480 <tcp_input+0x414>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800846a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0be      	beq.n	80083f0 <tcp_input+0x384>
 8008472:	4601      	mov	r1, r0
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800847c:	4798      	blx	r3
 800847e:	e7b7      	b.n	80083f0 <tcp_input+0x384>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008480:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008484:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008486:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008488:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800848c:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800848e:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8008492:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008494:	7813      	ldrb	r3, [r2, #0]
 8008496:	7852      	ldrb	r2, [r2, #1]
 8008498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800849c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800849e:	2303      	movs	r3, #3
 80084a0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80084a2:	9b03      	ldr	r3, [sp, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80084aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80084ac:	f7ff f828 	bl	8007500 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80084b0:	9b03      	ldr	r3, [sp, #12]
    npcb->snd_wl2 = iss;
 80084b2:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80084b6:	681b      	ldr	r3, [r3, #0]
    npcb->snd_nxt = iss;
 80084b8:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80084bc:	3b01      	subs	r3, #1
 80084be:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80084c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->lastack = iss;
 80084c6:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 80084ca:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80084ce:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 80084d2:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80084d6:	f899 3008 	ldrb.w	r3, [r9, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
 80084de:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f8ca 300c 	str.w	r3, [sl, #12]
 80084e8:	f8c7 a000 	str.w	sl, [r7]
 80084ec:	f001 fa3e 	bl	800996c <tcp_timer_needed>
 80084f0:	4b4a      	ldr	r3, [pc, #296]	; (800861c <tcp_input+0x5b0>)
 80084f2:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 80084f4:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 80084f8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80084fa:	f7ff fd5d 	bl	8007fb8 <tcp_parseopt.isra.1>
    npcb->snd_wnd = tcphdr->wnd;
 80084fe:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008500:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8008504:	89db      	ldrh	r3, [r3, #14]
 8008506:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800850a:	f10a 0104 	add.w	r1, sl, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800850e:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008512:	f7ff f801 	bl	8007518 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008516:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008518:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800851c:	4650      	mov	r0, sl
 800851e:	f000 fe25 	bl	800916c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008522:	b120      	cbz	r0, 800852e <tcp_input+0x4c2>
      tcp_abandon(npcb, 0);
 8008524:	4621      	mov	r1, r4
 8008526:	4650      	mov	r0, sl
 8008528:	f7fe feb2 	bl	8007290 <tcp_abandon>
 800852c:	e760      	b.n	80083f0 <tcp_input+0x384>
    tcp_output(npcb);
 800852e:	4650      	mov	r0, sl
 8008530:	e75c      	b.n	80083ec <tcp_input+0x380>
    tcp_input_pcb = pcb;
 8008532:	4b3b      	ldr	r3, [pc, #236]	; (8008620 <tcp_input+0x5b4>)
 8008534:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	781d      	ldrb	r5, [r3, #0]
 800853a:	076a      	lsls	r2, r5, #29
 800853c:	d53d      	bpl.n	80085ba <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 800853e:	7d21      	ldrb	r1, [r4, #20]
 8008540:	2902      	cmp	r1, #2
 8008542:	d123      	bne.n	800858c <tcp_input+0x520>
      if (ackno == pcb->snd_nxt) {
 8008544:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008546:	f8da 3000 	ldr.w	r3, [sl]
 800854a:	429a      	cmp	r2, r3
 800854c:	d109      	bne.n	8008562 <tcp_input+0x4f6>
      recv_flags |= TF_RESET;
 800854e:	f898 3000 	ldrb.w	r3, [r8]
 8008552:	f043 0308 	orr.w	r3, r3, #8
 8008556:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 800855a:	7ea3      	ldrb	r3, [r4, #26]
 800855c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8008560:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008562:	f898 3000 	ldrb.w	r3, [r8]
 8008566:	0719      	lsls	r1, r3, #28
 8008568:	f140 81ff 	bpl.w	800896a <tcp_input+0x8fe>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800856c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008570:	b11b      	cbz	r3, 800857a <tcp_input+0x50e>
 8008572:	f06f 010d 	mvn.w	r1, #13
 8008576:	6920      	ldr	r0, [r4, #16]
 8008578:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800857a:	4621      	mov	r1, r4
 800857c:	4829      	ldr	r0, [pc, #164]	; (8008624 <tcp_input+0x5b8>)
 800857e:	f7fe fcef 	bl	8006f60 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008582:	4621      	mov	r1, r4
 8008584:	2001      	movs	r0, #1
 8008586:	f7fd fcb3 	bl	8005ef0 <memp_free>
 800858a:	e6a7      	b.n	80082dc <tcp_input+0x270>
      if (seqno == pcb->rcv_nxt) {
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d007      	beq.n	80085a6 <tcp_input+0x53a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	d4e3      	bmi.n	8008562 <tcp_input+0x4f6>
 800859a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dcdf      	bgt.n	8008562 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 80085a2:	7ea3      	ldrb	r3, [r4, #26]
 80085a4:	e011      	b.n	80085ca <tcp_input+0x55e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d1d1      	bne.n	800854e <tcp_input+0x4e2>
 80085aa:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <tcp_input+0x5bc>)
 80085ac:	491f      	ldr	r1, [pc, #124]	; (800862c <tcp_input+0x5c0>)
 80085ae:	4820      	ldr	r0, [pc, #128]	; (8008630 <tcp_input+0x5c4>)
 80085b0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80085b4:	f005 fad6 	bl	800db64 <iprintf>
 80085b8:	e7c9      	b.n	800854e <tcp_input+0x4e2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80085ba:	f015 0202 	ands.w	r2, r5, #2
 80085be:	7ea3      	ldrb	r3, [r4, #26]
 80085c0:	d006      	beq.n	80085d0 <tcp_input+0x564>
 80085c2:	7d21      	ldrb	r1, [r4, #20]
 80085c4:	3902      	subs	r1, #2
 80085c6:	2901      	cmp	r1, #1
 80085c8:	d902      	bls.n	80085d0 <tcp_input+0x564>
      tcp_ack_now(pcb);
 80085ca:	f043 0302 	orr.w	r3, r3, #2
 80085ce:	e7c7      	b.n	8008560 <tcp_input+0x4f4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80085d0:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 80085d2:	bf58      	it	pl
 80085d4:	4b0f      	ldrpl	r3, [pc, #60]	; (8008614 <tcp_input+0x5a8>)
 80085d6:	9207      	str	r2, [sp, #28]
 80085d8:	bf5c      	itt	pl
 80085da:	681b      	ldrpl	r3, [r3, #0]
 80085dc:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 80085e4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80085e8:	f7ff fce6 	bl	8007fb8 <tcp_parseopt.isra.1>
  switch (pcb->state) {
 80085ec:	7d23      	ldrb	r3, [r4, #20]
 80085ee:	9a07      	ldr	r2, [sp, #28]
 80085f0:	3b02      	subs	r3, #2
 80085f2:	2b07      	cmp	r3, #7
 80085f4:	d8b5      	bhi.n	8008562 <tcp_input+0x4f6>
 80085f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085fa:	001d      	.short	0x001d
 80085fc:	0109009f 	.word	0x0109009f
 8008600:	0157010d 	.word	0x0157010d
 8008604:	01700109 	.word	0x01700109
 8008608:	019f      	.short	0x019f
 800860a:	bf00      	nop
 800860c:	0800ffd6 	.word	0x0800ffd6
 8008610:	20001b3c 	.word	0x20001b3c
 8008614:	20005058 	.word	0x20005058
 8008618:	2000505c 	.word	0x2000505c
 800861c:	20005050 	.word	0x20005050
 8008620:	20005068 	.word	0x20005068
 8008624:	20005054 	.word	0x20005054
 8008628:	08010084 	.word	0x08010084
 800862c:	08010003 	.word	0x08010003
 8008630:	0800f008 	.word	0x0800f008
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008634:	f005 0312 	and.w	r3, r5, #18
 8008638:	2b12      	cmp	r3, #18
 800863a:	d15f      	bne.n	80086fc <tcp_input+0x690>
        && (ackno == pcb->lastack + 1)) {
 800863c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800863e:	f8da 3000 	ldr.w	r3, [sl]
 8008642:	3201      	adds	r2, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d159      	bne.n	80086fc <tcp_input+0x690>
      pcb->rcv_nxt = seqno + 1;
 8008648:	9b03      	ldr	r3, [sp, #12]
      pcb->lastack = ackno;
 800864a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800864c:	681b      	ldr	r3, [r3, #0]
      pcb->snd_wnd = tcphdr->wnd;
 800864e:	6832      	ldr	r2, [r6, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008650:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8008652:	1c59      	adds	r1, r3, #1
 8008654:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008656:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008658:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800865a:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800865c:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800865e:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8008660:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008664:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8008668:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800866a:	18e1      	adds	r1, r4, r3
 800866c:	f7fe ff54 	bl	8007518 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008670:	f241 121c 	movw	r2, #4380	; 0x111c
 8008674:	0043      	lsls	r3, r0, #1
 8008676:	4293      	cmp	r3, r2
 8008678:	bf38      	it	cc
 800867a:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800867c:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800867e:	0080      	lsls	r0, r0, #2
 8008680:	4283      	cmp	r3, r0
 8008682:	bf28      	it	cs
 8008684:	4603      	movcs	r3, r0
 8008686:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800868a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800868e:	b933      	cbnz	r3, 800869e <tcp_input+0x632>
 8008690:	4ba1      	ldr	r3, [pc, #644]	; (8008918 <tcp_input+0x8ac>)
 8008692:	49a2      	ldr	r1, [pc, #648]	; (800891c <tcp_input+0x8b0>)
 8008694:	48a2      	ldr	r0, [pc, #648]	; (8008920 <tcp_input+0x8b4>)
 8008696:	f240 321a 	movw	r2, #794	; 0x31a
 800869a:	f005 fa63 	bl	800db64 <iprintf>
      --pcb->snd_queuelen;
 800869e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80086a2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80086a4:	3b01      	subs	r3, #1
 80086a6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80086aa:	b9fd      	cbnz	r5, 80086ec <tcp_input+0x680>
        rseg = pcb->unsent;
 80086ac:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80086ae:	b935      	cbnz	r5, 80086be <tcp_input+0x652>
 80086b0:	4b99      	ldr	r3, [pc, #612]	; (8008918 <tcp_input+0x8ac>)
 80086b2:	499c      	ldr	r1, [pc, #624]	; (8008924 <tcp_input+0x8b8>)
 80086b4:	489a      	ldr	r0, [pc, #616]	; (8008920 <tcp_input+0x8b4>)
 80086b6:	f240 3222 	movw	r2, #802	; 0x322
 80086ba:	f005 fa53 	bl	800db64 <iprintf>
        pcb->unsent = rseg->next;
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7fe f9b6 	bl	8006a34 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80086c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086ca:	b993      	cbnz	r3, 80086f2 <tcp_input+0x686>
        pcb->rtime = -1;
 80086cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086d0:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80086d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f43f af63 	beq.w	80085a2 <tcp_input+0x536>
 80086dc:	2200      	movs	r2, #0
 80086de:	4621      	mov	r1, r4
 80086e0:	6920      	ldr	r0, [r4, #16]
 80086e2:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80086e4:	300d      	adds	r0, #13
 80086e6:	f47f af5c 	bne.w	80085a2 <tcp_input+0x536>
 80086ea:	e5f7      	b.n	80082dc <tcp_input+0x270>
        pcb->unacked = rseg->next;
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	66e3      	str	r3, [r4, #108]	; 0x6c
 80086f0:	e7e7      	b.n	80086c2 <tcp_input+0x656>
        pcb->rtime = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 80086f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fa:	e7ea      	b.n	80086d2 <tcp_input+0x666>
    else if (flags & TCP_ACK) {
 80086fc:	06e8      	lsls	r0, r5, #27
 80086fe:	f57f af30 	bpl.w	8008562 <tcp_input+0x4f6>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008702:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008704:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008706:	8810      	ldrh	r0, [r2, #0]
 8008708:	9a03      	ldr	r2, [sp, #12]
 800870a:	6811      	ldr	r1, [r2, #0]
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	9201      	str	r2, [sp, #4]
 8008710:	885b      	ldrh	r3, [r3, #2]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4b84      	ldr	r3, [pc, #528]	; (8008928 <tcp_input+0x8bc>)
 8008716:	4401      	add	r1, r0
 8008718:	1d1a      	adds	r2, r3, #4
 800871a:	f8da 0000 	ldr.w	r0, [sl]
 800871e:	f000 ff85 	bl	800962c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008722:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008726:	2b05      	cmp	r3, #5
 8008728:	f63f af1b 	bhi.w	8008562 <tcp_input+0x4f6>
        pcb->rtime = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008730:	4620      	mov	r0, r4
 8008732:	f000 ffd5 	bl	80096e0 <tcp_rexmit_rto>
 8008736:	e714      	b.n	8008562 <tcp_input+0x4f6>
    if (flags & TCP_ACK) {
 8008738:	06e9      	lsls	r1, r5, #27
 800873a:	d559      	bpl.n	80087f0 <tcp_input+0x784>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800873c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800873e:	f8da 0000 	ldr.w	r0, [sl]
 8008742:	43db      	mvns	r3, r3
 8008744:	42c3      	cmn	r3, r0
 8008746:	d444      	bmi.n	80087d2 <tcp_input+0x766>
 8008748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800874a:	1ac3      	subs	r3, r0, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	dc40      	bgt.n	80087d2 <tcp_input+0x766>
        pcb->state = ESTABLISHED;
 8008750:	2304      	movs	r3, #4
 8008752:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008754:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008756:	b143      	cbz	r3, 800876a <tcp_input+0x6fe>
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	b933      	cbnz	r3, 800876a <tcp_input+0x6fe>
 800875c:	4b6e      	ldr	r3, [pc, #440]	; (8008918 <tcp_input+0x8ac>)
 800875e:	4973      	ldr	r1, [pc, #460]	; (800892c <tcp_input+0x8c0>)
 8008760:	486f      	ldr	r0, [pc, #444]	; (8008920 <tcp_input+0x8b4>)
 8008762:	f240 3251 	movw	r2, #849	; 0x351
 8008766:	f005 f9fd 	bl	800db64 <iprintf>
        if (pcb->listener == NULL) {
 800876a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800876c:	b91b      	cbnz	r3, 8008776 <tcp_input+0x70a>
            tcp_abort(pcb);
 800876e:	4620      	mov	r0, r4
 8008770:	f7fe fe04 	bl	800737c <tcp_abort>
            goto aborted;
 8008774:	e5b2      	b.n	80082dc <tcp_input+0x270>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0f8      	beq.n	800876e <tcp_input+0x702>
 800877c:	2200      	movs	r2, #0
 800877e:	4621      	mov	r1, r4
 8008780:	6920      	ldr	r0, [r4, #16]
 8008782:	4798      	blx	r3
        if (err != ERR_OK) {
 8008784:	b118      	cbz	r0, 800878e <tcp_input+0x722>
          if (err != ERR_ABRT) {
 8008786:	300d      	adds	r0, #13
 8008788:	f43f ada8 	beq.w	80082dc <tcp_input+0x270>
 800878c:	e7ef      	b.n	800876e <tcp_input+0x702>
        tcp_receive(pcb);
 800878e:	4620      	mov	r0, r4
 8008790:	f7fe ff34 	bl	80075fc <tcp_receive>
        if (recv_acked != 0) {
 8008794:	f8b9 3000 	ldrh.w	r3, [r9]
 8008798:	b113      	cbz	r3, 80087a0 <tcp_input+0x734>
          recv_acked--;
 800879a:	3b01      	subs	r3, #1
 800879c:	f8a9 3000 	strh.w	r3, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80087a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80087a2:	f241 111c 	movw	r1, #4380	; 0x111c
 80087a6:	0053      	lsls	r3, r2, #1
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf38      	it	cc
 80087ac:	460b      	movcc	r3, r1
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	4293      	cmp	r3, r2
 80087b2:	bf28      	it	cs
 80087b4:	4613      	movcs	r3, r2
 80087b6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80087ba:	f898 3000 	ldrb.w	r3, [r8]
 80087be:	069b      	lsls	r3, r3, #26
 80087c0:	f57f aecf 	bpl.w	8008562 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 80087c4:	7ea3      	ldrb	r3, [r4, #26]
 80087c6:	f043 0302 	orr.w	r3, r3, #2
 80087ca:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80087cc:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 80087ce:	7523      	strb	r3, [r4, #20]
 80087d0:	e6c7      	b.n	8008562 <tcp_input+0x4f6>
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80087d2:	9a05      	ldr	r2, [sp, #20]
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087d4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80087d6:	8815      	ldrh	r5, [r2, #0]
 80087d8:	9a03      	ldr	r2, [sp, #12]
 80087da:	6811      	ldr	r1, [r2, #0]
 80087dc:	881a      	ldrh	r2, [r3, #0]
 80087de:	9201      	str	r2, [sp, #4]
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4b50      	ldr	r3, [pc, #320]	; (8008928 <tcp_input+0x8bc>)
 80087e6:	4429      	add	r1, r5
 80087e8:	1d1a      	adds	r2, r3, #4
 80087ea:	f000 ff1f 	bl	800962c <tcp_rst>
 80087ee:	e6b8      	b.n	8008562 <tcp_input+0x4f6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	f43f aeb6 	beq.w	8008562 <tcp_input+0x4f6>
 80087f6:	9a03      	ldr	r2, [sp, #12]
 80087f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	4293      	cmp	r3, r2
 8008800:	f47f aeaf 	bne.w	8008562 <tcp_input+0x4f6>
      tcp_rexmit(pcb);
 8008804:	4620      	mov	r0, r4
 8008806:	f000 ff87 	bl	8009718 <tcp_rexmit>
 800880a:	e6aa      	b.n	8008562 <tcp_input+0x4f6>
    tcp_receive(pcb);
 800880c:	4620      	mov	r0, r4
 800880e:	f7fe fef5 	bl	80075fc <tcp_receive>
 8008812:	e7d2      	b.n	80087ba <tcp_input+0x74e>
    tcp_receive(pcb);
 8008814:	4620      	mov	r0, r4
 8008816:	f7fe fef1 	bl	80075fc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800881a:	f898 3000 	ldrb.w	r3, [r8]
 800881e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8008826:	d030      	beq.n	800888a <tcp_input+0x81e>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008828:	f013 0f10 	tst.w	r3, #16
 800882c:	7ea3      	ldrb	r3, [r4, #26]
 800882e:	d027      	beq.n	8008880 <tcp_input+0x814>
 8008830:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008832:	f8da 2000 	ldr.w	r2, [sl]
 8008836:	4291      	cmp	r1, r2
 8008838:	d122      	bne.n	8008880 <tcp_input+0x814>
 800883a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800883c:	bb02      	cbnz	r2, 8008880 <tcp_input+0x814>
        tcp_ack_now(pcb);
 800883e:	f043 0302 	orr.w	r3, r3, #2
 8008842:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8008844:	4620      	mov	r0, r4
 8008846:	f7fe f98b 	bl	8006b60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	429c      	cmp	r4, r3
 800884e:	d109      	bne.n	8008864 <tcp_input+0x7f8>
      TCP_RMV_ACTIVE(pcb);
 8008850:	68e3      	ldr	r3, [r4, #12]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	e008      	b.n	8008868 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	4294      	cmp	r4, r2
 800885a:	d102      	bne.n	8008862 <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 800885c:	68e2      	ldr	r2, [r4, #12]
 800885e:	60da      	str	r2, [r3, #12]
 8008860:	e002      	b.n	8008868 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8008862:	4613      	mov	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f6      	bne.n	8008856 <tcp_input+0x7ea>
      TCP_RMV_ACTIVE(pcb);
 8008868:	4b31      	ldr	r3, [pc, #196]	; (8008930 <tcp_input+0x8c4>)
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800886e:	230a      	movs	r3, #10
 8008870:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <tcp_input+0x8c8>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	60e2      	str	r2, [r4, #12]
 8008878:	601c      	str	r4, [r3, #0]
 800887a:	f001 f877 	bl	800996c <tcp_timer_needed>
 800887e:	e670      	b.n	8008562 <tcp_input+0x4f6>
        tcp_ack_now(pcb);
 8008880:	f043 0302 	orr.w	r3, r3, #2
 8008884:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8008886:	2308      	movs	r3, #8
 8008888:	e7a1      	b.n	80087ce <tcp_input+0x762>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800888a:	06df      	lsls	r7, r3, #27
 800888c:	f57f ae69 	bpl.w	8008562 <tcp_input+0x4f6>
 8008890:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008892:	f8da 3000 	ldr.w	r3, [sl]
 8008896:	429a      	cmp	r2, r3
 8008898:	f47f ae63 	bne.w	8008562 <tcp_input+0x4f6>
 800889c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f47f ae5f 	bne.w	8008562 <tcp_input+0x4f6>
      pcb->state = FIN_WAIT_2;
 80088a4:	2306      	movs	r3, #6
 80088a6:	e792      	b.n	80087ce <tcp_input+0x762>
    tcp_receive(pcb);
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7fe fea7 	bl	80075fc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80088ae:	f898 3000 	ldrb.w	r3, [r8]
 80088b2:	069e      	lsls	r6, r3, #26
 80088b4:	f57f ae55 	bpl.w	8008562 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 80088b8:	7ea3      	ldrb	r3, [r4, #26]
 80088ba:	f043 0302 	orr.w	r3, r3, #2
 80088be:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7fe f94d 	bl	8006b60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	429c      	cmp	r4, r3
 80088ca:	d0c1      	beq.n	8008850 <tcp_input+0x7e4>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0cb      	beq.n	8008868 <tcp_input+0x7fc>
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	4294      	cmp	r4, r2
 80088d4:	d0c2      	beq.n	800885c <tcp_input+0x7f0>
 80088d6:	4613      	mov	r3, r2
 80088d8:	e7f8      	b.n	80088cc <tcp_input+0x860>
    tcp_receive(pcb);
 80088da:	4620      	mov	r0, r4
 80088dc:	f7fe fe8e 	bl	80075fc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80088e0:	9b04      	ldr	r3, [sp, #16]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	06dd      	lsls	r5, r3, #27
 80088e6:	f57f ae3c 	bpl.w	8008562 <tcp_input+0x4f6>
 80088ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80088ec:	f8da 3000 	ldr.w	r3, [sl]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	f47f ae36 	bne.w	8008562 <tcp_input+0x4f6>
 80088f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f ae32 	bne.w	8008562 <tcp_input+0x4f6>
      tcp_pcb_purge(pcb);
 80088fe:	4620      	mov	r0, r4
 8008900:	f7fe f92e 	bl	8006b60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	429c      	cmp	r4, r3
 8008908:	d0a2      	beq.n	8008850 <tcp_input+0x7e4>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ac      	beq.n	8008868 <tcp_input+0x7fc>
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	4294      	cmp	r4, r2
 8008912:	d0a3      	beq.n	800885c <tcp_input+0x7f0>
 8008914:	4613      	mov	r3, r2
 8008916:	e7f8      	b.n	800890a <tcp_input+0x89e>
 8008918:	08010084 	.word	0x08010084
 800891c:	08010023 	.word	0x08010023
 8008920:	0800f008 	.word	0x0800f008
 8008924:	08010039 	.word	0x08010039
 8008928:	20001b3c 	.word	0x20001b3c
 800892c:	0801004c 	.word	0x0801004c
 8008930:	20005050 	.word	0x20005050
 8008934:	20005064 	.word	0x20005064
    tcp_receive(pcb);
 8008938:	4620      	mov	r0, r4
 800893a:	f7fe fe5f 	bl	80075fc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	06d8      	lsls	r0, r3, #27
 8008944:	f57f ae0d 	bpl.w	8008562 <tcp_input+0x4f6>
 8008948:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800894a:	f8da 3000 	ldr.w	r3, [sl]
 800894e:	429a      	cmp	r2, r3
 8008950:	f47f ae07 	bne.w	8008562 <tcp_input+0x4f6>
 8008954:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008956:	2b00      	cmp	r3, #0
 8008958:	f47f ae03 	bne.w	8008562 <tcp_input+0x4f6>
      recv_flags |= TF_CLOSED;
 800895c:	f898 3000 	ldrb.w	r3, [r8]
 8008960:	f043 0310 	orr.w	r3, r3, #16
 8008964:	f888 3000 	strb.w	r3, [r8]
 8008968:	e5fb      	b.n	8008562 <tcp_input+0x4f6>
        if (recv_acked > 0) {
 800896a:	f8b9 2000 	ldrh.w	r2, [r9]
 800896e:	b122      	cbz	r2, 800897a <tcp_input+0x90e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008970:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008972:	b9f3      	cbnz	r3, 80089b2 <tcp_input+0x946>
          recv_acked = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	f8a9 3000 	strh.w	r3, [r9]
        if (tcp_input_delayed_close(pcb)) {
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff fb56 	bl	800802c <tcp_input_delayed_close>
 8008980:	2800      	cmp	r0, #0
 8008982:	f47f acab 	bne.w	80082dc <tcp_input+0x270>
        if (recv_data != NULL) {
 8008986:	f8db 3000 	ldr.w	r3, [fp]
 800898a:	b333      	cbz	r3, 80089da <tcp_input+0x96e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800898c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800898e:	b133      	cbz	r3, 800899e <tcp_input+0x932>
 8008990:	4b3b      	ldr	r3, [pc, #236]	; (8008a80 <tcp_input+0xa14>)
 8008992:	493c      	ldr	r1, [pc, #240]	; (8008a84 <tcp_input+0xa18>)
 8008994:	483c      	ldr	r0, [pc, #240]	; (8008a88 <tcp_input+0xa1c>)
 8008996:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800899a:	f005 f8e3 	bl	800db64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800899e:	7ea3      	ldrb	r3, [r4, #26]
 80089a0:	f8db 2000 	ldr.w	r2, [fp]
 80089a4:	f013 0310 	ands.w	r3, r3, #16
 80089a8:	d009      	beq.n	80089be <tcp_input+0x952>
            pbuf_free(recv_data);
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fd fc04 	bl	80061b8 <pbuf_free>
 80089b0:	e6dd      	b.n	800876e <tcp_input+0x702>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80089b2:	4621      	mov	r1, r4
 80089b4:	6920      	ldr	r0, [r4, #16]
 80089b6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80089b8:	300d      	adds	r0, #13
 80089ba:	d1db      	bne.n	8008974 <tcp_input+0x908>
 80089bc:	e48e      	b.n	80082dc <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80089be:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80089c2:	b30d      	cbz	r5, 8008a08 <tcp_input+0x99c>
 80089c4:	4621      	mov	r1, r4
 80089c6:	6920      	ldr	r0, [r4, #16]
 80089c8:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 80089ca:	f110 0f0d 	cmn.w	r0, #13
 80089ce:	f43f ac85 	beq.w	80082dc <tcp_input+0x270>
          if (err != ERR_OK) {
 80089d2:	b110      	cbz	r0, 80089da <tcp_input+0x96e>
            pcb->refused_data = recv_data;
 80089d4:	f8db 3000 	ldr.w	r3, [fp]
 80089d8:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80089da:	f898 3000 	ldrb.w	r3, [r8]
 80089de:	069a      	lsls	r2, r3, #26
 80089e0:	d505      	bpl.n	80089ee <tcp_input+0x982>
          if (pcb->refused_data != NULL) {
 80089e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80089e4:	b1b3      	cbz	r3, 8008a14 <tcp_input+0x9a8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80089e6:	7b5a      	ldrb	r2, [r3, #13]
 80089e8:	f042 0220 	orr.w	r2, r2, #32
 80089ec:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80089ee:	4b27      	ldr	r3, [pc, #156]	; (8008a8c <tcp_input+0xa20>)
 80089f0:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 80089f2:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80089f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80089f6:	f7ff fb19 	bl	800802c <tcp_input_delayed_close>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f47f ac6e 	bne.w	80082dc <tcp_input+0x270>
        tcp_output(pcb);
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fc9b 	bl	800933c <tcp_output>
 8008a06:	e469      	b.n	80082dc <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008a08:	462b      	mov	r3, r5
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f7fe fba7 	bl	8007160 <tcp_recv_null>
 8008a12:	e7da      	b.n	80089ca <tcp_input+0x95e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008a16:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8008a1e:	bf1c      	itt	ne
 8008a20:	3301      	addne	r3, #1
 8008a22:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	d0e2      	beq.n	80089ee <tcp_input+0x982>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	6920      	ldr	r0, [r4, #16]
 8008a30:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8008a32:	300d      	adds	r0, #13
 8008a34:	d1db      	bne.n	80089ee <tcp_input+0x982>
aborted:
 8008a36:	e451      	b.n	80082dc <tcp_input+0x270>
      if (prev != NULL) {
 8008a38:	b13c      	cbz	r4, 8008a4a <tcp_input+0x9de>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008a3a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008a3e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <tcp_input+0xa24>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008a42:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008a46:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8008a4a:	9b04      	ldr	r3, [sp, #16]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	075c      	lsls	r4, r3, #29
 8008a50:	f53f acce 	bmi.w	80083f0 <tcp_input+0x384>
  if (flags & TCP_ACK) {
 8008a54:	f013 0410 	ands.w	r4, r3, #16
 8008a58:	f43f acff 	beq.w	800845a <tcp_input+0x3ee>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a5c:	9b05      	ldr	r3, [sp, #20]
 8008a5e:	881c      	ldrh	r4, [r3, #0]
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	8813      	ldrh	r3, [r2, #0]
 8008a66:	e9cd 0300 	strd	r0, r3, [sp]
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <tcp_input+0xa28>)
 8008a6c:	4421      	add	r1, r4
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	e4ac      	b.n	80083cc <tcp_input+0x360>
      if (prev != NULL) {
 8008a72:	f1b9 0f00 	cmp.w	r9, #0
 8008a76:	f47f abef 	bne.w	8008258 <tcp_input+0x1ec>
 8008a7a:	f7ff bbfc 	b.w	8008276 <tcp_input+0x20a>
 8008a7e:	bf00      	nop
 8008a80:	08010084 	.word	0x08010084
 8008a84:	0801006a 	.word	0x0801006a
 8008a88:	0800f008 	.word	0x0800f008
 8008a8c:	20005068 	.word	0x20005068
 8008a90:	2000505c 	.word	0x2000505c
 8008a94:	20001b3c 	.word	0x20001b3c

08008a98 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8008a98:	4a02      	ldr	r2, [pc, #8]	; (8008aa4 <tcp_trigger_input_pcb_close+0xc>)
 8008a9a:	7813      	ldrb	r3, [r2, #0]
 8008a9c:	f043 0310 	orr.w	r3, r3, #16
 8008aa0:	7013      	strb	r3, [r2, #0]
}
 8008aa2:	4770      	bx	lr
 8008aa4:	20000c44 	.word	0x20000c44

08008aa8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8008aac:	4294      	cmp	r4, r2
{
 8008aae:	461e      	mov	r6, r3
 8008ab0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8008ab4:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8008ab6:	d228      	bcs.n	8008b0a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008ab8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8008abc:	07ad      	lsls	r5, r5, #30
 8008abe:	d407      	bmi.n	8008ad0 <tcp_pbuf_prealloc+0x28>
 8008ac0:	7e9d      	ldrb	r5, [r3, #26]
 8008ac2:	066d      	lsls	r5, r5, #25
 8008ac4:	d421      	bmi.n	8008b0a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8008ac6:	b119      	cbz	r1, 8008ad0 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8008ac8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008aca:	b909      	cbnz	r1, 8008ad0 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	b1e3      	cbz	r3, 8008b0a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008ad0:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8008ad4:	f023 0103 	bic.w	r1, r3, #3
 8008ad8:	428a      	cmp	r2, r1
 8008ada:	bf28      	it	cs
 8008adc:	460a      	movcs	r2, r1
 8008ade:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f7fd fbcb 	bl	800627c <pbuf_alloc>
  if (p == NULL) {
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b168      	cbz	r0, 8008b06 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8008aea:	6803      	ldr	r3, [r0, #0]
 8008aec:	b133      	cbz	r3, 8008afc <tcp_pbuf_prealloc+0x54>
 8008aee:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <tcp_pbuf_prealloc+0x68>)
 8008af0:	4908      	ldr	r1, [pc, #32]	; (8008b14 <tcp_pbuf_prealloc+0x6c>)
 8008af2:	4809      	ldr	r0, [pc, #36]	; (8008b18 <tcp_pbuf_prealloc+0x70>)
 8008af4:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008af8:	f005 f834 	bl	800db64 <iprintf>
  *oversize = p->len - length;
 8008afc:	896b      	ldrh	r3, [r5, #10]
 8008afe:	1b1b      	subs	r3, r3, r4
 8008b00:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8008b02:	812c      	strh	r4, [r5, #8]
 8008b04:	816c      	strh	r4, [r5, #10]
  return p;
}
 8008b06:	4628      	mov	r0, r5
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	e7e8      	b.n	8008ae0 <tcp_pbuf_prealloc+0x38>
 8008b0e:	bf00      	nop
 8008b10:	08010387 	.word	0x08010387
 8008b14:	080103ba 	.word	0x080103ba
 8008b18:	0800f008 	.word	0x0800f008

08008b1c <tcp_create_segment>:
{
 8008b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	4681      	mov	r9, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008b22:	2003      	movs	r0, #3
{
 8008b24:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 8008b28:	460e      	mov	r6, r1
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	469a      	mov	sl, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008b2e:	f7fd f9c3 	bl	8005eb8 <memp_malloc>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008b32:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8008b36:	b2fd      	uxtb	r5, r7
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008b38:	4604      	mov	r4, r0
 8008b3a:	b928      	cbnz	r0, 8008b48 <tcp_create_segment+0x2c>
    pbuf_free(p);
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7fd fb3b 	bl	80061b8 <pbuf_free>
}
 8008b42:	4620      	mov	r0, r4
 8008b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 8008b48:	2300      	movs	r3, #0
  seg->flags = optflags;
 8008b4a:	f880 b00a 	strb.w	fp, [r0, #10]
  seg->p = p;
 8008b4e:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008b52:	8933      	ldrh	r3, [r6, #8]
 8008b54:	b2bf      	uxth	r7, r7
 8008b56:	42bb      	cmp	r3, r7
 8008b58:	d205      	bcs.n	8008b66 <tcp_create_segment+0x4a>
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <tcp_create_segment+0xac>)
 8008b5c:	491b      	ldr	r1, [pc, #108]	; (8008bcc <tcp_create_segment+0xb0>)
 8008b5e:	481c      	ldr	r0, [pc, #112]	; (8008bd0 <tcp_create_segment+0xb4>)
 8008b60:	22ba      	movs	r2, #186	; 0xba
 8008b62:	f004 ffff 	bl	800db64 <iprintf>
  seg->len = p->tot_len - optlen;
 8008b66:	8933      	ldrh	r3, [r6, #8]
 8008b68:	1bdf      	subs	r7, r3, r7
 8008b6a:	8127      	strh	r7, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8008b6c:	2114      	movs	r1, #20
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7fd fb1c 	bl	80061ac <pbuf_header>
 8008b74:	4607      	mov	r7, r0
 8008b76:	b120      	cbz	r0, 8008b82 <tcp_create_segment+0x66>
    tcp_seg_free(seg);
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7fd ff5b 	bl	8006a34 <tcp_seg_free>
    return NULL;
 8008b7e:	2400      	movs	r4, #0
 8008b80:	e7df      	b.n	8008b42 <tcp_create_segment+0x26>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008b82:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008b84:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008b88:	685e      	ldr	r6, [r3, #4]
 8008b8a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008b8c:	f7fc fefa 	bl	8005984 <lwip_htons>
 8008b90:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008b92:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8008b96:	68e6      	ldr	r6, [r4, #12]
 8008b98:	f7fc fef4 	bl	8005984 <lwip_htons>
 8008b9c:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	68e6      	ldr	r6, [r4, #12]
 8008ba2:	f7fc fef2 	bl	800598a <lwip_htonl>
 8008ba6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008ba8:	02a8      	lsls	r0, r5, #10
 8008baa:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 8008bae:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8008bb2:	ea40 0008 	orr.w	r0, r0, r8
 8008bb6:	68e6      	ldr	r6, [r4, #12]
 8008bb8:	f7fc fee4 	bl	8005984 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8008bbc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008bbe:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8008bc0:	749f      	strb	r7, [r3, #18]
 8008bc2:	74df      	strb	r7, [r3, #19]
  return seg;
 8008bc4:	e7bd      	b.n	8008b42 <tcp_create_segment+0x26>
 8008bc6:	bf00      	nop
 8008bc8:	08010387 	.word	0x08010387
 8008bcc:	0801020f 	.word	0x0801020f
 8008bd0:	0800f008 	.word	0x0800f008

08008bd4 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008bd4:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008bd8:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008bda:	4605      	mov	r5, r0
 8008bdc:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008bde:	2001      	movs	r0, #1
 8008be0:	2200      	movs	r2, #0
 8008be2:	f7fd fb4b 	bl	800627c <pbuf_alloc>
  if (p != NULL) {
 8008be6:	4606      	mov	r6, r0
 8008be8:	b340      	cbz	r0, 8008c3c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008bea:	8943      	ldrh	r3, [r0, #10]
 8008bec:	2b13      	cmp	r3, #19
 8008bee:	d805      	bhi.n	8008bfc <tcp_output_alloc_header.constprop.0+0x28>
 8008bf0:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <tcp_output_alloc_header.constprop.0+0x6c>)
 8008bf2:	4914      	ldr	r1, [pc, #80]	; (8008c44 <tcp_output_alloc_header.constprop.0+0x70>)
 8008bf4:	4814      	ldr	r0, [pc, #80]	; (8008c48 <tcp_output_alloc_header.constprop.0+0x74>)
 8008bf6:	2273      	movs	r2, #115	; 0x73
 8008bf8:	f004 ffb4 	bl	800db64 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8008bfc:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8008bfe:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008c00:	f7fc fec0 	bl	8005984 <lwip_htons>
 8008c04:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008c06:	8b28      	ldrh	r0, [r5, #24]
 8008c08:	f7fc febc 	bl	8005984 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8008c0c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008c0e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008c10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008c12:	f7fc feba 	bl	800598a <lwip_htonl>
 8008c16:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008c18:	f245 0010 	movw	r0, #20496	; 0x5010
 8008c1c:	f7fc feb2 	bl	8005984 <lwip_htons>
 8008c20:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008c22:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8008c24:	f7fc feae 	bl	8005984 <lwip_htons>
    tcphdr->chksum = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	7423      	strb	r3, [r4, #16]
 8008c2c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008c2e:	74a3      	strb	r3, [r4, #18]
 8008c30:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008c32:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8008c34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008c36:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008c38:	4413      	add	r3, r2
 8008c3a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c40:	08010387 	.word	0x08010387
 8008c44:	08010359 	.word	0x08010359
 8008c48:	0800f008 	.word	0x0800f008

08008c4c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	b091      	sub	sp, #68	; 0x44
 8008c52:	4604      	mov	r4, r0
 8008c54:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008c5c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 8008c64:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008c66:	9a07      	ldr	r2, [sp, #28]
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bf28      	it	cs
 8008c6e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bf18      	it	ne
 8008c74:	461a      	movne	r2, r3
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008c76:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8008c7a:	b959      	cbnz	r1, 8008c94 <tcp_write+0x48>
 8008c7c:	4ba4      	ldr	r3, [pc, #656]	; (8008f10 <tcp_write+0x2c4>)
 8008c7e:	49a5      	ldr	r1, [pc, #660]	; (8008f14 <tcp_write+0x2c8>)
 8008c80:	48a5      	ldr	r0, [pc, #660]	; (8008f18 <tcp_write+0x2cc>)
 8008c82:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8008c86:	f004 ff6d 	bl	800db64 <iprintf>
 8008c8a:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 8008c8e:	b011      	add	sp, #68	; 0x44
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 8008c94:	7d03      	ldrb	r3, [r0, #20]
 8008c96:	2b07      	cmp	r3, #7
 8008c98:	d003      	beq.n	8008ca2 <tcp_write+0x56>
      (pcb->state != CLOSE_WAIT) &&
 8008c9a:	3b02      	subs	r3, #2
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	f200 824c 	bhi.w	800913a <tcp_write+0x4ee>
  } else if (len == 0) {
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	b1eb      	cbz	r3, 8008ce2 <tcp_write+0x96>
  if (len > pcb->snd_buf) {
 8008ca6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008caa:	9a05      	ldr	r2, [sp, #20]
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d206      	bcs.n	8008cbe <tcp_write+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
 8008cb0:	7ea3      	ldrb	r3, [r4, #26]
 8008cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cb6:	76a3      	strb	r3, [r4, #26]
  return ERR_MEM;
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e7e7      	b.n	8008c8e <tcp_write+0x42>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008cbe:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8008cc2:	2a08      	cmp	r2, #8
 8008cc4:	d8f4      	bhi.n	8008cb0 <tcp_write+0x64>
 8008cc6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	f000 809f 	beq.w	8008e0c <tcp_write+0x1c0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008cce:	b943      	cbnz	r3, 8008ce2 <tcp_write+0x96>
 8008cd0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008cd2:	b933      	cbnz	r3, 8008ce2 <tcp_write+0x96>
 8008cd4:	4b8e      	ldr	r3, [pc, #568]	; (8008f10 <tcp_write+0x2c4>)
 8008cd6:	4991      	ldr	r1, [pc, #580]	; (8008f1c <tcp_write+0x2d0>)
 8008cd8:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008cdc:	488e      	ldr	r0, [pc, #568]	; (8008f18 <tcp_write+0x2cc>)
 8008cde:	f004 ff41 	bl	800db64 <iprintf>
  if (pcb->unsent != NULL) {
 8008ce2:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8008ce6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008cea:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8008cec:	f1b8 0f00 	cmp.w	r8, #0
 8008cf0:	f000 80c2 	beq.w	8008e78 <tcp_write+0x22c>
 8008cf4:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008cf6:	f8d6 b000 	ldr.w	fp, [r6]
 8008cfa:	f1bb 0f00 	cmp.w	fp, #0
 8008cfe:	f040 808f 	bne.w	8008e20 <tcp_write+0x1d4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008d02:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008d04:	8933      	ldrh	r3, [r6, #8]
 8008d06:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008d08:	00ad      	lsls	r5, r5, #2
 8008d0a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008d0e:	442b      	add	r3, r5
 8008d10:	429a      	cmp	r2, r3
 8008d12:	da06      	bge.n	8008d22 <tcp_write+0xd6>
 8008d14:	4b7e      	ldr	r3, [pc, #504]	; (8008f10 <tcp_write+0x2c4>)
 8008d16:	4982      	ldr	r1, [pc, #520]	; (8008f20 <tcp_write+0x2d4>)
 8008d18:	487f      	ldr	r0, [pc, #508]	; (8008f18 <tcp_write+0x2cc>)
 8008d1a:	f240 12c7 	movw	r2, #455	; 0x1c7
 8008d1e:	f004 ff21 	bl	800db64 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008d22:	8937      	ldrh	r7, [r6, #8]
 8008d24:	9b07      	ldr	r3, [sp, #28]
 8008d26:	1bdf      	subs	r7, r3, r7
 8008d28:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 8008d2a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8008d2e:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008d32:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	d075      	beq.n	8008e24 <tcp_write+0x1d8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008d38:	42bd      	cmp	r5, r7
 8008d3a:	d906      	bls.n	8008d4a <tcp_write+0xfe>
 8008d3c:	4b74      	ldr	r3, [pc, #464]	; (8008f10 <tcp_write+0x2c4>)
 8008d3e:	4979      	ldr	r1, [pc, #484]	; (8008f24 <tcp_write+0x2d8>)
 8008d40:	4875      	ldr	r0, [pc, #468]	; (8008f18 <tcp_write+0x2cc>)
 8008d42:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008d46:	f004 ff0d 	bl	800db64 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008d4a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008d4e:	9a05      	ldr	r2, [sp, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bf28      	it	cs
 8008d54:	461a      	movcs	r2, r3
 8008d56:	42ba      	cmp	r2, r7
 8008d58:	4615      	mov	r5, r2
 8008d5a:	bfa8      	it	ge
 8008d5c:	463d      	movge	r5, r7
      oversize -= oversize_used;
 8008d5e:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 8008d60:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 8008d62:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8008d66:	b2bf      	uxth	r7, r7
 8008d68:	46b0      	mov	r8, r6
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8008d6a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008d6e:	b153      	cbz	r3, 8008d86 <tcp_write+0x13a>
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	429d      	cmp	r5, r3
 8008d74:	f000 81e4 	beq.w	8009140 <tcp_write+0x4f4>
 8008d78:	4b65      	ldr	r3, [pc, #404]	; (8008f10 <tcp_write+0x2c4>)
 8008d7a:	496b      	ldr	r1, [pc, #428]	; (8008f28 <tcp_write+0x2dc>)
 8008d7c:	4866      	ldr	r0, [pc, #408]	; (8008f18 <tcp_write+0x2cc>)
 8008d7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008d82:	f004 feef 	bl	800db64 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	f080 81d9 	bcs.w	8009140 <tcp_write+0x4f4>
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	f000 8162 	beq.w	8009058 <tcp_write+0x40c>
 8008d94:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8008d98:	f1ba 0f00 	cmp.w	sl, #0
 8008d9c:	f000 815d 	beq.w	800905a <tcp_write+0x40e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008da0:	eba3 0a05 	sub.w	sl, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008da6:	45ba      	cmp	sl, r7
 8008da8:	bfa8      	it	ge
 8008daa:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008dac:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008dae:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008db2:	d539      	bpl.n	8008e28 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008db4:	2301      	movs	r3, #1
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	463a      	mov	r2, r7
 8008dbc:	e9cd 4300 	strd	r4, r3, [sp]
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008dc6:	2004      	movs	r0, #4
 8008dc8:	f7ff fe6e 	bl	8008aa8 <tcp_pbuf_prealloc>
 8008dcc:	4681      	mov	r9, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f000 81b0 	beq.w	8009134 <tcp_write+0x4e8>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008dd4:	9b08      	ldr	r3, [sp, #32]
 8008dd6:	6840      	ldr	r0, [r0, #4]
 8008dd8:	4642      	mov	r2, r8
 8008dda:	1959      	adds	r1, r3, r5
 8008ddc:	f004 fe07 	bl	800d9ee <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008de0:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008de2:	f7fd fb9b 	bl	800651c <pbuf_clen>
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	4403      	add	r3, r0
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8008dee:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8008df2:	eb05 0708 	add.w	r7, r5, r8
 8008df6:	b2bf      	uxth	r7, r7
 8008df8:	46b0      	mov	r8, r6
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 8008dfc:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008e00:	f003 0301 	and.w	r3, r3, #1
      pos += seglen;
 8008e04:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008e08:	930c      	str	r3, [sp, #48]	; 0x30
 8008e0a:	e0fe      	b.n	800900a <tcp_write+0x3be>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008e0c:	b91b      	cbnz	r3, 8008e16 <tcp_write+0x1ca>
 8008e0e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f43f af66 	beq.w	8008ce2 <tcp_write+0x96>
 8008e16:	4b3e      	ldr	r3, [pc, #248]	; (8008f10 <tcp_write+0x2c4>)
 8008e18:	4944      	ldr	r1, [pc, #272]	; (8008f2c <tcp_write+0x2e0>)
 8008e1a:	f240 1259 	movw	r2, #345	; 0x159
 8008e1e:	e75d      	b.n	8008cdc <tcp_write+0x90>
 8008e20:	465e      	mov	r6, fp
 8008e22:	e768      	b.n	8008cf6 <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008e24:	46a8      	mov	r8, r5
 8008e26:	e7a0      	b.n	8008d6a <tcp_write+0x11e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008e28:	6873      	ldr	r3, [r6, #4]
 8008e2a:	f8d3 9000 	ldr.w	r9, [r3]
 8008e2e:	f1b9 0f00 	cmp.w	r9, #0
 8008e32:	d112      	bne.n	8008e5a <tcp_write+0x20e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008e34:	7b1a      	ldrb	r2, [r3, #12]
 8008e36:	2a01      	cmp	r2, #1
 8008e38:	d111      	bne.n	8008e5e <tcp_write+0x212>
 8008e3a:	895a      	ldrh	r2, [r3, #10]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	9a08      	ldr	r2, [sp, #32]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d10b      	bne.n	8008e5e <tcp_write+0x212>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008e46:	b135      	cbz	r5, 8008e56 <tcp_write+0x20a>
 8008e48:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <tcp_write+0x2c4>)
 8008e4a:	4939      	ldr	r1, [pc, #228]	; (8008f30 <tcp_write+0x2e4>)
 8008e4c:	4832      	ldr	r0, [pc, #200]	; (8008f18 <tcp_write+0x2cc>)
 8008e4e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008e52:	f004 fe87 	bl	800db64 <iprintf>
          extendlen = seglen;
 8008e56:	46c2      	mov	sl, r8
 8008e58:	e7cb      	b.n	8008df2 <tcp_write+0x1a6>
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	e7e5      	b.n	8008e2a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4641      	mov	r1, r8
 8008e62:	2004      	movs	r0, #4
 8008e64:	f7fd fa0a 	bl	800627c <pbuf_alloc>
 8008e68:	4681      	mov	r9, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f000 8162 	beq.w	8009134 <tcp_write+0x4e8>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	442b      	add	r3, r5
 8008e74:	6043      	str	r3, [r0, #4]
 8008e76:	e7b4      	b.n	8008de2 <tcp_write+0x196>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008e78:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8008e7c:	2f00      	cmp	r7, #0
 8008e7e:	f000 80ef 	beq.w	8009060 <tcp_write+0x414>
 8008e82:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <tcp_write+0x2c4>)
 8008e84:	492b      	ldr	r1, [pc, #172]	; (8008f34 <tcp_write+0x2e8>)
 8008e86:	4824      	ldr	r0, [pc, #144]	; (8008f18 <tcp_write+0x2cc>)
 8008e88:	f240 2225 	movw	r2, #549	; 0x225
 8008e8c:	f004 fe6a 	bl	800db64 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008e90:	4646      	mov	r6, r8
  u16_t extendlen = 0;
 8008e92:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8008e94:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 8008e96:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8008e98:	46c1      	mov	r9, r8
 8008e9a:	e7ae      	b.n	8008dfa <tcp_write+0x1ae>
    u16_t left = len - pos;
 8008e9c:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008e9e:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008ea0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	bf28      	it	cs
 8008ea8:	4613      	movcs	r3, r2
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d043      	beq.n	8008f3c <tcp_write+0x2f0>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008eb4:	fabb f38b 	clz	r3, fp
 8008eb8:	095b      	lsrs	r3, r3, #5
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec0:	e9cd 4300 	strd	r4, r3, [sp]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008eca:	f7ff fded 	bl	8008aa8 <tcp_pbuf_prealloc>
 8008ece:	4680      	mov	r8, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d052      	beq.n	8008f7a <tcp_write+0x32e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008ed4:	8943      	ldrh	r3, [r0, #10]
 8008ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d206      	bcs.n	8008eea <tcp_write+0x29e>
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <tcp_write+0x2c4>)
 8008ede:	4916      	ldr	r1, [pc, #88]	; (8008f38 <tcp_write+0x2ec>)
 8008ee0:	480d      	ldr	r0, [pc, #52]	; (8008f18 <tcp_write+0x2cc>)
 8008ee2:	f240 2241 	movw	r2, #577	; 0x241
 8008ee6:	f004 fe3d 	bl	800db64 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8008eea:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8008eee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ef2:	19d9      	adds	r1, r3, r7
 8008ef4:	f004 fd7b 	bl	800d9ee <memcpy>
    queuelen += pbuf_clen(p);
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f7fd fb0f 	bl	800651c <pbuf_clen>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	4403      	add	r3, r0
 8008f02:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008f04:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8008f06:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008f08:	d960      	bls.n	8008fcc <tcp_write+0x380>
      pbuf_free(p);
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	e033      	b.n	8008f76 <tcp_write+0x32a>
 8008f0e:	bf00      	nop
 8008f10:	08010387 	.word	0x08010387
 8008f14:	080103ce 	.word	0x080103ce
 8008f18:	0800f008 	.word	0x0800f008
 8008f1c:	080103ff 	.word	0x080103ff
 8008f20:	0801046b 	.word	0x0801046b
 8008f24:	08010482 	.word	0x08010482
 8008f28:	080104a2 	.word	0x080104a2
 8008f2c:	08010439 	.word	0x08010439
 8008f30:	080104c0 	.word	0x080104c0
 8008f34:	080104e9 	.word	0x080104e9
 8008f38:	08010518 	.word	0x08010518
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008f3c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008f40:	b133      	cbz	r3, 8008f50 <tcp_write+0x304>
 8008f42:	4b83      	ldr	r3, [pc, #524]	; (8009150 <tcp_write+0x504>)
 8008f44:	4983      	ldr	r1, [pc, #524]	; (8009154 <tcp_write+0x508>)
 8008f46:	4884      	ldr	r0, [pc, #528]	; (8009158 <tcp_write+0x50c>)
 8008f48:	f240 224b 	movw	r2, #587	; 0x24b
 8008f4c:	f004 fe0a 	bl	800db64 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008f50:	2201      	movs	r2, #1
 8008f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f54:	2000      	movs	r0, #0
 8008f56:	f7fd f991 	bl	800627c <pbuf_alloc>
 8008f5a:	b170      	cbz	r0, 8008f7a <tcp_write+0x32e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8008f5c:	9a08      	ldr	r2, [sp, #32]
 8008f5e:	900d      	str	r0, [sp, #52]	; 0x34
 8008f60:	443a      	add	r2, r7
 8008f62:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008f64:	2200      	movs	r2, #0
 8008f66:	4611      	mov	r1, r2
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd f987 	bl	800627c <pbuf_alloc>
 8008f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f70:	4680      	mov	r8, r0
 8008f72:	bb38      	cbnz	r0, 8008fc4 <tcp_write+0x378>
        pbuf_free(p2);
 8008f74:	4618      	mov	r0, r3
      pbuf_free(p);
 8008f76:	f7fd f91f 	bl	80061b8 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8008f7a:	7ea3      	ldrb	r3, [r4, #26]
 8008f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f80:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 8008f82:	f1b9 0f00 	cmp.w	r9, #0
 8008f86:	d002      	beq.n	8008f8e <tcp_write+0x342>
    pbuf_free(concat_p);
 8008f88:	4648      	mov	r0, r9
 8008f8a:	f7fd f915 	bl	80061b8 <pbuf_free>
  if (queue != NULL) {
 8008f8e:	f1bb 0f00 	cmp.w	fp, #0
 8008f92:	d002      	beq.n	8008f9a <tcp_write+0x34e>
    tcp_segs_free(queue);
 8008f94:	4658      	mov	r0, fp
 8008f96:	f7fd fd5b 	bl	8006a50 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008f9a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f43f ae8a 	beq.w	8008cb8 <tcp_write+0x6c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008fa4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f47f ae86 	bne.w	8008cb8 <tcp_write+0x6c>
 8008fac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f47f ae82 	bne.w	8008cb8 <tcp_write+0x6c>
 8008fb4:	4b66      	ldr	r3, [pc, #408]	; (8009150 <tcp_write+0x504>)
 8008fb6:	4969      	ldr	r1, [pc, #420]	; (800915c <tcp_write+0x510>)
 8008fb8:	4867      	ldr	r0, [pc, #412]	; (8009158 <tcp_write+0x50c>)
 8008fba:	f240 3202 	movw	r2, #770	; 0x302
 8008fbe:	f004 fdd1 	bl	800db64 <iprintf>
 8008fc2:	e679      	b.n	8008cb8 <tcp_write+0x6c>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f7fd fac5 	bl	8006554 <pbuf_cat>
 8008fca:	e795      	b.n	8008ef8 <tcp_write+0x2ac>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	9200      	str	r2, [sp, #0]
 8008fd4:	443b      	add	r3, r7
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7ff fda0 	bl	8008b1c <tcp_create_segment>
 8008fdc:	4680      	mov	r8, r0
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d0cb      	beq.n	8008f7a <tcp_write+0x32e>
    if (queue == NULL) {
 8008fe2:	f1bb 0f00 	cmp.w	fp, #0
 8008fe6:	d035      	beq.n	8009054 <tcp_write+0x408>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fea:	b933      	cbnz	r3, 8008ffa <tcp_write+0x3ae>
 8008fec:	4b58      	ldr	r3, [pc, #352]	; (8009150 <tcp_write+0x504>)
 8008fee:	495c      	ldr	r1, [pc, #368]	; (8009160 <tcp_write+0x514>)
 8008ff0:	4859      	ldr	r0, [pc, #356]	; (8009158 <tcp_write+0x50c>)
 8008ff2:	f240 2285 	movw	r2, #645	; 0x285
 8008ff6:	f004 fdb5 	bl	800db64 <iprintf>
      prev_seg->next = seg;
 8008ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffc:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 8009000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009002:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8009006:	441f      	add	r7, r3
 8009008:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	429f      	cmp	r7, r3
 800900e:	f4ff af45 	bcc.w	8008e9c <tcp_write+0x250>
  if (oversize_used > 0) {
 8009012:	b125      	cbz	r5, 800901e <tcp_write+0x3d2>
    for (p = last_unsent->p; p; p = p->next) {
 8009014:	6877      	ldr	r7, [r6, #4]
 8009016:	bb67      	cbnz	r7, 8009072 <tcp_write+0x426>
    last_unsent->len += oversize_used;
 8009018:	8933      	ldrh	r3, [r6, #8]
 800901a:	441d      	add	r5, r3
 800901c:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 800901e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009022:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 8009026:	f1b9 0f00 	cmp.w	r9, #0
 800902a:	d033      	beq.n	8009094 <tcp_write+0x448>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800902c:	b936      	cbnz	r6, 800903c <tcp_write+0x3f0>
 800902e:	4b48      	ldr	r3, [pc, #288]	; (8009150 <tcp_write+0x504>)
 8009030:	494c      	ldr	r1, [pc, #304]	; (8009164 <tcp_write+0x518>)
 8009032:	4849      	ldr	r0, [pc, #292]	; (8009158 <tcp_write+0x50c>)
 8009034:	f240 22bb 	movw	r2, #699	; 0x2bb
 8009038:	f004 fd94 	bl	800db64 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800903c:	4649      	mov	r1, r9
 800903e:	6870      	ldr	r0, [r6, #4]
 8009040:	f7fd fa88 	bl	8006554 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009044:	8933      	ldrh	r3, [r6, #8]
 8009046:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800904a:	4413      	add	r3, r2
 800904c:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 800904e:	f8c6 b000 	str.w	fp, [r6]
 8009052:	e041      	b.n	80090d8 <tcp_write+0x48c>
 8009054:	4683      	mov	fp, r0
 8009056:	e7d3      	b.n	8009000 <tcp_write+0x3b4>
  u16_t extendlen = 0;
 8009058:	46ba      	mov	sl, r7
 800905a:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 800905c:	46d1      	mov	r9, sl
 800905e:	e6cc      	b.n	8008dfa <tcp_write+0x1ae>
  u16_t extendlen = 0;
 8009060:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 8009062:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009064:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 8009066:	46b9      	mov	r9, r7
 8009068:	e6c7      	b.n	8008dfa <tcp_write+0x1ae>
  if (oversize_used > 0) {
 800906a:	f04f 0a00 	mov.w	sl, #0
 800906e:	46d1      	mov	r9, sl
 8009070:	e7d0      	b.n	8009014 <tcp_write+0x3c8>
      p->tot_len += oversize_used;
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	442b      	add	r3, r5
 8009076:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	b94b      	cbnz	r3, 8009090 <tcp_write+0x444>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8978      	ldrh	r0, [r7, #10]
 8009080:	9908      	ldr	r1, [sp, #32]
 8009082:	4418      	add	r0, r3
 8009084:	462a      	mov	r2, r5
 8009086:	f004 fcb2 	bl	800d9ee <memcpy>
        p->len += oversize_used;
 800908a:	897b      	ldrh	r3, [r7, #10]
 800908c:	442b      	add	r3, r5
 800908e:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009090:	683f      	ldr	r7, [r7, #0]
 8009092:	e7c0      	b.n	8009016 <tcp_write+0x3ca>
  } else if (extendlen > 0) {
 8009094:	f1ba 0f00 	cmp.w	sl, #0
 8009098:	d01a      	beq.n	80090d0 <tcp_write+0x484>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800909a:	b10e      	cbz	r6, 80090a0 <tcp_write+0x454>
 800909c:	6873      	ldr	r3, [r6, #4]
 800909e:	b933      	cbnz	r3, 80090ae <tcp_write+0x462>
 80090a0:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <tcp_write+0x504>)
 80090a2:	4931      	ldr	r1, [pc, #196]	; (8009168 <tcp_write+0x51c>)
 80090a4:	482c      	ldr	r0, [pc, #176]	; (8009158 <tcp_write+0x50c>)
 80090a6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80090aa:	f004 fd5b 	bl	800db64 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80090ae:	6873      	ldr	r3, [r6, #4]
 80090b0:	891a      	ldrh	r2, [r3, #8]
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	4452      	add	r2, sl
 80090b6:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 80090b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80090ba:	b939      	cbnz	r1, 80090cc <tcp_write+0x480>
    p->len += extendlen;
 80090bc:	895a      	ldrh	r2, [r3, #10]
 80090be:	4452      	add	r2, sl
 80090c0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80090c2:	8933      	ldrh	r3, [r6, #8]
 80090c4:	449a      	add	sl, r3
 80090c6:	f8a6 a008 	strh.w	sl, [r6, #8]
 80090ca:	e7c0      	b.n	800904e <tcp_write+0x402>
      p->tot_len += extendlen;
 80090cc:	460b      	mov	r3, r1
 80090ce:	e7ef      	b.n	80090b0 <tcp_write+0x464>
  if (last_unsent == NULL) {
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	d1bc      	bne.n	800904e <tcp_write+0x402>
    pcb->unsent = queue;
 80090d4:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 80090d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090da:	9a05      	ldr	r2, [sp, #20]
 80090dc:	4413      	add	r3, r2
 80090de:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 80090e0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 80090f0:	b153      	cbz	r3, 8009108 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 80090f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090f4:	b943      	cbnz	r3, 8009108 <tcp_write+0x4bc>
 80090f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80090f8:	b933      	cbnz	r3, 8009108 <tcp_write+0x4bc>
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <tcp_write+0x504>)
 80090fc:	4917      	ldr	r1, [pc, #92]	; (800915c <tcp_write+0x510>)
 80090fe:	4816      	ldr	r0, [pc, #88]	; (8009158 <tcp_write+0x50c>)
 8009100:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009104:	f004 fd2e 	bl	800db64 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009108:	f1b8 0f00 	cmp.w	r8, #0
 800910c:	d010      	beq.n	8009130 <tcp_write+0x4e4>
 800910e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f adbb 	beq.w	8008c8e <tcp_write+0x42>
 8009118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911a:	f013 0502 	ands.w	r5, r3, #2
 800911e:	d107      	bne.n	8009130 <tcp_write+0x4e4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009120:	8984      	ldrh	r4, [r0, #12]
 8009122:	2008      	movs	r0, #8
 8009124:	f7fc fc2e 	bl	8005984 <lwip_htons>
 8009128:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800912c:	4320      	orrs	r0, r4
 800912e:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8009130:	2000      	movs	r0, #0
 8009132:	e5ac      	b.n	8008c8e <tcp_write+0x42>
      p->tot_len += extendlen;
 8009134:	f04f 0900 	mov.w	r9, #0
 8009138:	e71f      	b.n	8008f7a <tcp_write+0x32e>
    return ERR_CONN;
 800913a:	f06f 000a 	mvn.w	r0, #10
 800913e:	e5a6      	b.n	8008c8e <tcp_write+0x42>
  if (oversize_used > 0) {
 8009140:	2d00      	cmp	r5, #0
 8009142:	d192      	bne.n	800906a <tcp_write+0x41e>
  pcb->unsent_oversize = oversize;
 8009144:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009148:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800914c:	e77f      	b.n	800904e <tcp_write+0x402>
 800914e:	bf00      	nop
 8009150:	08010387 	.word	0x08010387
 8009154:	08010556 	.word	0x08010556
 8009158:	0800f008 	.word	0x0800f008
 800915c:	080105e2 	.word	0x080105e2
 8009160:	08010564 	.word	0x08010564
 8009164:	08010575 	.word	0x08010575
 8009168:	080105ad 	.word	0x080105ad

0800916c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800916c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009170:	f011 0803 	ands.w	r8, r1, #3
{
 8009174:	4604      	mov	r4, r0
 8009176:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009178:	d106      	bne.n	8009188 <tcp_enqueue_flags+0x1c>
 800917a:	4b3d      	ldr	r3, [pc, #244]	; (8009270 <tcp_enqueue_flags+0x104>)
 800917c:	493d      	ldr	r1, [pc, #244]	; (8009274 <tcp_enqueue_flags+0x108>)
 800917e:	483e      	ldr	r0, [pc, #248]	; (8009278 <tcp_enqueue_flags+0x10c>)
 8009180:	f240 321b 	movw	r2, #795	; 0x31b
 8009184:	f004 fcee 	bl	800db64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009188:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800918c:	2b08      	cmp	r3, #8
 800918e:	d90a      	bls.n	80091a6 <tcp_enqueue_flags+0x3a>
 8009190:	07f1      	lsls	r1, r6, #31
 8009192:	d408      	bmi.n	80091a6 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8009194:	7ea3      	ldrb	r3, [r4, #26]
 8009196:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800919a:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80091a0:	b003      	add	sp, #12
 80091a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (flags & TCP_SYN) {
 80091a6:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80091aa:	2200      	movs	r2, #0
 80091ac:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80091b0:	4649      	mov	r1, r9
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fd f862 	bl	800627c <pbuf_alloc>
 80091b8:	4605      	mov	r5, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0ea      	beq.n	8009194 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80091be:	8943      	ldrh	r3, [r0, #10]
 80091c0:	454b      	cmp	r3, r9
 80091c2:	d206      	bcs.n	80091d2 <tcp_enqueue_flags+0x66>
 80091c4:	4b2a      	ldr	r3, [pc, #168]	; (8009270 <tcp_enqueue_flags+0x104>)
 80091c6:	492d      	ldr	r1, [pc, #180]	; (800927c <tcp_enqueue_flags+0x110>)
 80091c8:	482b      	ldr	r0, [pc, #172]	; (8009278 <tcp_enqueue_flags+0x10c>)
 80091ca:	f240 3241 	movw	r2, #833	; 0x341
 80091ce:	f004 fcc9 	bl	800db64 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80091d2:	9700      	str	r7, [sp, #0]
 80091d4:	4629      	mov	r1, r5
 80091d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091d8:	4632      	mov	r2, r6
 80091da:	4620      	mov	r0, r4
 80091dc:	f7ff fc9e 	bl	8008b1c <tcp_create_segment>
 80091e0:	4605      	mov	r5, r0
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d0d6      	beq.n	8009194 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80091e6:	68c3      	ldr	r3, [r0, #12]
 80091e8:	079a      	lsls	r2, r3, #30
 80091ea:	d006      	beq.n	80091fa <tcp_enqueue_flags+0x8e>
 80091ec:	4b20      	ldr	r3, [pc, #128]	; (8009270 <tcp_enqueue_flags+0x104>)
 80091ee:	4924      	ldr	r1, [pc, #144]	; (8009280 <tcp_enqueue_flags+0x114>)
 80091f0:	4821      	ldr	r0, [pc, #132]	; (8009278 <tcp_enqueue_flags+0x10c>)
 80091f2:	f240 3249 	movw	r2, #841	; 0x349
 80091f6:	f004 fcb5 	bl	800db64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80091fa:	892b      	ldrh	r3, [r5, #8]
 80091fc:	b133      	cbz	r3, 800920c <tcp_enqueue_flags+0xa0>
 80091fe:	4b1c      	ldr	r3, [pc, #112]	; (8009270 <tcp_enqueue_flags+0x104>)
 8009200:	4920      	ldr	r1, [pc, #128]	; (8009284 <tcp_enqueue_flags+0x118>)
 8009202:	481d      	ldr	r0, [pc, #116]	; (8009278 <tcp_enqueue_flags+0x10c>)
 8009204:	f240 324a 	movw	r2, #842	; 0x34a
 8009208:	f004 fcac 	bl	800db64 <iprintf>
  if (pcb->unsent == NULL) {
 800920c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800920e:	bb4b      	cbnz	r3, 8009264 <tcp_enqueue_flags+0xf8>
    pcb->unsent = seg;
 8009210:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	d002      	beq.n	8009224 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 800921e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009220:	3301      	adds	r3, #1
 8009222:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8009224:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8009226:	bf42      	ittt	mi
 8009228:	7ea3      	ldrbmi	r3, [r4, #26]
 800922a:	f043 0320 	orrmi.w	r3, r3, #32
 800922e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009230:	6868      	ldr	r0, [r5, #4]
 8009232:	f7fd f973 	bl	800651c <pbuf_clen>
 8009236:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800923a:	4418      	add	r0, r3
 800923c:	b280      	uxth	r0, r0
 800923e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009242:	2800      	cmp	r0, #0
 8009244:	d0ac      	beq.n	80091a0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009246:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009248:	b948      	cbnz	r0, 800925e <tcp_enqueue_flags+0xf2>
 800924a:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800924c:	2c00      	cmp	r4, #0
 800924e:	d1a7      	bne.n	80091a0 <tcp_enqueue_flags+0x34>
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <tcp_enqueue_flags+0x104>)
 8009252:	490d      	ldr	r1, [pc, #52]	; (8009288 <tcp_enqueue_flags+0x11c>)
 8009254:	4808      	ldr	r0, [pc, #32]	; (8009278 <tcp_enqueue_flags+0x10c>)
 8009256:	f240 326d 	movw	r2, #877	; 0x36d
 800925a:	f004 fc83 	bl	800db64 <iprintf>
  return ERR_OK;
 800925e:	2000      	movs	r0, #0
 8009260:	e79e      	b.n	80091a0 <tcp_enqueue_flags+0x34>
 8009262:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	2a00      	cmp	r2, #0
 8009268:	d1fb      	bne.n	8009262 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 800926a:	601d      	str	r5, [r3, #0]
 800926c:	e7d1      	b.n	8009212 <tcp_enqueue_flags+0xa6>
 800926e:	bf00      	nop
 8009270:	08010387 	.word	0x08010387
 8009274:	08010224 	.word	0x08010224
 8009278:	0800f008 	.word	0x0800f008
 800927c:	08010279 	.word	0x08010279
 8009280:	080102b2 	.word	0x080102b2
 8009284:	080102ca 	.word	0x080102ca
 8009288:	080102f4 	.word	0x080102f4

0800928c <tcp_send_fin>:
{
 800928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800928e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8009290:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8009292:	b934      	cbnz	r4, 80092a2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009294:	4628      	mov	r0, r5
 8009296:	2101      	movs	r1, #1
}
 8009298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800929c:	f7ff bf66 	b.w	800916c <tcp_enqueue_flags>
 80092a0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1fb      	bne.n	80092a0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80092a8:	68e3      	ldr	r3, [r4, #12]
 80092aa:	8998      	ldrh	r0, [r3, #12]
 80092ac:	f7fc fb6a 	bl	8005984 <lwip_htons>
 80092b0:	f010 0707 	ands.w	r7, r0, #7
 80092b4:	d1ee      	bne.n	8009294 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80092b6:	68e3      	ldr	r3, [r4, #12]
 80092b8:	2001      	movs	r0, #1
 80092ba:	899e      	ldrh	r6, [r3, #12]
 80092bc:	f7fc fb62 	bl	8005984 <lwip_htons>
 80092c0:	68e3      	ldr	r3, [r4, #12]
 80092c2:	4330      	orrs	r0, r6
 80092c4:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 80092c6:	7eab      	ldrb	r3, [r5, #26]
 80092c8:	f043 0320 	orr.w	r3, r3, #32
 80092cc:	76ab      	strb	r3, [r5, #26]
}
 80092ce:	4638      	mov	r0, r7
 80092d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092d2 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80092d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80092d4:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80092d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80092d8:	f7fc fb57 	bl	800598a <lwip_htonl>
 80092dc:	2100      	movs	r1, #0
 80092de:	4602      	mov	r2, r0
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7ff fc77 	bl	8008bd4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80092e6:	4606      	mov	r6, r0
 80092e8:	b940      	cbnz	r0, 80092fc <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80092ea:	7ea3      	ldrb	r3, [r4, #26]
 80092ec:	f043 0303 	orr.w	r3, r3, #3
 80092f0:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80092f2:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80092f6:	4628      	mov	r0, r5
 80092f8:	b004      	add	sp, #16
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80092fc:	1d25      	adds	r5, r4, #4
 80092fe:	4628      	mov	r0, r5
 8009300:	f001 f8ec 	bl	800a4dc <ip4_route>
  if (netif == NULL) {
 8009304:	b1a0      	cbz	r0, 8009330 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009306:	2206      	movs	r2, #6
 8009308:	9201      	str	r2, [sp, #4]
 800930a:	7a62      	ldrb	r2, [r4, #9]
 800930c:	9002      	str	r0, [sp, #8]
 800930e:	9200      	str	r2, [sp, #0]
 8009310:	7aa3      	ldrb	r3, [r4, #10]
 8009312:	462a      	mov	r2, r5
 8009314:	4621      	mov	r1, r4
 8009316:	4630      	mov	r0, r6
 8009318:	f001 fa46 	bl	800a7a8 <ip4_output_if>
 800931c:	4605      	mov	r5, r0
  pbuf_free(p);
 800931e:	4630      	mov	r0, r6
 8009320:	f7fc ff4a 	bl	80061b8 <pbuf_free>
 8009324:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8009326:	b135      	cbz	r5, 8009336 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009328:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800932c:	76a3      	strb	r3, [r4, #26]
 800932e:	e7e2      	b.n	80092f6 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8009330:	f06f 0503 	mvn.w	r5, #3
 8009334:	e7f3      	b.n	800931e <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	e7f7      	b.n	800932c <tcp_send_empty_ack+0x5a>

0800933c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009340:	7d03      	ldrb	r3, [r0, #20]
 8009342:	2b01      	cmp	r3, #1
{
 8009344:	b087      	sub	sp, #28
 8009346:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009348:	d106      	bne.n	8009358 <tcp_output+0x1c>
 800934a:	4ba4      	ldr	r3, [pc, #656]	; (80095dc <tcp_output+0x2a0>)
 800934c:	49a4      	ldr	r1, [pc, #656]	; (80095e0 <tcp_output+0x2a4>)
 800934e:	48a5      	ldr	r0, [pc, #660]	; (80095e4 <tcp_output+0x2a8>)
 8009350:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009354:	f004 fc06 	bl	800db64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009358:	4ba3      	ldr	r3, [pc, #652]	; (80095e8 <tcp_output+0x2ac>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	42a3      	cmp	r3, r4
 800935e:	d04f      	beq.n	8009400 <tcp_output+0xc4>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009360:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009364:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009368:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800936a:	429e      	cmp	r6, r3
 800936c:	bf28      	it	cs
 800936e:	461e      	movcs	r6, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009370:	7ea3      	ldrb	r3, [r4, #26]
 8009372:	0799      	lsls	r1, r3, #30
 8009374:	d510      	bpl.n	8009398 <tcp_output+0x5c>
 8009376:	b92d      	cbnz	r5, 8009384 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8009378:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800937a:	b007      	add	sp, #28
 800937c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8009380:	f7ff bfa7 	b.w	80092d2 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009384:	68eb      	ldr	r3, [r5, #12]
 8009386:	6858      	ldr	r0, [r3, #4]
 8009388:	f7fc faff 	bl	800598a <lwip_htonl>
 800938c:	892b      	ldrh	r3, [r5, #8]
 800938e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	4418      	add	r0, r3
     (seg == NULL ||
 8009394:	42b0      	cmp	r0, r6
 8009396:	d8ef      	bhi.n	8009378 <tcp_output+0x3c>
  useg = pcb->unacked;
 8009398:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800939a:	2f00      	cmp	r7, #0
 800939c:	d133      	bne.n	8009406 <tcp_output+0xca>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800939e:	f104 0804 	add.w	r8, r4, #4
 80093a2:	4640      	mov	r0, r8
 80093a4:	f001 f89a 	bl	800a4dc <ip4_route>
  if (netif == NULL) {
 80093a8:	4681      	mov	r9, r0
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f000 813a 	beq.w	8009624 <tcp_output+0x2e8>
  if (ip_addr_isany(&pcb->local_ip)) {
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	b90b      	cbnz	r3, 80093b8 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80093b4:	6843      	ldr	r3, [r0, #4]
 80093b6:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 80093b8:	b1cd      	cbz	r5, 80093ee <tcp_output+0xb2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80093ba:	68eb      	ldr	r3, [r5, #12]
 80093bc:	6858      	ldr	r0, [r3, #4]
 80093be:	f7fc fae4 	bl	800598a <lwip_htonl>
 80093c2:	892b      	ldrh	r3, [r5, #8]
 80093c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	4418      	add	r0, r3
  if (seg != NULL &&
 80093ca:	42b0      	cmp	r0, r6
 80093cc:	d96e      	bls.n	80094ac <tcp_output+0x170>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	d06c      	beq.n	80094ac <tcp_output+0x170>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80093d2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80093d6:	42b3      	cmp	r3, r6
 80093d8:	d168      	bne.n	80094ac <tcp_output+0x170>
 80093da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d165      	bne.n	80094ac <tcp_output+0x170>
    if (pcb->persist_backoff == 0) {
 80093e0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80093e4:	b91b      	cbnz	r3, 80093ee <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 80093e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ea:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 80093ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80093f0:	b913      	cbnz	r3, 80093f8 <tcp_output+0xbc>
    pcb->unsent_oversize = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 80093f8:	7ea3      	ldrb	r3, [r4, #26]
 80093fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093fe:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009400:	2000      	movs	r0, #0
 8009402:	e0e8      	b.n	80095d6 <tcp_output+0x29a>
 8009404:	461f      	mov	r7, r3
    for (; useg->next != NULL; useg = useg->next);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1fb      	bne.n	8009404 <tcp_output+0xc8>
 800940c:	e7c7      	b.n	800939e <tcp_output+0x62>
    pcb->unsent = seg->next;
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009412:	7d23      	ldrb	r3, [r4, #20]
 8009414:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009416:	bf1e      	ittt	ne
 8009418:	7ea3      	ldrbne	r3, [r4, #26]
 800941a:	f023 0303 	bicne.w	r3, r3, #3
 800941e:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009420:	68eb      	ldr	r3, [r5, #12]
 8009422:	6858      	ldr	r0, [r3, #4]
 8009424:	f7fc fab1 	bl	800598a <lwip_htonl>
 8009428:	68e9      	ldr	r1, [r5, #12]
 800942a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800942e:	4683      	mov	fp, r0
 8009430:	8988      	ldrh	r0, [r1, #12]
 8009432:	f7fc faa7 	bl	8005984 <lwip_htons>
 8009436:	f010 0003 	ands.w	r0, r0, #3
 800943a:	eb0b 030a 	add.w	r3, fp, sl
 800943e:	bf18      	it	ne
 8009440:	2001      	movne	r0, #1
 8009442:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009444:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009446:	68ea      	ldr	r2, [r5, #12]
 8009448:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800944c:	1a1b      	subs	r3, r3, r0
 800944e:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8009450:	bfb8      	it	lt
 8009452:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009454:	8990      	ldrh	r0, [r2, #12]
 8009456:	f7fc fa95 	bl	8005984 <lwip_htons>
 800945a:	f010 0003 	ands.w	r0, r0, #3
 800945e:	bf18      	it	ne
 8009460:	2001      	movne	r0, #1
 8009462:	eb10 0f0a 	cmn.w	r0, sl
 8009466:	f000 80d9 	beq.w	800961c <tcp_output+0x2e0>
      seg->next = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800946e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009470:	b913      	cbnz	r3, 8009478 <tcp_output+0x13c>
        pcb->unacked = seg;
 8009472:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8009474:	462f      	mov	r7, r5
 8009476:	e016      	b.n	80094a6 <tcp_output+0x16a>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009478:	68eb      	ldr	r3, [r5, #12]
 800947a:	6858      	ldr	r0, [r3, #4]
 800947c:	f7fc fa85 	bl	800598a <lwip_htonl>
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4682      	mov	sl, r0
 8009484:	6850      	ldr	r0, [r2, #4]
 8009486:	f7fc fa80 	bl	800598a <lwip_htonl>
 800948a:	ebaa 0000 	sub.w	r0, sl, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	f280 80c2 	bge.w	8009618 <tcp_output+0x2dc>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009494:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	2a00      	cmp	r2, #0
 800949c:	f040 80aa 	bne.w	80095f4 <tcp_output+0x2b8>
          seg->next = (*cur_seg);
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 80094a4:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 80094a6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d0a2      	beq.n	80093f2 <tcp_output+0xb6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80094ac:	68eb      	ldr	r3, [r5, #12]
 80094ae:	6858      	ldr	r0, [r3, #4]
 80094b0:	f7fc fa6b 	bl	800598a <lwip_htonl>
 80094b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094b6:	1ac0      	subs	r0, r0, r3
 80094b8:	892b      	ldrh	r3, [r5, #8]
 80094ba:	4418      	add	r0, r3
  while (seg != NULL &&
 80094bc:	42b0      	cmp	r0, r6
 80094be:	d896      	bhi.n	80093ee <tcp_output+0xb2>
    LWIP_ASSERT("RST not expected here!",
 80094c0:	68eb      	ldr	r3, [r5, #12]
 80094c2:	8998      	ldrh	r0, [r3, #12]
 80094c4:	f7fc fa5e 	bl	8005984 <lwip_htons>
 80094c8:	0742      	lsls	r2, r0, #29
 80094ca:	d506      	bpl.n	80094da <tcp_output+0x19e>
 80094cc:	4b43      	ldr	r3, [pc, #268]	; (80095dc <tcp_output+0x2a0>)
 80094ce:	4947      	ldr	r1, [pc, #284]	; (80095ec <tcp_output+0x2b0>)
 80094d0:	4844      	ldr	r0, [pc, #272]	; (80095e4 <tcp_output+0x2a8>)
 80094d2:	f240 4246 	movw	r2, #1094	; 0x446
 80094d6:	f004 fb45 	bl	800db64 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80094da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80094dc:	b1b3      	cbz	r3, 800950c <tcp_output+0x1d0>
 80094de:	7ea2      	ldrb	r2, [r4, #26]
 80094e0:	f012 0f44 	tst.w	r2, #68	; 0x44
 80094e4:	d112      	bne.n	800950c <tcp_output+0x1d0>
 80094e6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80094e8:	b12b      	cbz	r3, 80094f6 <tcp_output+0x1ba>
 80094ea:	6819      	ldr	r1, [r3, #0]
 80094ec:	b971      	cbnz	r1, 800950c <tcp_output+0x1d0>
 80094ee:	8919      	ldrh	r1, [r3, #8]
 80094f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80094f2:	4299      	cmp	r1, r3
 80094f4:	d20a      	bcs.n	800950c <tcp_output+0x1d0>
 80094f6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80094fa:	b13b      	cbz	r3, 800950c <tcp_output+0x1d0>
 80094fc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009500:	2b08      	cmp	r3, #8
 8009502:	d803      	bhi.n	800950c <tcp_output+0x1d0>
 8009504:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8009508:	f43f af71 	beq.w	80093ee <tcp_output+0xb2>
    if (pcb->state != SYN_SENT) {
 800950c:	7d23      	ldrb	r3, [r4, #20]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d009      	beq.n	8009526 <tcp_output+0x1ea>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009512:	68eb      	ldr	r3, [r5, #12]
 8009514:	2010      	movs	r0, #16
 8009516:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800951a:	f7fc fa33 	bl	8005984 <lwip_htons>
 800951e:	68ea      	ldr	r2, [r5, #12]
 8009520:	ea4a 0000 	orr.w	r0, sl, r0
 8009524:	8190      	strh	r0, [r2, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009526:	686b      	ldr	r3, [r5, #4]
 8009528:	89db      	ldrh	r3, [r3, #14]
 800952a:	2b01      	cmp	r3, #1
 800952c:	f47f af6f 	bne.w	800940e <tcp_output+0xd2>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009530:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009532:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009536:	f7fc fa28 	bl	800598a <lwip_htonl>
 800953a:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800953e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009540:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009544:	f7fc fa1e 	bl	8005984 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009548:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800954a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800954c:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009550:	4413      	add	r3, r2
 8009552:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009554:	7aab      	ldrb	r3, [r5, #10]
 8009556:	07db      	lsls	r3, r3, #31
 8009558:	d50c      	bpl.n	8009574 <tcp_output+0x238>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800955a:	4641      	mov	r1, r8
 800955c:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009560:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009564:	f7fd ffd8 	bl	8007518 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009568:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800956c:	f7fc fa0d 	bl	800598a <lwip_htonl>
 8009570:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009574:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009578:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800957a:	bfbc      	itt	lt
 800957c:	2300      	movlt	r3, #0
 800957e:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009582:	b93b      	cbnz	r3, 8009594 <tcp_output+0x258>
    pcb->rttest = tcp_ticks;
 8009584:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <tcp_output+0x2b4>)
 8009586:	68eb      	ldr	r3, [r5, #12]
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800958c:	6858      	ldr	r0, [r3, #4]
 800958e:	f7fc f9fc 	bl	800598a <lwip_htonl>
 8009592:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009594:	6868      	ldr	r0, [r5, #4]
 8009596:	68ea      	ldr	r2, [r5, #12]
 8009598:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800959a:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800959c:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80095a2:	1ac9      	subs	r1, r1, r3
 80095a4:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 80095a6:	8901      	ldrh	r1, [r0, #8]
 80095a8:	1acb      	subs	r3, r1, r3
 80095aa:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	7413      	strb	r3, [r2, #16]
 80095b0:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80095b2:	2206      	movs	r2, #6
 80095b4:	9201      	str	r2, [sp, #4]
 80095b6:	7a62      	ldrb	r2, [r4, #9]
 80095b8:	9200      	str	r2, [sp, #0]
 80095ba:	7aa3      	ldrb	r3, [r4, #10]
 80095bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80095c0:	4642      	mov	r2, r8
 80095c2:	4621      	mov	r1, r4
 80095c4:	f001 f8f0 	bl	800a7a8 <ip4_output_if>
    if (err != ERR_OK) {
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f43f af20 	beq.w	800940e <tcp_output+0xd2>
      pcb->flags |= TF_NAGLEMEMERR;
 80095ce:	7ea3      	ldrb	r3, [r4, #26]
 80095d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095d4:	76a3      	strb	r3, [r4, #26]
}
 80095d6:	b007      	add	sp, #28
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	08010387 	.word	0x08010387
 80095e0:	0801031c 	.word	0x0801031c
 80095e4:	0800f008 	.word	0x0800f008
 80095e8:	20005068 	.word	0x20005068
 80095ec:	08010342 	.word	0x08010342
 80095f0:	20005058 	.word	0x20005058
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80095f4:	68d2      	ldr	r2, [r2, #12]
 80095f6:	9305      	str	r3, [sp, #20]
 80095f8:	6850      	ldr	r0, [r2, #4]
 80095fa:	f7fc f9c6 	bl	800598a <lwip_htonl>
 80095fe:	68e9      	ldr	r1, [r5, #12]
 8009600:	4682      	mov	sl, r0
 8009602:	6848      	ldr	r0, [r1, #4]
 8009604:	f7fc f9c1 	bl	800598a <lwip_htonl>
 8009608:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800960c:	2800      	cmp	r0, #0
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	f6bf af46 	bge.w	80094a0 <tcp_output+0x164>
              cur_seg = &((*cur_seg)->next );
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	e73f      	b.n	8009498 <tcp_output+0x15c>
          useg->next = seg;
 8009618:	603d      	str	r5, [r7, #0]
 800961a:	e72b      	b.n	8009474 <tcp_output+0x138>
      tcp_seg_free(seg);
 800961c:	4628      	mov	r0, r5
 800961e:	f7fd fa09 	bl	8006a34 <tcp_seg_free>
 8009622:	e740      	b.n	80094a6 <tcp_output+0x16a>
    return ERR_RTE;
 8009624:	f06f 0003 	mvn.w	r0, #3
 8009628:	e7d5      	b.n	80095d6 <tcp_output+0x29a>
 800962a:	bf00      	nop

0800962c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b085      	sub	sp, #20
 8009632:	4681      	mov	r9, r0
 8009634:	460e      	mov	r6, r1
 8009636:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009638:	2114      	movs	r1, #20
 800963a:	2200      	movs	r2, #0
 800963c:	2001      	movs	r0, #1
{
 800963e:	461f      	mov	r7, r3
 8009640:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8009644:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009648:	f7fc fe18 	bl	800627c <pbuf_alloc>
  if (p == NULL) {
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d03c      	beq.n	80096cc <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009652:	8943      	ldrh	r3, [r0, #10]
 8009654:	2b13      	cmp	r3, #19
 8009656:	d806      	bhi.n	8009666 <tcp_rst+0x3a>
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <tcp_rst+0xa8>)
 800965a:	491f      	ldr	r1, [pc, #124]	; (80096d8 <tcp_rst+0xac>)
 800965c:	481f      	ldr	r0, [pc, #124]	; (80096dc <tcp_rst+0xb0>)
 800965e:	f240 524d 	movw	r2, #1357	; 0x54d
 8009662:	f004 fa7f 	bl	800db64 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8009666:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8009668:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800966a:	f7fc f98b 	bl	8005984 <lwip_htons>
 800966e:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009670:	4650      	mov	r0, sl
 8009672:	f7fc f987 	bl	8005984 <lwip_htons>
 8009676:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009678:	4648      	mov	r0, r9
 800967a:	f7fc f986 	bl	800598a <lwip_htonl>
 800967e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009680:	4630      	mov	r0, r6
 8009682:	f7fc f982 	bl	800598a <lwip_htonl>
 8009686:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009688:	f245 0014 	movw	r0, #20500	; 0x5014
 800968c:	f7fc f97a 	bl	8005984 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009690:	2308      	movs	r3, #8
 8009692:	2600      	movs	r6, #0
 8009694:	73a3      	strb	r3, [r4, #14]
 8009696:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009698:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800969a:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800969c:	7426      	strb	r6, [r4, #16]
 800969e:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 80096a0:	74a6      	strb	r6, [r4, #18]
 80096a2:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80096a4:	4638      	mov	r0, r7
 80096a6:	f000 ff19 	bl	800a4dc <ip4_route>
  if (netif != NULL) {
 80096aa:	b148      	cbz	r0, 80096c0 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80096ac:	2306      	movs	r3, #6
 80096ae:	9002      	str	r0, [sp, #8]
 80096b0:	e9cd 6300 	strd	r6, r3, [sp]
 80096b4:	463a      	mov	r2, r7
 80096b6:	23ff      	movs	r3, #255	; 0xff
 80096b8:	4641      	mov	r1, r8
 80096ba:	4628      	mov	r0, r5
 80096bc:	f001 f874 	bl	800a7a8 <ip4_output_if>
  }
  pbuf_free(p);
 80096c0:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80096c2:	b005      	add	sp, #20
 80096c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80096c8:	f7fc bd76 	b.w	80061b8 <pbuf_free>
}
 80096cc:	b005      	add	sp, #20
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d2:	bf00      	nop
 80096d4:	08010387 	.word	0x08010387
 80096d8:	08010359 	.word	0x08010359
 80096dc:	0800f008 	.word	0x0800f008

080096e0 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80096e0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 80096e2:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 80096e4:	b1aa      	cbz	r2, 8009712 <tcp_rexmit_rto+0x32>
 80096e6:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80096e8:	680b      	ldr	r3, [r1, #0]
 80096ea:	b983      	cbnz	r3, 800970e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80096ec:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80096ee:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80096f0:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80096f4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80096f8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80096fa:	bf1c      	itt	ne
 80096fc:	3301      	addne	r3, #1
 80096fe:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8009706:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800970a:	f7ff be17 	b.w	800933c <tcp_output>
 800970e:	4619      	mov	r1, r3
 8009710:	e7ea      	b.n	80096e8 <tcp_rexmit_rto+0x8>
}
 8009712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009716:	4770      	bx	lr

08009718 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800971a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800971c:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800971e:	b1ad      	cbz	r5, 800974c <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8009724:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	b983      	cbnz	r3, 800974e <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009730:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b90b      	cbnz	r3, 800973a <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009736:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800973a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800973e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009740:	bf1c      	itt	ne
 8009742:	3301      	addne	r3, #1
 8009744:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800974c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	6858      	ldr	r0, [r3, #4]
 8009752:	f7fc f91a 	bl	800598a <lwip_htonl>
 8009756:	68eb      	ldr	r3, [r5, #12]
 8009758:	4607      	mov	r7, r0
 800975a:	6858      	ldr	r0, [r3, #4]
 800975c:	f7fc f915 	bl	800598a <lwip_htonl>
 8009760:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8009762:	2800      	cmp	r0, #0
 8009764:	dae2      	bge.n	800972c <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8009766:	6836      	ldr	r6, [r6, #0]
 8009768:	e7de      	b.n	8009728 <tcp_rexmit+0x10>

0800976a <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800976a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800976c:	b510      	push	{r4, lr}
 800976e:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009770:	b30b      	cbz	r3, 80097b6 <tcp_rexmit_fast+0x4c>
 8009772:	7e83      	ldrb	r3, [r0, #26]
 8009774:	075b      	lsls	r3, r3, #29
 8009776:	d41e      	bmi.n	80097b6 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009778:	f7ff ffce 	bl	8009718 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800977c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8009780:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009784:	4293      	cmp	r3, r2
 8009786:	bf38      	it	cc
 8009788:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800978a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800978c:	bf28      	it	cs
 800978e:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009790:	0059      	lsls	r1, r3, #1
 8009792:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009794:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009798:	bf38      	it	cc
 800979a:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800979e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80097a2:	440b      	add	r3, r1
 80097a4:	4413      	add	r3, r2
 80097a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80097aa:	7ea3      	ldrb	r3, [r4, #26]
 80097ac:	f043 0304 	orr.w	r3, r3, #4
 80097b0:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80097b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80097ba:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80097bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80097be:	3801      	subs	r0, #1
 80097c0:	f7fc f8e3 	bl	800598a <lwip_htonl>
 80097c4:	2100      	movs	r1, #0
 80097c6:	4602      	mov	r2, r0
 80097c8:	4620      	mov	r0, r4
 80097ca:	f7ff fa03 	bl	8008bd4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80097ce:	4605      	mov	r5, r0
 80097d0:	b1c8      	cbz	r0, 8009806 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80097d2:	1d26      	adds	r6, r4, #4
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 fe81 	bl	800a4dc <ip4_route>
  if (netif == NULL) {
 80097da:	b188      	cbz	r0, 8009800 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80097dc:	2200      	movs	r2, #0
 80097de:	2106      	movs	r1, #6
 80097e0:	7aa3      	ldrb	r3, [r4, #10]
 80097e2:	9002      	str	r0, [sp, #8]
 80097e4:	e9cd 2100 	strd	r2, r1, [sp]
 80097e8:	4628      	mov	r0, r5
 80097ea:	4621      	mov	r1, r4
 80097ec:	4632      	mov	r2, r6
 80097ee:	f000 ffdb 	bl	800a7a8 <ip4_output_if>
 80097f2:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80097f4:	4628      	mov	r0, r5
 80097f6:	f7fc fcdf 	bl	80061b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80097fa:	4620      	mov	r0, r4
 80097fc:	b004      	add	sp, #16
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8009800:	f06f 0403 	mvn.w	r4, #3
 8009804:	e7f6      	b.n	80097f4 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8009806:	f04f 34ff 	mov.w	r4, #4294967295
 800980a:	e7f6      	b.n	80097fa <tcp_keepalive+0x42>

0800980c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800980c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009810:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8009812:	4606      	mov	r6, r0

  if (seg == NULL) {
 8009814:	b914      	cbnz	r4, 800981c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8009816:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8009818:	2c00      	cmp	r4, #0
 800981a:	d042      	beq.n	80098a2 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800981c:	68e3      	ldr	r3, [r4, #12]
 800981e:	8998      	ldrh	r0, [r3, #12]
 8009820:	f7fc f8b0 	bl	8005984 <lwip_htons>
 8009824:	f010 0501 	ands.w	r5, r0, #1
 8009828:	bf18      	it	ne
 800982a:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800982c:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800982e:	bf1c      	itt	ne
 8009830:	fab5 f585 	clzne	r5, r5
 8009834:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	f085 0101 	eor.w	r1, r5, #1
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff f9c9 	bl	8008bd4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009842:	4607      	mov	r7, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d03e      	beq.n	80098c6 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009848:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800984c:	b36d      	cbz	r5, 80098aa <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800984e:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8009852:	2011      	movs	r0, #17
 8009854:	f7fc f896 	bl	8005984 <lwip_htons>
 8009858:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800985c:	b2ad      	uxth	r5, r5
 800985e:	4328      	orrs	r0, r5
 8009860:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009864:	68e3      	ldr	r3, [r4, #12]
 8009866:	6858      	ldr	r0, [r3, #4]
 8009868:	f7fc f88f 	bl	800598a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800986c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800986e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009870:	1a1b      	subs	r3, r3, r0
 8009872:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009874:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 8009878:	bfb8      	it	lt
 800987a:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800987c:	4620      	mov	r0, r4
 800987e:	f000 fe2d 	bl	800a4dc <ip4_route>
  if (netif == NULL) {
 8009882:	b1e8      	cbz	r0, 80098c0 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009884:	2200      	movs	r2, #0
 8009886:	2106      	movs	r1, #6
 8009888:	e9cd 2100 	strd	r2, r1, [sp]
 800988c:	9002      	str	r0, [sp, #8]
 800988e:	4622      	mov	r2, r4
 8009890:	7ab3      	ldrb	r3, [r6, #10]
 8009892:	4631      	mov	r1, r6
 8009894:	4638      	mov	r0, r7
 8009896:	f000 ff87 	bl	800a7a8 <ip4_output_if>
 800989a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800989c:	4638      	mov	r0, r7
 800989e:	f7fc fc8b 	bl	80061b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80098a2:	4620      	mov	r0, r4
 80098a4:	b004      	add	sp, #16
 80098a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80098aa:	6860      	ldr	r0, [r4, #4]
 80098ac:	8922      	ldrh	r2, [r4, #8]
 80098ae:	8903      	ldrh	r3, [r0, #8]
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2201      	movs	r2, #1
 80098b6:	f108 0114 	add.w	r1, r8, #20
 80098ba:	f7fc ff0b 	bl	80066d4 <pbuf_copy_partial>
 80098be:	e7d1      	b.n	8009864 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 80098c0:	f06f 0403 	mvn.w	r4, #3
 80098c4:	e7ea      	b.n	800989c <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 80098c6:	f04f 34ff 	mov.w	r4, #4294967295
 80098ca:	e7ea      	b.n	80098a2 <tcp_zero_window_probe+0x96>

080098cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80098d2:	2006      	movs	r0, #6
{
 80098d4:	460f      	mov	r7, r1
 80098d6:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80098d8:	f7fc faee 	bl	8005eb8 <memp_malloc>
  if (timeout == NULL) {
 80098dc:	4604      	mov	r4, r0
 80098de:	b938      	cbnz	r0, 80098f0 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80098e0:	4b1d      	ldr	r3, [pc, #116]	; (8009958 <sys_timeout+0x8c>)
 80098e2:	491e      	ldr	r1, [pc, #120]	; (800995c <sys_timeout+0x90>)
 80098e4:	481e      	ldr	r0, [pc, #120]	; (8009960 <sys_timeout+0x94>)
 80098e6:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 80098e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80098ec:	f004 b93a 	b.w	800db64 <iprintf>
  now = sys_now();
 80098f0:	f002 fb46 	bl	800bf80 <sys_now>
  if (next_timeout == NULL) {
 80098f4:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <sys_timeout+0x98>)
 80098f6:	491c      	ldr	r1, [pc, #112]	; (8009968 <sys_timeout+0x9c>)
 80098f8:	6813      	ldr	r3, [r2, #0]
 80098fa:	b95b      	cbnz	r3, 8009914 <sys_timeout+0x48>
    timeouts_last_time = now;
 80098fc:	6008      	str	r0, [r1, #0]
    diff = 0;
 80098fe:	4618      	mov	r0, r3
  timeout->next = NULL;
 8009900:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8009902:	4428      	add	r0, r5
  timeout->next = NULL;
 8009904:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8009906:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 800990a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800990c:	b92b      	cbnz	r3, 800991a <sys_timeout+0x4e>
    next_timeout = timeout;
 800990e:	6014      	str	r4, [r2, #0]
}
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8009914:	6809      	ldr	r1, [r1, #0]
 8009916:	1a40      	subs	r0, r0, r1
 8009918:	e7f2      	b.n	8009900 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800991a:	6859      	ldr	r1, [r3, #4]
 800991c:	42a9      	cmp	r1, r5
 800991e:	d903      	bls.n	8009928 <sys_timeout+0x5c>
    next_timeout->time -= msecs;
 8009920:	1b4d      	subs	r5, r1, r5
 8009922:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	e7f2      	b.n	800990e <sys_timeout+0x42>
 8009928:	4618      	mov	r0, r3
      timeout->time -= t->time;
 800992a:	6841      	ldr	r1, [r0, #4]
 800992c:	6862      	ldr	r2, [r4, #4]
 800992e:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8009930:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8009932:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009934:	b139      	cbz	r1, 8009946 <sys_timeout+0x7a>
 8009936:	684e      	ldr	r6, [r1, #4]
 8009938:	42b2      	cmp	r2, r6
 800993a:	d301      	bcc.n	8009940 <sys_timeout+0x74>
 800993c:	4608      	mov	r0, r1
 800993e:	e7f4      	b.n	800992a <sys_timeout+0x5e>
          t->next->time -= timeout->time;
 8009940:	1ab2      	subs	r2, r6, r2
 8009942:	604a      	str	r2, [r1, #4]
 8009944:	e004      	b.n	8009950 <sys_timeout+0x84>
        } else if (timeout->time > msecs) {
 8009946:	42aa      	cmp	r2, r5
 8009948:	d902      	bls.n	8009950 <sys_timeout+0x84>
          timeout->time = msecs + next_timeout->time;
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	441d      	add	r5, r3
 800994e:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8009950:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8009952:	6004      	str	r4, [r0, #0]
        break;
 8009954:	e7dc      	b.n	8009910 <sys_timeout+0x44>
 8009956:	bf00      	nop
 8009958:	08010618 	.word	0x08010618
 800995c:	0801064c 	.word	0x0801064c
 8009960:	0800f008 	.word	0x0800f008
 8009964:	20000c60 	.word	0x20000c60
 8009968:	20000c68 	.word	0x20000c68

0800996c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800996c:	4b08      	ldr	r3, [pc, #32]	; (8009990 <tcp_timer_needed+0x24>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	b962      	cbnz	r2, 800998c <tcp_timer_needed+0x20>
 8009972:	4a08      	ldr	r2, [pc, #32]	; (8009994 <tcp_timer_needed+0x28>)
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	b912      	cbnz	r2, 800997e <tcp_timer_needed+0x12>
 8009978:	4a07      	ldr	r2, [pc, #28]	; (8009998 <tcp_timer_needed+0x2c>)
 800997a:	6812      	ldr	r2, [r2, #0]
 800997c:	b132      	cbz	r2, 800998c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009982:	4906      	ldr	r1, [pc, #24]	; (800999c <tcp_timer_needed+0x30>)
 8009984:	2200      	movs	r2, #0
 8009986:	20fa      	movs	r0, #250	; 0xfa
 8009988:	f7ff bfa0 	b.w	80098cc <sys_timeout>
}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000c64 	.word	0x20000c64
 8009994:	20005054 	.word	0x20005054
 8009998:	20005064 	.word	0x20005064
 800999c:	080099a1 	.word	0x080099a1

080099a0 <tcpip_tcp_timer>:
{
 80099a0:	b508      	push	{r3, lr}
  tcp_tmr();
 80099a2:	f7fd fc63 	bl	800726c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <tcpip_tcp_timer+0x28>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	b913      	cbnz	r3, 80099b2 <tcpip_tcp_timer+0x12>
 80099ac:	4b07      	ldr	r3, [pc, #28]	; (80099cc <tcpip_tcp_timer+0x2c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	b133      	cbz	r3, 80099c0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80099b2:	2200      	movs	r2, #0
 80099b4:	4906      	ldr	r1, [pc, #24]	; (80099d0 <tcpip_tcp_timer+0x30>)
 80099b6:	20fa      	movs	r0, #250	; 0xfa
}
 80099b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80099bc:	f7ff bf86 	b.w	80098cc <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80099c0:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <tcpip_tcp_timer+0x34>)
 80099c2:	6013      	str	r3, [r2, #0]
}
 80099c4:	bd08      	pop	{r3, pc}
 80099c6:	bf00      	nop
 80099c8:	20005054 	.word	0x20005054
 80099cc:	20005064 	.word	0x20005064
 80099d0:	080099a1 	.word	0x080099a1
 80099d4:	20000c64 	.word	0x20000c64

080099d8 <sys_timeouts_init>:
{
 80099d8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80099da:	4d0a      	ldr	r5, [pc, #40]	; (8009a04 <sys_timeouts_init+0x2c>)
 80099dc:	4c0a      	ldr	r4, [pc, #40]	; (8009a08 <sys_timeouts_init+0x30>)
 80099de:	f105 0208 	add.w	r2, r5, #8
 80099e2:	4621      	mov	r1, r4
 80099e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099e8:	f7ff ff70 	bl	80098cc <sys_timeout>
 80099ec:	f105 0210 	add.w	r2, r5, #16
 80099f0:	4621      	mov	r1, r4
 80099f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099f6:	f7ff ff69 	bl	80098cc <sys_timeout>
  timeouts_last_time = sys_now();
 80099fa:	f002 fac1 	bl	800bf80 <sys_now>
 80099fe:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <sys_timeouts_init+0x34>)
 8009a00:	6018      	str	r0, [r3, #0]
}
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	08010600 	.word	0x08010600
 8009a08:	08009a11 	.word	0x08009a11
 8009a0c:	20000c68 	.word	0x20000c68

08009a10 <cyclic_timer>:
{
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4604      	mov	r4, r0
  cyclic->handler();
 8009a14:	6843      	ldr	r3, [r0, #4]
 8009a16:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009a18:	4622      	mov	r2, r4
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	4902      	ldr	r1, [pc, #8]	; (8009a28 <cyclic_timer+0x18>)
}
 8009a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009a22:	f7ff bf53 	b.w	80098cc <sys_timeout>
 8009a26:	bf00      	nop
 8009a28:	08009a11 	.word	0x08009a11

08009a2c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 8009a30:	4d12      	ldr	r5, [pc, #72]	; (8009a7c <sys_check_timeouts+0x50>)
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	b1fb      	cbz	r3, 8009a76 <sys_check_timeouts+0x4a>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8009a36:	4e12      	ldr	r6, [pc, #72]	; (8009a80 <sys_check_timeouts+0x54>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8009a38:	4f12      	ldr	r7, [pc, #72]	; (8009a84 <sys_check_timeouts+0x58>)
    now = sys_now();
 8009a3a:	f002 faa1 	bl	800bf80 <sys_now>
    diff = now - timeouts_last_time;
 8009a3e:	6834      	ldr	r4, [r6, #0]
 8009a40:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 8009a42:	783b      	ldrb	r3, [r7, #0]
 8009a44:	b10b      	cbz	r3, 8009a4a <sys_check_timeouts+0x1e>
 8009a46:	f7fc fb65 	bl	8006114 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 8009a4a:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009a4c:	b199      	cbz	r1, 8009a76 <sys_check_timeouts+0x4a>
 8009a4e:	684b      	ldr	r3, [r1, #4]
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	d810      	bhi.n	8009a76 <sys_check_timeouts+0x4a>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 8009a54:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
        arg = tmptimeout->arg;
 8009a56:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 8009a5a:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 8009a5c:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009a5e:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 8009a60:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 8009a62:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 8009a64:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009a66:	f7fc fa43 	bl	8005ef0 <memp_free>
        if (handler != NULL) {
 8009a6a:	f1b8 0f00 	cmp.w	r8, #0
 8009a6e:	d0e8      	beq.n	8009a42 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8009a70:	4648      	mov	r0, r9
 8009a72:	47c0      	blx	r8
 8009a74:	e7e5      	b.n	8009a42 <sys_check_timeouts+0x16>
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  }
}
 8009a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000c60 	.word	0x20000c60
 8009a80:	20000c68 	.word	0x20000c68
 8009a84:	2000504c 	.word	0x2000504c

08009a88 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009a88:	4770      	bx	lr
	...

08009a8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009a90:	8943      	ldrh	r3, [r0, #10]
 8009a92:	2b07      	cmp	r3, #7
{
 8009a94:	b085      	sub	sp, #20
 8009a96:	4605      	mov	r5, r0
 8009a98:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8009a9a:	d805      	bhi.n	8009aa8 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009a9c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009a9e:	b005      	add	sp, #20
 8009aa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8009aa4:	f7fc bb88 	b.w	80061b8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009aa8:	4e3d      	ldr	r6, [pc, #244]	; (8009ba0 <udp_input+0x114>)
  udphdr = (struct udp_hdr *)p->payload;
 8009aaa:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009aac:	6831      	ldr	r1, [r6, #0]
 8009aae:	6970      	ldr	r0, [r6, #20]
 8009ab0:	f000 fe8b 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 8009ab4:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8009ab6:	8820      	ldrh	r0, [r4, #0]
 8009ab8:	f7fb ff64 	bl	8005984 <lwip_htons>
 8009abc:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8009abe:	8860      	ldrh	r0, [r4, #2]
 8009ac0:	f7fb ff60 	bl	8005984 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ac4:	4a37      	ldr	r2, [pc, #220]	; (8009ba4 <udp_input+0x118>)
 8009ac6:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8009ac8:	4682      	mov	sl, r0
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009aca:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ace:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8009ad0:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ad2:	4603      	mov	r3, r0
  prev = NULL;
 8009ad4:	46a6      	mov	lr, r4
 8009ad6:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ad8:	b99b      	cbnz	r3, 8009b02 <udp_input+0x76>
  if (pcb != NULL) {
 8009ada:	b91c      	cbnz	r4, 8009ae4 <udp_input+0x58>
  if (for_us) {
 8009adc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d1db      	bne.n	8009a9c <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 8009ae4:	f06f 0107 	mvn.w	r1, #7
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f7fc fb5f 	bl	80061ac <pbuf_header>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d034      	beq.n	8009b5c <udp_input+0xd0>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009af2:	4b2d      	ldr	r3, [pc, #180]	; (8009ba8 <udp_input+0x11c>)
 8009af4:	492d      	ldr	r1, [pc, #180]	; (8009bac <udp_input+0x120>)
 8009af6:	482e      	ldr	r0, [pc, #184]	; (8009bb0 <udp_input+0x124>)
 8009af8:	f240 1255 	movw	r2, #341	; 0x155
 8009afc:	f004 f832 	bl	800db64 <iprintf>
 8009b00:	e7cc      	b.n	8009a9c <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 8009b02:	8a5a      	ldrh	r2, [r3, #18]
 8009b04:	4552      	cmp	r2, sl
 8009b06:	d126      	bne.n	8009b56 <udp_input+0xca>
 8009b08:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009b0a:	b307      	cbz	r7, 8009b4e <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009b0c:	b13a      	cbz	r2, 8009b1e <udp_input+0x92>
 8009b0e:	1c4e      	adds	r6, r1, #1
 8009b10:	d005      	beq.n	8009b1e <udp_input+0x92>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009b12:	404a      	eors	r2, r1
 8009b14:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009b16:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009b1a:	4216      	tst	r6, r2
 8009b1c:	d11b      	bne.n	8009b56 <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009b1e:	7c1a      	ldrb	r2, [r3, #16]
 8009b20:	0752      	lsls	r2, r2, #29
 8009b22:	d402      	bmi.n	8009b2a <udp_input+0x9e>
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	bf08      	it	eq
 8009b28:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8009b2a:	8a9a      	ldrh	r2, [r3, #20]
 8009b2c:	4542      	cmp	r2, r8
 8009b2e:	d112      	bne.n	8009b56 <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009b30:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009b32:	b10a      	cbz	r2, 8009b38 <udp_input+0xac>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009b34:	4562      	cmp	r2, ip
 8009b36:	d10e      	bne.n	8009b56 <udp_input+0xca>
        if (prev != NULL) {
 8009b38:	f1be 0f00 	cmp.w	lr, #0
 8009b3c:	d005      	beq.n	8009b4a <udp_input+0xbe>
          prev->next = pcb->next;
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	f8ce 200c 	str.w	r2, [lr, #12]
          udp_pcbs = pcb;
 8009b44:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8009b48:	60d8      	str	r0, [r3, #12]
 8009b4a:	461c      	mov	r4, r3
 8009b4c:	e7ca      	b.n	8009ae4 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	d0e5      	beq.n	8009b1e <udp_input+0x92>
 8009b52:	428a      	cmp	r2, r1
 8009b54:	d0e3      	beq.n	8009b1e <udp_input+0x92>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b56:	469e      	mov	lr, r3
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	e7bd      	b.n	8009ad8 <udp_input+0x4c>
    if (pcb != NULL) {
 8009b5c:	b164      	cbz	r4, 8009b78 <udp_input+0xec>
      if (pcb->recv != NULL) {
 8009b5e:	69a6      	ldr	r6, [r4, #24]
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	d09b      	beq.n	8009a9c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009b64:	f8cd 8000 	str.w	r8, [sp]
 8009b68:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <udp_input+0x128>)
 8009b6a:	69e0      	ldr	r0, [r4, #28]
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4621      	mov	r1, r4
 8009b70:	47b0      	blx	r6
}
 8009b72:	b005      	add	sp, #20
 8009b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009b78:	2f00      	cmp	r7, #0
 8009b7a:	d18f      	bne.n	8009a9c <udp_input+0x10>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b84:	2be0      	cmp	r3, #224	; 0xe0
 8009b86:	d089      	beq.n	8009a9c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	8999      	ldrh	r1, [r3, #12]
 8009b8c:	3108      	adds	r1, #8
 8009b8e:	b209      	sxth	r1, r1
 8009b90:	4628      	mov	r0, r5
 8009b92:	f7fc fb0e 	bl	80061b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009b96:	2103      	movs	r1, #3
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 fc95 	bl	800a4c8 <icmp_dest_unreach>
 8009b9e:	e77d      	b.n	8009a9c <udp_input+0x10>
 8009ba0:	20001b2c 	.word	0x20001b2c
 8009ba4:	2000506c 	.word	0x2000506c
 8009ba8:	08010689 	.word	0x08010689
 8009bac:	080106b8 	.word	0x080106b8
 8009bb0:	0800f008 	.word	0x0800f008
 8009bb4:	20001b3c 	.word	0x20001b3c

08009bb8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009bb8:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009bba:	b138      	cbz	r0, 8009bcc <udp_netif_ip_addr_changed+0x14>
 8009bbc:	6803      	ldr	r3, [r0, #0]
 8009bbe:	b12b      	cbz	r3, 8009bcc <udp_netif_ip_addr_changed+0x14>
 8009bc0:	b121      	cbz	r1, 8009bcc <udp_netif_ip_addr_changed+0x14>
 8009bc2:	680b      	ldr	r3, [r1, #0]
 8009bc4:	b113      	cbz	r3, 8009bcc <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <udp_netif_ip_addr_changed+0x28>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	b903      	cbnz	r3, 8009bce <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8009bcc:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009bce:	681c      	ldr	r4, [r3, #0]
 8009bd0:	6802      	ldr	r2, [r0, #0]
 8009bd2:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009bd4:	bf04      	itt	eq
 8009bd6:	680a      	ldreq	r2, [r1, #0]
 8009bd8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	e7f5      	b.n	8009bca <udp_netif_ip_addr_changed+0x12>
 8009bde:	bf00      	nop
 8009be0:	2000506c 	.word	0x2000506c

08009be4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009be4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009be6:	2618      	movs	r6, #24
 8009be8:	4c07      	ldr	r4, [pc, #28]	; (8009c08 <etharp_free_entry+0x24>)
 8009bea:	4346      	muls	r6, r0
{
 8009bec:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8009bee:	59a0      	ldr	r0, [r4, r6]
 8009bf0:	b118      	cbz	r0, 8009bfa <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009bf2:	f7fc fae1 	bl	80061b8 <pbuf_free>
    arp_table[i].q = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009bfa:	2318      	movs	r3, #24
 8009bfc:	fb03 4405 	mla	r4, r3, r5, r4
 8009c00:	2300      	movs	r3, #0
 8009c02:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	bf00      	nop
 8009c08:	20000c6c 	.word	0x20000c6c

08009c0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009c0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009c12:	4689      	mov	r9, r1
 8009c14:	4692      	mov	sl, r2
 8009c16:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009c18:	4607      	mov	r7, r0
 8009c1a:	b930      	cbnz	r0, 8009c2a <etharp_raw+0x1e>
 8009c1c:	4b2c      	ldr	r3, [pc, #176]	; (8009cd0 <etharp_raw+0xc4>)
 8009c1e:	492d      	ldr	r1, [pc, #180]	; (8009cd4 <etharp_raw+0xc8>)
 8009c20:	482d      	ldr	r0, [pc, #180]	; (8009cd8 <etharp_raw+0xcc>)
 8009c22:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8009c26:	f003 ff9d 	bl	800db64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	211c      	movs	r1, #28
 8009c2e:	2002      	movs	r0, #2
 8009c30:	f7fc fb24 	bl	800627c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009c34:	4606      	mov	r6, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d047      	beq.n	8009cca <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009c3a:	8943      	ldrh	r3, [r0, #10]
 8009c3c:	2b1b      	cmp	r3, #27
 8009c3e:	d806      	bhi.n	8009c4e <etharp_raw+0x42>
 8009c40:	4b23      	ldr	r3, [pc, #140]	; (8009cd0 <etharp_raw+0xc4>)
 8009c42:	4926      	ldr	r1, [pc, #152]	; (8009cdc <etharp_raw+0xd0>)
 8009c44:	4824      	ldr	r0, [pc, #144]	; (8009cd8 <etharp_raw+0xcc>)
 8009c46:	f240 4264 	movw	r2, #1124	; 0x464
 8009c4a:	f003 ff8b 	bl	800db64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009c4e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8009c52:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8009c54:	f7fb fe96 	bl	8005984 <lwip_htons>
 8009c58:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c5e:	2b06      	cmp	r3, #6
 8009c60:	d006      	beq.n	8009c70 <etharp_raw+0x64>
 8009c62:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <etharp_raw+0xc4>)
 8009c64:	491e      	ldr	r1, [pc, #120]	; (8009ce0 <etharp_raw+0xd4>)
 8009c66:	481c      	ldr	r0, [pc, #112]	; (8009cd8 <etharp_raw+0xcc>)
 8009c68:	f240 426b 	movw	r2, #1131	; 0x46b
 8009c6c:	f003 ff7a 	bl	800db64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009c70:	f8d8 3000 	ldr.w	r3, [r8]
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009c7a:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	f8c4 3012 	str.w	r3, [r4, #18]
 8009c82:	88ab      	ldrh	r3, [r5, #4]
 8009c84:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009c94:	2301      	movs	r3, #1
 8009c96:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009c98:	2308      	movs	r3, #8
 8009c9a:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009ca0:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009ca2:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8009ca4:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009ca6:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009caa:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009cac:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009cae:	464a      	mov	r2, r9
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4653      	mov	r3, sl
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f001 f988 	bl	800afcc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7fc fa7b 	bl	80061b8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8009cc2:	4628      	mov	r0, r5
}
 8009cc4:	b002      	add	sp, #8
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295
 8009cce:	e7f9      	b.n	8009cc4 <etharp_raw+0xb8>
 8009cd0:	080107c1 	.word	0x080107c1
 8009cd4:	080107f8 	.word	0x080107f8
 8009cd8:	0800f008 	.word	0x0800f008
 8009cdc:	08010806 	.word	0x08010806
 8009ce0:	08010837 	.word	0x08010837

08009ce4 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8009ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	4b3e      	ldr	r3, [pc, #248]	; (8009de4 <etharp_find_entry.isra.0+0x100>)
 8009cea:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8009cec:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8009cee:	4604      	mov	r4, r0
 8009cf0:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4696      	mov	lr, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 8009cfc:	4694      	mov	ip, r2
 8009cfe:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009d00:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 8009d04:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009d08:	d12a      	bne.n	8009d60 <etharp_find_entry.isra.0+0x7c>
 8009d0a:	f1bb 0f00 	cmp.w	fp, #0
 8009d0e:	d12a      	bne.n	8009d66 <etharp_find_entry.isra.0+0x82>
      empty = i;
 8009d10:	fa4f fc80 	sxtb.w	ip, r0
 8009d14:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d16:	280a      	cmp	r0, #10
 8009d18:	f103 0318 	add.w	r3, r3, #24
 8009d1c:	d1f0      	bne.n	8009d00 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d15b      	bne.n	8009ddc <etharp_find_entry.isra.0+0xf8>
 8009d24:	f1bc 0f0a 	cmp.w	ip, #10
 8009d28:	d03c      	beq.n	8009da4 <etharp_find_entry.isra.0+0xc0>
    i = empty;
 8009d2a:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009d2e:	2318      	movs	r3, #24
 8009d30:	fb03 5306 	mla	r3, r3, r6, r5
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	b133      	cbz	r3, 8009d46 <etharp_find_entry.isra.0+0x62>
 8009d38:	4b2b      	ldr	r3, [pc, #172]	; (8009de8 <etharp_find_entry.isra.0+0x104>)
 8009d3a:	492c      	ldr	r1, [pc, #176]	; (8009dec <etharp_find_entry.isra.0+0x108>)
 8009d3c:	482c      	ldr	r0, [pc, #176]	; (8009df0 <etharp_find_entry.isra.0+0x10c>)
 8009d3e:	f240 1287 	movw	r2, #391	; 0x187
 8009d42:	f003 ff0f 	bl	800db64 <iprintf>
  if (ipaddr != NULL) {
 8009d46:	b124      	cbz	r4, 8009d52 <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009d48:	2318      	movs	r3, #24
 8009d4a:	fb03 5306 	mla	r3, r3, r6, r5
 8009d4e:	6822      	ldr	r2, [r4, #0]
 8009d50:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8009d52:	2318      	movs	r3, #24
 8009d54:	fb03 5506 	mla	r5, r3, r6, r5
 8009d58:	2300      	movs	r3, #0
 8009d5a:	826b      	strh	r3, [r5, #18]
  return (err_t)i;
 8009d5c:	b270      	sxtb	r0, r6
 8009d5e:	e008      	b.n	8009d72 <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009d60:	f1bb 0f00 	cmp.w	fp, #0
 8009d64:	d0d6      	beq.n	8009d14 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009d66:	b13c      	cbz	r4, 8009d78 <etharp_find_entry.isra.0+0x94>
 8009d68:	6827      	ldr	r7, [r4, #0]
 8009d6a:	685e      	ldr	r6, [r3, #4]
 8009d6c:	42b7      	cmp	r7, r6
 8009d6e:	d103      	bne.n	8009d78 <etharp_find_entry.isra.0+0x94>
        return i;
 8009d70:	b240      	sxtb	r0, r0
}
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 8009d78:	f1bb 0f01 	cmp.w	fp, #1
 8009d7c:	8a5f      	ldrh	r7, [r3, #18]
 8009d7e:	d10c      	bne.n	8009d9a <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 8009d80:	681e      	ldr	r6, [r3, #0]
 8009d82:	b126      	cbz	r6, 8009d8e <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 8009d84:	4547      	cmp	r7, r8
 8009d86:	d3c5      	bcc.n	8009d14 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 8009d88:	b242      	sxtb	r2, r0
 8009d8a:	46b8      	mov	r8, r7
 8009d8c:	e7c2      	b.n	8009d14 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 8009d8e:	454f      	cmp	r7, r9
 8009d90:	d3c0      	bcc.n	8009d14 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 8009d92:	fa4f fe80 	sxtb.w	lr, r0
 8009d96:	46b9      	mov	r9, r7
 8009d98:	e7bc      	b.n	8009d14 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 8009d9a:	4557      	cmp	r7, sl
            old_stable = i;
 8009d9c:	bf24      	itt	cs
 8009d9e:	b241      	sxtbcs	r1, r0
 8009da0:	46ba      	movcs	sl, r7
 8009da2:	e7b7      	b.n	8009d14 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 8009da4:	290a      	cmp	r1, #10
 8009da6:	d00f      	beq.n	8009dc8 <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009da8:	2318      	movs	r3, #24
      i = old_stable;
 8009daa:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009dac:	4359      	muls	r1, r3
 8009dae:	586b      	ldr	r3, [r5, r1]
 8009db0:	b133      	cbz	r3, 8009dc0 <etharp_find_entry.isra.0+0xdc>
 8009db2:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <etharp_find_entry.isra.0+0x104>)
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <etharp_find_entry.isra.0+0x110>)
 8009db6:	480e      	ldr	r0, [pc, #56]	; (8009df0 <etharp_find_entry.isra.0+0x10c>)
 8009db8:	f240 126f 	movw	r2, #367	; 0x16f
 8009dbc:	f003 fed2 	bl	800db64 <iprintf>
    etharp_free_entry(i);
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff ff0f 	bl	8009be4 <etharp_free_entry>
 8009dc6:	e7b2      	b.n	8009d2e <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009dc8:	f1be 0f0a 	cmp.w	lr, #10
 8009dcc:	d002      	beq.n	8009dd4 <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 8009dce:	fa5f f68e 	uxtb.w	r6, lr
 8009dd2:	e7f5      	b.n	8009dc0 <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009dd4:	2a0a      	cmp	r2, #10
 8009dd6:	d001      	beq.n	8009ddc <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 8009dd8:	b2d6      	uxtb	r6, r2
 8009dda:	e7f1      	b.n	8009dc0 <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e7c7      	b.n	8009d72 <etharp_find_entry.isra.0+0x8e>
 8009de2:	bf00      	nop
 8009de4:	20000c6c 	.word	0x20000c6c
 8009de8:	080107c1 	.word	0x080107c1
 8009dec:	080106e3 	.word	0x080106e3
 8009df0:	0800f008 	.word	0x0800f008
 8009df4:	080106cc 	.word	0x080106cc

08009df8 <etharp_cleanup_netif>:
{
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	4e09      	ldr	r6, [pc, #36]	; (8009e20 <etharp_cleanup_netif+0x28>)
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	2400      	movs	r4, #0
 8009e00:	2718      	movs	r7, #24
 8009e02:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009e06:	7d1a      	ldrb	r2, [r3, #20]
 8009e08:	b12a      	cbz	r2, 8009e16 <etharp_cleanup_netif+0x1e>
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	42ab      	cmp	r3, r5
 8009e0e:	d102      	bne.n	8009e16 <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 8009e10:	4620      	mov	r0, r4
 8009e12:	f7ff fee7 	bl	8009be4 <etharp_free_entry>
 8009e16:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e18:	2c0a      	cmp	r4, #10
 8009e1a:	d1f2      	bne.n	8009e02 <etharp_cleanup_netif+0xa>
}
 8009e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000c6c 	.word	0x20000c6c

08009e24 <etharp_input>:
{
 8009e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	4680      	mov	r8, r0
 8009e2a:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	b949      	cbnz	r1, 8009e44 <etharp_input+0x20>
 8009e30:	4b45      	ldr	r3, [pc, #276]	; (8009f48 <etharp_input+0x124>)
 8009e32:	4946      	ldr	r1, [pc, #280]	; (8009f4c <etharp_input+0x128>)
 8009e34:	4846      	ldr	r0, [pc, #280]	; (8009f50 <etharp_input+0x12c>)
 8009e36:	f44f 7222 	mov.w	r2, #648	; 0x288
 8009e3a:	f003 fe93 	bl	800db64 <iprintf>
}
 8009e3e:	b006      	add	sp, #24
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8009e44:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009e46:	8833      	ldrh	r3, [r6, #0]
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d108      	bne.n	8009e60 <etharp_input+0x3c>
 8009e4e:	7933      	ldrb	r3, [r6, #4]
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	d105      	bne.n	8009e60 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e54:	7973      	ldrb	r3, [r6, #5]
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d102      	bne.n	8009e60 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e5a:	8873      	ldrh	r3, [r6, #2]
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d003      	beq.n	8009e68 <etharp_input+0x44>
  pbuf_free(p);
 8009e60:	4640      	mov	r0, r8
 8009e62:	f7fc f9a9 	bl	80061b8 <pbuf_free>
 8009e66:	e7ea      	b.n	8009e3e <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e68:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8009e6a:	f8d6 300e 	ldr.w	r3, [r6, #14]
 8009e6e:	9305      	str	r3, [sp, #20]
 8009e70:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009e74:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e76:	b115      	cbz	r5, 8009e7e <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	d062      	beq.n	8009f42 <etharp_input+0x11e>
    for_us = 0;
 8009e7c:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e7e:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009e82:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009e86:	2b06      	cmp	r3, #6
 8009e88:	d006      	beq.n	8009e98 <etharp_input+0x74>
 8009e8a:	4b2f      	ldr	r3, [pc, #188]	; (8009f48 <etharp_input+0x124>)
 8009e8c:	4931      	ldr	r1, [pc, #196]	; (8009f54 <etharp_input+0x130>)
 8009e8e:	4830      	ldr	r0, [pc, #192]	; (8009f50 <etharp_input+0x12c>)
 8009e90:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009e94:	f003 fe66 	bl	800db64 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8009e98:	9805      	ldr	r0, [sp, #20]
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d03c      	beq.n	8009f18 <etharp_input+0xf4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f000 fc93 	bl	800a7ca <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	bbb8      	cbnz	r0, 8009f18 <etharp_input+0xf4>
      ip4_addr_ismulticast(ipaddr)) {
 8009ea8:	9b05      	ldr	r3, [sp, #20]
 8009eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009eae:	2be0      	cmp	r3, #224	; 0xe0
 8009eb0:	d032      	beq.n	8009f18 <etharp_input+0xf4>
  i = etharp_find_entry(ipaddr, flags, netif);
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	a805      	add	r0, sp, #20
 8009eb6:	f7ff ff15 	bl	8009ce4 <etharp_find_entry.isra.0>
  if (i < 0) {
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	db2c      	blt.n	8009f18 <etharp_input+0xf4>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009ebe:	4b26      	ldr	r3, [pc, #152]	; (8009f58 <etharp_input+0x134>)
 8009ec0:	2218      	movs	r2, #24
 8009ec2:	fb02 f100 	mul.w	r1, r2, r0
 8009ec6:	eb03 0c01 	add.w	ip, r3, r1
 8009eca:	f04f 0e02 	mov.w	lr, #2
 8009ece:	f88c e014 	strb.w	lr, [ip, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8009ed2:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8009ed6:	f8cc 4008 	str.w	r4, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8009eda:	fb12 e200 	smlabb	r2, r2, r0, lr
 8009ede:	6838      	ldr	r0, [r7, #0]
 8009ee0:	5098      	str	r0, [r3, r2]
 8009ee2:	eb03 0e02 	add.w	lr, r3, r2
 8009ee6:	88ba      	ldrh	r2, [r7, #4]
 8009ee8:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 8009eec:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8009ef0:	f8ac a012 	strh.w	sl, [ip, #18]
  if (arp_table[i].q != NULL) {
 8009ef4:	f1b9 0f00 	cmp.w	r9, #0
 8009ef8:	d00e      	beq.n	8009f18 <etharp_input+0xf4>
    arp_table[i].q = NULL;
 8009efa:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8009f08:	463b      	mov	r3, r7
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f001 f85d 	bl	800afcc <ethernet_output>
    pbuf_free(p);
 8009f12:	4648      	mov	r0, r9
 8009f14:	f7fc f950 	bl	80061b8 <pbuf_free>
  switch (hdr->opcode) {
 8009f18:	88f3      	ldrh	r3, [r6, #6]
 8009f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1e:	d19f      	bne.n	8009e60 <etharp_input+0x3c>
    if (for_us) {
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	d09d      	beq.n	8009e60 <etharp_input+0x3c>
      etharp_raw(netif,
 8009f24:	2202      	movs	r2, #2
 8009f26:	9203      	str	r2, [sp, #12]
 8009f28:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009f2a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8009f2e:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009f32:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8009f34:	9200      	str	r2, [sp, #0]
 8009f36:	4619      	mov	r1, r3
 8009f38:	463a      	mov	r2, r7
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f7ff fe66 	bl	8009c0c <etharp_raw>
 8009f40:	e78e      	b.n	8009e60 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009f42:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009f44:	46a9      	mov	r9, r5
 8009f46:	e79c      	b.n	8009e82 <etharp_input+0x5e>
 8009f48:	080107c1 	.word	0x080107c1
 8009f4c:	080107f8 	.word	0x080107f8
 8009f50:	0800f008 	.word	0x0800f008
 8009f54:	0801072b 	.word	0x0801072b
 8009f58:	20000c6c 	.word	0x20000c6c

08009f5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f5e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f60:	2401      	movs	r4, #1
 8009f62:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8009f66:	e9cd 1402 	strd	r1, r4, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009f6a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f6c:	4904      	ldr	r1, [pc, #16]	; (8009f80 <etharp_request+0x24>)
 8009f6e:	9101      	str	r1, [sp, #4]
 8009f70:	9200      	str	r2, [sp, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	4a03      	ldr	r2, [pc, #12]	; (8009f84 <etharp_request+0x28>)
 8009f76:	f7ff fe49 	bl	8009c0c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8009f7a:	b004      	add	sp, #16
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	08010bb9 	.word	0x08010bb9
 8009f84:	08010b4d 	.word	0x08010b4d

08009f88 <etharp_tmr>:
{
 8009f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4c15      	ldr	r4, [pc, #84]	; (8009fe4 <etharp_tmr+0x5c>)
 8009f8e:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009f90:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009f92:	2704      	movs	r7, #4
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009f94:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 8009f98:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 8009f9a:	b16a      	cbz	r2, 8009fb8 <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8009f9c:	8963      	ldrh	r3, [r4, #10]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009fa2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8009fa6:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009fa8:	d203      	bcs.n	8009fb2 <etharp_tmr+0x2a>
 8009faa:	2a01      	cmp	r2, #1
 8009fac:	d10b      	bne.n	8009fc6 <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d90d      	bls.n	8009fce <etharp_tmr+0x46>
        etharp_free_entry(i);
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7ff fe16 	bl	8009be4 <etharp_free_entry>
 8009fb8:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fba:	2d0a      	cmp	r5, #10
 8009fbc:	f104 0418 	add.w	r4, r4, #24
 8009fc0:	d1ea      	bne.n	8009f98 <etharp_tmr+0x10>
}
 8009fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009fc6:	2a03      	cmp	r2, #3
 8009fc8:	d108      	bne.n	8009fdc <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009fca:	7327      	strb	r7, [r4, #12]
 8009fcc:	e7f4      	b.n	8009fb8 <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009fce:	2118      	movs	r1, #24
 8009fd0:	fb01 8105 	mla	r1, r1, r5, r8
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	f7ff ffc1 	bl	8009f5c <etharp_request>
 8009fda:	e7ed      	b.n	8009fb8 <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009fdc:	2a04      	cmp	r2, #4
 8009fde:	d1eb      	bne.n	8009fb8 <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009fe0:	7326      	strb	r6, [r4, #12]
 8009fe2:	e7e9      	b.n	8009fb8 <etharp_tmr+0x30>
 8009fe4:	20000c74 	.word	0x20000c74

08009fe8 <etharp_output_to_arp_index>:
{
 8009fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009fec:	4d25      	ldr	r5, [pc, #148]	; (800a084 <etharp_output_to_arp_index+0x9c>)
 8009fee:	2318      	movs	r3, #24
 8009ff0:	fb03 5302 	mla	r3, r3, r2, r5
{
 8009ff4:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009ff6:	7d1b      	ldrb	r3, [r3, #20]
 8009ff8:	2b01      	cmp	r3, #1
{
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a000:	d806      	bhi.n	800a010 <etharp_output_to_arp_index+0x28>
 800a002:	4b21      	ldr	r3, [pc, #132]	; (800a088 <etharp_output_to_arp_index+0xa0>)
 800a004:	4921      	ldr	r1, [pc, #132]	; (800a08c <etharp_output_to_arp_index+0xa4>)
 800a006:	4822      	ldr	r0, [pc, #136]	; (800a090 <etharp_output_to_arp_index+0xa8>)
 800a008:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a00c:	f003 fdaa 	bl	800db64 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a010:	2318      	movs	r3, #24
 800a012:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a016:	fb03 5404 	mla	r4, r3, r4, r5
 800a01a:	00c9      	lsls	r1, r1, #3
 800a01c:	7d23      	ldrb	r3, [r4, #20]
 800a01e:	f101 070c 	add.w	r7, r1, #12
 800a022:	2b02      	cmp	r3, #2
 800a024:	442f      	add	r7, r5
 800a026:	f106 0825 	add.w	r8, r6, #37	; 0x25
 800a02a:	d10b      	bne.n	800a044 <etharp_output_to_arp_index+0x5c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a02c:	8a63      	ldrh	r3, [r4, #18]
 800a02e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a032:	d913      	bls.n	800a05c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a034:	3104      	adds	r1, #4
 800a036:	4429      	add	r1, r5
 800a038:	4630      	mov	r0, r6
 800a03a:	f7ff ff8f 	bl	8009f5c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a03e:	b908      	cbnz	r0, 800a044 <etharp_output_to_arp_index+0x5c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a040:	2303      	movs	r3, #3
 800a042:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4642      	mov	r2, r8
 800a04c:	463b      	mov	r3, r7
 800a04e:	4649      	mov	r1, r9
 800a050:	4630      	mov	r0, r6
 800a052:	f000 ffbb 	bl	800afcc <ethernet_output>
}
 800a056:	b005      	add	sp, #20
 800a058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a05c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a060:	d3f0      	bcc.n	800a044 <etharp_output_to_arp_index+0x5c>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a062:	2301      	movs	r3, #1
 800a064:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a066:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <etharp_output_to_arp_index+0xac>)
 800a06a:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a06c:	4429      	add	r1, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a06e:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a070:	9102      	str	r1, [sp, #8]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	463a      	mov	r2, r7
 800a076:	4643      	mov	r3, r8
 800a078:	4641      	mov	r1, r8
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff fdc6 	bl	8009c0c <etharp_raw>
 800a080:	e7dd      	b.n	800a03e <etharp_output_to_arp_index+0x56>
 800a082:	bf00      	nop
 800a084:	20000c6c 	.word	0x20000c6c
 800a088:	080107c1 	.word	0x080107c1
 800a08c:	0801074f 	.word	0x0801074f
 800a090:	0800f008 	.word	0x0800f008
 800a094:	08010bb9 	.word	0x08010bb9

0800a098 <etharp_query>:
{
 800a098:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	4689      	mov	r9, r1
 800a09e:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	f8d9 0000 	ldr.w	r0, [r9]
{
 800a0a6:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0a8:	f000 fb8f 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d15b      	bne.n	800a16a <etharp_query+0xd2>
      ip4_addr_ismulticast(ipaddr) ||
 800a0b2:	f8d9 3000 	ldr.w	r3, [r9]
 800a0b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0ba:	2ae0      	cmp	r2, #224	; 0xe0
 800a0bc:	d055      	beq.n	800a16a <etharp_query+0xd2>
      ip4_addr_isany(ipaddr)) {
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d053      	beq.n	800a16a <etharp_query+0xd2>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	4648      	mov	r0, r9
 800a0c6:	f7ff fe0d 	bl	8009ce4 <etharp_find_entry.isra.0>
  if (i < 0) {
 800a0ca:	1e04      	subs	r4, r0, #0
 800a0cc:	db50      	blt.n	800a170 <etharp_query+0xd8>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a0ce:	4d3e      	ldr	r5, [pc, #248]	; (800a1c8 <etharp_query+0x130>)
 800a0d0:	2318      	movs	r3, #24
 800a0d2:	fb03 5304 	mla	r3, r3, r4, r5
 800a0d6:	7d1a      	ldrb	r2, [r3, #20]
 800a0d8:	b91a      	cbnz	r2, 800a0e2 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a0da:	2601      	movs	r6, #1
 800a0dc:	751e      	strb	r6, [r3, #20]
    arp_table[i].netif = netif;
 800a0de:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a0e2:	2318      	movs	r3, #24
 800a0e4:	fb03 5304 	mla	r3, r3, r4, r5
 800a0e8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ea:	b933      	cbnz	r3, 800a0fa <etharp_query+0x62>
 800a0ec:	4b37      	ldr	r3, [pc, #220]	; (800a1cc <etharp_query+0x134>)
 800a0ee:	4938      	ldr	r1, [pc, #224]	; (800a1d0 <etharp_query+0x138>)
 800a0f0:	4838      	ldr	r0, [pc, #224]	; (800a1d4 <etharp_query+0x13c>)
 800a0f2:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a0f6:	f003 fd35 	bl	800db64 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800a0fa:	b90e      	cbnz	r6, 800a100 <etharp_query+0x68>
 800a0fc:	2f00      	cmp	r7, #0
 800a0fe:	d139      	bne.n	800a174 <etharp_query+0xdc>
    result = etharp_request(netif, ipaddr);
 800a100:	4649      	mov	r1, r9
 800a102:	4640      	mov	r0, r8
 800a104:	f7ff ff2a 	bl	8009f5c <etharp_request>
    if (q == NULL) {
 800a108:	bbb7      	cbnz	r7, 800a178 <etharp_query+0xe0>
}
 800a10a:	b002      	add	sp, #8
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a110:	d1fb      	bne.n	800a10a <etharp_query+0x72>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a112:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a1cc <etharp_query+0x134>
 800a116:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a1dc <etharp_query+0x144>
 800a11a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a1d4 <etharp_query+0x13c>
 800a11e:	463e      	mov	r6, r7
 800a120:	8972      	ldrh	r2, [r6, #10]
 800a122:	8933      	ldrh	r3, [r6, #8]
 800a124:	429a      	cmp	r2, r3
 800a126:	d108      	bne.n	800a13a <etharp_query+0xa2>
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	b133      	cbz	r3, 800a13a <etharp_query+0xa2>
 800a12c:	4643      	mov	r3, r8
 800a12e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a132:	4649      	mov	r1, r9
 800a134:	4650      	mov	r0, sl
 800a136:	f003 fd15 	bl	800db64 <iprintf>
      if (p->type != PBUF_ROM) {
 800a13a:	7b33      	ldrb	r3, [r6, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d131      	bne.n	800a1a4 <etharp_query+0x10c>
      p = p->next;
 800a140:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800a142:	2e00      	cmp	r6, #0
 800a144:	d1ec      	bne.n	800a120 <etharp_query+0x88>
      pbuf_ref(p);
 800a146:	4638      	mov	r0, r7
 800a148:	f7fc f9f0 	bl	800652c <pbuf_ref>
 800a14c:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 800a14e:	2318      	movs	r3, #24
 800a150:	fb03 f204 	mul.w	r2, r3, r4
 800a154:	461e      	mov	r6, r3
 800a156:	58a8      	ldr	r0, [r5, r2]
 800a158:	b108      	cbz	r0, 800a15e <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 800a15a:	f7fc f82d 	bl	80061b8 <pbuf_free>
      arp_table[i].q = p;
 800a15e:	fb06 f304 	mul.w	r3, r6, r4
      result = ERR_OK;
 800a162:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800a164:	f845 8003 	str.w	r8, [r5, r3]
 800a168:	e7cf      	b.n	800a10a <etharp_query+0x72>
    return ERR_ARG;
 800a16a:	f06f 000f 	mvn.w	r0, #15
 800a16e:	e7cc      	b.n	800a10a <etharp_query+0x72>
 800a170:	4620      	mov	r0, r4
 800a172:	e7ca      	b.n	800a10a <etharp_query+0x72>
  err_t result = ERR_MEM;
 800a174:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a178:	2318      	movs	r3, #24
 800a17a:	fb03 5204 	mla	r2, r3, r4, r5
 800a17e:	7d12      	ldrb	r2, [r2, #20]
 800a180:	2a01      	cmp	r2, #1
 800a182:	d9c5      	bls.n	800a110 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <etharp_query+0x140>)
 800a186:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a188:	220c      	movs	r2, #12
 800a18a:	fb13 2304 	smlabb	r3, r3, r4, r2
 800a18e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a192:	9200      	str	r2, [sp, #0]
 800a194:	442b      	add	r3, r5
 800a196:	f108 0225 	add.w	r2, r8, #37	; 0x25
 800a19a:	4639      	mov	r1, r7
 800a19c:	4640      	mov	r0, r8
 800a19e:	f000 ff15 	bl	800afcc <ethernet_output>
 800a1a2:	e7b2      	b.n	800a10a <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	8931      	ldrh	r1, [r6, #8]
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	f7fc f867 	bl	800627c <pbuf_alloc>
      if (p != NULL) {
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	b138      	cbz	r0, 800a1c2 <etharp_query+0x12a>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7fc fa08 	bl	80065c8 <pbuf_copy>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d0c8      	beq.n	800a14e <etharp_query+0xb6>
          pbuf_free(p);
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f7fb fffb 	bl	80061b8 <pbuf_free>
      result = ERR_MEM;
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	e7a0      	b.n	800a10a <etharp_query+0x72>
 800a1c8:	20000c6c 	.word	0x20000c6c
 800a1cc:	080107c1 	.word	0x080107c1
 800a1d0:	0801077f 	.word	0x0801077f
 800a1d4:	0800f008 	.word	0x0800f008
 800a1d8:	20000d5c 	.word	0x20000d5c
 800a1dc:	080107a7 	.word	0x080107a7

0800a1e0 <etharp_output>:
{
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	b930      	cbnz	r0, 800a1fa <etharp_output+0x1a>
 800a1ec:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <etharp_output+0x104>)
 800a1ee:	493e      	ldr	r1, [pc, #248]	; (800a2e8 <etharp_output+0x108>)
 800a1f0:	483e      	ldr	r0, [pc, #248]	; (800a2ec <etharp_output+0x10c>)
 800a1f2:	f240 321b 	movw	r2, #795	; 0x31b
 800a1f6:	f003 fcb5 	bl	800db64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a1fa:	b936      	cbnz	r6, 800a20a <etharp_output+0x2a>
 800a1fc:	4b39      	ldr	r3, [pc, #228]	; (800a2e4 <etharp_output+0x104>)
 800a1fe:	493c      	ldr	r1, [pc, #240]	; (800a2f0 <etharp_output+0x110>)
 800a200:	483a      	ldr	r0, [pc, #232]	; (800a2ec <etharp_output+0x10c>)
 800a202:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a206:	f003 fcad 	bl	800db64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a20a:	b935      	cbnz	r5, 800a21a <etharp_output+0x3a>
 800a20c:	4b35      	ldr	r3, [pc, #212]	; (800a2e4 <etharp_output+0x104>)
 800a20e:	4939      	ldr	r1, [pc, #228]	; (800a2f4 <etharp_output+0x114>)
 800a210:	4836      	ldr	r0, [pc, #216]	; (800a2ec <etharp_output+0x10c>)
 800a212:	f240 321d 	movw	r2, #797	; 0x31d
 800a216:	f003 fca5 	bl	800db64 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a21a:	4621      	mov	r1, r4
 800a21c:	6828      	ldr	r0, [r5, #0]
 800a21e:	f000 fad4 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800a222:	2800      	cmp	r0, #0
 800a224:	d159      	bne.n	800a2da <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a22c:	2ae0      	cmp	r2, #224	; 0xe0
 800a22e:	d11b      	bne.n	800a268 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a230:	2301      	movs	r3, #1
 800a232:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a236:	235e      	movs	r3, #94	; 0x5e
 800a238:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a23c:	786b      	ldrb	r3, [r5, #1]
 800a23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a242:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a246:	78ab      	ldrb	r3, [r5, #2]
 800a248:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a24c:	78eb      	ldrb	r3, [r5, #3]
 800a24e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800a252:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a258:	9200      	str	r2, [sp, #0]
 800a25a:	4631      	mov	r1, r6
 800a25c:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800a260:	4620      	mov	r0, r4
 800a262:	f000 feb3 	bl	800afcc <ethernet_output>
 800a266:	e01f      	b.n	800a2a8 <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a268:	6862      	ldr	r2, [r4, #4]
 800a26a:	68a1      	ldr	r1, [r4, #8]
 800a26c:	405a      	eors	r2, r3
 800a26e:	420a      	tst	r2, r1
 800a270:	d008      	beq.n	800a284 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 800a272:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a274:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a278:	4293      	cmp	r3, r2
 800a27a:	d003      	beq.n	800a284 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a27c:	68e3      	ldr	r3, [r4, #12]
 800a27e:	b373      	cbz	r3, 800a2de <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 800a280:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a284:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <etharp_output+0x118>)
 800a286:	491d      	ldr	r1, [pc, #116]	; (800a2fc <etharp_output+0x11c>)
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	2018      	movs	r0, #24
 800a28c:	fb00 1002 	mla	r0, r0, r2, r1
 800a290:	7d01      	ldrb	r1, [r0, #20]
 800a292:	2901      	cmp	r1, #1
 800a294:	4619      	mov	r1, r3
 800a296:	d909      	bls.n	800a2ac <etharp_output+0xcc>
 800a298:	682f      	ldr	r7, [r5, #0]
 800a29a:	6843      	ldr	r3, [r0, #4]
 800a29c:	429f      	cmp	r7, r3
 800a29e:	d105      	bne.n	800a2ac <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7ff fea0 	bl	8009fe8 <etharp_output_to_arp_index>
}
 800a2a8:	b005      	add	sp, #20
 800a2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ac:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <etharp_output+0x11c>)
{
 800a2ae:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a2b0:	7d18      	ldrb	r0, [r3, #20]
 800a2b2:	2801      	cmp	r0, #1
 800a2b4:	d906      	bls.n	800a2c4 <etharp_output+0xe4>
 800a2b6:	682f      	ldr	r7, [r5, #0]
 800a2b8:	6858      	ldr	r0, [r3, #4]
 800a2ba:	4287      	cmp	r7, r0
 800a2bc:	d102      	bne.n	800a2c4 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	700a      	strb	r2, [r1, #0]
 800a2c2:	e7ed      	b.n	800a2a0 <etharp_output+0xc0>
 800a2c4:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a2c6:	2a0a      	cmp	r2, #10
 800a2c8:	f103 0318 	add.w	r3, r3, #24
 800a2cc:	d1f0      	bne.n	800a2b0 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff fee0 	bl	800a098 <etharp_query>
 800a2d8:	e7e6      	b.n	800a2a8 <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a2da:	4b09      	ldr	r3, [pc, #36]	; (800a300 <etharp_output+0x120>)
 800a2dc:	e7ba      	b.n	800a254 <etharp_output+0x74>
            return ERR_RTE;
 800a2de:	f06f 0003 	mvn.w	r0, #3
 800a2e2:	e7e1      	b.n	800a2a8 <etharp_output+0xc8>
 800a2e4:	080107c1 	.word	0x080107c1
 800a2e8:	080107f8 	.word	0x080107f8
 800a2ec:	0800f008 	.word	0x0800f008
 800a2f0:	0800fb13 	.word	0x0800fb13
 800a2f4:	0801070c 	.word	0x0801070c
 800a2f8:	20000d5c 	.word	0x20000d5c
 800a2fc:	20000c6c 	.word	0x20000c6c
 800a300:	08010b4d 	.word	0x08010b4d

0800a304 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800a304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a306:	4604      	mov	r4, r0
 800a308:	b087      	sub	sp, #28
 800a30a:	460f      	mov	r7, r1
 800a30c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a30e:	2124      	movs	r1, #36	; 0x24
 800a310:	2200      	movs	r2, #0
 800a312:	2001      	movs	r0, #1
 800a314:	f7fb ffb2 	bl	800627c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a318:	4605      	mov	r5, r0
 800a31a:	b3a0      	cbz	r0, 800a386 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a31c:	8943      	ldrh	r3, [r0, #10]
 800a31e:	2b23      	cmp	r3, #35	; 0x23
 800a320:	d806      	bhi.n	800a330 <icmp_send_response.isra.0+0x2c>
 800a322:	4b1a      	ldr	r3, [pc, #104]	; (800a38c <icmp_send_response.isra.0+0x88>)
 800a324:	491a      	ldr	r1, [pc, #104]	; (800a390 <icmp_send_response.isra.0+0x8c>)
 800a326:	481b      	ldr	r0, [pc, #108]	; (800a394 <icmp_send_response.isra.0+0x90>)
 800a328:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a32c:	f003 fc1a 	bl	800db64 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a330:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a332:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	7123      	strb	r3, [r4, #4]
 800a338:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a33a:	71a3      	strb	r3, [r4, #6]
 800a33c:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800a33e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800a340:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a342:	4613      	mov	r3, r2
 800a344:	f104 0108 	add.w	r1, r4, #8
 800a348:	f102 001c 	add.w	r0, r2, #28
 800a34c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a350:	f841 6b04 	str.w	r6, [r1], #4
 800a354:	4283      	cmp	r3, r0
 800a356:	d1f9      	bne.n	800a34c <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a358:	ae06      	add	r6, sp, #24
 800a35a:	68d3      	ldr	r3, [r2, #12]
 800a35c:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f8bb 	bl	800a4dc <ip4_route>
#endif
  if (netif != NULL) {
 800a366:	b158      	cbz	r0, 800a380 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a368:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a36a:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800a36c:	70a1      	strb	r1, [r4, #2]
 800a36e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a370:	4632      	mov	r2, r6
 800a372:	9002      	str	r0, [sp, #8]
 800a374:	e9cd 1300 	strd	r1, r3, [sp]
 800a378:	4628      	mov	r0, r5
 800a37a:	23ff      	movs	r3, #255	; 0xff
 800a37c:	f000 fa14 	bl	800a7a8 <ip4_output_if>
  }
  pbuf_free(q);
 800a380:	4628      	mov	r0, r5
 800a382:	f7fb ff19 	bl	80061b8 <pbuf_free>
}
 800a386:	b007      	add	sp, #28
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38a:	bf00      	nop
 800a38c:	080108df 	.word	0x080108df
 800a390:	08010914 	.word	0x08010914
 800a394:	0800f008 	.word	0x0800f008

0800a398 <icmp_input>:
{
 800a398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800a39c:	4b44      	ldr	r3, [pc, #272]	; (800a4b0 <icmp_input+0x118>)
 800a39e:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800a3a2:	f899 5000 	ldrb.w	r5, [r9]
 800a3a6:	f005 050f 	and.w	r5, r5, #15
 800a3aa:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800a3ac:	2d13      	cmp	r5, #19
{
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4688      	mov	r8, r1
 800a3b4:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 800a3b6:	d92a      	bls.n	800a40e <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800a3b8:	8942      	ldrh	r2, [r0, #10]
 800a3ba:	2a03      	cmp	r2, #3
 800a3bc:	d927      	bls.n	800a40e <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800a3be:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	2a08      	cmp	r2, #8
 800a3c4:	d123      	bne.n	800a40e <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a3c6:	6958      	ldr	r0, [r3, #20]
 800a3c8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a3cc:	2ae0      	cmp	r2, #224	; 0xe0
 800a3ce:	d01e      	beq.n	800a40e <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a3d0:	6819      	ldr	r1, [r3, #0]
 800a3d2:	f000 f9fa 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	b9c8      	cbnz	r0, 800a40e <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a3da:	8923      	ldrh	r3, [r4, #8]
 800a3dc:	2b07      	cmp	r3, #7
 800a3de:	d916      	bls.n	800a40e <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a3e0:	f105 010e 	add.w	r1, r5, #14
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7fb fee1 	bl	80061ac <pbuf_header>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d04f      	beq.n	800a48e <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a3ee:	8921      	ldrh	r1, [r4, #8]
 800a3f0:	4429      	add	r1, r5
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	b289      	uxth	r1, r1
 800a3f6:	2002      	movs	r0, #2
 800a3f8:	f7fb ff40 	bl	800627c <pbuf_alloc>
      if (r == NULL) {
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	b130      	cbz	r0, 800a40e <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a400:	8942      	ldrh	r2, [r0, #10]
 800a402:	f105 0308 	add.w	r3, r5, #8
 800a406:	429a      	cmp	r2, r3
 800a408:	d207      	bcs.n	800a41a <icmp_input+0x82>
        pbuf_free(r);
 800a40a:	f7fb fed5 	bl	80061b8 <pbuf_free>
  pbuf_free(p);
 800a40e:	4620      	mov	r0, r4
}
 800a410:	b005      	add	sp, #20
 800a412:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800a416:	f7fb becf 	b.w	80061b8 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800a41a:	4649      	mov	r1, r9
 800a41c:	462a      	mov	r2, r5
 800a41e:	6840      	ldr	r0, [r0, #4]
 800a420:	f003 fae5 	bl	800d9ee <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a424:	4269      	negs	r1, r5
 800a426:	4630      	mov	r0, r6
 800a428:	f7fb fec0 	bl	80061ac <pbuf_header>
 800a42c:	b138      	cbz	r0, 800a43e <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a42e:	4b21      	ldr	r3, [pc, #132]	; (800a4b4 <icmp_input+0x11c>)
 800a430:	4921      	ldr	r1, [pc, #132]	; (800a4b8 <icmp_input+0x120>)
 800a432:	4822      	ldr	r0, [pc, #136]	; (800a4bc <icmp_input+0x124>)
 800a434:	22af      	movs	r2, #175	; 0xaf
 800a436:	f003 fb95 	bl	800db64 <iprintf>
        pbuf_free(r);
 800a43a:	4630      	mov	r0, r6
 800a43c:	e7e5      	b.n	800a40a <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800a43e:	4621      	mov	r1, r4
 800a440:	4630      	mov	r0, r6
 800a442:	f7fc f8c1 	bl	80065c8 <pbuf_copy>
 800a446:	2800      	cmp	r0, #0
 800a448:	d1f7      	bne.n	800a43a <icmp_input+0xa2>
      pbuf_free(p);
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7fb feb4 	bl	80061b8 <pbuf_free>
 800a450:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 800a452:	4629      	mov	r1, r5
 800a454:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a456:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a458:	f7fb fea8 	bl	80061ac <pbuf_header>
 800a45c:	4602      	mov	r2, r0
 800a45e:	2800      	cmp	r0, #0
 800a460:	d1d5      	bne.n	800a40e <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a462:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a46c:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a46e:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 800a470:	70b0      	strb	r0, [r6, #2]
 800a472:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a474:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a476:	7288      	strb	r0, [r1, #10]
 800a478:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a47a:	2101      	movs	r1, #1
 800a47c:	e9cd 0100 	strd	r0, r1, [sp]
 800a480:	f8cd 8008 	str.w	r8, [sp, #8]
 800a484:	490e      	ldr	r1, [pc, #56]	; (800a4c0 <icmp_input+0x128>)
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f98e 	bl	800a7a8 <ip4_output_if>
 800a48c:	e7bf      	b.n	800a40e <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a48e:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800a492:	31f2      	adds	r1, #242	; 0xf2
 800a494:	b209      	sxth	r1, r1
 800a496:	4620      	mov	r0, r4
 800a498:	f7fb fe88 	bl	80061ac <pbuf_header>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d0d8      	beq.n	800a452 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <icmp_input+0x11c>)
 800a4a2:	4908      	ldr	r1, [pc, #32]	; (800a4c4 <icmp_input+0x12c>)
 800a4a4:	4805      	ldr	r0, [pc, #20]	; (800a4bc <icmp_input+0x124>)
 800a4a6:	22c0      	movs	r2, #192	; 0xc0
 800a4a8:	f003 fb5c 	bl	800db64 <iprintf>
        goto icmperr;
 800a4ac:	e7af      	b.n	800a40e <icmp_input+0x76>
 800a4ae:	bf00      	nop
 800a4b0:	20001b2c 	.word	0x20001b2c
 800a4b4:	080108df 	.word	0x080108df
 800a4b8:	08010878 	.word	0x08010878
 800a4bc:	0800f008 	.word	0x0800f008
 800a4c0:	20001b40 	.word	0x20001b40
 800a4c4:	080108ad 	.word	0x080108ad

0800a4c8 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 800a4c8:	460a      	mov	r2, r1
 800a4ca:	3004      	adds	r0, #4
 800a4cc:	2103      	movs	r1, #3
 800a4ce:	f7ff bf19 	b.w	800a304 <icmp_send_response.isra.0>

0800a4d2 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	3004      	adds	r0, #4
 800a4d6:	210b      	movs	r1, #11
 800a4d8:	f7ff bf14 	b.w	800a304 <icmp_send_response.isra.0>

0800a4dc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a4dc:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <ip4_route+0x50>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	b96b      	cbnz	r3, 800a500 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a4e4:	4a12      	ldr	r2, [pc, #72]	; (800a530 <ip4_route+0x54>)
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	b1ea      	cbz	r2, 800a526 <ip4_route+0x4a>
 800a4ea:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800a4ee:	f001 0105 	and.w	r1, r1, #5
 800a4f2:	2905      	cmp	r1, #5
 800a4f4:	d117      	bne.n	800a526 <ip4_route+0x4a>
 800a4f6:	6851      	ldr	r1, [r2, #4]
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	bf18      	it	ne
 800a4fc:	4613      	movne	r3, r2
 800a4fe:	e012      	b.n	800a526 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a500:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 800a504:	07cd      	lsls	r5, r1, #31
 800a506:	d5eb      	bpl.n	800a4e0 <ip4_route+0x4>
 800a508:	074c      	lsls	r4, r1, #29
 800a50a:	d5e9      	bpl.n	800a4e0 <ip4_route+0x4>
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	2a00      	cmp	r2, #0
 800a510:	d0e6      	beq.n	800a4e0 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a512:	6804      	ldr	r4, [r0, #0]
 800a514:	689d      	ldr	r5, [r3, #8]
 800a516:	4062      	eors	r2, r4
 800a518:	422a      	tst	r2, r5
 800a51a:	d004      	beq.n	800a526 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a51c:	078a      	lsls	r2, r1, #30
 800a51e:	d4df      	bmi.n	800a4e0 <ip4_route+0x4>
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	4294      	cmp	r4, r2
 800a524:	d1dc      	bne.n	800a4e0 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800a526:	4618      	mov	r0, r3
 800a528:	bd30      	pop	{r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	20005044 	.word	0x20005044
 800a530:	20005048 	.word	0x20005048

0800a534 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a538:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800a53a:	f897 9000 	ldrb.w	r9, [r7]
 800a53e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800a542:	2b04      	cmp	r3, #4
{
 800a544:	4605      	mov	r5, r0
 800a546:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800a548:	d005      	beq.n	800a556 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a54a:	4628      	mov	r0, r5
 800a54c:	f7fb fe34 	bl	80061b8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a550:	2000      	movs	r0, #0
 800a552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a556:	8878      	ldrh	r0, [r7, #2]
 800a558:	f7fb fa14 	bl	8005984 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800a55c:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 800a55e:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 800a562:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 800a564:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a568:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800a56a:	d903      	bls.n	800a574 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 800a56c:	4601      	mov	r1, r0
 800a56e:	4628      	mov	r0, r5
 800a570:	f7fb ff64 	bl	800643c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a574:	896b      	ldrh	r3, [r5, #10]
 800a576:	454b      	cmp	r3, r9
 800a578:	d3e7      	bcc.n	800a54a <ip4_input+0x16>
 800a57a:	892b      	ldrh	r3, [r5, #8]
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d3e4      	bcc.n	800a54a <ip4_input+0x16>
 800a580:	f1b9 0f13 	cmp.w	r9, #19
 800a584:	d9e1      	bls.n	800a54a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4c49      	ldr	r4, [pc, #292]	; (800a6b0 <ip4_input+0x17c>)
 800a58a:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a58c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a594:	2be0      	cmp	r3, #224	; 0xe0
 800a596:	d139      	bne.n	800a60c <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a598:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 800a59c:	07da      	lsls	r2, r3, #31
 800a59e:	d503      	bpl.n	800a5a8 <ip4_input+0x74>
 800a5a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d158      	bne.n	800a65a <ip4_input+0x126>
      netif = NULL;
 800a5a8:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	6920      	ldr	r0, [r4, #16]
 800a5ae:	f000 f90c 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d1c9      	bne.n	800a54a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a5bc:	2be0      	cmp	r3, #224	; 0xe0
 800a5be:	d0c4      	beq.n	800a54a <ip4_input+0x16>
  if (netif == NULL) {
 800a5c0:	2e00      	cmp	r6, #0
 800a5c2:	d0c2      	beq.n	800a54a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5ca:	b133      	cbz	r3, 800a5da <ip4_input+0xa6>
    p = ip4_reass(p);
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f000 fa2d 	bl	800aa2c <ip4_reass>
    if (p == NULL) {
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d0bb      	beq.n	800a550 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800a5d8:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800a5da:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 800a5dc:	e9c4 6800 	strd	r6, r8, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a5e0:	783b      	ldrb	r3, [r7, #0]
 800a5e2:	f003 030f 	and.w	r3, r3, #15
 800a5e6:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a5e8:	f1c9 0100 	rsb	r1, r9, #0
 800a5ec:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a5ee:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a5f0:	f7fb fddc 	bl	80061ac <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800a5f4:	7a7b      	ldrb	r3, [r7, #9]
 800a5f6:	2b06      	cmp	r3, #6
 800a5f8:	d03d      	beq.n	800a676 <ip4_input+0x142>
 800a5fa:	2b11      	cmp	r3, #17
 800a5fc:	d02f      	beq.n	800a65e <ip4_input+0x12a>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d13e      	bne.n	800a680 <ip4_input+0x14c>
      icmp_input(p, inp);
 800a602:	4641      	mov	r1, r8
 800a604:	4628      	mov	r0, r5
 800a606:	f7ff fec7 	bl	800a398 <icmp_input>
      break;
 800a60a:	e02c      	b.n	800a666 <ip4_input+0x132>
        netif = netif_list;
 800a60c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800a6b4 <ip4_input+0x180>
 800a610:	4646      	mov	r6, r8
    int first = 1;
 800a612:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a616:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800a61a:	07db      	lsls	r3, r3, #31
 800a61c:	d404      	bmi.n	800a628 <ip4_input+0xf4>
      if (first) {
 800a61e:	f1ba 0f00 	cmp.w	sl, #0
 800a622:	d10d      	bne.n	800a640 <ip4_input+0x10c>
        netif = netif->next;
 800a624:	6836      	ldr	r6, [r6, #0]
 800a626:	e010      	b.n	800a64a <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a628:	6873      	ldr	r3, [r6, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0f7      	beq.n	800a61e <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a62e:	6960      	ldr	r0, [r4, #20]
 800a630:	4283      	cmp	r3, r0
 800a632:	d0ba      	beq.n	800a5aa <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a634:	4631      	mov	r1, r6
 800a636:	f000 f8c8 	bl	800a7ca <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d0ef      	beq.n	800a61e <ip4_input+0xea>
 800a63e:	e7b4      	b.n	800a5aa <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a640:	7d23      	ldrb	r3, [r4, #20]
 800a642:	2b7f      	cmp	r3, #127	; 0x7f
 800a644:	d0b0      	beq.n	800a5a8 <ip4_input+0x74>
        netif = netif_list;
 800a646:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800a64a:	4546      	cmp	r6, r8
        netif = netif->next;
 800a64c:	bf08      	it	eq
 800a64e:	6836      	ldreq	r6, [r6, #0]
 800a650:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 800a654:	2e00      	cmp	r6, #0
 800a656:	d1de      	bne.n	800a616 <ip4_input+0xe2>
 800a658:	e7a6      	b.n	800a5a8 <ip4_input+0x74>
 800a65a:	4646      	mov	r6, r8
 800a65c:	e7a5      	b.n	800a5aa <ip4_input+0x76>
      udp_input(p, inp);
 800a65e:	4641      	mov	r1, r8
 800a660:	4628      	mov	r0, r5
 800a662:	f7ff fa13 	bl	8009a8c <udp_input>
  ip_data.current_netif = NULL;
 800a666:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800a668:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 800a66c:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a66e:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a670:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 800a674:	e76c      	b.n	800a550 <ip4_input+0x1c>
      tcp_input(p, inp);
 800a676:	4641      	mov	r1, r8
 800a678:	4628      	mov	r0, r5
 800a67a:	f7fd fcf7 	bl	800806c <tcp_input>
      break;
 800a67e:	e7f2      	b.n	800a666 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a680:	4631      	mov	r1, r6
 800a682:	6960      	ldr	r0, [r4, #20]
 800a684:	f000 f8a1 	bl	800a7ca <ip4_addr_isbroadcast_u32>
 800a688:	b968      	cbnz	r0, 800a6a6 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a68a:	6963      	ldr	r3, [r4, #20]
 800a68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a690:	2be0      	cmp	r3, #224	; 0xe0
 800a692:	d008      	beq.n	800a6a6 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a694:	4649      	mov	r1, r9
 800a696:	4628      	mov	r0, r5
 800a698:	f7fb fd8b 	bl	80061b2 <pbuf_header_force>
        p->payload = iphdr;
 800a69c:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a69e:	2102      	movs	r1, #2
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f7ff ff11 	bl	800a4c8 <icmp_dest_unreach>
      pbuf_free(p);
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7fb fd86 	bl	80061b8 <pbuf_free>
 800a6ac:	e7db      	b.n	800a666 <ip4_input+0x132>
 800a6ae:	bf00      	nop
 800a6b0:	20001b2c 	.word	0x20001b2c
 800a6b4:	20005044 	.word	0x20005044

0800a6b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a6b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a6be:	89c3      	ldrh	r3, [r0, #14]
{
 800a6c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a6c4:	2b01      	cmp	r3, #1
{
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	468a      	mov	sl, r1
 800a6ca:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a6cc:	d006      	beq.n	800a6dc <ip4_output_if_src+0x24>
 800a6ce:	4b30      	ldr	r3, [pc, #192]	; (800a790 <ip4_output_if_src+0xd8>)
 800a6d0:	4930      	ldr	r1, [pc, #192]	; (800a794 <ip4_output_if_src+0xdc>)
 800a6d2:	4831      	ldr	r0, [pc, #196]	; (800a798 <ip4_output_if_src+0xe0>)
 800a6d4:	f240 3233 	movw	r2, #819	; 0x333
 800a6d8:	f003 fa44 	bl	800db64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a6dc:	2e00      	cmp	r6, #0
 800a6de:	d047      	beq.n	800a770 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a6e0:	2114      	movs	r1, #20
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7fb fd62 	bl	80061ac <pbuf_header>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d14e      	bne.n	800a78a <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a6ec:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800a6ee:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a6f0:	2b13      	cmp	r3, #19
 800a6f2:	d806      	bhi.n	800a702 <ip4_output_if_src+0x4a>
 800a6f4:	4b26      	ldr	r3, [pc, #152]	; (800a790 <ip4_output_if_src+0xd8>)
 800a6f6:	4929      	ldr	r1, [pc, #164]	; (800a79c <ip4_output_if_src+0xe4>)
 800a6f8:	4827      	ldr	r0, [pc, #156]	; (800a798 <ip4_output_if_src+0xe0>)
 800a6fa:	f240 3261 	movw	r2, #865	; 0x361
 800a6fe:	f003 fa31 	bl	800db64 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800a702:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800a706:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a708:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a70a:	6833      	ldr	r3, [r6, #0]
 800a70c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a70e:	2345      	movs	r3, #69	; 0x45
 800a710:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800a712:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a716:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a718:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a71a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a7a4 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a71e:	f7fb f931 	bl	8005984 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800a722:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a724:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800a726:	71a7      	strb	r7, [r4, #6]
 800a728:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a72a:	f8b9 0000 	ldrh.w	r0, [r9]
 800a72e:	f7fb f929 	bl	8005984 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a732:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a736:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800a738:	3301      	adds	r3, #1
 800a73a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d112      	bne.n	800a76a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a744:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <ip4_output_if_src+0xe8>)
 800a746:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a748:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a74a:	72a7      	strb	r7, [r4, #10]
 800a74c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a74e:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 800a752:	b19b      	cbz	r3, 800a77c <ip4_output_if_src+0xc4>
 800a754:	892a      	ldrh	r2, [r5, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d910      	bls.n	800a77c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800a75a:	4632      	mov	r2, r6
 800a75c:	4641      	mov	r1, r8
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 fb0e 	bl	800ad80 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800a764:	b002      	add	sp, #8
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800a76a:	f8da 3000 	ldr.w	r3, [sl]
 800a76e:	e7eb      	b.n	800a748 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a770:	686b      	ldr	r3, [r5, #4]
 800a772:	ae02      	add	r6, sp, #8
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f846 3d04 	str.w	r3, [r6, #-4]!
 800a77a:	e7e8      	b.n	800a74e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800a77c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a780:	4632      	mov	r2, r6
 800a782:	4629      	mov	r1, r5
 800a784:	4640      	mov	r0, r8
 800a786:	4798      	blx	r3
 800a788:	e7ec      	b.n	800a764 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800a78a:	f06f 0001 	mvn.w	r0, #1
 800a78e:	e7e9      	b.n	800a764 <ip4_output_if_src+0xac>
 800a790:	08010940 	.word	0x08010940
 800a794:	08010974 	.word	0x08010974
 800a798:	0800f008 	.word	0x0800f008
 800a79c:	08010980 	.word	0x08010980
 800a7a0:	080109b0 	.word	0x080109b0
 800a7a4:	20000d5e 	.word	0x20000d5e

0800a7a8 <ip4_output_if>:
{
 800a7a8:	b4f0      	push	{r4, r5, r6, r7}
 800a7aa:	9c06      	ldr	r4, [sp, #24]
 800a7ac:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a7b0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a7b4:	b11a      	cbz	r2, 800a7be <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800a7b6:	b109      	cbz	r1, 800a7bc <ip4_output_if+0x14>
 800a7b8:	680f      	ldr	r7, [r1, #0]
 800a7ba:	b907      	cbnz	r7, 800a7be <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800a7bc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a7be:	e9cd 6405 	strd	r6, r4, [sp, #20]
 800a7c2:	9504      	str	r5, [sp, #16]
}
 800a7c4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a7c6:	f7ff bf77 	b.w	800a6b8 <ip4_output_if_src>

0800a7ca <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a7ca:	1e43      	subs	r3, r0, #1
 800a7cc:	3303      	adds	r3, #3
 800a7ce:	d811      	bhi.n	800a7f4 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a7d0:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 800a7d4:	f013 0302 	ands.w	r3, r3, #2
 800a7d8:	d00e      	beq.n	800a7f8 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a7da:	684a      	ldr	r2, [r1, #4]
 800a7dc:	4282      	cmp	r2, r0
 800a7de:	d00b      	beq.n	800a7f8 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a7e0:	688b      	ldr	r3, [r1, #8]
 800a7e2:	4042      	eors	r2, r0
 800a7e4:	421a      	tst	r2, r3
 800a7e6:	d107      	bne.n	800a7f8 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	4383      	bics	r3, r0
    return 1;
 800a7ec:	bf0c      	ite	eq
 800a7ee:	2001      	moveq	r0, #1
 800a7f0:	2000      	movne	r0, #0
 800a7f2:	4770      	bx	lr
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800a7f8:	2000      	movs	r0, #0
  }
}
 800a7fa:	4770      	bx	lr

0800a7fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a7fc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a7fe:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <ip_reass_dequeue_datagram+0x34>)
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4282      	cmp	r2, r0
{
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800a808:	d107      	bne.n	800a81a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a80a:	6802      	ldr	r2, [r0, #0]
 800a80c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a80e:	4621      	mov	r1, r4
 800a810:	2004      	movs	r0, #4
}
 800a812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800a816:	f7fb bb6b 	b.w	8005ef0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a81a:	b931      	cbnz	r1, 800a82a <ip_reass_dequeue_datagram+0x2e>
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <ip_reass_dequeue_datagram+0x38>)
 800a81e:	4906      	ldr	r1, [pc, #24]	; (800a838 <ip_reass_dequeue_datagram+0x3c>)
 800a820:	4806      	ldr	r0, [pc, #24]	; (800a83c <ip_reass_dequeue_datagram+0x40>)
 800a822:	f240 1245 	movw	r2, #325	; 0x145
 800a826:	f003 f99d 	bl	800db64 <iprintf>
    prev->next = ipr->next;
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	e7ee      	b.n	800a80e <ip_reass_dequeue_datagram+0x12>
 800a830:	20000d64 	.word	0x20000d64
 800a834:	08010a99 	.word	0x08010a99
 800a838:	08010ad2 	.word	0x08010ad2
 800a83c:	0800f008 	.word	0x0800f008

0800a840 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a840:	4281      	cmp	r1, r0
{
 800a842:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a846:	4605      	mov	r5, r0
 800a848:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a84a:	d105      	bne.n	800a858 <ip_reass_free_complete_datagram+0x18>
 800a84c:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <ip_reass_free_complete_datagram+0xcc>)
 800a84e:	4930      	ldr	r1, [pc, #192]	; (800a910 <ip_reass_free_complete_datagram+0xd0>)
 800a850:	4830      	ldr	r0, [pc, #192]	; (800a914 <ip_reass_free_complete_datagram+0xd4>)
 800a852:	22ab      	movs	r2, #171	; 0xab
 800a854:	f003 f986 	bl	800db64 <iprintf>
  if (prev != NULL) {
 800a858:	b147      	cbz	r7, 800a86c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	42ab      	cmp	r3, r5
 800a85e:	d005      	beq.n	800a86c <ip_reass_free_complete_datagram+0x2c>
 800a860:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <ip_reass_free_complete_datagram+0xcc>)
 800a862:	492d      	ldr	r1, [pc, #180]	; (800a918 <ip_reass_free_complete_datagram+0xd8>)
 800a864:	482b      	ldr	r0, [pc, #172]	; (800a914 <ip_reass_free_complete_datagram+0xd4>)
 800a866:	22ad      	movs	r2, #173	; 0xad
 800a868:	f003 f97c 	bl	800db64 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a86c:	686e      	ldr	r6, [r5, #4]
 800a86e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800a870:	889a      	ldrh	r2, [r3, #4]
 800a872:	bb92      	cbnz	r2, 800a8da <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a878:	f105 011c 	add.w	r1, r5, #28
 800a87c:	f105 0208 	add.w	r2, r5, #8
 800a880:	f852 0b04 	ldr.w	r0, [r2], #4
 800a884:	f843 0b04 	str.w	r0, [r3], #4
 800a888:	428a      	cmp	r2, r1
 800a88a:	d1f9      	bne.n	800a880 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a88c:	2101      	movs	r1, #1
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff fe1f 	bl	800a4d2 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a894:	4630      	mov	r0, r6
 800a896:	f7fb fe41 	bl	800651c <pbuf_clen>
 800a89a:	4604      	mov	r4, r0
    pbuf_free(p);
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7fb fc8b 	bl	80061b8 <pbuf_free>
  p = ipr->p;
 800a8a2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a8a4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800a90c <ip_reass_free_complete_datagram+0xcc>
 800a8a8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a924 <ip_reass_free_complete_datagram+0xe4>
 800a8ac:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a914 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800a8b0:	b9ae      	cbnz	r6, 800a8de <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800a8b2:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800a8b4:	4d19      	ldr	r5, [pc, #100]	; (800a91c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7ff ffa0 	bl	800a7fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800a8bc:	882b      	ldrh	r3, [r5, #0]
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	d205      	bcs.n	800a8ce <ip_reass_free_complete_datagram+0x8e>
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <ip_reass_free_complete_datagram+0xcc>)
 800a8c4:	4916      	ldr	r1, [pc, #88]	; (800a920 <ip_reass_free_complete_datagram+0xe0>)
 800a8c6:	4813      	ldr	r0, [pc, #76]	; (800a914 <ip_reass_free_complete_datagram+0xd4>)
 800a8c8:	22d2      	movs	r2, #210	; 0xd2
 800a8ca:	f003 f94b 	bl	800db64 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800a8ce:	882b      	ldrh	r3, [r5, #0]
 800a8d0:	1b1b      	subs	r3, r3, r4
 800a8d2:	802b      	strh	r3, [r5, #0]
}
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800a8da:	2400      	movs	r4, #0
 800a8dc:	e7e1      	b.n	800a8a2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800a8de:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800a8e0:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800a8e2:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800a8e6:	f7fb fe19 	bl	800651c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a8ea:	4404      	add	r4, r0
 800a8ec:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800a8f0:	db05      	blt.n	800a8fe <ip_reass_free_complete_datagram+0xbe>
 800a8f2:	4643      	mov	r3, r8
 800a8f4:	22cc      	movs	r2, #204	; 0xcc
 800a8f6:	4649      	mov	r1, r9
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	f003 f933 	bl	800db64 <iprintf>
    pbuf_free(pcur);
 800a8fe:	4630      	mov	r0, r6
    pbufs_freed += clen;
 800a900:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800a902:	f7fb fc59 	bl	80061b8 <pbuf_free>
    p = iprh->next_pbuf;
 800a906:	465e      	mov	r6, fp
 800a908:	e7d2      	b.n	800a8b0 <ip_reass_free_complete_datagram+0x70>
 800a90a:	bf00      	nop
 800a90c:	08010a99 	.word	0x08010a99
 800a910:	08010aeb 	.word	0x08010aeb
 800a914:	0800f008 	.word	0x0800f008
 800a918:	08010af7 	.word	0x08010af7
 800a91c:	20000d60 	.word	0x20000d60
 800a920:	08010b26 	.word	0x08010b26
 800a924:	08010b09 	.word	0x08010b09

0800a928 <ip_reass_remove_oldest_datagram>:
{
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800a92c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800a99c <ip_reass_remove_oldest_datagram+0x74>
{
 800a930:	4606      	mov	r6, r0
 800a932:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800a934:	2500      	movs	r5, #0
    other_datagrams = 0;
 800a936:	2400      	movs	r4, #0
    r = reassdatagrams;
 800a938:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800a93c:	4621      	mov	r1, r4
    prev = NULL;
 800a93e:	46a4      	mov	ip, r4
    oldest = NULL;
 800a940:	4620      	mov	r0, r4
    while (r != NULL) {
 800a942:	b953      	cbnz	r3, 800a95a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800a944:	b110      	cbz	r0, 800a94c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a946:	f7ff ff7b 	bl	800a840 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800a94a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a94c:	42bd      	cmp	r5, r7
 800a94e:	da01      	bge.n	800a954 <ip_reass_remove_oldest_datagram+0x2c>
 800a950:	2c01      	cmp	r4, #1
 800a952:	dcf0      	bgt.n	800a936 <ip_reass_remove_oldest_datagram+0xe>
}
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a95a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800a95e:	695a      	ldr	r2, [r3, #20]
 800a960:	4572      	cmp	r2, lr
 800a962:	d109      	bne.n	800a978 <ip_reass_remove_oldest_datagram+0x50>
 800a964:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	4572      	cmp	r2, lr
 800a96c:	d104      	bne.n	800a978 <ip_reass_remove_oldest_datagram+0x50>
 800a96e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800a972:	88b2      	ldrh	r2, [r6, #4]
 800a974:	4596      	cmp	lr, r2
 800a976:	d008      	beq.n	800a98a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800a978:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800a97a:	b160      	cbz	r0, 800a996 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800a97c:	7fc2      	ldrb	r2, [r0, #31]
 800a97e:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800a982:	4596      	cmp	lr, r2
 800a984:	bf9c      	itt	ls
 800a986:	4661      	movls	r1, ip
 800a988:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	bf18      	it	ne
 800a990:	469c      	movne	ip, r3
 800a992:	4613      	mov	r3, r2
 800a994:	e7d5      	b.n	800a942 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800a996:	4661      	mov	r1, ip
 800a998:	4618      	mov	r0, r3
 800a99a:	e7f6      	b.n	800a98a <ip_reass_remove_oldest_datagram+0x62>
 800a99c:	20000d64 	.word	0x20000d64

0800a9a0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800a9a0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	b930      	cbnz	r0, 800a9b4 <ip_frag_free_pbuf_custom_ref+0x14>
 800a9a6:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <ip_frag_free_pbuf_custom_ref+0x20>)
 800a9a8:	4906      	ldr	r1, [pc, #24]	; (800a9c4 <ip_frag_free_pbuf_custom_ref+0x24>)
 800a9aa:	4807      	ldr	r0, [pc, #28]	; (800a9c8 <ip_frag_free_pbuf_custom_ref+0x28>)
 800a9ac:	f240 22ae 	movw	r2, #686	; 0x2ae
 800a9b0:	f003 f8d8 	bl	800db64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	2005      	movs	r0, #5
}
 800a9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800a9bc:	f7fb ba98 	b.w	8005ef0 <memp_free>
 800a9c0:	08010a99 	.word	0x08010a99
 800a9c4:	0800facf 	.word	0x0800facf
 800a9c8:	0800f008 	.word	0x0800f008

0800a9cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a9cc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	b930      	cbnz	r0, 800a9e0 <ipfrag_free_pbuf_custom+0x14>
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <ipfrag_free_pbuf_custom+0x28>)
 800a9d4:	4908      	ldr	r1, [pc, #32]	; (800a9f8 <ipfrag_free_pbuf_custom+0x2c>)
 800a9d6:	4809      	ldr	r0, [pc, #36]	; (800a9fc <ipfrag_free_pbuf_custom+0x30>)
 800a9d8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800a9dc:	f003 f8c2 	bl	800db64 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800a9e0:	6960      	ldr	r0, [r4, #20]
 800a9e2:	b108      	cbz	r0, 800a9e8 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800a9e4:	f7fb fbe8 	bl	80061b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a9e8:	4620      	mov	r0, r4
}
 800a9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800a9ee:	f7ff bfd7 	b.w	800a9a0 <ip_frag_free_pbuf_custom_ref>
 800a9f2:	bf00      	nop
 800a9f4:	08010a99 	.word	0x08010a99
 800a9f8:	08010b41 	.word	0x08010b41
 800a9fc:	0800f008 	.word	0x0800f008

0800aa00 <ip_reass_tmr>:
{
 800aa00:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800aa02:	4b09      	ldr	r3, [pc, #36]	; (800aa28 <ip_reass_tmr+0x28>)
 800aa04:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800aa06:	2400      	movs	r4, #0
  while (r != NULL) {
 800aa08:	b900      	cbnz	r0, 800aa0c <ip_reass_tmr+0xc>
}
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800aa0c:	7fc3      	ldrb	r3, [r0, #31]
 800aa0e:	6805      	ldr	r5, [r0, #0]
 800aa10:	b123      	cbz	r3, 800aa1c <ip_reass_tmr+0x1c>
      r->timer--;
 800aa12:	3b01      	subs	r3, #1
 800aa14:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800aa16:	4604      	mov	r4, r0
 800aa18:	4628      	mov	r0, r5
 800aa1a:	e7f5      	b.n	800aa08 <ip_reass_tmr+0x8>
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f7ff ff0f 	bl	800a840 <ip_reass_free_complete_datagram>
 800aa22:	4620      	mov	r0, r4
 800aa24:	e7f7      	b.n	800aa16 <ip_reass_tmr+0x16>
 800aa26:	bf00      	nop
 800aa28:	20000d64 	.word	0x20000d64

0800aa2c <ip4_reass>:
{
 800aa2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800aa30:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800aa32:	782b      	ldrb	r3, [r5, #0]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	2b05      	cmp	r3, #5
{
 800aa3a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800aa3c:	f040 808c 	bne.w	800ab58 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800aa40:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800aa42:	4cb5      	ldr	r4, [pc, #724]	; (800ad18 <ip4_reass+0x2ec>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800aa44:	f7fa ff9e 	bl	8005984 <lwip_htons>
 800aa48:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800aa4c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800aa50:	8868      	ldrh	r0, [r5, #2]
 800aa52:	f7fa ff97 	bl	8005984 <lwip_htons>
 800aa56:	782b      	ldrb	r3, [r5, #0]
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800aa60:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800aa62:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800aa64:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800aa66:	f7fb fd59 	bl	800651c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800aa6a:	8823      	ldrh	r3, [r4, #0]
 800aa6c:	4403      	add	r3, r0
 800aa6e:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800aa70:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800aa72:	dc68      	bgt.n	800ab46 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800aa74:	4ea9      	ldr	r6, [pc, #676]	; (800ad1c <ip4_reass+0x2f0>)
 800aa76:	6834      	ldr	r4, [r6, #0]
 800aa78:	2c00      	cmp	r4, #0
 800aa7a:	d172      	bne.n	800ab62 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800aa7c:	2004      	movs	r0, #4
 800aa7e:	f7fb fa1b 	bl	8005eb8 <memp_malloc>
  if (ipr == NULL) {
 800aa82:	4604      	mov	r4, r0
 800aa84:	b958      	cbnz	r0, 800aa9e <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800aa86:	4651      	mov	r1, sl
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f7ff ff4d 	bl	800a928 <ip_reass_remove_oldest_datagram>
 800aa8e:	4582      	cmp	sl, r0
 800aa90:	dc62      	bgt.n	800ab58 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800aa92:	2004      	movs	r0, #4
 800aa94:	f7fb fa10 	bl	8005eb8 <memp_malloc>
    if (ipr == NULL)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d05c      	beq.n	800ab58 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800aa9e:	221c      	movs	r2, #28
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	1d20      	adds	r0, r4, #4
 800aaa4:	f002 ffae 	bl	800da04 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800aaac:	6833      	ldr	r3, [r6, #0]
 800aaae:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 800aab0:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800aab2:	462b      	mov	r3, r5
 800aab4:	f104 0208 	add.w	r2, r4, #8
 800aab8:	f105 0114 	add.w	r1, r5, #20
 800aabc:	f853 0b04 	ldr.w	r0, [r3], #4
 800aac0:	f842 0b04 	str.w	r0, [r2], #4
 800aac4:	428b      	cmp	r3, r1
 800aac6:	d1f9      	bne.n	800aabc <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800aac8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800aacc:	f01b 0b20 	ands.w	fp, fp, #32
 800aad0:	d108      	bne.n	800aae4 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	444b      	add	r3, r9
 800aad6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800aad8:	4599      	cmp	r9, r3
 800aada:	d83d      	bhi.n	800ab58 <ip4_reass+0x12c>
 800aadc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d839      	bhi.n	800ab58 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800aae4:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800aae6:	8868      	ldrh	r0, [r5, #2]
 800aae8:	f7fa ff4c 	bl	8005984 <lwip_htons>
 800aaec:	f895 8000 	ldrb.w	r8, [r5]
 800aaf0:	f008 080f 	and.w	r8, r8, #15
 800aaf4:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800aaf8:	88e8      	ldrh	r0, [r5, #6]
 800aafa:	f7fa ff43 	bl	8005984 <lwip_htons>
 800aafe:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ab02:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ab06:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ab08:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 800ab0a:	f8d4 c004 	ldr.w	ip, [r4, #4]
  iprh->start = offset;
 800ab0e:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800ab10:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 800ab14:	2500      	movs	r5, #0
  iprh->end = offset + len;
 800ab16:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800ab18:	7035      	strb	r5, [r6, #0]
 800ab1a:	7075      	strb	r5, [r6, #1]
 800ab1c:	70b5      	strb	r5, [r6, #2]
 800ab1e:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 800ab20:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800ab22:	4662      	mov	r2, ip
  int valid = 1;
 800ab24:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 800ab28:	bb52      	cbnz	r2, 800ab80 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	f040 8092 	bne.w	800ac54 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ab30:	f1bc 0f00 	cmp.w	ip, #0
 800ab34:	d07d      	beq.n	800ac32 <ip4_reass+0x206>
 800ab36:	4b7a      	ldr	r3, [pc, #488]	; (800ad20 <ip4_reass+0x2f4>)
 800ab38:	497a      	ldr	r1, [pc, #488]	; (800ad24 <ip4_reass+0x2f8>)
 800ab3a:	487b      	ldr	r0, [pc, #492]	; (800ad28 <ip4_reass+0x2fc>)
 800ab3c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800ab40:	f003 f810 	bl	800db64 <iprintf>
 800ab44:	e075      	b.n	800ac32 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ab46:	4601      	mov	r1, r0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f7ff feed 	bl	800a928 <ip_reass_remove_oldest_datagram>
 800ab4e:	b118      	cbz	r0, 800ab58 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ab50:	8823      	ldrh	r3, [r4, #0]
 800ab52:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ab54:	2b0a      	cmp	r3, #10
 800ab56:	dd8d      	ble.n	800aa74 <ip4_reass+0x48>
  pbuf_free(p);
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7fb fb2d 	bl	80061b8 <pbuf_free>
  return NULL;
 800ab5e:	2500      	movs	r5, #0
 800ab60:	e0d6      	b.n	800ad10 <ip4_reass+0x2e4>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ab62:	68eb      	ldr	r3, [r5, #12]
 800ab64:	6962      	ldr	r2, [r4, #20]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d108      	bne.n	800ab7c <ip4_reass+0x150>
 800ab6a:	692b      	ldr	r3, [r5, #16]
 800ab6c:	69a2      	ldr	r2, [r4, #24]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d104      	bne.n	800ab7c <ip4_reass+0x150>
 800ab72:	89a2      	ldrh	r2, [r4, #12]
 800ab74:	88ab      	ldrh	r3, [r5, #4]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	f000 80de 	beq.w	800ad38 <ip4_reass+0x30c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ab7c:	6824      	ldr	r4, [r4, #0]
 800ab7e:	e77b      	b.n	800aa78 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ab80:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800ab84:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800ab88:	4288      	cmp	r0, r1
 800ab8a:	d254      	bcs.n	800ac36 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800ab8c:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	d04d      	beq.n	800ac2e <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ab92:	88ea      	ldrh	r2, [r5, #6]
 800ab94:	4290      	cmp	r0, r2
 800ab96:	f0c0 8091 	bcc.w	800acbc <ip4_reass+0x290>
 800ab9a:	428b      	cmp	r3, r1
 800ab9c:	f200 808e 	bhi.w	800acbc <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 800aba0:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 800aba2:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 800aba4:	f040 80e4 	bne.w	800ad70 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800aba8:	f1bb 0f00 	cmp.w	fp, #0
 800abac:	d004      	beq.n	800abb8 <ip4_reass+0x18c>
 800abae:	7fa3      	ldrb	r3, [r4, #30]
 800abb0:	f013 0301 	ands.w	r3, r3, #1
 800abb4:	f000 808d 	beq.w	800acd2 <ip4_reass+0x2a6>
    if (valid) {
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	d159      	bne.n	800ac72 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800abbe:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800abc2:	4e55      	ldr	r6, [pc, #340]	; (800ad18 <ip4_reass+0x2ec>)
 800abc4:	8833      	ldrh	r3, [r6, #0]
 800abc6:	449a      	add	sl, r3
 800abc8:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 800abcc:	f1bb 0f00 	cmp.w	fp, #0
 800abd0:	d107      	bne.n	800abe2 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800abd2:	9b01      	ldr	r3, [sp, #4]
 800abd4:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800abd6:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800abd8:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800abdc:	f043 0301 	orr.w	r3, r3, #1
 800abe0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800abe2:	f1b8 0f01 	cmp.w	r8, #1
 800abe6:	d1ba      	bne.n	800ab5e <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800abe8:	8ba3      	ldrh	r3, [r4, #28]
 800abea:	3314      	adds	r3, #20
 800abec:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800abee:	6863      	ldr	r3, [r4, #4]
 800abf0:	685d      	ldr	r5, [r3, #4]
 800abf2:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800abf4:	f104 0308 	add.w	r3, r4, #8
 800abf8:	462a      	mov	r2, r5
 800abfa:	f104 011c 	add.w	r1, r4, #28
 800abfe:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac02:	f842 0b04 	str.w	r0, [r2], #4
 800ac06:	428b      	cmp	r3, r1
 800ac08:	d1f9      	bne.n	800abfe <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800ac0a:	8ba0      	ldrh	r0, [r4, #28]
 800ac0c:	f7fa feba 	bl	8005984 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800ac10:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800ac12:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ac14:	71ab      	strb	r3, [r5, #6]
 800ac16:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ac18:	72ab      	strb	r3, [r5, #10]
 800ac1a:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800ac1c:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d159      	bne.n	800acd6 <ip4_reass+0x2aa>
    if (ipr == reassdatagrams) {
 800ac22:	4b3e      	ldr	r3, [pc, #248]	; (800ad1c <ip4_reass+0x2f0>)
 800ac24:	6819      	ldr	r1, [r3, #0]
 800ac26:	42a1      	cmp	r1, r4
 800ac28:	d167      	bne.n	800acfa <ip4_reass+0x2ce>
      ipr_prev = NULL;
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	e067      	b.n	800acfe <ip4_reass+0x2d2>
        if (iprh->end > iprh_tmp->start) {
 800ac2e:	428b      	cmp	r3, r1
 800ac30:	d844      	bhi.n	800acbc <ip4_reass+0x290>
      ipr->p = new_p;
 800ac32:	6067      	str	r7, [r4, #4]
 800ac34:	e7b8      	b.n	800aba8 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800ac36:	d041      	beq.n	800acbc <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800ac38:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800ac3c:	4282      	cmp	r2, r0
 800ac3e:	d83d      	bhi.n	800acbc <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800ac40:	b125      	cbz	r5, 800ac4c <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800ac42:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800ac44:	428a      	cmp	r2, r1
 800ac46:	bf18      	it	ne
 800ac48:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800ac4c:	f8de 2000 	ldr.w	r2, [lr]
 800ac50:	4675      	mov	r5, lr
 800ac52:	e769      	b.n	800ab28 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ac54:	88eb      	ldrh	r3, [r5, #6]
 800ac56:	4283      	cmp	r3, r0
 800ac58:	d906      	bls.n	800ac68 <ip4_reass+0x23c>
 800ac5a:	4b31      	ldr	r3, [pc, #196]	; (800ad20 <ip4_reass+0x2f4>)
 800ac5c:	4933      	ldr	r1, [pc, #204]	; (800ad2c <ip4_reass+0x300>)
 800ac5e:	4832      	ldr	r0, [pc, #200]	; (800ad28 <ip4_reass+0x2fc>)
 800ac60:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ac64:	f002 ff7e 	bl	800db64 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800ac68:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800ac6a:	88ea      	ldrh	r2, [r5, #6]
 800ac6c:	88b3      	ldrh	r3, [r6, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	e798      	b.n	800aba4 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800ac72:	6863      	ldr	r3, [r4, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d0a2      	beq.n	800abbe <ip4_reass+0x192>
 800ac78:	6859      	ldr	r1, [r3, #4]
 800ac7a:	888b      	ldrh	r3, [r1, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d19e      	bne.n	800abbe <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800ac80:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800ac82:	b99b      	cbnz	r3, 800acac <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 800ac84:	42b1      	cmp	r1, r6
 800ac86:	d106      	bne.n	800ac96 <ip4_reass+0x26a>
 800ac88:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <ip4_reass+0x2f4>)
 800ac8a:	4929      	ldr	r1, [pc, #164]	; (800ad30 <ip4_reass+0x304>)
 800ac8c:	4826      	ldr	r0, [pc, #152]	; (800ad28 <ip4_reass+0x2fc>)
 800ac8e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ac92:	f002 ff67 	bl	800db64 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ac96:	6833      	ldr	r3, [r6, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d092      	beq.n	800abc2 <ip4_reass+0x196>
 800ac9c:	4b20      	ldr	r3, [pc, #128]	; (800ad20 <ip4_reass+0x2f4>)
 800ac9e:	4925      	ldr	r1, [pc, #148]	; (800ad34 <ip4_reass+0x308>)
 800aca0:	4821      	ldr	r0, [pc, #132]	; (800ad28 <ip4_reass+0x2fc>)
 800aca2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800aca6:	f002 ff5d 	bl	800db64 <iprintf>
 800acaa:	e78a      	b.n	800abc2 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800acac:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800acae:	88f0      	ldrh	r0, [r6, #6]
 800acb0:	8893      	ldrh	r3, [r2, #4]
 800acb2:	4298      	cmp	r0, r3
 800acb4:	d183      	bne.n	800abbe <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800acb6:	6813      	ldr	r3, [r2, #0]
 800acb8:	4616      	mov	r6, r2
 800acba:	e7e2      	b.n	800ac82 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7fb fc2d 	bl	800651c <pbuf_clen>
 800acc2:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <ip4_reass+0x2ec>)
 800acc4:	8813      	ldrh	r3, [r2, #0]
 800acc6:	1a18      	subs	r0, r3, r0
 800acc8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800acca:	4638      	mov	r0, r7
 800accc:	f7fb fa74 	bl	80061b8 <pbuf_free>
 800acd0:	e742      	b.n	800ab58 <ip4_reass+0x12c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800acd2:	4698      	mov	r8, r3
 800acd4:	e775      	b.n	800abc2 <ip4_reass+0x196>
      iprh = (struct ip_reass_helper*)r->payload;
 800acd6:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800acda:	f06f 0113 	mvn.w	r1, #19
 800acde:	4638      	mov	r0, r7
 800ace0:	f7fb fa64 	bl	80061ac <pbuf_header>
      pbuf_cat(p, r);
 800ace4:	4639      	mov	r1, r7
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7fb fc34 	bl	8006554 <pbuf_cat>
      r = iprh->next_pbuf;
 800acec:	f8d8 7000 	ldr.w	r7, [r8]
 800acf0:	e795      	b.n	800ac1e <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800acf2:	680b      	ldr	r3, [r1, #0]
 800acf4:	42a3      	cmp	r3, r4
 800acf6:	d002      	beq.n	800acfe <ip4_reass+0x2d2>
 800acf8:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800acfa:	2900      	cmp	r1, #0
 800acfc:	d1f9      	bne.n	800acf2 <ip4_reass+0x2c6>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff fd7c 	bl	800a7fc <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800ad04:	4628      	mov	r0, r5
 800ad06:	f7fb fc09 	bl	800651c <pbuf_clen>
 800ad0a:	8833      	ldrh	r3, [r6, #0]
 800ad0c:	1a18      	subs	r0, r3, r0
 800ad0e:	8030      	strh	r0, [r6, #0]
}
 800ad10:	4628      	mov	r0, r5
 800ad12:	b003      	add	sp, #12
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	20000d60 	.word	0x20000d60
 800ad1c:	20000d64 	.word	0x20000d64
 800ad20:	08010a99 	.word	0x08010a99
 800ad24:	08010a33 	.word	0x08010a33
 800ad28:	0800f008 	.word	0x0800f008
 800ad2c:	08010a15 	.word	0x08010a15
 800ad30:	08010a6a 	.word	0x08010a6a
 800ad34:	08010a77 	.word	0x08010a77
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ad38:	88e8      	ldrh	r0, [r5, #6]
 800ad3a:	f7fa fe23 	bl	8005984 <lwip_htons>
 800ad3e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ad42:	2800      	cmp	r0, #0
 800ad44:	f47f aec0 	bne.w	800aac8 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ad48:	89e0      	ldrh	r0, [r4, #14]
 800ad4a:	f7fa fe1b 	bl	8005984 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ad4e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f43f aeb8 	beq.w	800aac8 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ad58:	462b      	mov	r3, r5
 800ad5a:	f104 0208 	add.w	r2, r4, #8
 800ad5e:	f105 0114 	add.w	r1, r5, #20
 800ad62:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad66:	f842 0b04 	str.w	r0, [r2], #4
 800ad6a:	428b      	cmp	r3, r1
 800ad6c:	d1f9      	bne.n	800ad62 <ip4_reass+0x336>
 800ad6e:	e6ab      	b.n	800aac8 <ip4_reass+0x9c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ad70:	f1bb 0f00 	cmp.w	fp, #0
 800ad74:	f43f af23 	beq.w	800abbe <ip4_reass+0x192>
 800ad78:	f04f 0800 	mov.w	r8, #0
 800ad7c:	e717      	b.n	800abae <ip4_reass+0x182>
 800ad7e:	bf00      	nop

0800ad80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ad84:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 800ad88:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ad8a:	2308      	movs	r3, #8
 800ad8c:	f1a8 0814 	sub.w	r8, r8, #20
 800ad90:	fb98 f8f3 	sdiv	r8, r8, r3
 800ad94:	fa1f f388 	uxth.w	r3, r8
 800ad98:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ad9a:	6843      	ldr	r3, [r0, #4]
{
 800ad9c:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800ad9e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800ada0:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800ada2:	f006 060f 	and.w	r6, r6, #15
 800ada6:	00b6      	lsls	r6, r6, #2
 800ada8:	2e14      	cmp	r6, #20
{
 800adaa:	4607      	mov	r7, r0
 800adac:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800adae:	d00b      	beq.n	800adc8 <ip4_frag+0x48>
 800adb0:	4b5a      	ldr	r3, [pc, #360]	; (800af1c <ip4_frag+0x19c>)
 800adb2:	495b      	ldr	r1, [pc, #364]	; (800af20 <ip4_frag+0x1a0>)
 800adb4:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800adb8:	485a      	ldr	r0, [pc, #360]	; (800af24 <ip4_frag+0x1a4>)
 800adba:	f002 fed3 	bl	800db64 <iprintf>
 800adbe:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800adc2:	b00b      	add	sp, #44	; 0x2c
 800adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	88d8      	ldrh	r0, [r3, #6]
 800adcc:	f7fa fdda 	bl	8005984 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800add0:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800add4:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800add8:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800adda:	d004      	beq.n	800ade6 <ip4_frag+0x66>
 800addc:	4b4f      	ldr	r3, [pc, #316]	; (800af1c <ip4_frag+0x19c>)
 800adde:	4952      	ldr	r1, [pc, #328]	; (800af28 <ip4_frag+0x1a8>)
 800ade0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ade4:	e7e8      	b.n	800adb8 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800ade6:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800ade8:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800adec:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800adee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800adf2:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800adf4:	9306      	str	r3, [sp, #24]
  while (left) {
 800adf6:	b90d      	cbnz	r5, 800adfc <ip4_frag+0x7c>
  return ERR_OK;
 800adf8:	4628      	mov	r0, r5
 800adfa:	e7e2      	b.n	800adc2 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	42ab      	cmp	r3, r5
 800ae00:	bfa8      	it	ge
 800ae02:	462b      	movge	r3, r5
 800ae04:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ae06:	2200      	movs	r2, #0
 800ae08:	2114      	movs	r1, #20
 800ae0a:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800ae0c:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ae0e:	f7fb fa35 	bl	800627c <pbuf_alloc>
    if (rambuf == NULL) {
 800ae12:	4680      	mov	r8, r0
 800ae14:	b370      	cbz	r0, 800ae74 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ae16:	897b      	ldrh	r3, [r7, #10]
 800ae18:	2b13      	cmp	r3, #19
 800ae1a:	d806      	bhi.n	800ae2a <ip4_frag+0xaa>
 800ae1c:	4b3f      	ldr	r3, [pc, #252]	; (800af1c <ip4_frag+0x19c>)
 800ae1e:	4943      	ldr	r1, [pc, #268]	; (800af2c <ip4_frag+0x1ac>)
 800ae20:	4840      	ldr	r0, [pc, #256]	; (800af24 <ip4_frag+0x1a4>)
 800ae22:	f240 3209 	movw	r2, #777	; 0x309
 800ae26:	f002 fe9d 	bl	800db64 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ae2a:	9b02      	ldr	r3, [sp, #8]
 800ae2c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ae30:	4619      	mov	r1, r3
 800ae32:	3114      	adds	r1, #20
 800ae34:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae38:	f842 0b04 	str.w	r0, [r2], #4
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	d1f9      	bne.n	800ae34 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ae40:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800ae44:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ae48:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800ae4a:	f1b9 0f00 	cmp.w	r9, #0
 800ae4e:	d037      	beq.n	800aec0 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800ae50:	897c      	ldrh	r4, [r7, #10]
 800ae52:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ae54:	b2a4      	uxth	r4, r4
 800ae56:	454c      	cmp	r4, r9
 800ae58:	bf28      	it	cs
 800ae5a:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800ae5c:	b914      	cbnz	r4, 800ae64 <ip4_frag+0xe4>
        p = p->next;
 800ae5e:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800ae60:	2600      	movs	r6, #0
 800ae62:	e7f2      	b.n	800ae4a <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ae64:	2005      	movs	r0, #5
 800ae66:	f7fb f827 	bl	8005eb8 <memp_malloc>
      if (pcr == NULL) {
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	b928      	cbnz	r0, 800ae7a <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800ae6e:	4640      	mov	r0, r8
 800ae70:	f7fb f9a2 	bl	80061b8 <pbuf_free>
  return ERR_MEM;
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e7a3      	b.n	800adc2 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ae7a:	9401      	str	r4, [sp, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4433      	add	r3, r6
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	2202      	movs	r2, #2
 800ae84:	4603      	mov	r3, r0
 800ae86:	4621      	mov	r1, r4
 800ae88:	2004      	movs	r0, #4
 800ae8a:	f7fb f957 	bl	800613c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800ae8e:	b918      	cbnz	r0, 800ae98 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ae90:	4650      	mov	r0, sl
 800ae92:	f7ff fd85 	bl	800a9a0 <ip_frag_free_pbuf_custom_ref>
 800ae96:	e7ea      	b.n	800ae6e <ip4_frag+0xee>
 800ae98:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7fb fb46 	bl	800652c <pbuf_ref>
      left_to_copy -= newpbuflen;
 800aea0:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800aea4:	4b22      	ldr	r3, [pc, #136]	; (800af30 <ip4_frag+0x1b0>)
      pcr->original = p;
 800aea6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800aeaa:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800aeae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb0:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 800aeb2:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800aeb6:	f7fb fb4d 	bl	8006554 <pbuf_cat>
      if (left_to_copy) {
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	d1ce      	bne.n	800ae5e <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800aec6:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 800aeca:	3b13      	subs	r3, #19
    if (!last) {
 800aecc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800aece:	bfa8      	it	ge
 800aed0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800aed4:	f7fa fd56 	bl	8005984 <lwip_htons>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	f103 0014 	add.w	r0, r3, #20
 800aee2:	b280      	uxth	r0, r0
 800aee4:	f7fa fd4e 	bl	8005984 <lwip_htons>
 800aee8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800aeea:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800aeec:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800aeee:	2300      	movs	r3, #0
 800aef0:	7293      	strb	r3, [r2, #10]
 800aef2:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800aef4:	4641      	mov	r1, r8
 800aef6:	f8db 3014 	ldr.w	r3, [fp, #20]
 800aefa:	9a08      	ldr	r2, [sp, #32]
 800aefc:	4658      	mov	r0, fp
 800aefe:	4798      	blx	r3
    pbuf_free(rambuf);
 800af00:	4640      	mov	r0, r8
 800af02:	f7fb f959 	bl	80061b8 <pbuf_free>
    left -= fragsize;
 800af06:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800af08:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 800af0a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800af0c:	9b04      	ldr	r3, [sp, #16]
 800af0e:	4413      	add	r3, r2
    poff += newpbuflen;
 800af10:	4426      	add	r6, r4
    ofo += nfb;
 800af12:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 800af14:	b2b6      	uxth	r6, r6
    left -= fragsize;
 800af16:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	e76c      	b.n	800adf6 <ip4_frag+0x76>
 800af1c:	08010a99 	.word	0x08010a99
 800af20:	080109b4 	.word	0x080109b4
 800af24:	0800f008 	.word	0x0800f008
 800af28:	080109db 	.word	0x080109db
 800af2c:	080109f5 	.word	0x080109f5
 800af30:	0800a9cd 	.word	0x0800a9cd

0800af34 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800af34:	8943      	ldrh	r3, [r0, #10]
 800af36:	2b0e      	cmp	r3, #14
{
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800af3e:	d914      	bls.n	800af6a <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800af40:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800af42:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800af44:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d50a      	bpl.n	800af60 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d111      	bne.n	800af72 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800af4e:	7843      	ldrb	r3, [r0, #1]
 800af50:	b933      	cbnz	r3, 800af60 <ethernet_input+0x2c>
 800af52:	7883      	ldrb	r3, [r0, #2]
 800af54:	2b5e      	cmp	r3, #94	; 0x5e
 800af56:	d103      	bne.n	800af60 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800af58:	7b63      	ldrb	r3, [r4, #13]
 800af5a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800af5e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800af60:	2e08      	cmp	r6, #8
 800af62:	d010      	beq.n	800af86 <ethernet_input+0x52>
 800af64:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800af68:	d01e      	beq.n	800afa8 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7fb f924 	bl	80061b8 <pbuf_free>
  return ERR_OK;
 800af70:	e018      	b.n	800afa4 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800af72:	2206      	movs	r2, #6
 800af74:	4914      	ldr	r1, [pc, #80]	; (800afc8 <ethernet_input+0x94>)
 800af76:	f002 fd2b 	bl	800d9d0 <memcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1f0      	bne.n	800af60 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800af7e:	7b63      	ldrb	r3, [r4, #13]
 800af80:	f043 0308 	orr.w	r3, r3, #8
 800af84:	e7eb      	b.n	800af5e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800af86:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800af8a:	071a      	lsls	r2, r3, #28
 800af8c:	d5ed      	bpl.n	800af6a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800af8e:	f06f 010d 	mvn.w	r1, #13
 800af92:	4620      	mov	r0, r4
 800af94:	f7fb f90a 	bl	80061ac <pbuf_header>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d1e6      	bne.n	800af6a <ethernet_input+0x36>
        ip4_input(p, netif);
 800af9c:	4629      	mov	r1, r5
 800af9e:	4620      	mov	r0, r4
 800afa0:	f7ff fac8 	bl	800a534 <ip4_input>
}
 800afa4:	2000      	movs	r0, #0
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800afa8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800afac:	071b      	lsls	r3, r3, #28
 800afae:	d5dc      	bpl.n	800af6a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800afb0:	f06f 010d 	mvn.w	r1, #13
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7fb f8f9 	bl	80061ac <pbuf_header>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d1d5      	bne.n	800af6a <ethernet_input+0x36>
        etharp_input(p, netif);
 800afbe:	4629      	mov	r1, r5
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7fe ff2f 	bl	8009e24 <etharp_input>
      break;
 800afc6:	e7ed      	b.n	800afa4 <ethernet_input+0x70>
 800afc8:	08010b4d 	.word	0x08010b4d

0800afcc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd0:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800afd2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800afd6:	460d      	mov	r5, r1
 800afd8:	4616      	mov	r6, r2
 800afda:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800afdc:	f7fa fcd2 	bl	8005984 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800afe0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800afe2:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7fb f8e1 	bl	80061ac <pbuf_header>
 800afea:	b9e0      	cbnz	r0, 800b026 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800afec:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800afee:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	88bb      	ldrh	r3, [r7, #4]
 800aff8:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800affa:	6833      	ldr	r3, [r6, #0]
 800affc:	f8c1 3006 	str.w	r3, [r1, #6]
 800b000:	88b3      	ldrh	r3, [r6, #4]
 800b002:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b004:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b008:	2b06      	cmp	r3, #6
 800b00a:	d006      	beq.n	800b01a <ethernet_output+0x4e>
 800b00c:	4b08      	ldr	r3, [pc, #32]	; (800b030 <ethernet_output+0x64>)
 800b00e:	4909      	ldr	r1, [pc, #36]	; (800b034 <ethernet_output+0x68>)
 800b010:	4809      	ldr	r0, [pc, #36]	; (800b038 <ethernet_output+0x6c>)
 800b012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b016:	f002 fda5 	bl	800db64 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b01a:	69a3      	ldr	r3, [r4, #24]
 800b01c:	4629      	mov	r1, r5
 800b01e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b024:	4718      	bx	r3
}
 800b026:	f06f 0001 	mvn.w	r0, #1
 800b02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02e:	bf00      	nop
 800b030:	08010b53 	.word	0x08010b53
 800b034:	08010b88 	.word	0x08010b88
 800b038:	0800f008 	.word	0x0800f008

0800b03c <bum_notify_recv>:

#include <bum_private.h>

void bum_notify_recv( uint8_t c )
{
  xbee_notify_recv( c );
 800b03c:	f002 ba3a 	b.w	800d4b4 <xbee_notify_recv>

0800b040 <bum_process>:
}

void bum_process( int ms )
{
	xbee_process( ms );
 800b040:	f002 bbaa 	b.w	800d798 <xbee_process>

0800b044 <bum_notify_endtx>:
}

void bum_notify_endtx()
{
	xbee_notify_endtx();
 800b044:	f002 b89c 	b.w	800d180 <xbee_notify_endtx>

0800b048 <web_interface_init>:
}

void web_interface_init( WebInterface *wi )
{
 800b048:	b510      	push	{r4, lr}
 800b04a:	4604      	mov	r4, r0
  event_init( &wi->evt );
 800b04c:	f000 ff9a 	bl	800bf84 <event_init>
  wi->button_register_player = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	7063      	strb	r3, [r4, #1]
  wi->button_acc = 0;
 800b054:	70a3      	strb	r3, [r4, #2]
  wi->acc_x = 0;
 800b056:	70e3      	strb	r3, [r4, #3]
  wi->acc_y = 0;
 800b058:	7123      	strb	r3, [r4, #4]
}
 800b05a:	bd10      	pop	{r4, pc}

0800b05c <bum_log>:

void bum_log( const char *msg )
{
	xbee_log( msg );
 800b05c:	f002 bc26 	b.w	800d8ac <xbee_log>

0800b060 <bum_init_player>:

static BumperStatePlayer bumper_state;


void bum_init_player( BumperProtocolPlayer *p )
{
 800b060:	b510      	push	{r4, lr}
  xbee_init( 0, p->error );
 800b062:	6901      	ldr	r1, [r0, #16]
{
 800b064:	4604      	mov	r4, r0
  xbee_init( 0, p->error );
 800b066:	2000      	movs	r0, #0
 800b068:	f002 fb5c 	bl	800d724 <xbee_init>

  // Not used
  //bumper_state.unit_addr = xbee_api_read_unique_id();

  // At startup, we don't know the referee address, so let's broadcast by default
  bumper_state.referee_addr = XBEE_BROADCAST;
 800b06c:	4b03      	ldr	r3, [pc, #12]	; (800b07c <bum_init_player+0x1c>)
 800b06e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b072:	2100      	movs	r1, #0
 800b074:	e9c3 0104 	strd	r0, r1, [r3, #16]

  bumper_state.player = p;
 800b078:	609c      	str	r4, [r3, #8]

  //strcat( ( char * )radio_log, "Starting Player<br/>");
}
 800b07a:	bd10      	pop	{r4, pc}
 800b07c:	20000d68 	.word	0x20000d68

0800b080 <bum_game_register>:


// name : only 5 first chars are taken into account
int bum_game_register( const char *name )
{
 800b080:	b513      	push	{r0, r1, r4, lr}
	int i;
	// We send a broadcast to try to find a referee

	uint8_t frame[ BUM_GAME_REGISTER_LEN ];
	frame[ 0 ] = BUM_GAME_REGISTER_TYPE;
 800b082:	aa02      	add	r2, sp, #8
 800b084:	2301      	movs	r3, #1
 800b086:	f802 3d08 	strb.w	r3, [r2, #-8]!
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b08a:	2300      	movs	r3, #0
 800b08c:	5cc1      	ldrb	r1, [r0, r3]
 800b08e:	1c5c      	adds	r4, r3, #1
 800b090:	b959      	cbnz	r1, 800b0aa <bum_game_register+0x2a>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b092:	3301      	adds	r3, #1
 800b094:	2b06      	cmp	r3, #6
 800b096:	54d1      	strb	r1, [r2, r3]
 800b098:	d1fb      	bne.n	800b092 <bum_game_register+0x12>

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_REGISTER_LEN );
 800b09a:	4908      	ldr	r1, [pc, #32]	; (800b0bc <bum_game_register+0x3c>)
 800b09c:	2307      	movs	r3, #7
 800b09e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b0a2:	f002 fab1 	bl	800d608 <xbee_api_send_to>
}
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd10      	pop	{r4, pc}
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b0aa:	2c05      	cmp	r4, #5
 800b0ac:	5511      	strb	r1, [r2, r4]
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	d1ec      	bne.n	800b08c <bum_game_register+0xc>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f88d 3006 	strb.w	r3, [sp, #6]
 800b0b8:	e7ef      	b.n	800b09a <bum_game_register+0x1a>
 800b0ba:	bf00      	nop
 800b0bc:	20000d68 	.word	0x20000d68

0800b0c0 <bum_game_acceleration>:
// ax, ay, az: acceleration between -100 to 100
// ax: negative = toward left
// ay: negative = toward top
// az: negative = toward floor
int bum_game_acceleration( int8_t ax, int8_t ay, int8_t az )
{
 800b0c0:	b507      	push	{r0, r1, r2, lr}
 800b0c2:	2864      	cmp	r0, #100	; 0x64
 800b0c4:	bfa8      	it	ge
 800b0c6:	2064      	movge	r0, #100	; 0x64

	if ( az < -100 ) az = -100;
	else if ( az > 100 ) az = 100;

	uint8_t frame[ BUM_GAME_ACCELERATION_LEN ];
	frame[ 0 ] = BUM_GAME_ACCELERATION_TYPE;
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2964      	cmp	r1, #100	; 0x64
 800b0cc:	bfa8      	it	ge
 800b0ce:	2164      	movge	r1, #100	; 0x64
 800b0d0:	f88d 3004 	strb.w	r3, [sp, #4]
 800b0d4:	2a64      	cmp	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b0d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b0da:	bfa8      	it	ge
 800b0dc:	2264      	movge	r2, #100	; 0x64
 800b0de:	4298      	cmp	r0, r3
 800b0e0:	bfb8      	it	lt
 800b0e2:	4618      	movlt	r0, r3
	frame[ 2 ] = ay + 100;
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	bfb8      	it	lt
 800b0e8:	4619      	movlt	r1, r3
 800b0ea:	3164      	adds	r1, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	bfb8      	it	lt
 800b0f0:	461a      	movlt	r2, r3
	frame[ 2 ] = ay + 100;
 800b0f2:	f88d 1006 	strb.w	r1, [sp, #6]

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b0f6:	4908      	ldr	r1, [pc, #32]	; (800b118 <bum_game_acceleration+0x58>)
 800b0f8:	2304      	movs	r3, #4
	frame[ 1 ] = ax + 100;
 800b0fa:	3064      	adds	r0, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b0fc:	3264      	adds	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b0fe:	f88d 0005 	strb.w	r0, [sp, #5]
	frame[ 3 ] = az + 100;
 800b102:	f88d 2007 	strb.w	r2, [sp, #7]
	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b106:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b10a:	eb0d 0203 	add.w	r2, sp, r3
 800b10e:	f002 fa7b 	bl	800d608 <xbee_api_send_to>
}
 800b112:	b003      	add	sp, #12
 800b114:	f85d fb04 	ldr.w	pc, [sp], #4
 800b118:	20000d68 	.word	0x20000d68

0800b11c <bum_process_player>:
	{ \
		bumper_state.referee_addr = from; \
	}

void bum_process_player()
{
 800b11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11e:	b085      	sub	sp, #20
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b120:	f002 f8ba 	bl	800d298 <xbee_get_recv_event>
 800b124:	f000 ff34 	bl	800bf90 <event_check>
 800b128:	b150      	cbz	r0, 800b140 <bum_process_player+0x24>

  len = DATA_SIZE;
 800b12a:	2364      	movs	r3, #100	; 0x64
 800b12c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch ( xbee_recv_get_frame_type() )
 800b130:	f002 f8b6 	bl	800d2a0 <xbee_recv_get_frame_type>
 800b134:	2888      	cmp	r0, #136	; 0x88
 800b136:	d003      	beq.n	800b140 <bum_process_player+0x24>
 800b138:	d804      	bhi.n	800b144 <bum_process_player+0x28>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f040 8090 	bne.w	800b260 <bum_process_player+0x144>
	  {
		xbee_recv_full( data, &len );
		break;
	  }
  }
}
 800b140:	b005      	add	sp, #20
 800b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ( xbee_recv_get_frame_type() )
 800b144:	288b      	cmp	r0, #139	; 0x8b
 800b146:	d0fb      	beq.n	800b140 <bum_process_player+0x24>
 800b148:	2890      	cmp	r0, #144	; 0x90
 800b14a:	f040 8089 	bne.w	800b260 <bum_process_player+0x144>
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b14e:	4c47      	ldr	r4, [pc, #284]	; (800b26c <bum_process_player+0x150>)
 800b150:	f10d 0206 	add.w	r2, sp, #6
 800b154:	4621      	mov	r1, r4
 800b156:	a802      	add	r0, sp, #8
 800b158:	f002 f96a 	bl	800d430 <xbee_recv>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d0ef      	beq.n	800b140 <bum_process_player+0x24>
 800b160:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b164:	2a00      	cmp	r2, #0
 800b166:	d0eb      	beq.n	800b140 <bum_process_player+0x24>
			switch ( data[ 0 ] )
 800b168:	7823      	ldrb	r3, [r4, #0]
 800b16a:	3b81      	subs	r3, #129	; 0x81
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d8e7      	bhi.n	800b140 <bum_process_player+0x24>
 800b170:	e8df f003 	tbb	[pc, r3]
 800b174:	60392002 	.word	0x60392002
				BUM_SAVE_REFEREE_ADDR();
 800b178:	4d3d      	ldr	r5, [pc, #244]	; (800b270 <bum_process_player+0x154>)
 800b17a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b17e:	2100      	movs	r1, #0
 800b180:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b184:	428b      	cmp	r3, r1
 800b186:	bf08      	it	eq
 800b188:	4282      	cmpeq	r2, r0
 800b18a:	d103      	bne.n	800b194 <bum_process_player+0x78>
 800b18c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b190:	e9c5 2304 	strd	r2, r3, [r5, #16]
				if ( data[ 1 ] == BUM_STEP_REGISTERED )
 800b194:	7863      	ldrb	r3, [r4, #1]
 800b196:	b91b      	cbnz	r3, 800b1a0 <bum_process_player+0x84>
				{ bumper_state.player->debug( BUM_GAME_STEP_TYPE ); }
 800b198:	68ab      	ldr	r3, [r5, #8]
 800b19a:	2081      	movs	r0, #129	; 0x81
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	4798      	blx	r3
				if ( len != BUM_GAME_STEP_LEN ) return;
 800b1a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d1cb      	bne.n	800b140 <bum_process_player+0x24>
				bumper_state.player->game_step( data[ 1 ], data[ 2 ] );
 800b1a8:	68ab      	ldr	r3, [r5, #8]
 800b1aa:	78a1      	ldrb	r1, [r4, #2]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	7860      	ldrb	r0, [r4, #1]
 800b1b0:	4798      	blx	r3
				break;
 800b1b2:	e7c5      	b.n	800b140 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b1b4:	4b2e      	ldr	r3, [pc, #184]	; (800b270 <bum_process_player+0x154>)
 800b1b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b1ba:	2700      	movs	r7, #0
 800b1bc:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b1c0:	42b9      	cmp	r1, r7
 800b1c2:	bf08      	it	eq
 800b1c4:	42b0      	cmpeq	r0, r6
 800b1c6:	d103      	bne.n	800b1d0 <bum_process_player+0xb4>
 800b1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1cc:	e9c3 0104 	strd	r0, r1, [r3, #16]
				if ( len != BUM_GAME_NEWPLAYER_LEN ) return;
 800b1d0:	2a0c      	cmp	r2, #12
 800b1d2:	d1b5      	bne.n	800b140 <bum_process_player+0x24>
 800b1d4:	f8d4 2002 	ldr.w	r2, [r4, #2]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4926      	ldr	r1, [pc, #152]	; (800b274 <bum_process_player+0x158>)
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	7860      	ldrb	r0, [r4, #1]
 800b1e0:	ba12      	rev	r2, r2
 800b1e2:	4798      	blx	r3
				break;
 800b1e4:	e7ac      	b.n	800b140 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b1e6:	4d22      	ldr	r5, [pc, #136]	; (800b270 <bum_process_player+0x154>)
 800b1e8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1f2:	428b      	cmp	r3, r1
 800b1f4:	bf08      	it	eq
 800b1f6:	4282      	cmpeq	r2, r0
 800b1f8:	d103      	bne.n	800b202 <bum_process_player+0xe6>
 800b1fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1fe:	e9c5 2304 	strd	r2, r3, [r5, #16]
				bumper_state.player->debug( BUM_GAME_PLAYERMOVE_TYPE );
 800b202:	68ab      	ldr	r3, [r5, #8]
 800b204:	2083      	movs	r0, #131	; 0x83
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	4798      	blx	r3
				if ( len != BUM_GAME_PLAYERMOVE_LEN ) return;
 800b20a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d196      	bne.n	800b140 <bum_process_player+0x24>
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b212:	78a0      	ldrb	r0, [r4, #2]
				uint16_t s = ( ((uint16_t)data[ 6 ]) << 8 ) | data[ 7 ];
 800b214:	79a7      	ldrb	r7, [r4, #6]
 800b216:	79e3      	ldrb	r3, [r4, #7]
				uint16_t y = ( ((uint16_t)data[ 4 ]) << 8 ) | data[ 5 ];
 800b218:	7926      	ldrb	r6, [r4, #4]
 800b21a:	7962      	ldrb	r2, [r4, #5]
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b21c:	78e1      	ldrb	r1, [r4, #3]
				bumper_state.player->game_player_move( data[ 1 ], x, y, s );
 800b21e:	68ad      	ldr	r5, [r5, #8]
 800b220:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800b224:	68ad      	ldr	r5, [r5, #8]
 800b226:	7860      	ldrb	r0, [r4, #1]
 800b228:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b22c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800b230:	47a8      	blx	r5
				break;
 800b232:	e785      	b.n	800b140 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <bum_process_player+0x154>)
 800b236:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b23a:	2500      	movs	r5, #0
 800b23c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b240:	42a9      	cmp	r1, r5
 800b242:	bf08      	it	eq
 800b244:	42a0      	cmpeq	r0, r4
 800b246:	d103      	bne.n	800b250 <bum_process_player+0x134>
 800b248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b24c:	e9c3 0104 	strd	r0, r1, [r3, #16]
				if ( len != BUM_GAME_PRINT_LEN ) return;
 800b250:	2a1b      	cmp	r2, #27
 800b252:	f47f af75 	bne.w	800b140 <bum_process_player+0x24>
				bumper_state.player->game_print( ( const char * )data + 1 );
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	4807      	ldr	r0, [pc, #28]	; (800b278 <bum_process_player+0x15c>)
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	4798      	blx	r3
				break;
 800b25e:	e76f      	b.n	800b140 <bum_process_player+0x24>
		xbee_recv_full( data, &len );
 800b260:	f10d 0106 	add.w	r1, sp, #6
 800b264:	4801      	ldr	r0, [pc, #4]	; (800b26c <bum_process_player+0x150>)
 800b266:	f002 f8d9 	bl	800d41c <xbee_recv_full>
		break;
 800b26a:	e769      	b.n	800b140 <bum_process_player+0x24>
 800b26c:	20000d80 	.word	0x20000d80
 800b270:	20000d68 	.word	0x20000d68
 800b274:	20000d86 	.word	0x20000d86
 800b278:	20000d81 	.word	0x20000d81

0800b27c <bum_api_send_to>:
  0x00FFF8DC,

};

static void bum_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( to == BUM_TO_ALL )
 800b280:	1c4d      	adds	r5, r1, #1
 800b282:	bf08      	it	eq
 800b284:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 800b288:	4616      	mov	r6, r2
 800b28a:	461f      	mov	r7, r3
	if ( to == BUM_TO_ALL )
 800b28c:	d111      	bne.n	800b2b2 <bum_api_send_to+0x36>
	{
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b28e:	2400      	movs	r4, #0
 800b290:	4d0a      	ldr	r5, [pc, #40]	; (800b2bc <bum_api_send_to+0x40>)
 800b292:	e008      	b.n	800b2a6 <bum_api_send_to+0x2a>
		{
			xbee_api_send_to( referee_state.player_data[ i ].addr, data, len );
 800b294:	eb05 1184 	add.w	r1, r5, r4, lsl #6
 800b298:	463b      	mov	r3, r7
 800b29a:	4632      	mov	r2, r6
 800b29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a0:	f002 f9b2 	bl	800d608 <xbee_api_send_to>
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b2a4:	3401      	adds	r4, #1
 800b2a6:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	dcf2      	bgt.n	800b294 <bum_api_send_to+0x18>
	}
	else
	{
		xbee_api_send_to( to, data, len );
	}
}
 800b2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		xbee_api_send_to( to, data, len );
 800b2b6:	f002 b9a7 	b.w	800d608 <xbee_api_send_to>
 800b2ba:	bf00      	nop
 800b2bc:	20005070 	.word	0x20005070

0800b2c0 <bumper_start_location_calc>:
{
 800b2c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <bumper_start_location_calc+0x70>)
 800b2c6:	4c1b      	ldr	r4, [pc, #108]	; (800b334 <bumper_start_location_calc+0x74>)
 800b2c8:	689b      	ldr	r3, [r3, #8]
{
 800b2ca:	460f      	mov	r7, r1
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b2cc:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
 800b2d0:	68db      	ldr	r3, [r3, #12]
{
 800b2d2:	4680      	mov	r8, r0
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b2d4:	f1c1 0119 	rsb	r1, r1, #25
 800b2d8:	a801      	add	r0, sp, #4
 800b2da:	4798      	blx	r3
  int i = random;
 800b2dc:	9a01      	ldr	r2, [sp, #4]
 800b2de:	4623      	mov	r3, r4
{
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	e004      	b.n	800b2ee <bumper_start_location_calc+0x2e>
    i++;
 800b2e4:	3401      	adds	r4, #1
    if ( i == N_STARTING_BOXES ) i = 0;
 800b2e6:	2c19      	cmp	r4, #25
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	d0f8      	beq.n	800b2e0 <bumper_start_location_calc+0x20>
  while ( referee_state.start_location[ i ] )
 800b2ee:	191a      	adds	r2, r3, r4
 800b2f0:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d1f5      	bne.n	800b2e4 <bumper_start_location_calc+0x24>
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b2f8:	26c8      	movs	r6, #200	; 0xc8
  referee_state.start_location[ i ] = 1;
 800b2fa:	2301      	movs	r3, #1
  int X = i / 5;
 800b2fc:	2505      	movs	r5, #5
 800b2fe:	fb94 f5f5 	sdiv	r5, r4, r5
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b302:	fb06 f005 	mul.w	r0, r6, r5
  referee_state.start_location[ i ] = 1;
 800b306:	f882 3504 	strb.w	r3, [r2, #1284]	; 0x504
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b30a:	3064      	adds	r0, #100	; 0x64
 800b30c:	f7f5 f91a 	bl	8000544 <__aeabi_i2d>
  int Y = i % 5;
 800b310:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b314:	1b64      	subs	r4, r4, r5
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b316:	4374      	muls	r4, r6
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b318:	e9c8 0100 	strd	r0, r1, [r8]
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b31c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800b320:	f7f5 f910 	bl	8000544 <__aeabi_i2d>
 800b324:	e9c7 0100 	strd	r0, r1, [r7]
}
 800b328:	b002      	add	sp, #8
 800b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32e:	bf00      	nop
 800b330:	20000de8 	.word	0x20000de8
 800b334:	20005070 	.word	0x20005070

0800b338 <find_player_addr>:
	  if ( referee_state.player_data[ i ].id == id ) return referee_state.player_data + i;
  }
  return 0;
}
PlayerData *find_player_addr( uint64_t addr )
{
 800b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33a:	460f      	mov	r7, r1
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b33c:	490a      	ldr	r1, [pc, #40]	; (800b368 <find_player_addr+0x30>)
{
 800b33e:	4606      	mov	r6, r0
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b340:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800b344:	2200      	movs	r2, #0
 800b346:	4290      	cmp	r0, r2
 800b348:	dc01      	bgt.n	800b34e <find_player_addr+0x16>
  {
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
  }
  return 0;
 800b34a:	2000      	movs	r0, #0
 800b34c:	e008      	b.n	800b360 <find_player_addr+0x28>
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
 800b34e:	eb01 1382 	add.w	r3, r1, r2, lsl #6
 800b352:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b356:	42bd      	cmp	r5, r7
 800b358:	bf08      	it	eq
 800b35a:	42b4      	cmpeq	r4, r6
 800b35c:	d101      	bne.n	800b362 <find_player_addr+0x2a>
 800b35e:	4618      	mov	r0, r3
}
 800b360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b362:	3201      	adds	r2, #1
 800b364:	e7ef      	b.n	800b346 <find_player_addr+0xe>
 800b366:	bf00      	nop
 800b368:	20005070 	.word	0x20005070

0800b36c <add_player>:

PlayerData *add_player( uint64_t addr, const char *name )
{
 800b36c:	b570      	push	{r4, r5, r6, lr}
  PlayerData *d = referee_state.player_data + referee_state.n_players;
 800b36e:	4d18      	ldr	r5, [pc, #96]	; (800b3d0 <add_player+0x64>)
 800b370:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b374:	eb05 1483 	add.w	r4, r5, r3, lsl #6
{
 800b378:	4616      	mov	r6, r2

  d->addr = addr;
 800b37a:	e9c4 0100 	strd	r0, r1, [r4]
  d->id = referee_state.n_players;
 800b37e:	7223      	strb	r3, [r4, #8]

  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b380:	2205      	movs	r2, #5
 800b382:	4631      	mov	r1, r6
 800b384:	f104 0009 	add.w	r0, r4, #9
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b388:	2600      	movs	r6, #0
  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b38a:	f002 fc69 	bl	800dc60 <strncpy>

  bumper_start_location_calc( &d->Px, &d->Py );
 800b38e:	f104 0118 	add.w	r1, r4, #24
 800b392:	f104 0010 	add.w	r0, r4, #16
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b396:	73a6      	strb	r6, [r4, #14]
  bumper_start_location_calc( &d->Px, &d->Py );
 800b398:	f7ff ff92 	bl	800b2c0 <bumper_start_location_calc>
  d->r = BUM_DEFAULT_BALL_SIZE;

  d->s = 1000; // No scaling
 800b39c:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <add_player+0x68>)
 800b39e:	6323      	str	r3, [r4, #48]	; 0x30

  d->color = bum_colors[ referee_state.n_players ];
 800b3a0:	4a0d      	ldr	r2, [pc, #52]	; (800b3d8 <add_player+0x6c>)
 800b3a2:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
  // Current speed
  d->Vx = 0;
  d->Vy = 0;

  // Current acceleration (-100 to 100)
  d->ax = 0;
 800b3a6:	86a6      	strh	r6, [r4, #52]	; 0x34
  d->color = bum_colors[ referee_state.n_players ];
 800b3a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b3ac:	63a2      	str	r2, [r4, #56]	; 0x38
  d->ay = 0;
  d->az = 0;

  // 1 if the player is living in the game
  d->playing = 1;
 800b3ae:	2201      	movs	r2, #1
  d->Vx = 0;
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	2100      	movs	r1, #0
  d->ay = 0;
 800b3b4:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  d->playing = 1;
 800b3b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c


  referee_state.n_players++;
 800b3bc:	4413      	add	r3, r2
  d->Vx = 0;
 800b3be:	e9c4 0108 	strd	r0, r1, [r4, #32]
  d->Vy = 0;
 800b3c2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  referee_state.n_players++;
 800b3c6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  return d;
}
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20005070 	.word	0x20005070
 800b3d4:	002803e8 	.word	0x002803e8
 800b3d8:	08010bc0 	.word	0x08010bc0

0800b3dc <bums_referee_reset>:

void bums_referee_reset()
{
  referee_state.game_started = 0;
 800b3dc:	4a06      	ldr	r2, [pc, #24]	; (800b3f8 <bums_referee_reset+0x1c>)
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
  referee_state.n_players = 0;
 800b3e4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
  {
	referee_state.start_location[ i ] = 0;
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	18d1      	adds	r1, r2, r3
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	2b19      	cmp	r3, #25
	referee_state.start_location[ i ] = 0;
 800b3f0:	f881 0504 	strb.w	r0, [r1, #1284]	; 0x504
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b3f4:	d1f9      	bne.n	800b3ea <bums_referee_reset+0xe>
  }
}
 800b3f6:	4770      	bx	lr
 800b3f8:	20005070 	.word	0x20005070

0800b3fc <bum_init_referee>:

void bum_init_referee( BumperProtocolReferee *p )
{
 800b3fc:	b510      	push	{r4, lr}
  xbee_init( 1, p->error );
 800b3fe:	6901      	ldr	r1, [r0, #16]
{
 800b400:	4604      	mov	r4, r0
  xbee_init( 1, p->error );
 800b402:	2001      	movs	r0, #1
 800b404:	f002 f98e 	bl	800d724 <xbee_init>

  // Not used
  //bumper_state.unit_addr = xbee_api_read_unique_id();

  bumper_state.referee = p;
 800b408:	4b04      	ldr	r3, [pc, #16]	; (800b41c <bum_init_referee+0x20>)

  xbee_log( "Starting Referee<br/>");
 800b40a:	4805      	ldr	r0, [pc, #20]	; (800b420 <bum_init_referee+0x24>)
  bumper_state.referee = p;
 800b40c:	609c      	str	r4, [r3, #8]
  xbee_log( "Starting Referee<br/>");
 800b40e:	f002 fa4d 	bl	800d8ac <xbee_log>

  bums_referee_reset();
}
 800b412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bums_referee_reset();
 800b416:	f7ff bfe1 	b.w	800b3dc <bums_referee_reset>
 800b41a:	bf00      	nop
 800b41c:	20000de8 	.word	0x20000de8
 800b420:	08010c10 	.word	0x08010c10

0800b424 <bum_game_step>:

int bum_game_step( uint64_t to, uint8_t step, uint8_t param )
{
 800b424:	b513      	push	{r0, r1, r4, lr}
	uint8_t frame[ BUM_GAME_STEP_LEN ];
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b426:	2481      	movs	r4, #129	; 0x81
	frame[ 1 ] = step;
 800b428:	f88d 2005 	strb.w	r2, [sp, #5]
	frame[ 2 ] = param;
 800b42c:	f88d 3006 	strb.w	r3, [sp, #6]

	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b430:	aa01      	add	r2, sp, #4
 800b432:	2303      	movs	r3, #3
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b434:	f88d 4004 	strb.w	r4, [sp, #4]
	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b438:	f7ff ff20 	bl	800b27c <bum_api_send_to>
	return 1;
}
 800b43c:	2001      	movs	r0, #1
 800b43e:	b002      	add	sp, #8
 800b440:	bd10      	pop	{r4, pc}

0800b442 <bum_game_new_player>:

int bum_game_new_player( uint64_t to, uint8_t id, const char *name, uint32_t color )
{
 800b442:	b530      	push	{r4, r5, lr}
 800b444:	b085      	sub	sp, #20
 800b446:	460d      	mov	r5, r1
 800b448:	9908      	ldr	r1, [sp, #32]
	int i;
	uint8_t frame[ BUM_GAME_NEWPLAYER_LEN ];
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
	frame[ 1 ] = id;
 800b44a:	f88d 2005 	strb.w	r2, [sp, #5]

	frame[ 2 ] = ( color >> 24 ) & 0xFF;
 800b44e:	0e0a      	lsrs	r2, r1, #24
 800b450:	f88d 2006 	strb.w	r2, [sp, #6]
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b454:	0c0a      	lsrs	r2, r1, #16
{
 800b456:	4604      	mov	r4, r0
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b458:	f88d 2007 	strb.w	r2, [sp, #7]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b45c:	2082      	movs	r0, #130	; 0x82
	frame[ 4 ] = ( color >> 8 ) & 0xFF;
 800b45e:	0a0a      	lsrs	r2, r1, #8
 800b460:	f88d 2008 	strb.w	r2, [sp, #8]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b464:	f88d 0004 	strb.w	r0, [sp, #4]
	frame[ 5 ] = ( color ) & 0xFF;
 800b468:	f88d 1009 	strb.w	r1, [sp, #9]

	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b46c:	2200      	movs	r2, #0
 800b46e:	5c99      	ldrb	r1, [r3, r2]
 800b470:	1c50      	adds	r0, r2, #1
 800b472:	b971      	cbnz	r1, 800b492 <bum_game_new_player+0x50>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b474:	ab01      	add	r3, sp, #4
 800b476:	4413      	add	r3, r2
 800b478:	3201      	adds	r2, #1
 800b47a:	2a06      	cmp	r2, #6
 800b47c:	7199      	strb	r1, [r3, #6]
 800b47e:	d1f9      	bne.n	800b474 <bum_game_new_player+0x32>

	bum_api_send_to( to, frame, BUM_GAME_NEWPLAYER_LEN );
 800b480:	4620      	mov	r0, r4
 800b482:	230c      	movs	r3, #12
 800b484:	aa01      	add	r2, sp, #4
 800b486:	4629      	mov	r1, r5
 800b488:	f7ff fef8 	bl	800b27c <bum_api_send_to>
	return 1;
}
 800b48c:	2001      	movs	r0, #1
 800b48e:	b005      	add	sp, #20
 800b490:	bd30      	pop	{r4, r5, pc}
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b492:	aa01      	add	r2, sp, #4
 800b494:	4402      	add	r2, r0
 800b496:	2805      	cmp	r0, #5
 800b498:	7151      	strb	r1, [r2, #5]
 800b49a:	4602      	mov	r2, r0
 800b49c:	d1e7      	bne.n	800b46e <bum_game_new_player+0x2c>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f88d 300f 	strb.w	r3, [sp, #15]
 800b4a4:	e7ec      	b.n	800b480 <bum_game_new_player+0x3e>

0800b4a6 <bum_game_player_move>:

int bum_game_player_move( uint64_t to, uint8_t id, uint16_t x, uint16_t y, uint16_t s )
{
 800b4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800b4ac:	f8bd 401c 	ldrh.w	r4, [sp, #28]
	uint8_t frame[ BUM_GAME_PLAYERMOVE_LEN ];
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
	frame[ 1 ] = id;
 800b4b0:	f88d 2001 	strb.w	r2, [sp, #1]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
	frame[ 3 ] = ( x ) & 0xFF;
 800b4b4:	f88d 3003 	strb.w	r3, [sp, #3]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b4b8:	0a1a      	lsrs	r2, r3, #8
	frame[ 4 ] = ( y >> 8 ) & 0xFF;
 800b4ba:	0a2b      	lsrs	r3, r5, #8
 800b4bc:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[ 5 ] = ( y ) & 0xFF;
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b4c0:	0a23      	lsrs	r3, r4, #8
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b4c2:	f88d 2002 	strb.w	r2, [sp, #2]
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b4c6:	f88d 3006 	strb.w	r3, [sp, #6]
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b4ca:	2683      	movs	r6, #131	; 0x83
	frame[ 7 ] = ( s ) & 0xFF;



	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	466a      	mov	r2, sp
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b4d0:	f88d 6000 	strb.w	r6, [sp]
	frame[ 5 ] = ( y ) & 0xFF;
 800b4d4:	f88d 5005 	strb.w	r5, [sp, #5]
	frame[ 7 ] = ( s ) & 0xFF;
 800b4d8:	f88d 4007 	strb.w	r4, [sp, #7]
	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b4dc:	f7ff fece 	bl	800b27c <bum_api_send_to>
	return 1;
}
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd70      	pop	{r4, r5, r6, pc}

0800b4e6 <bum_game_print>:

int bum_game_print( uint64_t to, const char *msg )
{
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	b088      	sub	sp, #32
 800b4ea:	4616      	mov	r6, r2
	int i;
	uint8_t frame[ BUM_GAME_PRINT_LEN ];
	frame[ 0 ] = BUM_GAME_PRINT_TYPE;
 800b4ec:	aa08      	add	r2, sp, #32
 800b4ee:	2384      	movs	r3, #132	; 0x84
 800b4f0:	f802 3d1c 	strb.w	r3, [r2, #-28]!
{
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	5cf1      	ldrb	r1, [r6, r3]
 800b4fc:	1c58      	adds	r0, r3, #1
 800b4fe:	b959      	cbnz	r1, 800b518 <bum_game_print+0x32>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b500:	3301      	adds	r3, #1
 800b502:	2b1a      	cmp	r3, #26
 800b504:	54d1      	strb	r1, [r2, r3]
 800b506:	d1fb      	bne.n	800b500 <bum_game_print+0x1a>
	bum_api_send_to( to, frame, BUM_GAME_PRINT_LEN );
 800b508:	4620      	mov	r0, r4
 800b50a:	231b      	movs	r3, #27
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7ff feb5 	bl	800b27c <bum_api_send_to>
	return 1;
}
 800b512:	2001      	movs	r0, #1
 800b514:	b008      	add	sp, #32
 800b516:	bd70      	pop	{r4, r5, r6, pc}
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b518:	2819      	cmp	r0, #25
 800b51a:	5411      	strb	r1, [r2, r0]
 800b51c:	4603      	mov	r3, r0
 800b51e:	d1ec      	bne.n	800b4fa <bum_game_print+0x14>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	f88d 301e 	strb.w	r3, [sp, #30]
 800b526:	e7ef      	b.n	800b508 <bum_game_print+0x22>

0800b528 <bum_process_referee>:

#define DATA_SIZE 100


void bum_process_referee()
{
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	b089      	sub	sp, #36	; 0x24
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b52e:	f001 feb3 	bl	800d298 <xbee_get_recv_event>
 800b532:	f000 fd2d 	bl	800bf90 <event_check>
 800b536:	b150      	cbz	r0, 800b54e <bum_process_referee+0x26>

  len = DATA_SIZE;
 800b538:	2364      	movs	r3, #100	; 0x64
 800b53a:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch ( xbee_recv_get_frame_type() )
 800b53e:	f001 feaf 	bl	800d2a0 <xbee_recv_get_frame_type>
 800b542:	2888      	cmp	r0, #136	; 0x88
 800b544:	d003      	beq.n	800b54e <bum_process_referee+0x26>
 800b546:	d805      	bhi.n	800b554 <bum_process_referee+0x2c>
 800b548:	2800      	cmp	r0, #0
 800b54a:	f040 80ca 	bne.w	800b6e2 <bum_process_referee+0x1ba>
		break;
	  }

  }

}
 800b54e:	b009      	add	sp, #36	; 0x24
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch ( xbee_recv_get_frame_type() )
 800b554:	288b      	cmp	r0, #139	; 0x8b
 800b556:	d0fa      	beq.n	800b54e <bum_process_referee+0x26>
 800b558:	2890      	cmp	r0, #144	; 0x90
 800b55a:	f040 80c2 	bne.w	800b6e2 <bum_process_referee+0x1ba>
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b55e:	4c64      	ldr	r4, [pc, #400]	; (800b6f0 <bum_process_referee+0x1c8>)
 800b560:	f10d 0216 	add.w	r2, sp, #22
 800b564:	4621      	mov	r1, r4
 800b566:	a806      	add	r0, sp, #24
 800b568:	f001 ff62 	bl	800d430 <xbee_recv>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0ee      	beq.n	800b54e <bum_process_referee+0x26>
 800b570:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0ea      	beq.n	800b54e <bum_process_referee+0x26>
			switch ( data[ 0 ] )
 800b578:	7822      	ldrb	r2, [r4, #0]
 800b57a:	2a01      	cmp	r2, #1
 800b57c:	d01e      	beq.n	800b5bc <bum_process_referee+0x94>
 800b57e:	2a02      	cmp	r2, #2
 800b580:	d1e5      	bne.n	800b54e <bum_process_referee+0x26>
				  if ( len != BUM_GAME_ACCELERATION_LEN ) return;
 800b582:	2b04      	cmp	r3, #4
 800b584:	d1e3      	bne.n	800b54e <bum_process_referee+0x26>
				  PlayerData *d = find_player_addr( from );
 800b586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b58a:	f7ff fed5 	bl	800b338 <find_player_addr>
				  if ( d )
 800b58e:	2800      	cmp	r0, #0
 800b590:	d0dd      	beq.n	800b54e <bum_process_referee+0x26>
					d->ax = data[ 1 ] - 100;
 800b592:	7861      	ldrb	r1, [r4, #1]
 800b594:	3964      	subs	r1, #100	; 0x64
 800b596:	b249      	sxtb	r1, r1
 800b598:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
					d->ay = data[ 2 ] - 100;
 800b59c:	78a2      	ldrb	r2, [r4, #2]
 800b59e:	3a64      	subs	r2, #100	; 0x64
 800b5a0:	b252      	sxtb	r2, r2
 800b5a2:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
					d->az = data[ 3 ] - 100;
 800b5a6:	78e3      	ldrb	r3, [r4, #3]
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b5a8:	4c52      	ldr	r4, [pc, #328]	; (800b6f4 <bum_process_referee+0x1cc>)
					d->az = data[ 3 ] - 100;
 800b5aa:	3b64      	subs	r3, #100	; 0x64
 800b5ac:	b25b      	sxtb	r3, r3
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b5ae:	68a4      	ldr	r4, [r4, #8]
					d->az = data[ 3 ] - 100;
 800b5b0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b5b4:	6864      	ldr	r4, [r4, #4]
 800b5b6:	7a00      	ldrb	r0, [r0, #8]
 800b5b8:	47a0      	blx	r4
 800b5ba:	e7c8      	b.n	800b54e <bum_process_referee+0x26>
				if ( len != BUM_GAME_REGISTER_LEN ) return;
 800b5bc:	2b07      	cmp	r3, #7
 800b5be:	d1c6      	bne.n	800b54e <bum_process_referee+0x26>
				if ( referee_state.game_started )
 800b5c0:	4e4d      	ldr	r6, [pc, #308]	; (800b6f8 <bum_process_referee+0x1d0>)
 800b5c2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d13b      	bne.n	800b642 <bum_process_referee+0x11a>
				else if ( referee_state.n_players == MAX_PLAYERS )
 800b5ca:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b5ce:	2b14      	cmp	r3, #20
 800b5d0:	d03a      	beq.n	800b648 <bum_process_referee+0x120>
 800b5d2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
				  d = find_player_addr( from );
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	f7ff fead 	bl	800b338 <find_player_addr>
				  if ( d )
 800b5de:	4604      	mov	r4, r0
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d134      	bne.n	800b64e <bum_process_referee+0x126>
					d = add_player( from, ( const char * )data + 1 );
 800b5e4:	4a45      	ldr	r2, [pc, #276]	; (800b6fc <bum_process_referee+0x1d4>)
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7ff febf 	bl	800b36c <add_player>
				{ result = 4; }
 800b5ee:	1c05      	adds	r5, r0, #0
					if ( d ) { result = 1; }
 800b5f0:	4604      	mov	r4, r0
				{ result = 4; }
 800b5f2:	bf18      	it	ne
 800b5f4:	2501      	movne	r5, #1
				bum_game_step( from, BUM_STEP_REGISTERED, result );
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5fe:	f7ff ff11 	bl	800b424 <bum_game_step>
				if ( result == 1 )
 800b602:	2d01      	cmp	r5, #1
 800b604:	d1a3      	bne.n	800b54e <bum_process_referee+0x26>
					bum_game_print( from, "WAIT..." );
 800b606:	4a3e      	ldr	r2, [pc, #248]	; (800b700 <bum_process_referee+0x1d8>)
 800b608:	4d3e      	ldr	r5, [pc, #248]	; (800b704 <bum_process_referee+0x1dc>)
 800b60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b60e:	f7ff ff6a 	bl	800b4e6 <bum_game_print>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b612:	2700      	movs	r7, #0
 800b614:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b618:	42bb      	cmp	r3, r7
 800b61a:	dc1a      	bgt.n	800b652 <bum_process_referee+0x12a>
 800b61c:	4d36      	ldr	r5, [pc, #216]	; (800b6f8 <bum_process_referee+0x1d0>)
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b61e:	2700      	movs	r7, #0
 800b620:	f104 0a09 	add.w	sl, r4, #9
 800b624:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b628:	7a22      	ldrb	r2, [r4, #8]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	42bb      	cmp	r3, r7
 800b62e:	f105 0540 	add.w	r5, r5, #64	; 0x40
 800b632:	dc35      	bgt.n	800b6a0 <bum_process_referee+0x178>
					bumper_state.referee->game_register( d->id, d->name );
 800b634:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <bum_process_referee+0x1cc>)
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	4651      	mov	r1, sl
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4610      	mov	r0, r2
 800b63e:	4798      	blx	r3
 800b640:	e785      	b.n	800b54e <bum_process_referee+0x26>
				PlayerData *d = 0;
 800b642:	2400      	movs	r4, #0
				{ result = 4; }
 800b644:	2504      	movs	r5, #4
 800b646:	e7d6      	b.n	800b5f6 <bum_process_referee+0xce>
				PlayerData *d = 0;
 800b648:	2400      	movs	r4, #0
				{ result = 3; }
 800b64a:	2503      	movs	r5, #3
 800b64c:	e7d3      	b.n	800b5f6 <bum_process_referee+0xce>
				  { result = 2; }
 800b64e:	2502      	movs	r5, #2
 800b650:	e7d1      	b.n	800b5f6 <bum_process_referee+0xce>
						bum_game_new_player( from, referee_state.player_data[ i ].id, referee_state.player_data[ i ].name, referee_state.player_data[ i ].color );
 800b652:	f8d5 302f 	ldr.w	r3, [r5, #47]	; 0x2f
 800b656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b660:	462b      	mov	r3, r5
 800b662:	f7ff feee 	bl	800b442 <bum_game_new_player>
						bum_game_player_move( from, referee_state.player_data[ i ].id, ( uint16_t )referee_state.player_data[ i ].Px, ( uint16_t )referee_state.player_data[ i ].Py, referee_state.player_data[ i ].s );
 800b666:	1deb      	adds	r3, r5, #7
 800b668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b66c:	f7f5 fa96 	bl	8000b9c <__aeabi_d2uiz>
 800b670:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800b674:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f105 030f 	add.w	r3, r5, #15
 800b67e:	fa1f f980 	uxth.w	r9, r0
 800b682:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b686:	f7f5 fa89 	bl	8000b9c <__aeabi_d2uiz>
 800b68a:	b280      	uxth	r0, r0
 800b68c:	9000      	str	r0, [sp, #0]
 800b68e:	464b      	mov	r3, r9
 800b690:	4642      	mov	r2, r8
 800b692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b696:	f7ff ff06 	bl	800b4a6 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b69a:	3701      	adds	r7, #1
 800b69c:	3540      	adds	r5, #64	; 0x40
 800b69e:	e7b9      	b.n	800b614 <bum_process_referee+0xec>
						bum_game_new_player( referee_state.player_data[ i ].addr, d->id, d->name, d->color );
 800b6a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	e955 0110 	ldrd	r0, r1, [r5, #-64]	; 0x40
 800b6a8:	4653      	mov	r3, sl
 800b6aa:	f7ff feca 	bl	800b442 <bum_game_new_player>
						bum_game_player_move( referee_state.player_data[ i ].addr, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b6ae:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800b6b2:	f7f5 fa73 	bl	8000b9c <__aeabi_d2uiz>
 800b6b6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800b6b8:	f894 b008 	ldrb.w	fp, [r4, #8]
 800b6bc:	e955 8910 	ldrd	r8, r9, [r5, #-64]	; 0x40
 800b6c0:	9201      	str	r2, [sp, #4]
 800b6c2:	b283      	uxth	r3, r0
 800b6c4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	f7f5 fa67 	bl	8000b9c <__aeabi_d2uiz>
 800b6ce:	b280      	uxth	r0, r0
 800b6d0:	9000      	str	r0, [sp, #0]
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	465a      	mov	r2, fp
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	4649      	mov	r1, r9
 800b6da:	f7ff fee4 	bl	800b4a6 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b6de:	3701      	adds	r7, #1
 800b6e0:	e7a0      	b.n	800b624 <bum_process_referee+0xfc>
		xbee_recv_full( data, &len );
 800b6e2:	f10d 0116 	add.w	r1, sp, #22
 800b6e6:	4802      	ldr	r0, [pc, #8]	; (800b6f0 <bum_process_referee+0x1c8>)
 800b6e8:	f001 fe98 	bl	800d41c <xbee_recv_full>
		break;
 800b6ec:	e72f      	b.n	800b54e <bum_process_referee+0x26>
 800b6ee:	bf00      	nop
 800b6f0:	20000df8 	.word	0x20000df8
 800b6f4:	20000de8 	.word	0x20000de8
 800b6f8:	20005070 	.word	0x20005070
 800b6fc:	20000df9 	.word	0x20000df9
 800b700:	08010c26 	.word	0x08010c26
 800b704:	20005079 	.word	0x20005079

0800b708 <bum_referee_calculate>:

void bum_referee_calculate( uint16_t dt )
{
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( !referee_state.game_started ) return;
 800b70c:	4b76      	ldr	r3, [pc, #472]	; (800b8e8 <bum_referee_calculate+0x1e0>)
{
 800b70e:	b0af      	sub	sp, #188	; 0xbc
  if ( !referee_state.game_started ) return;
 800b710:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
{
 800b714:	9025      	str	r0, [sp, #148]	; 0x94
 800b716:	9324      	str	r3, [sp, #144]	; 0x90
  if ( !referee_state.game_started ) return;
 800b718:	b352      	cbz	r2, 800b770 <bum_referee_calculate+0x68>

  int i, j;
  PlayerData *d;

  int n_playing = 0;
 800b71a:	f04f 0b00 	mov.w	fp, #0
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b71e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800b722:	465b      	mov	r3, fp
 800b724:	429a      	cmp	r2, r3
 800b726:	dc26      	bgt.n	800b776 <bum_referee_calculate+0x6e>
	d = referee_state.player_data + i;

	if ( d->playing ) n_playing++;
  }

  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b728:	2300      	movs	r3, #0
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b72a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800b8e8 <bum_referee_calculate+0x1e0>
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b72e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b730:	4a6d      	ldr	r2, [pc, #436]	; (800b8e8 <bum_referee_calculate+0x1e0>)
 800b732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b734:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
 800b738:	9311      	str	r3, [sp, #68]	; 0x44
 800b73a:	428b      	cmp	r3, r1
 800b73c:	dc25      	bgt.n	800b78a <bum_referee_calculate+0x82>
	}

  }


  if ( n_playing == 0 )
 800b73e:	f1bb 0f00 	cmp.w	fp, #0
 800b742:	f040 8213 	bne.w	800bb6c <bum_referee_calculate+0x464>
  {
	  // No winner
	  bum_game_print( BUM_TO_ALL, "No winner..." );
 800b746:	4a69      	ldr	r2, [pc, #420]	; (800b8ec <bum_referee_calculate+0x1e4>)
	if ( d )
	{ bum_game_step( BUM_TO_ALL, BUM_STEP_RESULT, d->id ); }

	char buffer[ BUM_MSG_SIZE ];
	sprintf( buffer, "The winner is %s", d->name );
	bum_game_print( BUM_TO_ALL, buffer );
 800b748:	f04f 31ff 	mov.w	r1, #4294967295
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	f7ff fec9 	bl	800b4e6 <bum_game_print>

	bum_game_step( BUM_TO_ALL, BUM_STEP_END, 0 );
 800b754:	2300      	movs	r3, #0
 800b756:	2203      	movs	r2, #3
 800b758:	f04f 31ff 	mov.w	r1, #4294967295
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	f7ff fe60 	bl	800b424 <bum_game_step>
	bumper_state.referee->game_over();
 800b764:	4b62      	ldr	r3, [pc, #392]	; (800b8f0 <bum_referee_calculate+0x1e8>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	4798      	blx	r3

    bums_referee_reset();
 800b76c:	f7ff fe36 	bl	800b3dc <bums_referee_reset>
#endif
  }

}
 800b770:	b02f      	add	sp, #188	; 0xbc
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( d->playing ) n_playing++;
 800b776:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b778:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 800b77c:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800b780:	b109      	cbz	r1, 800b786 <bum_referee_calculate+0x7e>
 800b782:	f10b 0b01 	add.w	fp, fp, #1
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b786:	3301      	adds	r3, #1
 800b788:	e7cc      	b.n	800b724 <bum_referee_calculate+0x1c>
	if ( !d->playing ) continue;
 800b78a:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 8096 	beq.w	800b8c0 <bum_referee_calculate+0x1b8>
	double sdt = ( ( double )dt );
 800b794:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b796:	f7f4 fec5 	bl	8000524 <__aeabi_ui2d>
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
	d->Vx += ( ( double )d->ax ) * sdt * Vfactor;
 800b79e:	f99a 0034 	ldrsb.w	r0, [sl, #52]	; 0x34
 800b7a2:	f7f4 fecf 	bl	8000544 <__aeabi_i2d>
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	f7f4 ff35 	bl	8000618 <__aeabi_dmul>
 800b7ae:	a348      	add	r3, pc, #288	; (adr r3, 800b8d0 <bum_referee_calculate+0x1c8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 ff30 	bl	8000618 <__aeabi_dmul>
 800b7b8:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800b7bc:	f7f4 fd76 	bl	80002ac <__adddf3>
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	4689      	mov	r9, r1
 800b7c4:	e9ca 8908 	strd	r8, r9, [sl, #32]
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b7c8:	f99a 0035 	ldrsb.w	r0, [sl, #53]	; 0x35
 800b7cc:	f7f4 feba 	bl	8000544 <__aeabi_i2d>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	f7f4 ff20 	bl	8000618 <__aeabi_dmul>
 800b7d8:	a33d      	add	r3, pc, #244	; (adr r3, 800b8d0 <bum_referee_calculate+0x1c8>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f4 ff1b 	bl	8000618 <__aeabi_dmul>
 800b7e2:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800b7e6:	f7f4 fd61 	bl	80002ac <__adddf3>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
	d->Px += d->Vx * sdt * Pfactor;
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	462b      	mov	r3, r5
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b7f2:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
	d->Px += d->Vx * sdt * Pfactor;
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	f7f4 ff0d 	bl	8000618 <__aeabi_dmul>
 800b7fe:	a336      	add	r3, pc, #216	; (adr r3, 800b8d8 <bum_referee_calculate+0x1d0>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 ff08 	bl	8000618 <__aeabi_dmul>
 800b808:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 800b80c:	f7f4 fd4e 	bl	80002ac <__adddf3>
	d->Py += d->Vy * sdt * Pfactor;
 800b810:	4622      	mov	r2, r4
	d->Px += d->Vx * sdt * Pfactor;
 800b812:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b816:	e9ca 0104 	strd	r0, r1, [sl, #16]
	d->Py += d->Vy * sdt * Pfactor;
 800b81a:	462b      	mov	r3, r5
 800b81c:	4630      	mov	r0, r6
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f4 fefa 	bl	8000618 <__aeabi_dmul>
 800b824:	a32c      	add	r3, pc, #176	; (adr r3, 800b8d8 <bum_referee_calculate+0x1d0>)
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f7f4 fef5 	bl	8000618 <__aeabi_dmul>
 800b82e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800b832:	f7f4 fd3b 	bl	80002ac <__adddf3>
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b836:	2200      	movs	r2, #0
	d->Py += d->Vy * sdt * Pfactor;
 800b838:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b83c:	e9ca 0106 	strd	r0, r1, [sl, #24]
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b840:	2300      	movs	r3, #0
 800b842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b846:	f7f5 f959 	bl	8000afc <__aeabi_dcmplt>
 800b84a:	b9a8      	cbnz	r0, 800b878 <bum_referee_calculate+0x170>
 800b84c:	2200      	movs	r2, #0
 800b84e:	4b29      	ldr	r3, [pc, #164]	; (800b8f4 <bum_referee_calculate+0x1ec>)
 800b850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b854:	f7f5 f970 	bl	8000b38 <__aeabi_dcmpgt>
 800b858:	b970      	cbnz	r0, 800b878 <bum_referee_calculate+0x170>
 800b85a:	2200      	movs	r2, #0
 800b85c:	2300      	movs	r3, #0
 800b85e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b862:	f7f5 f94b 	bl	8000afc <__aeabi_dcmplt>
 800b866:	b938      	cbnz	r0, 800b878 <bum_referee_calculate+0x170>
 800b868:	2200      	movs	r2, #0
 800b86a:	4b22      	ldr	r3, [pc, #136]	; (800b8f4 <bum_referee_calculate+0x1ec>)
 800b86c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b870:	f7f5 f962 	bl	8000b38 <__aeabi_dcmpgt>
 800b874:	2800      	cmp	r0, #0
 800b876:	d03f      	beq.n	800b8f8 <bum_referee_calculate+0x1f0>
		d->Py = 50 + ( n_playing * d->r );
 800b878:	f8ba 5032 	ldrh.w	r5, [sl, #50]	; 0x32
		d->Px = 0; // - d->r / 2;
 800b87c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800b8e0 <bum_referee_calculate+0x1d8>
		d->Py = 50 + ( n_playing * d->r );
 800b880:	fb0b f405 	mul.w	r4, fp, r5
		d->playing = 0;
 800b884:	2600      	movs	r6, #0
		d->Py = 50 + ( n_playing * d->r );
 800b886:	3432      	adds	r4, #50	; 0x32
 800b888:	4620      	mov	r0, r4
		d->playing = 0;
 800b88a:	f88a 603c 	strb.w	r6, [sl, #60]	; 0x3c
		d->Px = 0; // - d->r / 2;
 800b88e:	ed8a 7b04 	vstr	d7, [sl, #16]
		d->Py = 50 + ( n_playing * d->r );
 800b892:	f7f4 fe57 	bl	8000544 <__aeabi_i2d>
 800b896:	e9ca 0106 	strd	r0, r1, [sl, #24]
		d->s = 400;
 800b89a:	f44f 73c8 	mov.w	r3, #400	; 0x190
		d->r /= 2;
 800b89e:	086d      	lsrs	r5, r5, #1
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b8a0:	b2a4      	uxth	r4, r4
 800b8a2:	f89a 2008 	ldrb.w	r2, [sl, #8]
		d->s = 400;
 800b8a6:	f8aa 3030 	strh.w	r3, [sl, #48]	; 0x30
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b8aa:	9301      	str	r3, [sp, #4]
		d->r /= 2;
 800b8ac:	f8aa 5032 	strh.w	r5, [sl, #50]	; 0x32
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b8b0:	9400      	str	r4, [sp, #0]
 800b8b2:	4633      	mov	r3, r6
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b8bc:	f7ff fdf3 	bl	800b4a6 <bum_game_player_move>
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8c6:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
 800b8ca:	e731      	b.n	800b730 <bum_referee_calculate+0x28>
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	eb1c432d 	.word	0xeb1c432d
 800b8d4:	3f2a36e2 	.word	0x3f2a36e2
 800b8d8:	bc6a7efa 	.word	0xbc6a7efa
 800b8dc:	3f489374 	.word	0x3f489374
	...
 800b8e8:	20005070 	.word	0x20005070
 800b8ec:	08010c2e 	.word	0x08010c2e
 800b8f0:	20000de8 	.word	0x20000de8
 800b8f4:	408f4000 	.word	0x408f4000
 800b8f8:	9c24      	ldr	r4, [sp, #144]	; 0x90
		  for ( j = 0 ; j < referee_state.n_players ; j++ )
 800b8fa:	9010      	str	r0, [sp, #64]	; 0x40
			  if ( i == j ) continue;
 800b8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b900:	4293      	cmp	r3, r2
 800b902:	f000 8116 	beq.w	800bb32 <bum_referee_calculate+0x42a>
  			  if ( !e->playing ) continue;
 800b906:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 8111 	beq.w	800bb32 <bum_referee_calculate+0x42a>
  			  int16_t dx = d->Px - e->Px;
 800b910:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800b914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b918:	f7f4 fcc6 	bl	80002a8 <__aeabi_dsub>
 800b91c:	f7f5 f916 	bl	8000b4c <__aeabi_d2iz>
  			  int16_t dy = d->Py - e->Py;
 800b920:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  			  int16_t dx = d->Px - e->Px;
 800b924:	b206      	sxth	r6, r0
  			  int16_t dy = d->Py - e->Py;
 800b926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92a:	f7f4 fcbd 	bl	80002a8 <__aeabi_dsub>
 800b92e:	f7f5 f90d 	bl	8000b4c <__aeabi_d2iz>
  			  int32_t DR = d->r + e->r;
 800b932:	f8ba 3032 	ldrh.w	r3, [sl, #50]	; 0x32
 800b936:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  			  int16_t dy = d->Py - e->Py;
 800b938:	b200      	sxth	r0, r0
  			  int32_t D = dx * dx + dy * dy;
 800b93a:	fb06 f806 	mul.w	r8, r6, r6
 800b93e:	fb00 f900 	mul.w	r9, r0, r0
  			  int32_t DR = d->r + e->r;
 800b942:	4413      	add	r3, r2
  			  int32_t D = dx * dx + dy * dy;
 800b944:	eb08 0509 	add.w	r5, r8, r9
  			  DR = DR * DR;
 800b948:	435b      	muls	r3, r3
  			  if ( D <= DR )
 800b94a:	429d      	cmp	r5, r3
 800b94c:	f300 80f1 	bgt.w	800bb32 <bum_referee_calculate+0x42a>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800b950:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
  				  if ( D == 0 ) D = 1;
 800b954:	2d00      	cmp	r5, #0
 800b956:	bf08      	it	eq
 800b958:	2501      	moveq	r5, #1
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800b95a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800b95e:	f7f4 fdf1 	bl	8000544 <__aeabi_i2d>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b96a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b96e:	f7f4 fe53 	bl	8000618 <__aeabi_dmul>
 800b972:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800b976:	4630      	mov	r0, r6
 800b978:	f7f4 fde4 	bl	8000544 <__aeabi_i2d>
 800b97c:	4606      	mov	r6, r0
 800b97e:	460f      	mov	r7, r1
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800b988:	f7f4 fe46 	bl	8000618 <__aeabi_dmul>
 800b98c:	ed9a 7b0a 	vldr	d7, [sl, #40]	; 0x28
 800b990:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800b994:	ec53 2b17 	vmov	r2, r3, d7
 800b998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b99c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800b9a0:	f7f4 fe3a 	bl	8000618 <__aeabi_dmul>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f4 fe32 	bl	8000618 <__aeabi_dmul>
 800b9b4:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800b9b8:	4648      	mov	r0, r9
 800b9ba:	f7f4 fdc3 	bl	8000544 <__aeabi_i2d>
 800b9be:	ed9a 7b08 	vldr	d7, [sl, #32]
 800b9c2:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b9cc:	f7f4 fdba 	bl	8000544 <__aeabi_i2d>
 800b9d0:	ed94 7b08 	vldr	d7, [r4, #32]
 800b9d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9d8:	4628      	mov	r0, r5
 800b9da:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b9de:	f7f4 fdb1 	bl	8000544 <__aeabi_i2d>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800b9e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800b9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ee:	f7f4 fe13 	bl	8000618 <__aeabi_dmul>
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	463b      	mov	r3, r7
 800b9f6:	f7f4 fe0f 	bl	8000618 <__aeabi_dmul>
 800b9fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b9fe:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800ba02:	4630      	mov	r0, r6
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f4 fe07 	bl	8000618 <__aeabi_dmul>
 800ba0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba0e:	f7f4 fe03 	bl	8000618 <__aeabi_dmul>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba12:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba16:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba1a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800ba1e:	f7f4 fc43 	bl	80002a8 <__aeabi_dsub>
 800ba22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba26:	4606      	mov	r6, r0
 800ba28:	460f      	mov	r7, r1
 800ba2a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800ba2e:	f7f4 fdf3 	bl	8000618 <__aeabi_dmul>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 fc37 	bl	80002ac <__adddf3>
 800ba3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ba42:	4606      	mov	r6, r0
 800ba44:	460f      	mov	r7, r1
 800ba46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba4a:	f7f4 fde5 	bl	8000618 <__aeabi_dmul>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	4630      	mov	r0, r6
 800ba54:	4639      	mov	r1, r7
 800ba56:	f7f4 fc29 	bl	80002ac <__adddf3>
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	464b      	mov	r3, r9
 800ba5e:	f7f4 ff05 	bl	800086c <__aeabi_ddiv>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba62:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
				d->Vx = x1;
 800ba66:	e9ca 0108 	strd	r0, r1, [sl, #32]
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba6e:	f7f4 fdd3 	bl	8000618 <__aeabi_dmul>
 800ba72:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800ba76:	f7f4 fc19 	bl	80002ac <__adddf3>
 800ba7a:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800ba7e:	f7f4 fc13 	bl	80002a8 <__aeabi_dsub>
 800ba82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800ba8e:	f7f4 fdc3 	bl	8000618 <__aeabi_dmul>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4630      	mov	r0, r6
 800ba98:	4639      	mov	r1, r7
 800ba9a:	f7f4 fc07 	bl	80002ac <__adddf3>
 800ba9e:	4642      	mov	r2, r8
 800baa0:	464b      	mov	r3, r9
 800baa2:	f7f4 fee3 	bl	800086c <__aeabi_ddiv>
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800baa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
				d->Vy = y1;
 800baaa:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800baae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bab2:	f7f4 fdb1 	bl	8000618 <__aeabi_dmul>
 800bab6:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800baba:	f7f4 fbf5 	bl	80002a8 <__aeabi_dsub>
 800babe:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800bac2:	f7f4 fbf3 	bl	80002ac <__adddf3>
 800bac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800bad2:	f7f4 fda1 	bl	8000618 <__aeabi_dmul>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4630      	mov	r0, r6
 800badc:	4639      	mov	r1, r7
 800bade:	f7f4 fbe5 	bl	80002ac <__adddf3>
 800bae2:	4642      	mov	r2, r8
 800bae4:	464b      	mov	r3, r9
 800bae6:	f7f4 fec1 	bl	800086c <__aeabi_ddiv>
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800baea:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
				e->Vx = x2;
 800baee:	e9c4 0108 	strd	r0, r1, [r4, #32]
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800baf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf6:	f7f4 fd8f 	bl	8000618 <__aeabi_dmul>
 800bafa:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800bafe:	f7f4 fbd5 	bl	80002ac <__adddf3>
 800bb02:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800bb06:	f7f4 fbcf 	bl	80002a8 <__aeabi_dsub>
 800bb0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460f      	mov	r7, r1
 800bb12:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb16:	f7f4 fd7f 	bl	8000618 <__aeabi_dmul>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 fbc3 	bl	80002ac <__adddf3>
 800bb26:	4642      	mov	r2, r8
 800bb28:	464b      	mov	r3, r9
 800bb2a:	f7f4 fe9f 	bl	800086c <__aeabi_ddiv>
				e->Vy = y2;
 800bb2e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		  for ( j = 0 ; j < referee_state.n_players ; j++ )
 800bb32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb34:	3301      	adds	r3, #1
 800bb36:	9310      	str	r3, [sp, #64]	; 0x40
 800bb38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800bb42:	f47f aedb 	bne.w	800b8fc <bum_referee_calculate+0x1f4>
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800bb46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb4a:	f7f5 f827 	bl	8000b9c <__aeabi_d2uiz>
 800bb4e:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	b285      	uxth	r5, r0
 800bb56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb5a:	f7f5 f81f 	bl	8000b9c <__aeabi_d2uiz>
 800bb5e:	f89a 4008 	ldrb.w	r4, [sl, #8]
 800bb62:	b280      	uxth	r0, r0
 800bb64:	9000      	str	r0, [sp, #0]
 800bb66:	462b      	mov	r3, r5
 800bb68:	4622      	mov	r2, r4
 800bb6a:	e6a3      	b.n	800b8b4 <bum_referee_calculate+0x1ac>
  else  if ( n_playing == 1 )
 800bb6c:	f1bb 0f01 	cmp.w	fp, #1
 800bb70:	f47f adfe 	bne.w	800b770 <bum_referee_calculate+0x68>
	  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800bb74:	2300      	movs	r3, #0
 800bb76:	e00e      	b.n	800bb96 <bum_referee_calculate+0x48e>
		if ( referee_state.player_data[ i ].playing )
 800bb78:	eb02 1483 	add.w	r4, r2, r3, lsl #6
 800bb7c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800bb80:	b141      	cbz	r1, 800bb94 <bum_referee_calculate+0x48c>
	if ( d )
 800bb82:	b96c      	cbnz	r4, 800bba0 <bum_referee_calculate+0x498>
	sprintf( buffer, "The winner is %s", d->name );
 800bb84:	f104 0209 	add.w	r2, r4, #9
 800bb88:	490a      	ldr	r1, [pc, #40]	; (800bbb4 <bum_referee_calculate+0x4ac>)
 800bb8a:	a827      	add	r0, sp, #156	; 0x9c
 800bb8c:	f002 f812 	bl	800dbb4 <siprintf>
	bum_game_print( BUM_TO_ALL, buffer );
 800bb90:	aa27      	add	r2, sp, #156	; 0x9c
 800bb92:	e5d9      	b.n	800b748 <bum_referee_calculate+0x40>
	  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800bb94:	3301      	adds	r3, #1
 800bb96:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb98:	4299      	cmp	r1, r3
 800bb9a:	dced      	bgt.n	800bb78 <bum_referee_calculate+0x470>
	  d = 0;
 800bb9c:	2400      	movs	r4, #0
 800bb9e:	e7f1      	b.n	800bb84 <bum_referee_calculate+0x47c>
	{ bum_game_step( BUM_TO_ALL, BUM_STEP_RESULT, d->id ); }
 800bba0:	7a23      	ldrb	r3, [r4, #8]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f04f 31ff 	mov.w	r1, #4294967295
 800bba8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbac:	f7ff fc3a 	bl	800b424 <bum_game_step>
 800bbb0:	e7e8      	b.n	800bb84 <bum_referee_calculate+0x47c>
 800bbb2:	bf00      	nop
 800bbb4:	08010c3b 	.word	0x08010c3b

0800bbb8 <bum_referee_start_game>:

void bum_referee_start_game()
{
  if ( referee_state.game_started ) return;
 800bbb8:	4b0c      	ldr	r3, [pc, #48]	; (800bbec <bum_referee_start_game+0x34>)
{
 800bbba:	b570      	push	{r4, r5, r6, lr}
  if ( referee_state.game_started ) return;
 800bbbc:	f8d3 5520 	ldr.w	r5, [r3, #1312]	; 0x520
 800bbc0:	b99d      	cbnz	r5, 800bbea <bum_referee_start_game+0x32>

  referee_state.game_started = 1;
 800bbc2:	2401      	movs	r4, #1

  bum_game_print( BUM_TO_ALL, "START !" );
 800bbc4:	4a0a      	ldr	r2, [pc, #40]	; (800bbf0 <bum_referee_start_game+0x38>)
  referee_state.game_started = 1;
 800bbc6:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
  bum_game_print( BUM_TO_ALL, "START !" );
 800bbca:	f04f 31ff 	mov.w	r1, #4294967295
 800bbce:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd2:	f7ff fc88 	bl	800b4e6 <bum_game_print>

  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	4622      	mov	r2, r4
 800bbda:	f04f 30ff 	mov.w	r0, #4294967295
 800bbde:	f04f 31ff 	mov.w	r1, #4294967295
}
 800bbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bbe6:	f7ff bc1d 	b.w	800b424 <bum_game_step>
}
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	20005070 	.word	0x20005070
 800bbf0:	08010c4c 	.word	0x08010c4c

0800bbf4 <bum_referee_get_n_players>:

int bum_referee_get_n_players()
{
	return referee_state.n_players;
}
 800bbf4:	4b01      	ldr	r3, [pc, #4]	; (800bbfc <bum_referee_get_n_players+0x8>)
 800bbf6:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800bbfa:	4770      	bx	lr
 800bbfc:	20005070 	.word	0x20005070

0800bc00 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bc04:	4a25      	ldr	r2, [pc, #148]	; (800bc9c <low_level_output+0x9c>)
 800bc06:	9200      	str	r2, [sp, #0]
 800bc08:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800bc0a:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bc0e:	68b3      	ldr	r3, [r6, #8]
{
 800bc10:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800bc12:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc14:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800bc18:	b92c      	cbnz	r4, 800bc26 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	481f      	ldr	r0, [pc, #124]	; (800bc9c <low_level_output+0x9c>)
 800bc1e:	f7f5 fd75 	bl	800170c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800bc22:	4620      	mov	r0, r4
 800bc24:	e004      	b.n	800bc30 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc26:	6832      	ldr	r2, [r6, #0]
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	da11      	bge.n	800bc50 <low_level_output+0x50>
        errval = ERR_USE;
 800bc2c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bc30:	9b00      	ldr	r3, [sp, #0]
 800bc32:	f241 0214 	movw	r2, #4116	; 0x1014
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	5899      	ldr	r1, [r3, r2]
 800bc3a:	0689      	lsls	r1, r1, #26
 800bc3c:	d505      	bpl.n	800bc4a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bc3e:	2120      	movs	r1, #32
 800bc40:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bc42:	f241 0204 	movw	r2, #4100	; 0x1004
 800bc46:	2100      	movs	r1, #0
 800bc48:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800bc50:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc54:	4645      	mov	r5, r8
      payloadoffset = 0;
 800bc56:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc5a:	eb05 0809 	add.w	r8, r5, r9
 800bc5e:	6861      	ldr	r1, [r4, #4]
 800bc60:	45d8      	cmp	r8, fp
 800bc62:	eb03 0005 	add.w	r0, r3, r5
 800bc66:	4451      	add	r1, sl
 800bc68:	d807      	bhi.n	800bc7a <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bc6a:	464a      	mov	r2, r9
 800bc6c:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800bc6e:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bc70:	f001 febd 	bl	800d9ee <memcpy>
  for(q = p; q != NULL; q = q->next)
 800bc74:	6824      	ldr	r4, [r4, #0]
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	e7ce      	b.n	800bc18 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bc7a:	ebab 0505 	sub.w	r5, fp, r5
 800bc7e:	462a      	mov	r2, r5
 800bc80:	f001 feb5 	bl	800d9ee <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bc84:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc86:	6833      	ldr	r3, [r6, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	dbcf      	blt.n	800bc2c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc8c:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc8e:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bc90:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bc92:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800bc96:	2500      	movs	r5, #0
 800bc98:	e7df      	b.n	800bc5a <low_level_output+0x5a>
 800bc9a:	bf00      	nop
 800bc9c:	20006e68 	.word	0x20006e68

0800bca0 <HAL_ETH_MspInit>:
{
 800bca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca2:	4604      	mov	r4, r0
 800bca4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bca6:	2214      	movs	r2, #20
 800bca8:	2100      	movs	r1, #0
 800bcaa:	a807      	add	r0, sp, #28
 800bcac:	f001 feaa 	bl	800da04 <memset>
  if(ethHandle->Instance==ETH)
 800bcb0:	6822      	ldr	r2, [r4, #0]
 800bcb2:	4b32      	ldr	r3, [pc, #200]	; (800bd7c <HAL_ETH_MspInit+0xdc>)
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d15f      	bne.n	800bd78 <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800bcb8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800bcbc:	2400      	movs	r4, #0
 800bcbe:	9401      	str	r4, [sp, #4]
 800bcc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bcc2:	482f      	ldr	r0, [pc, #188]	; (800bd80 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800bcc4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800bcc8:	631a      	str	r2, [r3, #48]	; 0x30
 800bcca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bccc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800bcd0:	9201      	str	r2, [sp, #4]
 800bcd2:	9a01      	ldr	r2, [sp, #4]
 800bcd4:	9402      	str	r4, [sp, #8]
 800bcd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcd8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bcdc:	631a      	str	r2, [r3, #48]	; 0x30
 800bcde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bce0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800bce4:	9202      	str	r2, [sp, #8]
 800bce6:	9a02      	ldr	r2, [sp, #8]
 800bce8:	9403      	str	r4, [sp, #12]
 800bcea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bcf0:	631a      	str	r2, [r3, #48]	; 0x30
 800bcf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800bcf8:	9203      	str	r2, [sp, #12]
 800bcfa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bcfc:	9404      	str	r4, [sp, #16]
 800bcfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd00:	f042 0204 	orr.w	r2, r2, #4
 800bd04:	631a      	str	r2, [r3, #48]	; 0x30
 800bd06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd08:	f002 0204 	and.w	r2, r2, #4
 800bd0c:	9204      	str	r2, [sp, #16]
 800bd0e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd10:	9405      	str	r4, [sp, #20]
 800bd12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd14:	f042 0201 	orr.w	r2, r2, #1
 800bd18:	631a      	str	r2, [r3, #48]	; 0x30
 800bd1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd1c:	f002 0201 	and.w	r2, r2, #1
 800bd20:	9205      	str	r2, [sp, #20]
 800bd22:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd24:	9406      	str	r4, [sp, #24]
 800bd26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd28:	f042 0202 	orr.w	r2, r2, #2
 800bd2c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	f003 0302 	and.w	r3, r3, #2
 800bd34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd36:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd38:	2603      	movs	r6, #3
 800bd3a:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd3c:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd3e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd40:	2332      	movs	r3, #50	; 0x32
 800bd42:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd46:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd4a:	f7f5 ff3b 	bl	8001bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bd4e:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd50:	a907      	add	r1, sp, #28
 800bd52:	480c      	ldr	r0, [pc, #48]	; (800bd84 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd54:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd56:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd5a:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd5e:	f7f5 ff31 	bl	8001bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bd62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd66:	a907      	add	r1, sp, #28
 800bd68:	4807      	ldr	r0, [pc, #28]	; (800bd88 <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd6a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd6c:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd70:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd74:	f7f5 ff26 	bl	8001bc4 <HAL_GPIO_Init>
}
 800bd78:	b00d      	add	sp, #52	; 0x34
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd7c:	40028000 	.word	0x40028000
 800bd80:	40020800 	.word	0x40020800
 800bd84:	40020000 	.word	0x40020000
 800bd88:	40020400 	.word	0x40020400

0800bd8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bd90:	4c34      	ldr	r4, [pc, #208]	; (800be64 <ethernetif_input+0xd8>)
{
 800bd92:	4682      	mov	sl, r0
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7f5 fd2d 	bl	80017f4 <HAL_ETH_GetReceivedFrame>
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d15e      	bne.n	800be5e <ethernetif_input+0xd2>
  len = heth.RxFrameInfos.length;
 800bda0:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 800bda2:	2900      	cmp	r1, #0
 800bda4:	d052      	beq.n	800be4c <ethernetif_input+0xc0>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bda6:	2203      	movs	r2, #3
 800bda8:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bdaa:	6c26      	ldr	r6, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bdac:	f7fa fa66 	bl	800627c <pbuf_alloc>
  if (p != NULL)
 800bdb0:	4607      	mov	r7, r0
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d04a      	beq.n	800be4c <ethernetif_input+0xc0>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bdb6:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bdba:	9600      	str	r6, [sp, #0]
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bdbc:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bdbe:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800bdc2:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800bdc6:	462e      	mov	r6, r5
      payloadoffset = 0;
 800bdc8:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bdca:	18b5      	adds	r5, r6, r2
 800bdcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bdd0:	9900      	ldr	r1, [sp, #0]
 800bdd2:	455d      	cmp	r5, fp
 800bdd4:	4418      	add	r0, r3
 800bdd6:	4431      	add	r1, r6
 800bdd8:	d827      	bhi.n	800be2a <ethernetif_input+0x9e>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bdda:	f001 fe08 	bl	800d9ee <memcpy>
    for(q = p; q != NULL; q = q->next)
 800bdde:	f8d8 8000 	ldr.w	r8, [r8]
 800bde2:	f1b8 0f00 	cmp.w	r8, #0
 800bde6:	d1ec      	bne.n	800bdc2 <ethernetif_input+0x36>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bde8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bdea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bdec:	2200      	movs	r2, #0
 800bdee:	4282      	cmp	r2, r0
 800bdf0:	d12e      	bne.n	800be50 <ethernetif_input+0xc4>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800bdf2:	f241 0114 	movw	r1, #4116	; 0x1014
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	5858      	ldr	r0, [r3, r1]
 800bdfa:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bdfc:	bf42      	ittt	mi
 800bdfe:	2080      	movmi	r0, #128	; 0x80
 800be00:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 800be02:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 800be0c:	bf48      	it	mi
 800be0e:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800be10:	b32f      	cbz	r7, 800be5e <ethernetif_input+0xd2>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800be12:	f8da 3010 	ldr.w	r3, [sl, #16]
 800be16:	4651      	mov	r1, sl
 800be18:	4638      	mov	r0, r7
 800be1a:	4798      	blx	r3
    
  if (err != ERR_OK)
 800be1c:	b1f8      	cbz	r0, 800be5e <ethernetif_input+0xd2>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800be1e:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800be20:	b003      	add	sp, #12
 800be22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800be26:	f7fa b9c7 	b.w	80061b8 <pbuf_free>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800be2a:	ebab 0606 	sub.w	r6, fp, r6
 800be2e:	4632      	mov	r2, r6
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	f001 fddc 	bl	800d9ee <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be36:	f8d9 900c 	ldr.w	r9, [r9, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800be3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800be3e:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800be40:	9b01      	ldr	r3, [sp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800be42:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800be46:	4433      	add	r3, r6
        bufferoffset = 0;
 800be48:	2600      	movs	r6, #0
 800be4a:	e7be      	b.n	800bdca <ethernetif_input+0x3e>
  struct pbuf *p = NULL;
 800be4c:	2700      	movs	r7, #0
 800be4e:	e7cb      	b.n	800bde8 <ethernetif_input+0x5c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800be50:	6819      	ldr	r1, [r3, #0]
 800be52:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800be56:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be58:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be5a:	3201      	adds	r2, #1
 800be5c:	e7c7      	b.n	800bdee <ethernetif_input+0x62>
}
 800be5e:	b003      	add	sp, #12
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	20006e68 	.word	0x20006e68

0800be68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be68:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be6a:	4604      	mov	r4, r0
{
 800be6c:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be6e:	b930      	cbnz	r0, 800be7e <ethernetif_init+0x16>
 800be70:	4b37      	ldr	r3, [pc, #220]	; (800bf50 <ethernetif_init+0xe8>)
 800be72:	4938      	ldr	r1, [pc, #224]	; (800bf54 <ethernetif_init+0xec>)
 800be74:	4838      	ldr	r0, [pc, #224]	; (800bf58 <ethernetif_init+0xf0>)
 800be76:	f240 2206 	movw	r2, #518	; 0x206
 800be7a:	f001 fe73 	bl	800db64 <iprintf>
  heth.Instance = ETH;
 800be7e:	4d37      	ldr	r5, [pc, #220]	; (800bf5c <ethernetif_init+0xf4>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800be80:	4937      	ldr	r1, [pc, #220]	; (800bf60 <ethernetif_init+0xf8>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800be82:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800be86:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 800be88:	85a3      	strh	r3, [r4, #44]	; 0x2c
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800be8a:	e9c5 1200 	strd	r1, r2, [r5]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be8e:	4b35      	ldr	r3, [pc, #212]	; (800bf64 <ethernetif_init+0xfc>)
  MACAddr[0] = 0x00;
 800be90:	4a35      	ldr	r2, [pc, #212]	; (800bf68 <ethernetif_init+0x100>)
  netif->output = etharp_output;
 800be92:	6163      	str	r3, [r4, #20]
  MACAddr[0] = 0x00;
 800be94:	9202      	str	r2, [sp, #8]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be96:	4b35      	ldr	r3, [pc, #212]	; (800bf6c <ethernetif_init+0x104>)
 800be98:	61a3      	str	r3, [r4, #24]
  MACAddr[3] = 0x00;
 800be9a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  uint32_t regvalue = 0;
 800be9e:	2300      	movs	r3, #0
  MACAddr[3] = 0x00;
 800bea0:	f8ad 200c 	strh.w	r2, [sp, #12]
  heth.Init.MACAddr = &MACAddr[0];
 800bea4:	aa02      	add	r2, sp, #8
  uint32_t regvalue = 0;
 800bea6:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bea8:	822b      	strh	r3, [r5, #16]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800beaa:	e9c5 2305 	strd	r2, r3, [r5, #20]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800beae:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800beb0:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800beb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800beb6:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800beb8:	f7f5 fd4c 	bl	8001954 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bebc:	b928      	cbnz	r0, 800beca <ethernetif_init+0x62>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bebe:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bec2:	f043 0304 	orr.w	r3, r3, #4
 800bec6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800beca:	2304      	movs	r3, #4
 800becc:	4a28      	ldr	r2, [pc, #160]	; (800bf70 <ethernetif_init+0x108>)
 800bece:	4929      	ldr	r1, [pc, #164]	; (800bf74 <ethernetif_init+0x10c>)
 800bed0:	4822      	ldr	r0, [pc, #136]	; (800bf5c <ethernetif_init+0xf4>)
 800bed2:	f7f5 fba5 	bl	8001620 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bed6:	4928      	ldr	r1, [pc, #160]	; (800bf78 <ethernetif_init+0x110>)
 800bed8:	4a28      	ldr	r2, [pc, #160]	; (800bf7c <ethernetif_init+0x114>)
 800beda:	4820      	ldr	r0, [pc, #128]	; (800bf5c <ethernetif_init+0xf4>)
 800bedc:	2304      	movs	r3, #4
 800bede:	f7f5 fbdb 	bl	8001698 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bee2:	2306      	movs	r3, #6
 800bee4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bee8:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 800beea:	481c      	ldr	r0, [pc, #112]	; (800bf5c <ethernetif_init+0xf4>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800beec:	781a      	ldrb	r2, [r3, #0]
 800beee:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bef2:	785a      	ldrb	r2, [r3, #1]
 800bef4:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bef8:	789a      	ldrb	r2, [r3, #2]
 800befa:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800befe:	78da      	ldrb	r2, [r3, #3]
 800bf00:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf04:	791a      	ldrb	r2, [r3, #4]
 800bf06:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf0a:	795b      	ldrb	r3, [r3, #5]
 800bf0c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800bf10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bf14:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf16:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bf1a:	f043 030a 	orr.w	r3, r3, #10
 800bf1e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800bf22:	f7f5 fe13 	bl	8001b4c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bf26:	aa01      	add	r2, sp, #4
 800bf28:	211d      	movs	r1, #29
 800bf2a:	480c      	ldr	r0, [pc, #48]	; (800bf5c <ethernetif_init+0xf4>)
 800bf2c:	f7f5 fca1 	bl	8001872 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bf30:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf32:	480a      	ldr	r0, [pc, #40]	; (800bf5c <ethernetif_init+0xf4>)
  regvalue |= (PHY_ISFR_INT4);
 800bf34:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf38:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 800bf3a:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf3c:	f7f5 fcd3 	bl	80018e6 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bf40:	aa01      	add	r2, sp, #4
 800bf42:	211d      	movs	r1, #29
 800bf44:	4805      	ldr	r0, [pc, #20]	; (800bf5c <ethernetif_init+0xf4>)
 800bf46:	f7f5 fc94 	bl	8001872 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	b005      	add	sp, #20
 800bf4e:	bd30      	pop	{r4, r5, pc}
 800bf50:	08012070 	.word	0x08012070
 800bf54:	080107f8 	.word	0x080107f8
 800bf58:	0800f008 	.word	0x0800f008
 800bf5c:	20006e68 	.word	0x20006e68
 800bf60:	40028000 	.word	0x40028000
 800bf64:	0800a1e1 	.word	0x0800a1e1
 800bf68:	00e18000 	.word	0x00e18000
 800bf6c:	0800bc01 	.word	0x0800bc01
 800bf70:	20006eb0 	.word	0x20006eb0
 800bf74:	20005598 	.word	0x20005598
 800bf78:	20006de8 	.word	0x20006de8
 800bf7c:	20005618 	.word	0x20005618

0800bf80 <sys_now>:
 800bf80:	f7f4 bff6 	b.w	8000f70 <HAL_GetTick>

0800bf84 <event_init>:
#include <event.h>

void event_init( event *e )
{ *e = 0; }
 800bf84:	2300      	movs	r3, #0
 800bf86:	7003      	strb	r3, [r0, #0]
 800bf88:	4770      	bx	lr

0800bf8a <event_trigger>:

void event_trigger( event *e )
{ *e = 1; }
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	7003      	strb	r3, [r0, #0]
 800bf8e:	4770      	bx	lr

0800bf90 <event_check>:

int event_check( event *e )
{
  if ( *e )
 800bf90:	7803      	ldrb	r3, [r0, #0]
 800bf92:	b11b      	cbz	r3, 800bf9c <event_check+0xc>
  {
    *e = 0;
 800bf94:	2300      	movs	r3, #0
 800bf96:	7003      	strb	r3, [r0, #0]
	return 1;
 800bf98:	2001      	movs	r0, #1
 800bf9a:	4770      	bx	lr
  }

  return 0;
 800bf9c:	4618      	mov	r0, r3
}
 800bf9e:	4770      	bx	lr

0800bfa0 <MX_LWIP_Init_>:
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */

void MX_LWIP_Init_( uint8_t x )
{
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 1;
  IP_ADDRESS[3] = x;
  NETMASK_ADDRESS[0] = 255;
 800bfa2:	4d1f      	ldr	r5, [pc, #124]	; (800c020 <MX_LWIP_Init_+0x80>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 800bfa4:	4c1f      	ldr	r4, [pc, #124]	; (800c024 <MX_LWIP_Init_+0x84>)
  IP_ADDRESS[0] = 192;
 800bfa6:	4e20      	ldr	r6, [pc, #128]	; (800c028 <MX_LWIP_Init_+0x88>)
  NETMASK_ADDRESS[0] = 255;
 800bfa8:	23ff      	movs	r3, #255	; 0xff
{
 800bfaa:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 800bfac:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 800bfb0:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 1;
 800bfb2:	2201      	movs	r2, #1
  NETMASK_ADDRESS[0] = 255;
 800bfb4:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 800bfb6:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 800bfb8:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 800bfba:	2700      	movs	r7, #0
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 1;
  GATEWAY_ADDRESS[3] = 254;
 800bfbc:	23fe      	movs	r3, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 192;
 800bfbe:	f884 c000 	strb.w	ip, [r4]
  IP_ADDRESS[0] = 192;
 800bfc2:	f886 c000 	strb.w	ip, [r6]
  GATEWAY_ADDRESS[1] = 168;
 800bfc6:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 1;
 800bfc8:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 254;
 800bfca:	70e3      	strb	r3, [r4, #3]
  IP_ADDRESS[1] = 168;
 800bfcc:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 1;
 800bfce:	70b2      	strb	r2, [r6, #2]
  IP_ADDRESS[3] = x;
 800bfd0:	70f0      	strb	r0, [r6, #3]
  NETMASK_ADDRESS[3] = 0;
 800bfd2:	70ef      	strb	r7, [r5, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bfd4:	f7f9 fd3c 	bl	8005a50 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bfd8:	4914      	ldr	r1, [pc, #80]	; (800c02c <MX_LWIP_Init_+0x8c>)
 800bfda:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bfdc:	4a14      	ldr	r2, [pc, #80]	; (800c030 <MX_LWIP_Init_+0x90>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bfde:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bfe4:	4b13      	ldr	r3, [pc, #76]	; (800c034 <MX_LWIP_Init_+0x94>)
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bfea:	4813      	ldr	r0, [pc, #76]	; (800c038 <MX_LWIP_Init_+0x98>)
 800bfec:	4c13      	ldr	r4, [pc, #76]	; (800c03c <MX_LWIP_Init_+0x9c>)
 800bfee:	9002      	str	r0, [sp, #8]
 800bff0:	4813      	ldr	r0, [pc, #76]	; (800c040 <MX_LWIP_Init_+0xa0>)
 800bff2:	e9cd 7000 	strd	r7, r0, [sp]
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7f9 ffde 	bl	8005fb8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bffc:	4620      	mov	r0, r4
 800bffe:	f7fa f819 	bl	8006034 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c002:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c006:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c008:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800c00a:	d504      	bpl.n	800c016 <MX_LWIP_Init_+0x76>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c00c:	b005      	add	sp, #20
 800c00e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800c012:	f7fa b815 	b.w	8006040 <netif_set_up>
}
 800c016:	b005      	add	sp, #20
 800c018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800c01c:	f7fa b81f 	b.w	800605e <netif_set_down>
 800c020:	200086b8 	.word	0x200086b8
 800c024:	20008680 	.word	0x20008680
 800c028:	200086bc 	.word	0x200086bc
 800c02c:	200086b4 	.word	0x200086b4
 800c030:	200086c0 	.word	0x200086c0
 800c034:	200086c4 	.word	0x200086c4
 800c038:	0800af35 	.word	0x0800af35
 800c03c:	20008684 	.word	0x20008684
 800c040:	0800be69 	.word	0x0800be69

0800c044 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800c044:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800c046:	4803      	ldr	r0, [pc, #12]	; (800c054 <MX_LWIP_Process+0x10>)
 800c048:	f7ff fea0 	bl	800bd8c <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800c04c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 800c050:	f7fd bcec 	b.w	8009a2c <sys_check_timeouts>
 800c054:	20008684 	.word	0x20008684

0800c058 <bumper_game_register>:

#if 1
int bumper_game_register( uint8_t id, const char *name )
{
	return 1;
}
 800c058:	2001      	movs	r0, #1
 800c05a:	4770      	bx	lr

0800c05c <bumper_game_acceleration>:

int bumper_game_acceleration( uint8_t id, int8_t ax, int8_t ay, int8_t az )
{
	return 1;
}
 800c05c:	2001      	movs	r0, #1
 800c05e:	4770      	bx	lr

0800c060 <bumper_game_over>:

int bumper_game_over()
{
	user_button_pushed = 0;
 800c060:	4b02      	ldr	r3, [pc, #8]	; (800c06c <bumper_game_over+0xc>)
 800c062:	2200      	movs	r2, #0
 800c064:	701a      	strb	r2, [r3, #0]
	return 1;
}
 800c066:	2001      	movs	r0, #1
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20000e65 	.word	0x20000e65

0800c070 <bumper_signal_error>:
{
 800c070:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c072:	2201      	movs	r2, #1
{
 800c074:	b086      	sub	sp, #24
 800c076:	4604      	mov	r4, r0
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <bumper_signal_error+0x28>)
 800c07e:	f7f5 fe81 	bl	8001d84 <HAL_GPIO_WritePin>
	sprintf( buff, "ERROR %d<br/>", x );
 800c082:	4622      	mov	r2, r4
 800c084:	4905      	ldr	r1, [pc, #20]	; (800c09c <bumper_signal_error+0x2c>)
 800c086:	a801      	add	r0, sp, #4
 800c088:	f001 fd94 	bl	800dbb4 <siprintf>
	bum_log( buff );
 800c08c:	a801      	add	r0, sp, #4
 800c08e:	f7fe ffe5 	bl	800b05c <bum_log>
}
 800c092:	b006      	add	sp, #24
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	40020c00 	.word	0x40020c00
 800c09c:	08012726 	.word	0x08012726

0800c0a0 <bumper_signal_debug>:
	HAL_GPIO_TogglePin( LD6_GPIO_Port, LD6_Pin ); // BLUE
 800c0a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <bumper_signal_debug+0xc>)
 800c0a6:	f7f5 be72 	b.w	8001d8e <HAL_GPIO_TogglePin>
 800c0aa:	bf00      	nop
 800c0ac:	40020c00 	.word	0x40020c00

0800c0b0 <bumper_game_new_player>:
{
 800c0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int len = strlen( json_orders );
 800c0b2:	4c0b      	ldr	r4, [pc, #44]	; (800c0e0 <bumper_game_new_player+0x30>)
{
 800c0b4:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c0b6:	4620      	mov	r0, r4
{
 800c0b8:	460e      	mov	r6, r1
 800c0ba:	4617      	mov	r7, r2
	int len = strlen( json_orders );
 800c0bc:	f7f4 f892 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c0c0:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c0c4:	d809      	bhi.n	800c0da <bumper_game_new_player+0x2a>
	sprintf( json_orders + len, "{\"new_player\":[{\"i\":%d,\"name\":\"%s\",\"color\": \"#%06X\"}]},", ( unsigned int )id, name, ( unsigned int )color );
 800c0c6:	9700      	str	r7, [sp, #0]
 800c0c8:	4633      	mov	r3, r6
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4905      	ldr	r1, [pc, #20]	; (800c0e4 <bumper_game_new_player+0x34>)
 800c0ce:	4420      	add	r0, r4
 800c0d0:	f001 fd70 	bl	800dbb4 <siprintf>
	return 1;
 800c0d4:	2001      	movs	r0, #1
}
 800c0d6:	b003      	add	sp, #12
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e7fb      	b.n	800c0d6 <bumper_game_new_player+0x26>
 800c0de:	bf00      	nop
 800c0e0:	200087e4 	.word	0x200087e4
 800c0e4:	080125d4 	.word	0x080125d4

0800c0e8 <bumper_game_player_move>:
{
 800c0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int len = strlen( json_orders );
 800c0ec:	4d0e      	ldr	r5, [pc, #56]	; (800c128 <bumper_game_player_move+0x40>)
{
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	4606      	mov	r6, r0
	int len = strlen( json_orders );
 800c0f2:	4628      	mov	r0, r5
{
 800c0f4:	460f      	mov	r7, r1
 800c0f6:	4690      	mov	r8, r2
 800c0f8:	4699      	mov	r9, r3
	int len = strlen( json_orders );
 800c0fa:	f7f4 f873 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c0fe:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c102:	f04f 0400 	mov.w	r4, #0
 800c106:	d80d      	bhi.n	800c124 <bumper_game_player_move+0x3c>
	sprintf( json_orders + len, "{\"move\":[{\"i\":%d,\"x\":%d,\"y\":%d,\"a\":%d,\"s\":%d}]},", ( unsigned int )id, ( unsigned int )x, ( unsigned int )y, 0, ( unsigned int )s );
 800c108:	e9cd 4901 	strd	r4, r9, [sp, #4]
 800c10c:	f8cd 8000 	str.w	r8, [sp]
 800c110:	463b      	mov	r3, r7
 800c112:	4632      	mov	r2, r6
 800c114:	4905      	ldr	r1, [pc, #20]	; (800c12c <bumper_game_player_move+0x44>)
 800c116:	4428      	add	r0, r5
 800c118:	f001 fd4c 	bl	800dbb4 <siprintf>
	return 1;
 800c11c:	2001      	movs	r0, #1
}
 800c11e:	b005      	add	sp, #20
 800c120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c124:	4620      	mov	r0, r4
 800c126:	e7fa      	b.n	800c11e <bumper_game_player_move+0x36>
 800c128:	200087e4 	.word	0x200087e4
 800c12c:	0801260c 	.word	0x0801260c

0800c130 <bumper_game_print>:
{
 800c130:	b538      	push	{r3, r4, r5, lr}
	int len = strlen( json_orders );
 800c132:	4c08      	ldr	r4, [pc, #32]	; (800c154 <bumper_game_print+0x24>)
{
 800c134:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c136:	4620      	mov	r0, r4
 800c138:	f7f4 f854 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c13c:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c140:	d806      	bhi.n	800c150 <bumper_game_print+0x20>
	sprintf( json_orders + len, "{\"display\":[{\"id\":\"score\",\"x\":10,\"y\":-5,\"content\":\"%s\"}]},", msg );
 800c142:	462a      	mov	r2, r5
 800c144:	4904      	ldr	r1, [pc, #16]	; (800c158 <bumper_game_print+0x28>)
 800c146:	4420      	add	r0, r4
 800c148:	f001 fd34 	bl	800dbb4 <siprintf>
	return 1;
 800c14c:	2001      	movs	r0, #1
}
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c150:	2000      	movs	r0, #0
 800c152:	e7fc      	b.n	800c14e <bumper_game_print+0x1e>
 800c154:	200087e4 	.word	0x200087e4
 800c158:	0801263d 	.word	0x0801263d

0800c15c <bumper_game_step>:
{
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	4606      	mov	r6, r0
 800c160:	b08a      	sub	sp, #40	; 0x28
	int len = strlen( json_orders );
 800c162:	4820      	ldr	r0, [pc, #128]	; (800c1e4 <bumper_game_step+0x88>)
{
 800c164:	460d      	mov	r5, r1
	int len = strlen( json_orders );
 800c166:	f7f4 f83d 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c16a:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
	int len = strlen( json_orders );
 800c16e:	4604      	mov	r4, r0
 800c170:	f04f 0000 	mov.w	r0, #0
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c174:	d825      	bhi.n	800c1c2 <bumper_game_step+0x66>
	msg[ 0 ] = 0;
 800c176:	f88d 0000 	strb.w	r0, [sp]
	switch ( step )
 800c17a:	2e03      	cmp	r6, #3
 800c17c:	d82f      	bhi.n	800c1de <bumper_game_step+0x82>
 800c17e:	e8df f006 	tbb	[pc, r6]
 800c182:	2a02      	.short	0x2a02
 800c184:	2c16      	.short	0x2c16
		switch ( param )
 800c186:	2d04      	cmp	r5, #4
 800c188:	d823      	bhi.n	800c1d2 <bumper_game_step+0x76>
 800c18a:	e8df f005 	tbb	[pc, r5]
 800c18e:	0803      	.short	0x0803
 800c190:	1e1c      	.short	0x1e1c
 800c192:	20          	.byte	0x20
 800c193:	00          	.byte	0x00
			strcpy( msg, "Internal Error" ); break;
 800c194:	4914      	ldr	r1, [pc, #80]	; (800c1e8 <bumper_game_step+0x8c>)
		strcpy( msg, "step ???" ); break;
 800c196:	4668      	mov	r0, sp
 800c198:	f001 fd48 	bl	800dc2c <strcpy>
 800c19c:	e007      	b.n	800c1ae <bumper_game_step+0x52>
			strcpy( msg, "OK registered as " ); strcat( msg, bum_player.name ); break;
 800c19e:	4913      	ldr	r1, [pc, #76]	; (800c1ec <bumper_game_step+0x90>)
		strcpy( msg, "Playing as " ); strcat( msg, bum_player.name ); break;
 800c1a0:	4668      	mov	r0, sp
 800c1a2:	f001 fd43 	bl	800dc2c <strcpy>
 800c1a6:	4912      	ldr	r1, [pc, #72]	; (800c1f0 <bumper_game_step+0x94>)
 800c1a8:	4668      	mov	r0, sp
 800c1aa:	f001 fd23 	bl	800dbf4 <strcat>
	if ( msg[ 0 ] )
 800c1ae:	f89d 3000 	ldrb.w	r3, [sp]
 800c1b2:	b12b      	cbz	r3, 800c1c0 <bumper_game_step+0x64>
		sprintf( json_orders + len, "{\"display\":[{\"id\":\"step\",\"x\":200,\"y\":-5,\"content\":\"%s\"}]},", msg );
 800c1b4:	480b      	ldr	r0, [pc, #44]	; (800c1e4 <bumper_game_step+0x88>)
 800c1b6:	490f      	ldr	r1, [pc, #60]	; (800c1f4 <bumper_game_step+0x98>)
 800c1b8:	466a      	mov	r2, sp
 800c1ba:	4420      	add	r0, r4
 800c1bc:	f001 fcfa 	bl	800dbb4 <siprintf>
	return 1;
 800c1c0:	2001      	movs	r0, #1
}
 800c1c2:	b00a      	add	sp, #40	; 0x28
 800c1c4:	bd70      	pop	{r4, r5, r6, pc}
			strcpy( msg, "OK already as " ); strcat( msg, bum_player.name ); break;
 800c1c6:	490c      	ldr	r1, [pc, #48]	; (800c1f8 <bumper_game_step+0x9c>)
 800c1c8:	e7ea      	b.n	800c1a0 <bumper_game_step+0x44>
			strcpy( msg, "Too many players" ); break;
 800c1ca:	490c      	ldr	r1, [pc, #48]	; (800c1fc <bumper_game_step+0xa0>)
 800c1cc:	e7e3      	b.n	800c196 <bumper_game_step+0x3a>
			strcpy( msg, "Too late" ); break;
 800c1ce:	490c      	ldr	r1, [pc, #48]	; (800c200 <bumper_game_step+0xa4>)
 800c1d0:	e7e1      	b.n	800c196 <bumper_game_step+0x3a>
			strcpy( msg, "param ???" ); break;
 800c1d2:	490c      	ldr	r1, [pc, #48]	; (800c204 <bumper_game_step+0xa8>)
 800c1d4:	e7df      	b.n	800c196 <bumper_game_step+0x3a>
		strcpy( msg, "Playing as " ); strcat( msg, bum_player.name ); break;
 800c1d6:	490c      	ldr	r1, [pc, #48]	; (800c208 <bumper_game_step+0xac>)
 800c1d8:	e7e2      	b.n	800c1a0 <bumper_game_step+0x44>
		sprintf( msg, "Game Over" ); break;
 800c1da:	490c      	ldr	r1, [pc, #48]	; (800c20c <bumper_game_step+0xb0>)
 800c1dc:	e7db      	b.n	800c196 <bumper_game_step+0x3a>
		strcpy( msg, "step ???" ); break;
 800c1de:	490c      	ldr	r1, [pc, #48]	; (800c210 <bumper_game_step+0xb4>)
 800c1e0:	e7d9      	b.n	800c196 <bumper_game_step+0x3a>
 800c1e2:	bf00      	nop
 800c1e4:	200087e4 	.word	0x200087e4
 800c1e8:	08012678 	.word	0x08012678
 800c1ec:	08012687 	.word	0x08012687
 800c1f0:	20008af8 	.word	0x20008af8
 800c1f4:	080126eb 	.word	0x080126eb
 800c1f8:	08012699 	.word	0x08012699
 800c1fc:	080126a8 	.word	0x080126a8
 800c200:	080126b9 	.word	0x080126b9
 800c204:	080126c2 	.word	0x080126c2
 800c208:	080126cc 	.word	0x080126cc
 800c20c:	080126d8 	.word	0x080126d8
 800c210:	080126e2 	.word	0x080126e2

0800c214 <bumper_utility_random>:
#endif


int bumper_utility_random( uint32_t *value, uint32_t max )
{
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c21a:	4601      	mov	r1, r0
 800c21c:	4806      	ldr	r0, [pc, #24]	; (800c238 <bumper_utility_random+0x24>)
 800c21e:	f7f6 fd0b 	bl	8002c38 <HAL_RNG_GenerateRandomNumber>
 800c222:	b938      	cbnz	r0, 800c234 <bumper_utility_random+0x20>

#if 0
  uint32_t zones = 0xFFFFFFFF / max;
  *value /= zones;
#else
  *value %= max;
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	fbb3 f1f5 	udiv	r1, r3, r5
 800c22a:	fb05 3111 	mls	r1, r5, r1, r3
 800c22e:	6021      	str	r1, [r4, #0]
#endif

  return 1;
 800c230:	2001      	movs	r0, #1
}
 800c232:	bd38      	pop	{r3, r4, r5, pc}
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c234:	2000      	movs	r0, #0
 800c236:	e7fc      	b.n	800c232 <bumper_utility_random+0x1e>
 800c238:	20008a48 	.word	0x20008a48

0800c23c <HAL_UART_RxCpltCallback>:
{
 800c23c:	b508      	push	{r3, lr}
	if ( huart->Instance == USART6 )
 800c23e:	6802      	ldr	r2, [r0, #0]
 800c240:	4b14      	ldr	r3, [pc, #80]	; (800c294 <HAL_UART_RxCpltCallback+0x58>)
 800c242:	429a      	cmp	r2, r3
 800c244:	d124      	bne.n	800c290 <HAL_UART_RxCpltCallback+0x54>
		  switch ( recv6_car )
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <HAL_UART_RxCpltCallback+0x5c>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b4c      	cmp	r3, #76	; 0x4c
 800c24c:	d011      	beq.n	800c272 <HAL_UART_RxCpltCallback+0x36>
 800c24e:	d808      	bhi.n	800c262 <HAL_UART_RxCpltCallback+0x26>
 800c250:	2b42      	cmp	r3, #66	; 0x42
 800c252:	d018      	beq.n	800c286 <HAL_UART_RxCpltCallback+0x4a>
		  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c254:	2201      	movs	r2, #1
 800c256:	4910      	ldr	r1, [pc, #64]	; (800c298 <HAL_UART_RxCpltCallback+0x5c>)
 800c258:	4810      	ldr	r0, [pc, #64]	; (800c29c <HAL_UART_RxCpltCallback+0x60>)
}
 800c25a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c25e:	f7f7 ba88 	b.w	8003772 <HAL_UART_Receive_IT>
		  switch ( recv6_car )
 800c262:	2b52      	cmp	r3, #82	; 0x52
 800c264:	d00c      	beq.n	800c280 <HAL_UART_RxCpltCallback+0x44>
 800c266:	2b54      	cmp	r3, #84	; 0x54
 800c268:	d1f4      	bne.n	800c254 <HAL_UART_RxCpltCallback+0x18>
				bum_game_acceleration( 50, 0, 0 );
 800c26a:	2200      	movs	r2, #0
 800c26c:	4611      	mov	r1, r2
 800c26e:	2032      	movs	r0, #50	; 0x32
 800c270:	e003      	b.n	800c27a <HAL_UART_RxCpltCallback+0x3e>
				bum_game_acceleration( 0, -50, 0 );
 800c272:	2200      	movs	r2, #0
 800c274:	f06f 0131 	mvn.w	r1, #49	; 0x31
				bum_game_acceleration( 0, 50, 0 );
 800c278:	4610      	mov	r0, r2
				bum_game_acceleration( -50, 0, 0 );
 800c27a:	f7fe ff21 	bl	800b0c0 <bum_game_acceleration>
				break;
 800c27e:	e7e9      	b.n	800c254 <HAL_UART_RxCpltCallback+0x18>
				bum_game_acceleration( 0, 50, 0 );
 800c280:	2200      	movs	r2, #0
 800c282:	2132      	movs	r1, #50	; 0x32
 800c284:	e7f8      	b.n	800c278 <HAL_UART_RxCpltCallback+0x3c>
				bum_game_acceleration( -50, 0, 0 );
 800c286:	2200      	movs	r2, #0
 800c288:	4611      	mov	r1, r2
 800c28a:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800c28e:	e7f4      	b.n	800c27a <HAL_UART_RxCpltCallback+0x3e>
}
 800c290:	bd08      	pop	{r3, pc}
 800c292:	bf00      	nop
 800c294:	40011400 	.word	0x40011400
 800c298:	20000e64 	.word	0x20000e64
 800c29c:	20008a60 	.word	0x20008a60

0800c2a0 <_write>:
{
 800c2a0:	b510      	push	{r4, lr}
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c2a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800c2a6:	4614      	mov	r4, r2
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c2a8:	4802      	ldr	r0, [pc, #8]	; (800c2b4 <_write+0x14>)
 800c2aa:	b292      	uxth	r2, r2
 800c2ac:	f7f7 f9e8 	bl	8003680 <HAL_UART_Transmit>
}
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	20008a60 	.word	0x20008a60

0800c2b8 <bumper_init_player>:
  bum_player.game_step = bumper_game_step;
 800c2b8:	4807      	ldr	r0, [pc, #28]	; (800c2d8 <bumper_init_player+0x20>)
 800c2ba:	4b08      	ldr	r3, [pc, #32]	; (800c2dc <bumper_init_player+0x24>)
 800c2bc:	6003      	str	r3, [r0, #0]
  bum_player.game_new_player = bumper_game_new_player;
 800c2be:	4b08      	ldr	r3, [pc, #32]	; (800c2e0 <bumper_init_player+0x28>)
 800c2c0:	6043      	str	r3, [r0, #4]
  bum_player.game_player_move = bumper_game_player_move;
 800c2c2:	4b08      	ldr	r3, [pc, #32]	; (800c2e4 <bumper_init_player+0x2c>)
 800c2c4:	6083      	str	r3, [r0, #8]
  bum_player.game_print = bumper_game_print;
 800c2c6:	4b08      	ldr	r3, [pc, #32]	; (800c2e8 <bumper_init_player+0x30>)
 800c2c8:	60c3      	str	r3, [r0, #12]
  bum_player.error = bumper_signal_error;
 800c2ca:	4b08      	ldr	r3, [pc, #32]	; (800c2ec <bumper_init_player+0x34>)
 800c2cc:	6103      	str	r3, [r0, #16]
  bum_player.debug = bumper_signal_debug;
 800c2ce:	4b08      	ldr	r3, [pc, #32]	; (800c2f0 <bumper_init_player+0x38>)
 800c2d0:	6143      	str	r3, [r0, #20]
  bum_init_player( &bum_player );
 800c2d2:	f7fe bec5 	b.w	800b060 <bum_init_player>
 800c2d6:	bf00      	nop
 800c2d8:	20008ae0 	.word	0x20008ae0
 800c2dc:	0800c15d 	.word	0x0800c15d
 800c2e0:	0800c0b1 	.word	0x0800c0b1
 800c2e4:	0800c0e9 	.word	0x0800c0e9
 800c2e8:	0800c131 	.word	0x0800c131
 800c2ec:	0800c071 	.word	0x0800c071
 800c2f0:	0800c0a1 	.word	0x0800c0a1

0800c2f4 <bumper_init_referee>:


void bumper_init_referee()
{
#if 1
  bum_referee.game_register = bumper_game_register;
 800c2f4:	4807      	ldr	r0, [pc, #28]	; (800c314 <bumper_init_referee+0x20>)
 800c2f6:	4b08      	ldr	r3, [pc, #32]	; (800c318 <bumper_init_referee+0x24>)
 800c2f8:	6003      	str	r3, [r0, #0]
  bum_referee.game_acceleration = bumper_game_acceleration;
 800c2fa:	4b08      	ldr	r3, [pc, #32]	; (800c31c <bumper_init_referee+0x28>)
 800c2fc:	6043      	str	r3, [r0, #4]
  bum_referee.game_over = bumper_game_over;
 800c2fe:	4b08      	ldr	r3, [pc, #32]	; (800c320 <bumper_init_referee+0x2c>)
 800c300:	6083      	str	r3, [r0, #8]

  bum_referee.utility_random = bumper_utility_random;
 800c302:	4b08      	ldr	r3, [pc, #32]	; (800c324 <bumper_init_referee+0x30>)
 800c304:	60c3      	str	r3, [r0, #12]
#endif
  bum_referee.error = bumper_signal_error;
 800c306:	4b08      	ldr	r3, [pc, #32]	; (800c328 <bumper_init_referee+0x34>)
 800c308:	6103      	str	r3, [r0, #16]
  bum_referee.debug = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	6143      	str	r3, [r0, #20]

  bum_init_referee( &bum_referee );
 800c30e:	f7ff b875 	b.w	800b3fc <bum_init_referee>
 800c312:	bf00      	nop
 800c314:	200089f0 	.word	0x200089f0
 800c318:	0800c059 	.word	0x0800c059
 800c31c:	0800c05d 	.word	0x0800c05d
 800c320:	0800c061 	.word	0x0800c061
 800c324:	0800c215 	.word	0x0800c215
 800c328:	0800c071 	.word	0x0800c071

0800c32c <check_board_id>:
// **********************************************************************************************
// **********************************************************************************************


int check_board_id()
{
 800c32c:	b538      	push	{r3, r4, r5, lr}
	  uint32_t UID[ 3 ];
	  UID[0] = HAL_GetUIDw0();
 800c32e:	f7f4 fe39 	bl	8000fa4 <HAL_GetUIDw0>
 800c332:	4605      	mov	r5, r0
	  UID[1] = HAL_GetUIDw1();
 800c334:	f7f4 fe3c 	bl	8000fb0 <HAL_GetUIDw1>
 800c338:	4604      	mov	r4, r0
	  UID[2] = HAL_GetUIDw2();
 800c33a:	f7f4 fe3f 	bl	8000fbc <HAL_GetUIDw2>
	  uint32_t UID_PLAYER_1[ 3 ];
	  UID_PLAYER_1[0] = 0x470058;
	  UID_PLAYER_1[1] = 0x58485018;
	  UID_PLAYER_1[2] = 0x20383852;

	  if ( ( UID[0] == UID_COORDINATOR[0] ) && ( UID[1] == UID_COORDINATOR[1] ) && ( UID[2] == UID_COORDINATOR[2] ) ) return 0;
 800c33e:	4b11      	ldr	r3, [pc, #68]	; (800c384 <check_board_id+0x58>)
 800c340:	429d      	cmp	r5, r3
 800c342:	d10c      	bne.n	800c35e <check_board_id+0x32>
 800c344:	4b10      	ldr	r3, [pc, #64]	; (800c388 <check_board_id+0x5c>)
 800c346:	429c      	cmp	r4, r3
 800c348:	d11a      	bne.n	800c380 <check_board_id+0x54>
 800c34a:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800c34e:	f5a3 53a6 	sub.w	r3, r3, #5312	; 0x14c0
 800c352:	3b1b      	subs	r3, #27
 800c354:	4298      	cmp	r0, r3
 800c356:	bf14      	ite	ne
 800c358:	2002      	movne	r0, #2
 800c35a:	2000      	moveq	r0, #0

	  if ( ( UID[0] == UID_PLAYER_1[0] ) && ( UID[1] == UID_PLAYER_1[1] ) && ( UID[2] == UID_PLAYER_1[2] ) ) return 1;

	  return 2;
}
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
	  if ( ( UID[0] == UID_PLAYER_1[0] ) && ( UID[1] == UID_PLAYER_1[1] ) && ( UID[2] == UID_PLAYER_1[2] ) ) return 1;
 800c35e:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <check_board_id+0x60>)
 800c360:	429d      	cmp	r5, r3
 800c362:	d10d      	bne.n	800c380 <check_board_id+0x54>
 800c364:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800c368:	f503 33a7 	add.w	r3, r3, #85504	; 0x14e00
 800c36c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800c370:	429c      	cmp	r4, r3
 800c372:	d105      	bne.n	800c380 <check_board_id+0x54>
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <check_board_id+0x64>)
 800c376:	4298      	cmp	r0, r3
 800c378:	bf14      	ite	ne
 800c37a:	2002      	movne	r0, #2
 800c37c:	2001      	moveq	r0, #1
 800c37e:	e7ed      	b.n	800c35c <check_board_id+0x30>
	  return 2;
 800c380:	2002      	movs	r0, #2
 800c382:	e7eb      	b.n	800c35c <check_board_id+0x30>
 800c384:	002d0025 	.word	0x002d0025
 800c388:	3137470f 	.word	0x3137470f
 800c38c:	00470058 	.word	0x00470058
 800c390:	20383852 	.word	0x20383852

0800c394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c394:	b530      	push	{r4, r5, lr}
 800c396:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c398:	2210      	movs	r2, #16
 800c39a:	2100      	movs	r1, #0
 800c39c:	a80a      	add	r0, sp, #40	; 0x28
 800c39e:	f001 fb31 	bl	800da04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c3a2:	2214      	movs	r2, #20
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	a803      	add	r0, sp, #12
 800c3a8:	f001 fb2c 	bl	800da04 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c3ac:	2400      	movs	r4, #0
 800c3ae:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <SystemClock_Config+0x90>)
 800c3b0:	9401      	str	r4, [sp, #4]
 800c3b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c3b8:	641a      	str	r2, [r3, #64]	; 0x40
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3c4:	4b18      	ldr	r3, [pc, #96]	; (800c428 <SystemClock_Config+0x94>)
 800c3c6:	9402      	str	r4, [sp, #8]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3d6:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c3d8:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3da:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c3dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c3e4:	2502      	movs	r5, #2
 800c3e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3ea:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c3ee:	2108      	movs	r1, #8
 800c3f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c3f4:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c3f8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c3fa:	2307      	movs	r3, #7
 800c3fc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c3fe:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c400:	f7f6 f994 	bl	800272c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c404:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c406:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c40a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800c40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c412:	e9cd 0306 	strd	r0, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c416:	2105      	movs	r1, #5
 800c418:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c41a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c41c:	f7f6 fb36 	bl	8002a8c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800c420:	b015      	add	sp, #84	; 0x54
 800c422:	bd30      	pop	{r4, r5, pc}
 800c424:	40023800 	.word	0x40023800
 800c428:	40007000 	.word	0x40007000

0800c42c <main>:
{
 800c42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 800c432:	f7f4 fd77 	bl	8000f24 <HAL_Init>
  SystemClock_Config();
 800c436:	f7ff ffad 	bl	800c394 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c43a:	2214      	movs	r2, #20
 800c43c:	2100      	movs	r1, #0
 800c43e:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c440:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c442:	f001 fadf 	bl	800da04 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c446:	4bc0      	ldr	r3, [pc, #768]	; (800c748 <main+0x31c>)
 800c448:	9401      	str	r4, [sp, #4]
 800c44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c44c:	48bf      	ldr	r0, [pc, #764]	; (800c74c <main+0x320>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c44e:	f8df 8358 	ldr.w	r8, [pc, #856]	; 800c7a8 <main+0x37c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c452:	f042 0210 	orr.w	r2, r2, #16
 800c456:	631a      	str	r2, [r3, #48]	; 0x30
 800c458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c45a:	f002 0210 	and.w	r2, r2, #16
 800c45e:	9201      	str	r2, [sp, #4]
 800c460:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c462:	9402      	str	r4, [sp, #8]
 800c464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c466:	f042 0204 	orr.w	r2, r2, #4
 800c46a:	631a      	str	r2, [r3, #48]	; 0x30
 800c46c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c46e:	f002 0204 	and.w	r2, r2, #4
 800c472:	9202      	str	r2, [sp, #8]
 800c474:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c476:	9403      	str	r4, [sp, #12]
 800c478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c47a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c47e:	631a      	str	r2, [r3, #48]	; 0x30
 800c480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c482:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c486:	9203      	str	r2, [sp, #12]
 800c488:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c48a:	9404      	str	r4, [sp, #16]
 800c48c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c48e:	f042 0201 	orr.w	r2, r2, #1
 800c492:	631a      	str	r2, [r3, #48]	; 0x30
 800c494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c496:	f002 0201 	and.w	r2, r2, #1
 800c49a:	9204      	str	r2, [sp, #16]
 800c49c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c49e:	9405      	str	r4, [sp, #20]
 800c4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a2:	f042 0202 	orr.w	r2, r2, #2
 800c4a6:	631a      	str	r2, [r3, #48]	; 0x30
 800c4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4aa:	f002 0202 	and.w	r2, r2, #2
 800c4ae:	9205      	str	r2, [sp, #20]
 800c4b0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4b2:	9406      	str	r4, [sp, #24]
 800c4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4b6:	f042 0208 	orr.w	r2, r2, #8
 800c4ba:	631a      	str	r2, [r3, #48]	; 0x30
 800c4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4c8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c4ca:	f7f5 fc5b 	bl	8001d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	489f      	ldr	r0, [pc, #636]	; (800c750 <main+0x324>)
 800c4d4:	f7f5 fc56 	bl	8001d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c4d8:	4622      	mov	r2, r4
 800c4da:	f24f 0110 	movw	r1, #61456	; 0xf010
 800c4de:	489d      	ldr	r0, [pc, #628]	; (800c754 <main+0x328>)
 800c4e0:	f7f5 fc50 	bl	8001d84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4e4:	2601      	movs	r6, #1
 800c4e6:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c4e8:	a90b      	add	r1, sp, #44	; 0x2c
 800c4ea:	4898      	ldr	r0, [pc, #608]	; (800c74c <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4ec:	e9cd 560b 	strd	r5, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4f0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c4f4:	f7f5 fb66 	bl	8001bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B_COORDINATOR_Pin;
 800c4f8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c4fa:	a90b      	add	r1, sp, #44	; 0x2c
 800c4fc:	4893      	ldr	r0, [pc, #588]	; (800c74c <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4fe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c500:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c504:	f7f5 fb5e 	bl	8001bc4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c508:	a90b      	add	r1, sp, #44	; 0x2c
 800c50a:	4891      	ldr	r0, [pc, #580]	; (800c750 <main+0x324>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c50c:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c50e:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c512:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c516:	f7f5 fb55 	bl	8001bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800c51a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c51c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c51e:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c520:	488b      	ldr	r0, [pc, #556]	; (800c750 <main+0x324>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c522:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c524:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c528:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c52a:	f7f5 fb4b 	bl	8001bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c52e:	a90b      	add	r1, sp, #44	; 0x2c
 800c530:	4889      	ldr	r0, [pc, #548]	; (800c758 <main+0x32c>)
  GPIO_InitStruct.Pin = B1_Pin;
 800c532:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c534:	e9cd 840c 	strd	r8, r4, [sp, #48]	; 0x30

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800c538:	f04f 0960 	mov.w	r9, #96	; 0x60
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c53c:	f7f5 fb42 	bl	8001bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c540:	a90b      	add	r1, sp, #44	; 0x2c
 800c542:	4885      	ldr	r0, [pc, #532]	; (800c758 <main+0x32c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c544:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c546:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c54a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c54e:	f7f5 fb39 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c552:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c554:	a90b      	add	r1, sp, #44	; 0x2c
 800c556:	4881      	ldr	r0, [pc, #516]	; (800c75c <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c558:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c55a:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800c55e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c562:	f7f5 fb2f 	bl	8001bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c566:	a90b      	add	r1, sp, #44	; 0x2c
 800c568:	487c      	ldr	r0, [pc, #496]	; (800c75c <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c56a:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56c:	e9cd a50b 	strd	sl, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c570:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c574:	f7f5 fb26 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c578:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c57c:	a90b      	add	r1, sp, #44	; 0x2c
 800c57e:	4875      	ldr	r0, [pc, #468]	; (800c754 <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c580:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c584:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c588:	f7f5 fb1c 	bl	8001bc4 <HAL_GPIO_Init>
  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c58c:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c58e:	a90b      	add	r1, sp, #44	; 0x2c
 800c590:	486f      	ldr	r0, [pc, #444]	; (800c750 <main+0x324>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c592:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c594:	e9cd a50b 	strd	sl, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c598:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c59c:	f7f5 fb12 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c5a0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c5a2:	a90b      	add	r1, sp, #44	; 0x2c
 800c5a4:	486b      	ldr	r0, [pc, #428]	; (800c754 <main+0x328>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5a8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c5ac:	f7f5 fb0a 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c5b0:	a90b      	add	r1, sp, #44	; 0x2c
 800c5b2:	4866      	ldr	r0, [pc, #408]	; (800c74c <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c5b6:	e9cd 580b 	strd	r5, r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c5ba:	f7f5 fb03 	bl	8001bc4 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800c5be:	4868      	ldr	r0, [pc, #416]	; (800c760 <main+0x334>)
  hi2c1.Init.ClockSpeed = 100000;
 800c5c0:	4a68      	ldr	r2, [pc, #416]	; (800c764 <main+0x338>)
 800c5c2:	4b69      	ldr	r3, [pc, #420]	; (800c768 <main+0x33c>)
  htim2.Instance = TIM2;
 800c5c4:	4d69      	ldr	r5, [pc, #420]	; (800c76c <main+0x340>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c5c6:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 800c5c8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c5cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c5d0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800c5d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c5d8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c5dc:	f7f6 f802 	bl	80025e4 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5e0:	2210      	movs	r2, #16
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	a80b      	add	r0, sp, #44	; 0x2c
 800c5e6:	f001 fa0d 	bl	800da04 <memset>
  htim2.Init.Prescaler = 8399;
 800c5ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c5ee:	f242 03cf 	movw	r3, #8399	; 0x20cf
 800c5f2:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5f6:	4628      	mov	r0, r5
  htim2.Init.Period = 4999;
 800c5f8:	f241 3387 	movw	r3, #4999	; 0x1387
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5fc:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c600:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c602:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c604:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c608:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c60c:	f7f6 fd00 	bl	8003010 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c610:	a90b      	add	r1, sp, #44	; 0x2c
 800c612:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c614:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c618:	f7f6 fdd0 	bl	80031bc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c61c:	a907      	add	r1, sp, #28
 800c61e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c620:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c624:	f7f6 fe8e 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
  __HAL_TIM_SET_AUTORELOAD( &htim2, ( TIM2_MS * 10 ) - 1 );
 800c628:	682a      	ldr	r2, [r5, #0]
 800c62a:	2363      	movs	r3, #99	; 0x63
 800c62c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c62e:	60eb      	str	r3, [r5, #12]
  MX_USB_HOST_Init();
 800c630:	f000 fc54 	bl	800cedc <MX_USB_HOST_Init>
  huart6.Instance = USART6;
 800c634:	484e      	ldr	r0, [pc, #312]	; (800c770 <main+0x344>)
  huart6.Init.BaudRate = 115200;
 800c636:	4b4f      	ldr	r3, [pc, #316]	; (800c774 <main+0x348>)
  huart6.Init.Parity = UART_PARITY_NONE;
 800c638:	6104      	str	r4, [r0, #16]
  huart6.Init.BaudRate = 115200;
 800c63a:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c63e:	270c      	movs	r7, #12
  huart6.Init.BaudRate = 115200;
 800c640:	e9c0 3800 	strd	r3, r8, [r0]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c644:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c648:	e9c0 7405 	strd	r7, r4, [r0, #20]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c64c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c64e:	f7f6 ffe9 	bl	8003624 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800c652:	2210      	movs	r2, #16
 800c654:	4621      	mov	r1, r4
 800c656:	a80b      	add	r0, sp, #44	; 0x2c
 800c658:	f001 f9d4 	bl	800da04 <memset>
  hadc1.Instance = ADC1;
 800c65c:	4d46      	ldr	r5, [pc, #280]	; (800c778 <main+0x34c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c65e:	4847      	ldr	r0, [pc, #284]	; (800c77c <main+0x350>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c660:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c666:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c66a:	4b45      	ldr	r3, [pc, #276]	; (800c780 <main+0x354>)
 800c66c:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c66e:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = DISABLE;
 800c670:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c672:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c674:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c678:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c67a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c67c:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c67e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c682:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c684:	f7f4 fca0 	bl	8000fc8 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c688:	4628      	mov	r0, r5
  hdac.Instance = DAC;
 800c68a:	4d3e      	ldr	r5, [pc, #248]	; (800c784 <main+0x358>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c68c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.Channel = ADC_CHANNEL_9;
 800c68e:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c690:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Rank = 1;
 800c692:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c696:	f7f4 fdb3 	bl	8001200 <HAL_ADC_ConfigChannel>
  hdac.Instance = DAC;
 800c69a:	4b3b      	ldr	r3, [pc, #236]	; (800c788 <main+0x35c>)
 800c69c:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c69e:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 800c6a0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c6a4:	f7f4 fea6 	bl	80013f4 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	a90b      	add	r1, sp, #44	; 0x2c
 800c6ac:	4628      	mov	r0, r5
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c6ae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c6b2:	f7f4 fee0 	bl	8001476 <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6b6:	2210      	movs	r2, #16
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	a807      	add	r0, sp, #28
 800c6bc:	f001 f9a2 	bl	800da04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c6c0:	221c      	movs	r2, #28
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	a80b      	add	r0, sp, #44	; 0x2c
 800c6c6:	f001 f99d 	bl	800da04 <memset>
  htim9.Instance = TIM9;
 800c6ca:	4d30      	ldr	r5, [pc, #192]	; (800c78c <main+0x360>)
  htim9.Init.Prescaler = 1679;
 800c6cc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c7ac <main+0x380>
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6d0:	60ac      	str	r4, [r5, #8]
  htim9.Init.Prescaler = 1679;
 800c6d2:	f240 638f 	movw	r3, #1679	; 0x68f
 800c6d6:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c6da:	4628      	mov	r0, r5
  htim9.Init.Period = 2150;
 800c6dc:	f640 0366 	movw	r3, #2150	; 0x866
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6e0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6e4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c6e6:	f7f6 fc93 	bl	8003010 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800c6ea:	a907      	add	r1, sp, #28
 800c6ec:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6ee:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800c6f2:	f7f6 fd63 	bl	80031bc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7f6 fca4 	bl	8003044 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 150;
 800c700:	2396      	movs	r3, #150	; 0x96
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c702:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c704:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c708:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c70c:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c70e:	f7f6 fce9 	bl	80030e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 800c712:	4628      	mov	r0, r5
 800c714:	f000 fa26 	bl	800cb64 <HAL_TIM_MspPostInit>
  hrng.Instance = RNG;
 800c718:	481d      	ldr	r0, [pc, #116]	; (800c790 <main+0x364>)
 800c71a:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <main+0x368>)
 800c71c:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c71e:	f7f6 fa73 	bl	8002c08 <HAL_RNG_Init>
  huart5.Instance = UART5;
 800c722:	481d      	ldr	r0, [pc, #116]	; (800c798 <main+0x36c>)
 800c724:	4b1d      	ldr	r3, [pc, #116]	; (800c79c <main+0x370>)
  huart3.Instance = USART3;
 800c726:	4d1e      	ldr	r5, [pc, #120]	; (800c7a0 <main+0x374>)
  huart5.Init.BaudRate = 115200;
 800c728:	e9c0 3800 	strd	r3, r8, [r0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c72c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c730:	e9c0 4704 	strd	r4, r7, [r0, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c734:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c738:	f7f6 ff74 	bl	8003624 <HAL_UART_Init>
  huart3.Instance = USART3;
 800c73c:	4b19      	ldr	r3, [pc, #100]	; (800c7a4 <main+0x378>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c73e:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 115200;
 800c740:	e9c5 3800 	strd	r3, r8, [r5]
 800c744:	e034      	b.n	800c7b0 <main+0x384>
 800c746:	bf00      	nop
 800c748:	40023800 	.word	0x40023800
 800c74c:	40021000 	.word	0x40021000
 800c750:	40020800 	.word	0x40020800
 800c754:	40020c00 	.word	0x40020c00
 800c758:	40020000 	.word	0x40020000
 800c75c:	40020400 	.word	0x40020400
 800c760:	20008708 	.word	0x20008708
 800c764:	40005400 	.word	0x40005400
 800c768:	000186a0 	.word	0x000186a0
 800c76c:	20008aa0 	.word	0x20008aa0
 800c770:	20008a60 	.word	0x20008a60
 800c774:	40011400 	.word	0x40011400
 800c778:	2000879c 	.word	0x2000879c
 800c77c:	40012000 	.word	0x40012000
 800c780:	0f000001 	.word	0x0f000001
 800c784:	200089dc 	.word	0x200089dc
 800c788:	40007400 	.word	0x40007400
 800c78c:	20008a08 	.word	0x20008a08
 800c790:	20008a48 	.word	0x20008a48
 800c794:	50060800 	.word	0x50060800
 800c798:	2000875c 	.word	0x2000875c
 800c79c:	40005000 	.word	0x40005000
 800c7a0:	200086c8 	.word	0x200086c8
 800c7a4:	40004800 	.word	0x40004800
 800c7a8:	10120000 	.word	0x10120000
 800c7ac:	40014000 	.word	0x40014000
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c7b0:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c7b4:	e9c5 4704 	strd	r4, r7, [r5, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c7b8:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c7bc:	f7f6 ff32 	bl	8003624 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800c7c0:	682a      	ldr	r2, [r5, #0]
 800c7c2:	68d3      	ldr	r3, [r2, #12]
 800c7c4:	f043 0320 	orr.w	r3, r3, #32
 800c7c8:	60d3      	str	r3, [r2, #12]
  int board_id = check_board_id();
 800c7ca:	f7ff fdaf 	bl	800c32c <check_board_id>
  switch ( board_id )
 800c7ce:	42b0      	cmp	r0, r6
 800c7d0:	d059      	beq.n	800c886 <main+0x45a>
 800c7d2:	2802      	cmp	r0, #2
 800c7d4:	d05d      	beq.n	800c892 <main+0x466>
  int referee = 0;
 800c7d6:	fab0 f480 	clz	r4, r0
 800c7da:	0964      	lsrs	r4, r4, #5
 800c7dc:	25fa      	movs	r5, #250	; 0xfa
  web_interface_init( &wi );
 800c7de:	484b      	ldr	r0, [pc, #300]	; (800c90c <main+0x4e0>)
 800c7e0:	f7fe fc32 	bl	800b048 <web_interface_init>
  MX_LWIP_Init_( ip_address );
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f7ff fbdb 	bl	800bfa0 <MX_LWIP_Init_>
  HAL_TIM_Base_Start_IT( &htim2 );
 800c7ea:	4849      	ldr	r0, [pc, #292]	; (800c910 <main+0x4e4>)
 800c7ec:	f7f6 faf2 	bl	8002dd4 <HAL_TIM_Base_Start_IT>
  event_init( &e );
 800c7f0:	4848      	ldr	r0, [pc, #288]	; (800c914 <main+0x4e8>)
 800c7f2:	f7ff fbc7 	bl	800bf84 <event_init>
  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	4947      	ldr	r1, [pc, #284]	; (800c918 <main+0x4ec>)
 800c7fa:	4848      	ldr	r0, [pc, #288]	; (800c91c <main+0x4f0>)
 800c7fc:	f7f6 ffb9 	bl	8003772 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800c800:	2100      	movs	r1, #0
 800c802:	4847      	ldr	r0, [pc, #284]	; (800c920 <main+0x4f4>)
 800c804:	f7f4 fe09 	bl	800141a <HAL_DAC_Start>
  HAL_ADC_Start( &hadc1 );
 800c808:	4846      	ldr	r0, [pc, #280]	; (800c924 <main+0x4f8>)
 800c80a:	f7f4 fc83 	bl	8001114 <HAL_ADC_Start>
  HAL_TIM_Base_Start( &htim9 );
 800c80e:	4846      	ldr	r0, [pc, #280]	; (800c928 <main+0x4fc>)
 800c810:	f7f6 face 	bl	8002db0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start( &htim9, TIM_CHANNEL_1 );
 800c814:	2100      	movs	r1, #0
 800c816:	4844      	ldr	r0, [pc, #272]	; (800c928 <main+0x4fc>)
 800c818:	f7f6 fd92 	bl	8003340 <HAL_TIM_PWM_Start>
  httpd_init();
 800c81c:	f7f9 f872 	bl	8005904 <httpd_init>
  if ( referee )
 800c820:	2c00      	cmp	r4, #0
 800c822:	d03c      	beq.n	800c89e <main+0x472>
    bumper_init_referee();
 800c824:	f7ff fd66 	bl	800c2f4 <bumper_init_referee>
  strcpy( json_orders, "{\"L\":[" );
 800c828:	4940      	ldr	r1, [pc, #256]	; (800c92c <main+0x500>)
 800c82a:	4841      	ldr	r0, [pc, #260]	; (800c930 <main+0x504>)
		if ( event_check( &wi.evt ) )
 800c82c:	4d37      	ldr	r5, [pc, #220]	; (800c90c <main+0x4e0>)
  strcpy( json_orders, "{\"L\":[" );
 800c82e:	f001 f9fd 	bl	800dc2c <strcpy>
				bum_game_register( bum_player.name );
 800c832:	4e40      	ldr	r6, [pc, #256]	; (800c934 <main+0x508>)
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c834:	4f40      	ldr	r7, [pc, #256]	; (800c938 <main+0x50c>)
    MX_USB_HOST_Process();
 800c836:	f000 fb71 	bl	800cf1c <MX_USB_HOST_Process>
    MX_LWIP_Process();
 800c83a:	f7ff fc03 	bl	800c044 <MX_LWIP_Process>
    if ( referee )
 800c83e:	2c00      	cmp	r4, #0
 800c840:	d030      	beq.n	800c8a4 <main+0x478>
      bum_process_referee();
 800c842:	f7fe fe71 	bl	800b528 <bum_process_referee>
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c846:	783b      	ldrb	r3, [r7, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d044      	beq.n	800c8d6 <main+0x4aa>
    if ( event_check( &e ) ) // If the event has been triggered
 800c84c:	4831      	ldr	r0, [pc, #196]	; (800c914 <main+0x4e8>)
 800c84e:	f7ff fb9f 	bl	800bf90 <event_check>
 800c852:	2800      	cmp	r0, #0
 800c854:	d0ef      	beq.n	800c836 <main+0x40a>
		bum_process( TIM2_MS );
 800c856:	200a      	movs	r0, #10
 800c858:	f7fe fbf2 	bl	800b040 <bum_process>
		N_BUMPER_DT_MS += TIM2_MS;
 800c85c:	4a37      	ldr	r2, [pc, #220]	; (800c93c <main+0x510>)
 800c85e:	6813      	ldr	r3, [r2, #0]
 800c860:	330a      	adds	r3, #10
        if ( N_BUMPER_DT_MS >= BUMPER_DT_MS )
 800c862:	2b63      	cmp	r3, #99	; 0x63
 800c864:	dc40      	bgt.n	800c8e8 <main+0x4bc>
		N_BUMPER_DT_MS += TIM2_MS;
 800c866:	6013      	str	r3, [r2, #0]
	  N500 += TIM2_MS;
 800c868:	4a35      	ldr	r2, [pc, #212]	; (800c940 <main+0x514>)
 800c86a:	6813      	ldr	r3, [r2, #0]
 800c86c:	330a      	adds	r3, #10
	  if ( N500 >= 500 )
 800c86e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
	  N500 += TIM2_MS;
 800c872:	6013      	str	r3, [r2, #0]
	  if ( N500 >= 500 )
 800c874:	dbde      	blt.n	800c834 <main+0x408>
		N500 = 0;
 800c876:	2300      	movs	r3, #0
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800c878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c87c:	4831      	ldr	r0, [pc, #196]	; (800c944 <main+0x518>)
		N500 = 0;
 800c87e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800c880:	f7f5 fa85 	bl	8001d8e <HAL_GPIO_TogglePin>
 800c884:	e7d5      	b.n	800c832 <main+0x406>
    	strcpy( bum_player.name, "EdT" );
 800c886:	4930      	ldr	r1, [pc, #192]	; (800c948 <main+0x51c>)
 800c888:	482a      	ldr	r0, [pc, #168]	; (800c934 <main+0x508>)
 800c88a:	f001 f9cf 	bl	800dc2c <strcpy>
    	ip_address = 251;
 800c88e:	25fb      	movs	r5, #251	; 0xfb
    	break;
 800c890:	e7a5      	b.n	800c7de <main+0x3b2>
    	strcpy( bum_player.name, PLAYER_NAME );
 800c892:	492e      	ldr	r1, [pc, #184]	; (800c94c <main+0x520>)
 800c894:	4827      	ldr	r0, [pc, #156]	; (800c934 <main+0x508>)
 800c896:	f001 f9c9 	bl	800dc2c <strcpy>
    	ip_address = 252;
 800c89a:	25fc      	movs	r5, #252	; 0xfc
    	break;
 800c89c:	e79f      	b.n	800c7de <main+0x3b2>
	bumper_init_player();
 800c89e:	f7ff fd0b 	bl	800c2b8 <bumper_init_player>
 800c8a2:	e7c1      	b.n	800c828 <main+0x3fc>
      bum_process_player();
 800c8a4:	f7fe fc3a 	bl	800b11c <bum_process_player>
		if ( event_check( &wi.evt ) )
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7ff fb71 	bl	800bf90 <event_check>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0cc      	beq.n	800c84c <main+0x420>
			if ( wi.button_register_player )
 800c8b2:	786b      	ldrb	r3, [r5, #1]
 800c8b4:	b11b      	cbz	r3, 800c8be <main+0x492>
				bum_game_register( bum_player.name );
 800c8b6:	4630      	mov	r0, r6
				wi.button_register_player = 0;
 800c8b8:	706c      	strb	r4, [r5, #1]
				bum_game_register( bum_player.name );
 800c8ba:	f7fe fbe1 	bl	800b080 <bum_game_register>
			if ( wi.button_acc )
 800c8be:	78ab      	ldrb	r3, [r5, #2]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d0c3      	beq.n	800c84c <main+0x420>
				wi.button_acc = 0;
 800c8c4:	2200      	movs	r2, #0
				bum_game_acceleration( wi.acc_x, wi.acc_y, 0 );
 800c8c6:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800c8ca:	f995 0003 	ldrsb.w	r0, [r5, #3]
				wi.button_acc = 0;
 800c8ce:	70aa      	strb	r2, [r5, #2]
				bum_game_acceleration( wi.acc_x, wi.acc_y, 0 );
 800c8d0:	f7fe fbf6 	bl	800b0c0 <bum_game_acceleration>
 800c8d4:	e7ba      	b.n	800c84c <main+0x420>
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c8d6:	4b1e      	ldr	r3, [pc, #120]	; (800c950 <main+0x524>)
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	07db      	lsls	r3, r3, #31
 800c8dc:	d5b6      	bpl.n	800c84c <main+0x420>
  		user_button_pushed = 1;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	703b      	strb	r3, [r7, #0]
  		bum_referee_start_game();
 800c8e2:	f7ff f969 	bl	800bbb8 <bum_referee_start_game>
 800c8e6:	e7b1      	b.n	800c84c <main+0x420>
          N_BUMPER_DT_MS = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	6013      	str	r3, [r2, #0]
		  if ( referee )
 800c8ec:	2c00      	cmp	r4, #0
 800c8ee:	d0bb      	beq.n	800c868 <main+0x43c>
			bum_referee_calculate( BUMPER_DT_MS );
 800c8f0:	2064      	movs	r0, #100	; 0x64
 800c8f2:	f7fe ff09 	bl	800b708 <bum_referee_calculate>
			if ( bum_referee_get_n_players() )
 800c8f6:	f7ff f97d 	bl	800bbf4 <bum_referee_get_n_players>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	b100      	cbz	r0, 800c900 <main+0x4d4>
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET ); // BLUE
 800c8fe:	2201      	movs	r2, #1
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET ); // BLUE
 800c900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c904:	480f      	ldr	r0, [pc, #60]	; (800c944 <main+0x518>)
 800c906:	f7f5 fa3d 	bl	8001d84 <HAL_GPIO_WritePin>
 800c90a:	e7ad      	b.n	800c868 <main+0x43c>
 800c90c:	20008a58 	.word	0x20008a58
 800c910:	20008aa0 	.word	0x20008aa0
 800c914:	20008b00 	.word	0x20008b00
 800c918:	20000e64 	.word	0x20000e64
 800c91c:	20008a60 	.word	0x20008a60
 800c920:	200089dc 	.word	0x200089dc
 800c924:	2000879c 	.word	0x2000879c
 800c928:	20008a08 	.word	0x20008a08
 800c92c:	0800edad 	.word	0x0800edad
 800c930:	200087e4 	.word	0x200087e4
 800c934:	20008af8 	.word	0x20008af8
 800c938:	20000e65 	.word	0x20000e65
 800c93c:	20000e60 	.word	0x20000e60
 800c940:	20000e5c 	.word	0x20000e5c
 800c944:	40020c00 	.word	0x40020c00
 800c948:	08012734 	.word	0x08012734
 800c94c:	08012738 	.word	0x08012738
 800c950:	40020000 	.word	0x40020000

0800c954 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c954:	4770      	bx	lr

0800c956 <httpd_post_begin>:
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request,
                       u16_t http_request_len, int content_len, char *response_uri,
                       u16_t response_uri_len, u8_t *post_auto_wnd)
{
	return ERR_OK;
}
 800c956:	2000      	movs	r0, #0
 800c958:	4770      	bx	lr

0800c95a <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
	return ERR_OK;
}
 800c95a:	2000      	movs	r0, #0
 800c95c:	4770      	bx	lr

0800c95e <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{

}
 800c95e:	4770      	bx	lr

0800c960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c960:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c962:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <HAL_MspInit+0x34>)
 800c964:	2100      	movs	r1, #0
 800c966:	9100      	str	r1, [sp, #0]
 800c968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c96a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c96e:	645a      	str	r2, [r3, #68]	; 0x44
 800c970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c972:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c976:	9200      	str	r2, [sp, #0]
 800c978:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c97a:	9101      	str	r1, [sp, #4]
 800c97c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c97e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c982:	641a      	str	r2, [r3, #64]	; 0x40
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c98e:	b002      	add	sp, #8
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40023800 	.word	0x40023800

0800c998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c998:	b510      	push	{r4, lr}
 800c99a:	4604      	mov	r4, r0
 800c99c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c99e:	2214      	movs	r2, #20
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	a803      	add	r0, sp, #12
 800c9a4:	f001 f82e 	bl	800da04 <memset>
  if(hadc->Instance==ADC1)
 800c9a8:	6822      	ldr	r2, [r4, #0]
 800c9aa:	4b12      	ldr	r3, [pc, #72]	; (800c9f4 <HAL_ADC_MspInit+0x5c>)
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d11e      	bne.n	800c9ee <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c9b0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	9101      	str	r1, [sp, #4]
 800c9b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = AI_PB1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c9ba:	480f      	ldr	r0, [pc, #60]	; (800c9f8 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c9bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9c0:	645a      	str	r2, [r3, #68]	; 0x44
 800c9c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9c4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800c9c8:	9201      	str	r2, [sp, #4]
 800c9ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9cc:	9102      	str	r1, [sp, #8]
 800c9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9d0:	f042 0202 	orr.w	r2, r2, #2
 800c9d4:	631a      	str	r2, [r3, #48]	; 0x30
 800c9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	9302      	str	r3, [sp, #8]
 800c9de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	2303      	movs	r3, #3
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c9e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c9ea:	f7f5 f8eb 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c9ee:	b008      	add	sp, #32
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	bf00      	nop
 800c9f4:	40012000 	.word	0x40012000
 800c9f8:	40020400 	.word	0x40020400

0800c9fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	4604      	mov	r4, r0
 800ca00:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca02:	2214      	movs	r2, #20
 800ca04:	2100      	movs	r1, #0
 800ca06:	a803      	add	r0, sp, #12
 800ca08:	f000 fffc 	bl	800da04 <memset>
  if(hdac->Instance==DAC)
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <HAL_DAC_MspInit+0x5c>)
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d11e      	bne.n	800ca52 <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800ca14:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800ca18:	2100      	movs	r1, #0
 800ca1a:	9101      	str	r1, [sp, #4]
 800ca1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = AO_PA4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800ca1e:	480f      	ldr	r0, [pc, #60]	; (800ca5c <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800ca20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ca24:	641a      	str	r2, [r3, #64]	; 0x40
 800ca26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca28:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ca2c:	9201      	str	r2, [sp, #4]
 800ca2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca30:	9102      	str	r1, [sp, #8]
 800ca32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca34:	f042 0201 	orr.w	r2, r2, #1
 800ca38:	631a      	str	r2, [r3, #48]	; 0x30
 800ca3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	9302      	str	r3, [sp, #8]
 800ca42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca44:	2210      	movs	r2, #16
 800ca46:	2303      	movs	r3, #3
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800ca48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800ca4e:	f7f5 f8b9 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800ca52:	b008      	add	sp, #32
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop
 800ca58:	40007400 	.word	0x40007400
 800ca5c:	40020000 	.word	0x40020000

0800ca60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ca60:	b530      	push	{r4, r5, lr}
 800ca62:	4604      	mov	r4, r0
 800ca64:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca66:	2214      	movs	r2, #20
 800ca68:	2100      	movs	r1, #0
 800ca6a:	a803      	add	r0, sp, #12
 800ca6c:	f000 ffca 	bl	800da04 <memset>
  if(hi2c->Instance==I2C1)
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	4b14      	ldr	r3, [pc, #80]	; (800cac4 <HAL_I2C_MspInit+0x64>)
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d122      	bne.n	800cabe <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca78:	4c13      	ldr	r4, [pc, #76]	; (800cac8 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca7a:	4814      	ldr	r0, [pc, #80]	; (800cacc <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca7c:	2500      	movs	r5, #0
 800ca7e:	9501      	str	r5, [sp, #4]
 800ca80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca82:	f043 0302 	orr.w	r3, r3, #2
 800ca86:	6323      	str	r3, [r4, #48]	; 0x30
 800ca88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ca92:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ca96:	2312      	movs	r3, #18
 800ca98:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800caa0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800caa2:	2304      	movs	r3, #4
 800caa4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800caa6:	f7f5 f88d 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800caaa:	9502      	str	r5, [sp, #8]
 800caac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cab2:	6423      	str	r3, [r4, #64]	; 0x40
 800cab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caba:	9302      	str	r3, [sp, #8]
 800cabc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800cabe:	b009      	add	sp, #36	; 0x24
 800cac0:	bd30      	pop	{r4, r5, pc}
 800cac2:	bf00      	nop
 800cac4:	40005400 	.word	0x40005400
 800cac8:	40023800 	.word	0x40023800
 800cacc:	40020400 	.word	0x40020400

0800cad0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 800cad0:	6802      	ldr	r2, [r0, #0]
 800cad2:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <HAL_RNG_MspInit+0x28>)
 800cad4:	429a      	cmp	r2, r3
{
 800cad6:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 800cad8:	d10b      	bne.n	800caf2 <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800cada:	2300      	movs	r3, #0
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	4b07      	ldr	r3, [pc, #28]	; (800cafc <HAL_RNG_MspInit+0x2c>)
 800cae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cae6:	635a      	str	r2, [r3, #52]	; 0x34
 800cae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800caf2:	b002      	add	sp, #8
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	50060800 	.word	0x50060800
 800cafc:	40023800 	.word	0x40023800

0800cb00 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800cb00:	6803      	ldr	r3, [r0, #0]
 800cb02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800cb06:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800cb08:	d116      	bne.n	800cb38 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cb10:	9200      	str	r2, [sp, #0]
 800cb12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cb14:	f041 0101 	orr.w	r1, r1, #1
 800cb18:	6419      	str	r1, [r3, #64]	; 0x40
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cb22:	4611      	mov	r1, r2
 800cb24:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cb26:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cb28:	f7f4 fc0c 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cb2c:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800cb2e:	b003      	add	sp, #12
 800cb30:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cb34:	f7f4 bc3a 	b.w	80013ac <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM9)
 800cb38:	4a08      	ldr	r2, [pc, #32]	; (800cb5c <HAL_TIM_Base_MspInit+0x5c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d10b      	bne.n	800cb56 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <HAL_TIM_Base_MspInit+0x60>)
 800cb44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb4a:	645a      	str	r2, [r3, #68]	; 0x44
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	9b01      	ldr	r3, [sp, #4]
}
 800cb56:	b003      	add	sp, #12
 800cb58:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb5c:	40014000 	.word	0x40014000
 800cb60:	40023800 	.word	0x40023800

0800cb64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cb64:	b510      	push	{r4, lr}
 800cb66:	4604      	mov	r4, r0
 800cb68:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb6a:	2214      	movs	r2, #20
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	a801      	add	r0, sp, #4
 800cb70:	f000 ff48 	bl	800da04 <memset>
  if(htim->Instance==TIM9)
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	4b0d      	ldr	r3, [pc, #52]	; (800cbac <HAL_TIM_MspPostInit+0x48>)
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d115      	bne.n	800cba8 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb82:	480c      	ldr	r0, [pc, #48]	; (800cbb4 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cb84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb86:	f042 0210 	orr.w	r2, r2, #16
 800cb8a:	631a      	str	r2, [r3, #48]	; 0x30
 800cb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8e:	f003 0310 	and.w	r3, r3, #16
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb96:	2220      	movs	r2, #32
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cba0:	2303      	movs	r3, #3
 800cba2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cba4:	f7f5 f80e 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cba8:	b006      	add	sp, #24
 800cbaa:	bd10      	pop	{r4, pc}
 800cbac:	40014000 	.word	0x40014000
 800cbb0:	40023800 	.word	0x40023800
 800cbb4:	40021000 	.word	0x40021000

0800cbb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbc0:	2214      	movs	r2, #20
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	a807      	add	r0, sp, #28
 800cbc6:	f000 ff1d 	bl	800da04 <memset>
  if(huart->Instance==UART5)
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	4a52      	ldr	r2, [pc, #328]	; (800cd18 <HAL_UART_MspInit+0x160>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d144      	bne.n	800cc5c <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800cbd2:	4b52      	ldr	r3, [pc, #328]	; (800cd1c <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbd4:	4852      	ldr	r0, [pc, #328]	; (800cd20 <HAL_UART_MspInit+0x168>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800cbd6:	2400      	movs	r4, #0
 800cbd8:	9400      	str	r4, [sp, #0]
 800cbda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cbe0:	641a      	str	r2, [r3, #64]	; 0x40
 800cbe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbe4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cbe8:	9200      	str	r2, [sp, #0]
 800cbea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbec:	9401      	str	r4, [sp, #4]
 800cbee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbf0:	f042 0204 	orr.w	r2, r2, #4
 800cbf4:	631a      	str	r2, [r3, #48]	; 0x30
 800cbf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbf8:	f002 0204 	and.w	r2, r2, #4
 800cbfc:	9201      	str	r2, [sp, #4]
 800cbfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc00:	9402      	str	r4, [sp, #8]
 800cc02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc04:	f042 0208 	orr.w	r2, r2, #8
 800cc08:	631a      	str	r2, [r3, #48]	; 0x30
 800cc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0c:	f003 0308 	and.w	r3, r3, #8
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc14:	f04f 0802 	mov.w	r8, #2
 800cc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc1c:	2701      	movs	r7, #1
 800cc1e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cc20:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc22:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc24:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc28:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cc2c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc2e:	f7f4 ffc9 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cc32:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc34:	a907      	add	r1, sp, #28
 800cc36:	483b      	ldr	r0, [pc, #236]	; (800cd24 <HAL_UART_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cc38:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc3a:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc3e:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc42:	f7f4 ffbf 	bl	8001bc4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800cc46:	2035      	movs	r0, #53	; 0x35
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	f7f4 fb7a 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800cc50:	2035      	movs	r0, #53	; 0x35
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cc52:	f7f4 fbab 	bl	80013ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800cc56:	b00c      	add	sp, #48	; 0x30
 800cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART3)
 800cc5c:	4a32      	ldr	r2, [pc, #200]	; (800cd28 <HAL_UART_MspInit+0x170>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d12b      	bne.n	800ccba <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800cc62:	4b2e      	ldr	r3, [pc, #184]	; (800cd1c <HAL_UART_MspInit+0x164>)
 800cc64:	2400      	movs	r4, #0
 800cc66:	9403      	str	r4, [sp, #12]
 800cc68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cc6e:	641a      	str	r2, [r3, #64]	; 0x40
 800cc70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800cc76:	9203      	str	r2, [sp, #12]
 800cc78:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc7a:	9404      	str	r4, [sp, #16]
 800cc7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc7e:	f042 0208 	orr.w	r2, r2, #8
 800cc82:	631a      	str	r2, [r3, #48]	; 0x30
 800cc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc86:	f003 0308 	and.w	r3, r3, #8
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc8e:	f44f 7040 	mov.w	r0, #768	; 0x300
 800cc92:	2302      	movs	r3, #2
 800cc94:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc98:	2501      	movs	r5, #1
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cca0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cca2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cca4:	481f      	ldr	r0, [pc, #124]	; (800cd24 <HAL_UART_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cca6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cca8:	f7f4 ff8c 	bl	8001bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ccac:	2027      	movs	r0, #39	; 0x27
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	f7f4 fb47 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ccb6:	2027      	movs	r0, #39	; 0x27
 800ccb8:	e7cb      	b.n	800cc52 <HAL_UART_MspInit+0x9a>
  else if(huart->Instance==USART6)
 800ccba:	4a1c      	ldr	r2, [pc, #112]	; (800cd2c <HAL_UART_MspInit+0x174>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d1ca      	bne.n	800cc56 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800ccc0:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <HAL_UART_MspInit+0x164>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccc2:	4817      	ldr	r0, [pc, #92]	; (800cd20 <HAL_UART_MspInit+0x168>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800ccc4:	2400      	movs	r4, #0
 800ccc6:	9405      	str	r4, [sp, #20]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccca:	f042 0220 	orr.w	r2, r2, #32
 800ccce:	645a      	str	r2, [r3, #68]	; 0x44
 800ccd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccd2:	f002 0220 	and.w	r2, r2, #32
 800ccd6:	9205      	str	r2, [sp, #20]
 800ccd8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccda:	9406      	str	r4, [sp, #24]
 800ccdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccde:	f042 0204 	orr.w	r2, r2, #4
 800cce2:	631a      	str	r2, [r3, #48]	; 0x30
 800cce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce6:	f003 0304 	and.w	r3, r3, #4
 800ccea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccec:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccf0:	2302      	movs	r3, #2
 800ccf2:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ccfe:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd00:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cd02:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd04:	f7f4 ff5e 	bl	8001bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cd08:	2047      	movs	r0, #71	; 0x47
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f7f4 fb19 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cd12:	2047      	movs	r0, #71	; 0x47
 800cd14:	e79d      	b.n	800cc52 <HAL_UART_MspInit+0x9a>
 800cd16:	bf00      	nop
 800cd18:	40005000 	.word	0x40005000
 800cd1c:	40023800 	.word	0x40023800
 800cd20:	40020800 	.word	0x40020800
 800cd24:	40020c00 	.word	0x40020c00
 800cd28:	40004800 	.word	0x40004800
 800cd2c:	40011400 	.word	0x40011400

0800cd30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cd30:	4770      	bx	lr

0800cd32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cd32:	e7fe      	b.n	800cd32 <HardFault_Handler>

0800cd34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cd34:	e7fe      	b.n	800cd34 <MemManage_Handler>

0800cd36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cd36:	e7fe      	b.n	800cd36 <BusFault_Handler>

0800cd38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cd38:	e7fe      	b.n	800cd38 <UsageFault_Handler>

0800cd3a <SVC_Handler>:
 800cd3a:	4770      	bx	lr

0800cd3c <DebugMon_Handler>:
 800cd3c:	4770      	bx	lr

0800cd3e <PendSV_Handler>:
 800cd3e:	4770      	bx	lr

0800cd40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd40:	f7f4 b90a 	b.w	8000f58 <HAL_IncTick>

0800cd44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cd44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  event_trigger( &e );
 800cd46:	4804      	ldr	r0, [pc, #16]	; (800cd58 <TIM2_IRQHandler+0x14>)
 800cd48:	f7ff f91f 	bl	800bf8a <event_trigger>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cd4c:	4803      	ldr	r0, [pc, #12]	; (800cd5c <TIM2_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cd4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 800cd52:	f7f6 b855 	b.w	8002e00 <HAL_TIM_IRQHandler>
 800cd56:	bf00      	nop
 800cd58:	20008b00 	.word	0x20008b00
 800cd5c:	20008aa0 	.word	0x20008aa0

0800cd60 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
  uint32_t isrflags   = READ_REG(huart3.Instance->SR);
 800cd60:	4a1e      	ldr	r2, [pc, #120]	; (800cddc <USART3_IRQHandler+0x7c>)
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	6819      	ldr	r1, [r3, #0]
  uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 800cd66:	68d8      	ldr	r0, [r3, #12]
{
 800cd68:	b410      	push	{r4}
  //uint32_t cr3its     = READ_REG(huart3.Instance->CR3);
  uint32_t errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));

  if ( !errorflags )
 800cd6a:	070c      	lsls	r4, r1, #28
 800cd6c:	d109      	bne.n	800cd82 <USART3_IRQHandler+0x22>
  {
	  if (( (isrflags & USART_SR_RXNE) != RESET ) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd6e:	068c      	lsls	r4, r1, #26
 800cd70:	d508      	bpl.n	800cd84 <USART3_IRQHandler+0x24>
 800cd72:	0684      	lsls	r4, r0, #26
 800cd74:	d506      	bpl.n	800cd84 <USART3_IRQHandler+0x24>
	  {
		  bum_notify_recv( huart3.Instance->DR & 0xFF );
 800cd76:	6858      	ldr	r0, [r3, #4]
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800cd78:	f85d 4b04 	ldr.w	r4, [sp], #4
		  bum_notify_recv( huart3.Instance->DR & 0xFF );
 800cd7c:	b2c0      	uxtb	r0, r0
 800cd7e:	f7fe b95d 	b.w	800b03c <bum_notify_recv>
	  (void)huart3.Instance->DR;
 800cd82:	685c      	ldr	r4, [r3, #4]
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cd84:	060c      	lsls	r4, r1, #24
 800cd86:	d51a      	bpl.n	800cdbe <USART3_IRQHandler+0x5e>
 800cd88:	0604      	lsls	r4, r0, #24
 800cd8a:	d518      	bpl.n	800cdbe <USART3_IRQHandler+0x5e>
    	  if (huart3.gState == HAL_UART_STATE_BUSY_TX)
 800cd8c:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 800cd90:	2921      	cmp	r1, #33	; 0x21
 800cd92:	d111      	bne.n	800cdb8 <USART3_IRQHandler+0x58>
    		  huart3.Instance->DR = (uint8_t)(*huart3.pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd94:	6a11      	ldr	r1, [r2, #32]
 800cd96:	1c48      	adds	r0, r1, #1
 800cd98:	6210      	str	r0, [r2, #32]
 800cd9a:	7809      	ldrb	r1, [r1, #0]
 800cd9c:	6059      	str	r1, [r3, #4]
    	    if (--huart3.TxXferCount == 0U)
 800cd9e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800cda0:	3901      	subs	r1, #1
 800cda2:	b289      	uxth	r1, r1
 800cda4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cda6:	b939      	cbnz	r1, 800cdb8 <USART3_IRQHandler+0x58>
    	      __HAL_UART_DISABLE_IT(&huart3, UART_IT_TXE);
 800cda8:	68da      	ldr	r2, [r3, #12]
 800cdaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdae:	60da      	str	r2, [r3, #12]
    	      __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 800cdb0:	68da      	ldr	r2, [r3, #12]
 800cdb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdb6:	60da      	str	r2, [r3, #12]
}
 800cdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdbc:	4770      	bx	lr
    if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cdbe:	064c      	lsls	r4, r1, #25
 800cdc0:	d5fa      	bpl.n	800cdb8 <USART3_IRQHandler+0x58>
 800cdc2:	0641      	lsls	r1, r0, #25
 800cdc4:	d5f8      	bpl.n	800cdb8 <USART3_IRQHandler+0x58>
    	  __HAL_UART_DISABLE_IT(&huart3, UART_IT_TC);
 800cdc6:	68d9      	ldr	r1, [r3, #12]
}
 800cdc8:	f85d 4b04 	ldr.w	r4, [sp], #4
    	  __HAL_UART_DISABLE_IT(&huart3, UART_IT_TC);
 800cdcc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800cdd0:	60d9      	str	r1, [r3, #12]
    	  huart3.gState = HAL_UART_STATE_READY;
 800cdd2:	2320      	movs	r3, #32
 800cdd4:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    	  bum_notify_endtx();
 800cdd8:	f7fe b934 	b.w	800b044 <bum_notify_endtx>
 800cddc:	200086c8 	.word	0x200086c8

0800cde0 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <UART5_IRQHandler+0x8>)
 800cde2:	f7f6 bd2b 	b.w	800383c <HAL_UART_IRQHandler>
 800cde6:	bf00      	nop
 800cde8:	2000875c 	.word	0x2000875c

0800cdec <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <OTG_FS_IRQHandler+0x8>)
 800cdee:	f7f5 b8c9 	b.w	8001f84 <HAL_HCD_IRQHandler>
 800cdf2:	bf00      	nop
 800cdf4:	20008ed0 	.word	0x20008ed0

0800cdf8 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800cdf8:	4801      	ldr	r0, [pc, #4]	; (800ce00 <USART6_IRQHandler+0x8>)
 800cdfa:	f7f6 bd1f 	b.w	800383c <HAL_UART_IRQHandler>
 800cdfe:	bf00      	nop
 800ce00:	20008a60 	.word	0x20008a60

0800ce04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	460e      	mov	r6, r1
 800ce08:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	1ba3      	subs	r3, r4, r6
 800ce0e:	429d      	cmp	r5, r3
 800ce10:	dc01      	bgt.n	800ce16 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800ce12:	4628      	mov	r0, r5
 800ce14:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800ce16:	f3af 8000 	nop.w
 800ce1a:	f804 0b01 	strb.w	r0, [r4], #1
 800ce1e:	e7f5      	b.n	800ce0c <_read+0x8>

0800ce20 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ce20:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <_sbrk+0x28>)
 800ce22:	6819      	ldr	r1, [r3, #0]
{
 800ce24:	4602      	mov	r2, r0
	if (heap_end == 0)
 800ce26:	b909      	cbnz	r1, 800ce2c <_sbrk+0xc>
		heap_end = &end;
 800ce28:	4908      	ldr	r1, [pc, #32]	; (800ce4c <_sbrk+0x2c>)
 800ce2a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800ce2c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800ce2e:	4669      	mov	r1, sp
 800ce30:	4402      	add	r2, r0
 800ce32:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800ce34:	bf89      	itett	hi
 800ce36:	4b06      	ldrhi	r3, [pc, #24]	; (800ce50 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800ce38:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800ce3a:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800ce3c:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800ce40:	bf88      	it	hi
 800ce42:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000e68 	.word	0x20000e68
 800ce4c:	2000a52c 	.word	0x2000a52c
 800ce50:	2000a528 	.word	0x2000a528

0800ce54 <_close>:

int _close(int file)
{
	return -1;
}
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	4770      	bx	lr

0800ce5a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800ce5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce5e:	604b      	str	r3, [r1, #4]
	return 0;
}
 800ce60:	2000      	movs	r0, #0
 800ce62:	4770      	bx	lr

0800ce64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800ce64:	2001      	movs	r0, #1
 800ce66:	4770      	bx	lr

0800ce68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800ce68:	2000      	movs	r0, #0
 800ce6a:	4770      	bx	lr

0800ce6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ce6c:	490f      	ldr	r1, [pc, #60]	; (800ceac <SystemInit+0x40>)
 800ce6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800ce72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <SystemInit+0x44>)
 800ce7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ce7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800ce80:	f042 0201 	orr.w	r2, r2, #1
 800ce84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800ce86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800ce8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ce92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ce94:	4a07      	ldr	r2, [pc, #28]	; (800ceb4 <SystemInit+0x48>)
 800ce96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cea0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cea6:	608b      	str	r3, [r1, #8]
#endif
}
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	e000ed00 	.word	0xe000ed00
 800ceb0:	40023800 	.word	0x40023800
 800ceb4:	24003010 	.word	0x24003010

0800ceb8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ceb8:	2904      	cmp	r1, #4
 800ceba:	d00a      	beq.n	800ced2 <USBH_UserProcess+0x1a>
 800cebc:	2905      	cmp	r1, #5
 800cebe:	d004      	beq.n	800ceca <USBH_UserProcess+0x12>
 800cec0:	2902      	cmp	r1, #2
 800cec2:	d105      	bne.n	800ced0 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cec4:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <USBH_UserProcess+0x20>)
 800cec6:	7019      	strb	r1, [r3, #0]
  break;
 800cec8:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800ceca:	4b03      	ldr	r3, [pc, #12]	; (800ced8 <USBH_UserProcess+0x20>)
 800cecc:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cece:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ced0:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800ced2:	4b01      	ldr	r3, [pc, #4]	; (800ced8 <USBH_UserProcess+0x20>)
 800ced4:	2201      	movs	r2, #1
 800ced6:	e7fa      	b.n	800cece <USBH_UserProcess+0x16>
 800ced8:	20000e6c 	.word	0x20000e6c

0800cedc <MX_USB_HOST_Init>:
{
 800cedc:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cede:	2201      	movs	r2, #1
 800cee0:	490b      	ldr	r1, [pc, #44]	; (800cf10 <MX_USB_HOST_Init+0x34>)
 800cee2:	480c      	ldr	r0, [pc, #48]	; (800cf14 <MX_USB_HOST_Init+0x38>)
 800cee4:	f7f7 fa78 	bl	80043d8 <USBH_Init>
 800cee8:	b108      	cbz	r0, 800ceee <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800ceea:	f7ff fd33 	bl	800c954 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ceee:	490a      	ldr	r1, [pc, #40]	; (800cf18 <MX_USB_HOST_Init+0x3c>)
 800cef0:	4808      	ldr	r0, [pc, #32]	; (800cf14 <MX_USB_HOST_Init+0x38>)
 800cef2:	f7f7 fa88 	bl	8004406 <USBH_RegisterClass>
 800cef6:	b108      	cbz	r0, 800cefc <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800cef8:	f7ff fd2c 	bl	800c954 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cefc:	4805      	ldr	r0, [pc, #20]	; (800cf14 <MX_USB_HOST_Init+0x38>)
 800cefe:	f7f7 fab4 	bl	800446a <USBH_Start>
 800cf02:	b118      	cbz	r0, 800cf0c <MX_USB_HOST_Init+0x30>
}
 800cf04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800cf08:	f7ff bd24 	b.w	800c954 <Error_Handler>
}
 800cf0c:	bd08      	pop	{r3, pc}
 800cf0e:	bf00      	nop
 800cf10:	0800ceb9 	.word	0x0800ceb9
 800cf14:	20008b04 	.word	0x20008b04
 800cf18:	20000008 	.word	0x20000008

0800cf1c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800cf1c:	4801      	ldr	r0, [pc, #4]	; (800cf24 <MX_USB_HOST_Process+0x8>)
 800cf1e:	f7f7 baae 	b.w	800447e <USBH_Process>
 800cf22:	bf00      	nop
 800cf24:	20008b04 	.word	0x20008b04

0800cf28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf2e:	2214      	movs	r2, #20
 800cf30:	2100      	movs	r1, #0
 800cf32:	a803      	add	r0, sp, #12
 800cf34:	f000 fd66 	bl	800da04 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf3e:	d135      	bne.n	800cfac <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf40:	4c1b      	ldr	r4, [pc, #108]	; (800cfb0 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cf42:	481c      	ldr	r0, [pc, #112]	; (800cfb4 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf44:	2500      	movs	r5, #0
 800cf46:	9501      	str	r5, [sp, #4]
 800cf48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf4a:	f043 0301 	orr.w	r3, r3, #1
 800cf4e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cf5a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cf5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf60:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cf62:	f7f4 fe2f 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf66:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf72:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf74:	480f      	ldr	r0, [pc, #60]	; (800cfb4 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf78:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf7c:	f7f4 fe22 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf86:	6363      	str	r3, [r4, #52]	; 0x34
 800cf88:	9502      	str	r5, [sp, #8]
 800cf8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf90:	6463      	str	r3, [r4, #68]	; 0x44
 800cf92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf98:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf9a:	2043      	movs	r0, #67	; 0x43
 800cf9c:	462a      	mov	r2, r5
 800cf9e:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfa0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfa2:	f7f4 f9cf 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfa6:	2043      	movs	r0, #67	; 0x43
 800cfa8:	f7f4 fa00 	bl	80013ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfac:	b009      	add	sp, #36	; 0x24
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	40023800 	.word	0x40023800
 800cfb4:	40020000 	.word	0x40020000

0800cfb8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800cfb8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cfbc:	f7f7 bba8 	b.w	8004710 <USBH_LL_IncTimer>

0800cfc0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800cfc0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cfc4:	f7f7 bbba 	b.w	800473c <USBH_LL_Connect>

0800cfc8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800cfc8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cfcc:	f7f7 bbca 	b.w	8004764 <USBH_LL_Disconnect>

0800cfd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cfd0:	4770      	bx	lr

0800cfd2 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800cfd2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cfd6:	f7f7 bba9 	b.w	800472c <USBH_LL_PortEnabled>

0800cfda <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800cfda:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cfde:	f7f7 bba9 	b.w	8004734 <USBH_LL_PortDisabled>
	...

0800cfe4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cfe4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cfe6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800cfea:	2b01      	cmp	r3, #1
{
 800cfec:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800cfee:	d11b      	bne.n	800d028 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cff0:	480e      	ldr	r0, [pc, #56]	; (800d02c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800cff2:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cff6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cffa:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cffc:	2208      	movs	r2, #8
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cffe:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d002:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d004:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.pData = phost;
 800d006:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d00a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d00c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d010:	f7f4 ff0d 	bl	8001e2e <HAL_HCD_Init>
 800d014:	b108      	cbz	r0, 800d01a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800d016:	f7ff fc9d 	bl	800c954 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d01a:	4804      	ldr	r0, [pc, #16]	; (800d02c <USBH_LL_Init+0x48>)
 800d01c:	f7f5 fadc 	bl	80025d8 <HAL_HCD_GetCurrentFrame>
 800d020:	4601      	mov	r1, r0
 800d022:	4620      	mov	r0, r4
 800d024:	f7f7 fb71 	bl	800470a <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800d028:	2000      	movs	r0, #0
 800d02a:	bd10      	pop	{r4, pc}
 800d02c:	20008ed0 	.word	0x20008ed0

0800d030 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d030:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800d032:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d036:	f7f5 fa99 	bl	800256c <HAL_HCD_Start>
 800d03a:	2803      	cmp	r0, #3
 800d03c:	bf96      	itet	ls
 800d03e:	4b02      	ldrls	r3, [pc, #8]	; (800d048 <USBH_LL_Start+0x18>)
 800d040:	2002      	movhi	r0, #2
 800d042:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d044:	bd08      	pop	{r3, pc}
 800d046:	bf00      	nop
 800d048:	08012756 	.word	0x08012756

0800d04c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d04c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800d04e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d052:	f7f5 faa1 	bl	8002598 <HAL_HCD_Stop>
 800d056:	2803      	cmp	r0, #3
 800d058:	bf96      	itet	ls
 800d05a:	4b02      	ldrls	r3, [pc, #8]	; (800d064 <USBH_LL_Stop+0x18>)
 800d05c:	2002      	movhi	r0, #2
 800d05e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800d060:	bd08      	pop	{r3, pc}
 800d062:	bf00      	nop
 800d064:	08012756 	.word	0x08012756

0800d068 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d068:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d06a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d06e:	f7f5 fab6 	bl	80025de <HAL_HCD_GetCurrentSpeed>
 800d072:	2802      	cmp	r0, #2
 800d074:	bf96      	itet	ls
 800d076:	4b02      	ldrls	r3, [pc, #8]	; (800d080 <USBH_LL_GetSpeed+0x18>)
 800d078:	2001      	movhi	r0, #1
 800d07a:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800d07c:	bd08      	pop	{r3, pc}
 800d07e:	bf00      	nop
 800d080:	08012753 	.word	0x08012753

0800d084 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d084:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d086:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d08a:	f7f5 fa97 	bl	80025bc <HAL_HCD_ResetPort>
 800d08e:	2803      	cmp	r0, #3
 800d090:	bf96      	itet	ls
 800d092:	4b02      	ldrls	r3, [pc, #8]	; (800d09c <USBH_LL_ResetPort+0x18>)
 800d094:	2002      	movhi	r0, #2
 800d096:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d098:	bd08      	pop	{r3, pc}
 800d09a:	bf00      	nop
 800d09c:	08012756 	.word	0x08012756

0800d0a0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d0a0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d0a4:	f7f5 ba93 	b.w	80025ce <HAL_HCD_HC_GetXferCount>

0800d0a8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d0aa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d0ae:	9402      	str	r4, [sp, #8]
 800d0b0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800d0b4:	9401      	str	r4, [sp, #4]
 800d0b6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d0ba:	9400      	str	r4, [sp, #0]
 800d0bc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d0c0:	f7f4 fe6c 	bl	8001d9c <HAL_HCD_HC_Init>
 800d0c4:	2803      	cmp	r0, #3
 800d0c6:	bf9a      	itte	ls
 800d0c8:	4b02      	ldrls	r3, [pc, #8]	; (800d0d4 <USBH_LL_OpenPipe+0x2c>)
 800d0ca:	5c18      	ldrbls	r0, [r3, r0]
 800d0cc:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d0ce:	b004      	add	sp, #16
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08012756 	.word	0x08012756

0800d0d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d0d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d0da:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d0de:	f7f4 fe94 	bl	8001e0a <HAL_HCD_HC_Halt>
 800d0e2:	2803      	cmp	r0, #3
 800d0e4:	bf96      	itet	ls
 800d0e6:	4b02      	ldrls	r3, [pc, #8]	; (800d0f0 <USBH_LL_ClosePipe+0x18>)
 800d0e8:	2002      	movhi	r0, #2
 800d0ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d0ec:	bd08      	pop	{r3, pc}
 800d0ee:	bf00      	nop
 800d0f0:	08012756 	.word	0x08012756

0800d0f4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d0f6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800d0fa:	9403      	str	r4, [sp, #12]
 800d0fc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d100:	9402      	str	r4, [sp, #8]
 800d102:	9c07      	ldr	r4, [sp, #28]
 800d104:	9401      	str	r4, [sp, #4]
 800d106:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d10a:	9400      	str	r4, [sp, #0]
 800d10c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d110:	f7f4 fed8 	bl	8001ec4 <HAL_HCD_HC_SubmitRequest>
 800d114:	2803      	cmp	r0, #3
 800d116:	bf9a      	itte	ls
 800d118:	4b02      	ldrls	r3, [pc, #8]	; (800d124 <USBH_LL_SubmitURB+0x30>)
 800d11a:	5c18      	ldrbls	r0, [r3, r0]
 800d11c:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d11e:	b004      	add	sp, #16
 800d120:	bd10      	pop	{r4, pc}
 800d122:	bf00      	nop
 800d124:	08012756 	.word	0x08012756

0800d128 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d128:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d12c:	f7f5 ba49 	b.w	80025c2 <HAL_HCD_HC_GetURBState>

0800d130 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d130:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800d132:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800d136:	2b01      	cmp	r3, #1
 800d138:	d102      	bne.n	800d140 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800d13a:	4608      	mov	r0, r1
 800d13c:	f000 f816 	bl	800d16c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d140:	20c8      	movs	r0, #200	; 0xc8
 800d142:	f7f3 ff1b 	bl	8000f7c <HAL_Delay>
  return USBH_OK;
}
 800d146:	2000      	movs	r0, #0
 800d148:	bd08      	pop	{r3, pc}

0800d14a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d14a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800d14e:	2328      	movs	r3, #40	; 0x28
 800d150:	fb03 0101 	mla	r1, r3, r1, r0
 800d154:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800d158:	b11b      	cbz	r3, 800d162 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d15a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800d15e:	2000      	movs	r0, #0
 800d160:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800d162:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800d166:	e7fa      	b.n	800d15e <USBH_LL_SetToggle+0x14>

0800d168 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800d168:	f7f3 bf08 	b.w	8000f7c <HAL_Delay>

0800d16c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d16c:	fab0 f280 	clz	r2, r0
 800d170:	0952      	lsrs	r2, r2, #5
 800d172:	2101      	movs	r1, #1
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <MX_DriverVbusFS+0x10>)
 800d176:	f7f4 be05 	b.w	8001d84 <HAL_GPIO_WritePin>
 800d17a:	bf00      	nop
 800d17c:	40020800 	.word	0x40020800

0800d180 <xbee_notify_endtx>:

xbee_function_error xbee_signal_error;

void    xbee_notify_endtx()
{
	event_trigger( &xbee_evt_endtx );
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <xbee_notify_endtx+0x8>)
 800d182:	f7fe bf02 	b.w	800bf8a <event_trigger>
 800d186:	bf00      	nop
 800d188:	20009194 	.word	0x20009194

0800d18c <xbee_frames_copy>:
#define xbee_frames_pop_head() xbee_frames_pop( 0 )

void xbee_frames_copy( int target_rank, int source_rank )
{
	int i;
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <xbee_frames_copy+0x2c>)
 800d18e:	2266      	movs	r2, #102	; 0x66
 800d190:	fb02 3101 	mla	r1, r2, r1, r3
{
 800d194:	b570      	push	{r4, r5, r6, lr}
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d196:	f8b1 5064 	ldrh.w	r5, [r1, #100]	; 0x64
 800d19a:	fb02 3400 	mla	r4, r2, r0, r3
 800d19e:	2200      	movs	r2, #0
 800d1a0:	4295      	cmp	r5, r2
 800d1a2:	dc05      	bgt.n	800d1b0 <xbee_frames_copy+0x24>
	{
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
	}

	xbee_frames[ target_rank ].len = xbee_frames[ source_rank ].len;
 800d1a4:	2266      	movs	r2, #102	; 0x66
 800d1a6:	fb02 3300 	mla	r3, r2, r0, r3
 800d1aa:	f8a3 5064 	strh.w	r5, [r3, #100]	; 0x64
}
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
 800d1b0:	5c8e      	ldrb	r6, [r1, r2]
 800d1b2:	54a6      	strb	r6, [r4, r2]
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d1b4:	3201      	adds	r2, #1
 800d1b6:	e7f3      	b.n	800d1a0 <xbee_frames_copy+0x14>
 800d1b8:	20000ed6 	.word	0x20000ed6

0800d1bc <xbee_frames_pop>:

void xbee_frames_pop( int rank )
{
 800d1bc:	b570      	push	{r4, r5, r6, lr}
	if ( xbee_n_frames > 0 )
 800d1be:	4d0d      	ldr	r5, [pc, #52]	; (800d1f4 <xbee_frames_pop+0x38>)
 800d1c0:	782c      	ldrb	r4, [r5, #0]
 800d1c2:	b184      	cbz	r4, 800d1e6 <xbee_frames_pop+0x2a>
	{
		int i;
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d1c4:	3c01      	subs	r4, #1
 800d1c6:	42a0      	cmp	r0, r4
 800d1c8:	db07      	blt.n	800d1da <xbee_frames_pop+0x1e>
		{
			xbee_frames_copy( i, i + 1 );
		}
		xbee_n_frames--;
 800d1ca:	b2e4      	uxtb	r4, r4
 800d1cc:	702c      	strb	r4, [r5, #0]

		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d1ce:	b184      	cbz	r4, 800d1f2 <xbee_frames_pop+0x36>
 800d1d0:	4809      	ldr	r0, [pc, #36]	; (800d1f8 <xbee_frames_pop+0x3c>)
	}
	else
	{
		xbee_signal_error( __LINE__ );
	}
}
 800d1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d1d6:	f7fe bed8 	b.w	800bf8a <event_trigger>
			xbee_frames_copy( i, i + 1 );
 800d1da:	1c46      	adds	r6, r0, #1
 800d1dc:	4631      	mov	r1, r6
 800d1de:	f7ff ffd5 	bl	800d18c <xbee_frames_copy>
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	e7ef      	b.n	800d1c6 <xbee_frames_pop+0xa>
		xbee_signal_error( __LINE__ );
 800d1e6:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <xbee_frames_pop+0x40>)
 800d1e8:	2062      	movs	r0, #98	; 0x62
 800d1ea:	681b      	ldr	r3, [r3, #0]
}
 800d1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xbee_signal_error( __LINE__ );
 800d1f0:	4718      	bx	r3
}
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	200016cf 	.word	0x200016cf
 800d1f8:	2000919c 	.word	0x2000919c
 800d1fc:	20009198 	.word	0x20009198

0800d200 <xbee_frames_push>:

void xbee_frames_push( uint8_t *data, uint16_t len )
{
 800d200:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_n_frames >= XBEE_N_FRAMES_MAX )
 800d202:	4c15      	ldr	r4, [pc, #84]	; (800d258 <xbee_frames_push+0x58>)
 800d204:	7823      	ldrb	r3, [r4, #0]
 800d206:	2b13      	cmp	r3, #19
 800d208:	d904      	bls.n	800d214 <xbee_frames_push+0x14>
	{
		xbee_signal_error( __LINE__ );
 800d20a:	4b14      	ldr	r3, [pc, #80]	; (800d25c <xbee_frames_push+0x5c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	206a      	movs	r0, #106	; 0x6a
	xbee_frames[ xbee_n_frames ].len = len;

	xbee_n_frames++;

	event_trigger( &xbee_evt );
}
 800d210:	bcf0      	pop	{r4, r5, r6, r7}
		xbee_signal_error( __LINE__ );
 800d212:	4718      	bx	r3
	if ( len >= FRAME_LEN )
 800d214:	2963      	cmp	r1, #99	; 0x63
 800d216:	d903      	bls.n	800d220 <xbee_frames_push+0x20>
		xbee_signal_error( __LINE__ );
 800d218:	4b10      	ldr	r3, [pc, #64]	; (800d25c <xbee_frames_push+0x5c>)
 800d21a:	2070      	movs	r0, #112	; 0x70
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	e7f7      	b.n	800d210 <xbee_frames_push+0x10>
	if ( len < 4 )
 800d220:	2903      	cmp	r1, #3
 800d222:	d911      	bls.n	800d248 <xbee_frames_push+0x48>
 800d224:	4d0e      	ldr	r5, [pc, #56]	; (800d260 <xbee_frames_push+0x60>)
 800d226:	2666      	movs	r6, #102	; 0x66
 800d228:	fb03 5606 	mla	r6, r3, r6, r5
	for ( i = 0 ; i < len ; i++ )
 800d22c:	2200      	movs	r2, #0
 800d22e:	4291      	cmp	r1, r2
 800d230:	dc0e      	bgt.n	800d250 <xbee_frames_push+0x50>
	xbee_frames[ xbee_n_frames ].len = len;
 800d232:	2266      	movs	r2, #102	; 0x66
 800d234:	fb02 5503 	mla	r5, r2, r3, r5
	xbee_n_frames++;
 800d238:	3301      	adds	r3, #1
	xbee_frames[ xbee_n_frames ].len = len;
 800d23a:	f8a5 1064 	strh.w	r1, [r5, #100]	; 0x64
	xbee_n_frames++;
 800d23e:	7023      	strb	r3, [r4, #0]
	event_trigger( &xbee_evt );
 800d240:	4808      	ldr	r0, [pc, #32]	; (800d264 <xbee_frames_push+0x64>)
}
 800d242:	bcf0      	pop	{r4, r5, r6, r7}
	event_trigger( &xbee_evt );
 800d244:	f7fe bea1 	b.w	800bf8a <event_trigger>
		xbee_signal_error( __LINE__ );
 800d248:	4b04      	ldr	r3, [pc, #16]	; (800d25c <xbee_frames_push+0x5c>)
 800d24a:	2077      	movs	r0, #119	; 0x77
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	e7df      	b.n	800d210 <xbee_frames_push+0x10>
		xbee_frames[ xbee_n_frames ].rx[ i ] = data[ i ];
 800d250:	5c87      	ldrb	r7, [r0, r2]
 800d252:	54b7      	strb	r7, [r6, r2]
	for ( i = 0 ; i < len ; i++ )
 800d254:	3201      	adds	r2, #1
 800d256:	e7ea      	b.n	800d22e <xbee_frames_push+0x2e>
 800d258:	200016cf 	.word	0x200016cf
 800d25c:	20009198 	.word	0x20009198
 800d260:	20000ed6 	.word	0x20000ed6
 800d264:	2000919c 	.word	0x2000919c

0800d268 <xbee_frames_find>:

int xbee_frames_find( uint8_t *rank, uint8_t type )
{
 800d268:	b570      	push	{r4, r5, r6, lr}
	int k;
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d26a:	4b09      	ldr	r3, [pc, #36]	; (800d290 <xbee_frames_find+0x28>)
	{
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d26c:	4c09      	ldr	r4, [pc, #36]	; (800d294 <xbee_frames_find+0x2c>)
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d26e:	781a      	ldrb	r2, [r3, #0]
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d270:	2566      	movs	r5, #102	; 0x66
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d272:	2300      	movs	r3, #0
 800d274:	429a      	cmp	r2, r3
 800d276:	dc01      	bgt.n	800d27c <xbee_frames_find+0x14>
			*rank = k;
			return 1;
		}
	}

  return 0;
 800d278:	2000      	movs	r0, #0
 800d27a:	e006      	b.n	800d28a <xbee_frames_find+0x22>
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d27c:	fb05 4603 	mla	r6, r5, r3, r4
 800d280:	78f6      	ldrb	r6, [r6, #3]
 800d282:	428e      	cmp	r6, r1
 800d284:	d102      	bne.n	800d28c <xbee_frames_find+0x24>
			*rank = k;
 800d286:	7003      	strb	r3, [r0, #0]
			return 1;
 800d288:	2001      	movs	r0, #1
}
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d28c:	3301      	adds	r3, #1
 800d28e:	e7f1      	b.n	800d274 <xbee_frames_find+0xc>
 800d290:	200016cf 	.word	0x200016cf
 800d294:	20000ed6 	.word	0x20000ed6

0800d298 <xbee_get_recv_event>:
	xbee_frame_len = 0; \
}
// ...........................................................................

// ...........................................................................
event *xbee_get_recv_event() { return &xbee_evt; }
 800d298:	4800      	ldr	r0, [pc, #0]	; (800d29c <xbee_get_recv_event+0x4>)
 800d29a:	4770      	bx	lr
 800d29c:	2000919c 	.word	0x2000919c

0800d2a0 <xbee_recv_get_frame_type>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_recv_get_frame_type()
{
  if ( xbee_n_frames ) return xbee_frames_head.rx[ 3 ];
 800d2a0:	4b02      	ldr	r3, [pc, #8]	; (800d2ac <xbee_recv_get_frame_type+0xc>)
 800d2a2:	7818      	ldrb	r0, [r3, #0]
 800d2a4:	b108      	cbz	r0, 800d2aa <xbee_recv_get_frame_type+0xa>
 800d2a6:	4b02      	ldr	r3, [pc, #8]	; (800d2b0 <xbee_recv_get_frame_type+0x10>)
 800d2a8:	78d8      	ldrb	r0, [r3, #3]

  return 0;
}
 800d2aa:	4770      	bx	lr
 800d2ac:	200016cf 	.word	0x200016cf
 800d2b0:	20000ed6 	.word	0x20000ed6

0800d2b4 <xbee_checksum>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_checksum( uint8_t *data, uint16_t len )
{
 800d2b4:	b510      	push	{r4, lr}
  uint8_t crc = 0;
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d2b6:	4602      	mov	r2, r0
  uint8_t crc = 0;
 800d2b8:	2300      	movs	r3, #0
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d2ba:	1a14      	subs	r4, r2, r0
 800d2bc:	42a1      	cmp	r1, r4
 800d2be:	dc02      	bgt.n	800d2c6 <xbee_checksum+0x12>
  return 0xFF - crc;
 800d2c0:	43d8      	mvns	r0, r3
}
 800d2c2:	b2c0      	uxtb	r0, r0
 800d2c4:	bd10      	pop	{r4, pc}
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d2c6:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d2ca:	4423      	add	r3, r4
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	e7f4      	b.n	800d2ba <xbee_checksum+0x6>

0800d2d0 <xbee_pull_expected>:
// 0 1 2 3 4 5
// E E              xbee_frame_len = 2
// r r R R R        xbee_rx_len = 5
void xbee_pull_expected()
{
	if ( xbee_rx_len < xbee_frame_len )
 800d2d0:	4a0e      	ldr	r2, [pc, #56]	; (800d30c <xbee_pull_expected+0x3c>)
 800d2d2:	480f      	ldr	r0, [pc, #60]	; (800d310 <xbee_pull_expected+0x40>)
{
 800d2d4:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_rx_len < xbee_frame_len )
 800d2d6:	8803      	ldrh	r3, [r0, #0]
 800d2d8:	8814      	ldrh	r4, [r2, #0]
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	4611      	mov	r1, r2
 800d2de:	d205      	bcs.n	800d2ec <xbee_pull_expected+0x1c>
	{
	  xbee_signal_error( __LINE__ );
 800d2e0:	4b0c      	ldr	r3, [pc, #48]	; (800d314 <xbee_pull_expected+0x44>)
 800d2e2:	f240 1001 	movw	r0, #257	; 0x101
 800d2e6:	681b      	ldr	r3, [r3, #0]
	{
		xbee_rx[ k ] = xbee_rx[ i ];
	}
	xbee_rx_len -= xbee_frame_len;
	xbee_frame_len = 0;
}
 800d2e8:	bcf0      	pop	{r4, r5, r6, r7}
	  xbee_signal_error( __LINE__ );
 800d2ea:	4718      	bx	r3
		xbee_rx[ k ] = xbee_rx[ i ];
 800d2ec:	4d0a      	ldr	r5, [pc, #40]	; (800d318 <xbee_pull_expected+0x48>)
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d2ee:	4622      	mov	r2, r4
		xbee_rx[ k ] = xbee_rx[ i ];
 800d2f0:	1b2e      	subs	r6, r5, r4
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	dc05      	bgt.n	800d302 <xbee_pull_expected+0x32>
	xbee_rx_len -= xbee_frame_len;
 800d2f6:	1b1b      	subs	r3, r3, r4
 800d2f8:	8003      	strh	r3, [r0, #0]
	xbee_frame_len = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	800b      	strh	r3, [r1, #0]
}
 800d2fe:	bcf0      	pop	{r4, r5, r6, r7}
 800d300:	4770      	bx	lr
		xbee_rx[ k ] = xbee_rx[ i ];
 800d302:	5d57      	ldrb	r7, [r2, r5]
 800d304:	54b7      	strb	r7, [r6, r2]
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d306:	3201      	adds	r2, #1
 800d308:	e7f3      	b.n	800d2f2 <xbee_pull_expected+0x22>
 800d30a:	bf00      	nop
 800d30c:	20000ed4 	.word	0x20000ed4
 800d310:	20001ab8 	.word	0x20001ab8
 800d314:	20009198 	.word	0x20009198
 800d318:	200016d0 	.word	0x200016d0

0800d31c <xbee_analyse_resp>:
// ...........................................................................

// ...........................................................................
void xbee_analyse_resp()
{
 800d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	do
	{
      go = 0;

      if ( xbee_frame_len == 0 )
 800d320:	4e24      	ldr	r6, [pc, #144]	; (800d3b4 <xbee_analyse_resp+0x98>)
 800d322:	4d25      	ldr	r5, [pc, #148]	; (800d3b8 <xbee_analyse_resp+0x9c>)
 800d324:	4637      	mov	r7, r6
 800d326:	8834      	ldrh	r4, [r6, #0]
 800d328:	bb04      	cbnz	r4, 800d36c <xbee_analyse_resp+0x50>
      {
		  if ( xbee_rx_len >= 1 )
 800d32a:	882b      	ldrh	r3, [r5, #0]
 800d32c:	b153      	cbz	r3, 800d344 <xbee_analyse_resp+0x28>
		  {
			  if ( xbee_rx[ 0 ] != 0x7E )
 800d32e:	4b23      	ldr	r3, [pc, #140]	; (800d3bc <xbee_analyse_resp+0xa0>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b7e      	cmp	r3, #126	; 0x7e
 800d334:	d006      	beq.n	800d344 <xbee_analyse_resp+0x28>
			  {
				  xbee_recv_clear();
				  xbee_signal_error( __LINE__ );
 800d336:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <xbee_analyse_resp+0xa4>)
				  xbee_recv_clear();
 800d338:	802c      	strh	r4, [r5, #0]
				  xbee_signal_error( __LINE__ );
 800d33a:	681b      	ldr	r3, [r3, #0]
				  xbee_recv_clear();
 800d33c:	8034      	strh	r4, [r6, #0]
				  xbee_signal_error( __LINE__ );
 800d33e:	f240 101f 	movw	r0, #287	; 0x11f
 800d342:	4798      	blx	r3
			  }
		  }

		  if ( xbee_rx_len >= 3 )
 800d344:	882b      	ldrh	r3, [r5, #0]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d90e      	bls.n	800d368 <xbee_analyse_resp+0x4c>
		  {
			xbee_frame_len = xbee_rx[ 1 ];
			xbee_frame_len <<= 8;
			xbee_frame_len |= xbee_rx[ 2 ];
			xbee_frame_len += 4;
 800d34a:	4b1c      	ldr	r3, [pc, #112]	; (800d3bc <xbee_analyse_resp+0xa0>)
 800d34c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d350:	ba5b      	rev16	r3, r3
 800d352:	3304      	adds	r3, #4
 800d354:	b29b      	uxth	r3, r3

			if ( xbee_frame_len > BUFFER_LEN )
 800d356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
			xbee_frame_len += 4;
 800d35a:	803b      	strh	r3, [r7, #0]
			if ( xbee_frame_len > BUFFER_LEN )
 800d35c:	d904      	bls.n	800d368 <xbee_analyse_resp+0x4c>
			{
			  xbee_signal_error( __LINE__ );
 800d35e:	4b18      	ldr	r3, [pc, #96]	; (800d3c0 <xbee_analyse_resp+0xa4>)
 800d360:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4798      	blx	r3
			}
		  }
      }

	  if ( xbee_frame_len && ( xbee_rx_len >= xbee_frame_len ) )
 800d368:	883c      	ldrh	r4, [r7, #0]
 800d36a:	b30c      	cbz	r4, 800d3b0 <xbee_analyse_resp+0x94>
 800d36c:	882b      	ldrh	r3, [r5, #0]
 800d36e:	42a3      	cmp	r3, r4
 800d370:	d31e      	bcc.n	800d3b0 <xbee_analyse_resp+0x94>
	  {
		uint8_t crc = xbee_checksum( xbee_rx + 3, xbee_frame_len - 4 );
 800d372:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800d3bc <xbee_analyse_resp+0xa0>
 800d376:	1f21      	subs	r1, r4, #4
 800d378:	b289      	uxth	r1, r1
 800d37a:	f108 0003 	add.w	r0, r8, #3
 800d37e:	f7ff ff99 	bl	800d2b4 <xbee_checksum>

		if ( crc != xbee_rx[ xbee_frame_len - 1 ] )
 800d382:	eb08 0304 	add.w	r3, r8, r4
 800d386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d38a:	4283      	cmp	r3, r0
 800d38c:	d009      	beq.n	800d3a2 <xbee_analyse_resp+0x86>
		{
			xbee_recv_clear();
 800d38e:	2300      	movs	r3, #0
 800d390:	802b      	strh	r3, [r5, #0]
 800d392:	803b      	strh	r3, [r7, #0]
			xbee_signal_error( __LINE__ );
 800d394:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <xbee_analyse_resp+0xa4>)
 800d396:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d39a:	681b      	ldr	r3, [r3, #0]
		  // Remove the frame
		  xbee_pull_expected();
		}
	  }
	} while ( go );
}
 800d39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xbee_signal_error( __LINE__ );
 800d3a0:	4718      	bx	r3
		  xbee_frames_push( xbee_rx, xbee_frame_len );
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	f7ff ff2b 	bl	800d200 <xbee_frames_push>
		  xbee_pull_expected();
 800d3aa:	f7ff ff91 	bl	800d2d0 <xbee_pull_expected>
 800d3ae:	e7ba      	b.n	800d326 <xbee_analyse_resp+0xa>
}
 800d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b4:	20000ed4 	.word	0x20000ed4
 800d3b8:	20001ab8 	.word	0x20001ab8
 800d3bc:	200016d0 	.word	0x200016d0
 800d3c0:	20009198 	.word	0x20009198

0800d3c4 <xbee_recv_full_rank>:
// ...........................................................................


// ...........................................................................
int xbee_recv_full_rank( uint8_t *data, uint16_t *len, uint8_t rank )
{
 800d3c4:	b570      	push	{r4, r5, r6, lr}
  uint16_t recvlen = xbee_frames[ rank ].len - 4;
 800d3c6:	4e13      	ldr	r6, [pc, #76]	; (800d414 <xbee_recv_full_rank+0x50>)
 800d3c8:	2366      	movs	r3, #102	; 0x66
 800d3ca:	fb03 6502 	mla	r5, r3, r2, r6
 800d3ce:	2400      	movs	r4, #0
 800d3d0:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
 800d3d4:	3d04      	subs	r5, #4
 800d3d6:	b2ad      	uxth	r5, r5
	  *len = 0;
	  xbee_signal_error( __LINE__ );
	  return 0;
  }
#endif
  if ( recvlen >= FRAME_LEN )
 800d3d8:	2d63      	cmp	r5, #99	; 0x63
 800d3da:	d907      	bls.n	800d3ec <xbee_recv_full_rank+0x28>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d3dc:	4b0e      	ldr	r3, [pc, #56]	; (800d418 <xbee_recv_full_rank+0x54>)
	  *len = 0;
 800d3de:	800c      	strh	r4, [r1, #0]
	  xbee_signal_error( __LINE__ );
 800d3e0:	f240 1063 	movw	r0, #355	; 0x163
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4798      	blx	r3
	  return 0;
 800d3e8:	4620      	mov	r0, r4

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop( rank );
  XBEE_UART_IT_ENABLE();
  return 1;
}
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
  *len = recvlen;
 800d3ec:	800d      	strh	r5, [r1, #0]
 800d3ee:	fb12 f103 	smulbb	r1, r2, r3
  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames[ rank ].rx[ i + 3 ];
 800d3f2:	4623      	mov	r3, r4
 800d3f4:	429d      	cmp	r5, r3
 800d3f6:	dc06      	bgt.n	800d406 <xbee_recv_full_rank+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d3f8:	b672      	cpsid	i
  xbee_frames_pop( rank );
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7ff fede 	bl	800d1bc <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d400:	b662      	cpsie	i
  return 1;
 800d402:	2001      	movs	r0, #1
 800d404:	e7f1      	b.n	800d3ea <xbee_recv_full_rank+0x26>
  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames[ rank ].rx[ i + 3 ];
 800d406:	18cc      	adds	r4, r1, r3
 800d408:	4434      	add	r4, r6
 800d40a:	78e4      	ldrb	r4, [r4, #3]
 800d40c:	54c4      	strb	r4, [r0, r3]
 800d40e:	3301      	adds	r3, #1
 800d410:	e7f0      	b.n	800d3f4 <xbee_recv_full_rank+0x30>
 800d412:	bf00      	nop
 800d414:	20000ed6 	.word	0x20000ed6
 800d418:	20009198 	.word	0x20009198

0800d41c <xbee_recv_full>:

int xbee_recv_full( uint8_t *data, uint16_t *len )
{
    return xbee_recv_full_rank( data, len, 0 );
 800d41c:	2200      	movs	r2, #0
 800d41e:	f7ff bfd1 	b.w	800d3c4 <xbee_recv_full_rank>

0800d422 <xbee_recv_discard_rank>:
}
// ...........................................................................

// ...........................................................................
int xbee_recv_discard_rank( uint8_t rank )
{
 800d422:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800d424:	b672      	cpsid	i
	  XBEE_UART_IT_DISABLE();
	  xbee_frames_pop( rank );
 800d426:	f7ff fec9 	bl	800d1bc <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d42a:	b662      	cpsie	i
	  XBEE_UART_IT_ENABLE();
	  return 1;
}
 800d42c:	2001      	movs	r0, #1
 800d42e:	bd08      	pop	{r3, pc}

0800d430 <xbee_recv>:
}
// ...........................................................................

// ...........................................................................
int xbee_recv( uint64_t *from, uint8_t *data, uint16_t *len )
{
 800d430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i;
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d434:	4e1d      	ldr	r6, [pc, #116]	; (800d4ac <xbee_recv+0x7c>)

  //sprintf( radio_log, "RECV %d (%d - %d)", (int)xbee_rx_len, (int)(*len), (int)recvlen );

  // Check if data has enough space to hold the frame
  if ( *len < recvlen )
 800d436:	8814      	ldrh	r4, [r2, #0]
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d438:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 800d43c:	3b10      	subs	r3, #16
 800d43e:	b29b      	uxth	r3, r3
  if ( *len < recvlen )
 800d440:	429c      	cmp	r4, r3
 800d442:	d209      	bcs.n	800d458 <xbee_recv+0x28>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d444:	4b1a      	ldr	r3, [pc, #104]	; (800d4b0 <xbee_recv+0x80>)
	  *len = 0;
 800d446:	2400      	movs	r4, #0
	  xbee_signal_error( __LINE__ );
 800d448:	f44f 70ca 	mov.w	r0, #404	; 0x194
	  *len = 0;
 800d44c:	8014      	strh	r4, [r2, #0]
	  xbee_signal_error( __LINE__ );
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4798      	blx	r3
	  return 0;
 800d452:	4620      	mov	r0, r4

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop_head();
  XBEE_UART_IT_ENABLE();
  return 1;
}
 800d454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *from = 0;
 800d458:	2700      	movs	r7, #0
  *len = recvlen;
 800d45a:	8013      	strh	r3, [r2, #0]
  *from = 0;
 800d45c:	e9c0 7700 	strd	r7, r7, [r0]
 800d460:	463a      	mov	r2, r7
 800d462:	463c      	mov	r4, r7
 800d464:	463d      	mov	r5, r7
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d466:	18b7      	adds	r7, r6, r2
	*from <<= 8;
 800d468:	ea4f 2905 	mov.w	r9, r5, lsl #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d46c:	f897 a004 	ldrb.w	sl, [r7, #4]
  for ( i = 0 ; i < 8 ; i++ )
 800d470:	3201      	adds	r2, #1
	*from <<= 8;
 800d472:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d476:	f04f 0b00 	mov.w	fp, #0
	*from <<= 8;
 800d47a:	ea4f 2804 	mov.w	r8, r4, lsl #8
  for ( i = 0 ; i < 8 ; i++ )
 800d47e:	2a08      	cmp	r2, #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d480:	ea4a 0408 	orr.w	r4, sl, r8
 800d484:	ea4b 0509 	orr.w	r5, fp, r9
  for ( i = 0 ; i < 8 ; i++ )
 800d488:	d1ed      	bne.n	800d466 <xbee_recv+0x36>
 800d48a:	e9c0 4500 	strd	r4, r5, [r0]
  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d48e:	2200      	movs	r2, #0
 800d490:	4293      	cmp	r3, r2
 800d492:	dc06      	bgt.n	800d4a2 <xbee_recv+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 800d494:	b672      	cpsid	i
  xbee_frames_pop_head();
 800d496:	2000      	movs	r0, #0
 800d498:	f7ff fe90 	bl	800d1bc <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d49c:	b662      	cpsie	i
  return 1;
 800d49e:	2001      	movs	r0, #1
 800d4a0:	e7d8      	b.n	800d454 <xbee_recv+0x24>
  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d4a2:	18b0      	adds	r0, r6, r2
 800d4a4:	7bc0      	ldrb	r0, [r0, #15]
 800d4a6:	5488      	strb	r0, [r1, r2]
 800d4a8:	3201      	adds	r2, #1
 800d4aa:	e7f1      	b.n	800d490 <xbee_recv+0x60>
 800d4ac:	20000ed6 	.word	0x20000ed6
 800d4b0:	20009198 	.word	0x20009198

0800d4b4 <xbee_notify_recv>:
// ...........................................................................

// ...........................................................................
void xbee_notify_recv( uint8_t c )
{
  XBEE_RX_LED_START();
 800d4b4:	4b13      	ldr	r3, [pc, #76]	; (800d504 <xbee_notify_recv+0x50>)
 800d4b6:	2250      	movs	r2, #80	; 0x50
{
 800d4b8:	b510      	push	{r4, lr}
  XBEE_RX_LED_START();
 800d4ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d4be:	801a      	strh	r2, [r3, #0]
{
 800d4c0:	4604      	mov	r4, r0
  XBEE_RX_LED_START();
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	4810      	ldr	r0, [pc, #64]	; (800d508 <xbee_notify_recv+0x54>)
 800d4c6:	f7f4 fc5d 	bl	8001d84 <HAL_GPIO_WritePin>

  if ( xbee_rx_len < BUFFER_LEN )
 800d4ca:	4b10      	ldr	r3, [pc, #64]	; (800d50c <xbee_notify_recv+0x58>)
 800d4cc:	881a      	ldrh	r2, [r3, #0]
 800d4ce:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800d4d2:	d20a      	bcs.n	800d4ea <xbee_notify_recv+0x36>
  {
    xbee_rx[ xbee_rx_len++ ] = c;
 800d4d4:	1c51      	adds	r1, r2, #1
 800d4d6:	8019      	strh	r1, [r3, #0]
 800d4d8:	4b0d      	ldr	r3, [pc, #52]	; (800d510 <xbee_notify_recv+0x5c>)
 800d4da:	549c      	strb	r4, [r3, r2]
  }

  //sprintf( radio_log, "%d", xbee_rx_len );


  if ( xbee_mode_AT ) return;
 800d4dc:	4b0d      	ldr	r3, [pc, #52]	; (800d514 <xbee_notify_recv+0x60>)
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	b973      	cbnz	r3, 800d500 <xbee_notify_recv+0x4c>

  xbee_analyse_resp();
}
 800d4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  xbee_analyse_resp();
 800d4e6:	f7ff bf19 	b.w	800d31c <xbee_analyse_resp>
	  xbee_recv_clear();
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	801a      	strh	r2, [r3, #0]
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <xbee_notify_recv+0x64>)
 800d4f0:	801a      	strh	r2, [r3, #0]
	  xbee_signal_error( __LINE__ );
 800d4f2:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <xbee_notify_recv+0x68>)
 800d4f4:	f240 10bd 	movw	r0, #445	; 0x1bd
 800d4f8:	681b      	ldr	r3, [r3, #0]
}
 800d4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  xbee_signal_error( __LINE__ );
 800d4fe:	4718      	bx	r3
}
 800d500:	bd10      	pop	{r4, pc}
 800d502:	bf00      	nop
 800d504:	20000ed2 	.word	0x20000ed2
 800d508:	40020c00 	.word	0x40020c00
 800d50c:	20001ab8 	.word	0x20001ab8
 800d510:	200016d0 	.word	0x200016d0
 800d514:	200016ce 	.word	0x200016ce
 800d518:	20000ed4 	.word	0x20000ed4
 800d51c:	20009198 	.word	0x20009198

0800d520 <xbee_AT_check_OK>:

// ...........................................................................
int xbee_AT_check_OK()
{
 800d520:	b538      	push	{r3, r4, r5, lr}
  int r = 0;

  if ( xbee_rx_len == 3 )
 800d522:	4d09      	ldr	r5, [pc, #36]	; (800d548 <xbee_AT_check_OK+0x28>)
 800d524:	882b      	ldrh	r3, [r5, #0]
 800d526:	2b03      	cmp	r3, #3
 800d528:	f04f 0400 	mov.w	r4, #0
 800d52c:	d109      	bne.n	800d542 <xbee_AT_check_OK+0x22>
  {
    xbee_rx[ 3 ] = 0;
 800d52e:	4807      	ldr	r0, [pc, #28]	; (800d54c <xbee_AT_check_OK+0x2c>)
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d530:	4907      	ldr	r1, [pc, #28]	; (800d550 <xbee_AT_check_OK+0x30>)
    xbee_rx[ 3 ] = 0;
 800d532:	70c4      	strb	r4, [r0, #3]
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d534:	f7f2 fe4c 	bl	80001d0 <strcmp>
 800d538:	fab0 f080 	clz	r0, r0
 800d53c:	0940      	lsrs	r0, r0, #5
    xbee_rx_len = 0;
 800d53e:	802c      	strh	r4, [r5, #0]
  }

  return r;
}
 800d540:	bd38      	pop	{r3, r4, r5, pc}
  int r = 0;
 800d542:	4620      	mov	r0, r4
  return r;
 800d544:	e7fc      	b.n	800d540 <xbee_AT_check_OK+0x20>
 800d546:	bf00      	nop
 800d548:	20001ab8 	.word	0x20001ab8
 800d54c:	200016d0 	.word	0x200016d0
 800d550:	0801275a 	.word	0x0801275a

0800d554 <xbee_api_transmit>:
// ...........................................................................

// ...........................................................................
int xbee_api_transmit( uint8_t *data, uint16_t len, uint8_t ack_frame_type, uint8_t *resp_data, uint16_t *resp_len )
{
 800d554:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  static uint8_t buffer[ FRAME_LEN ];

  xbee_ack_frame_type = ack_frame_type;

  buffer[ 0 ] = 0x7E;
 800d558:	4d27      	ldr	r5, [pc, #156]	; (800d5f8 <xbee_api_transmit+0xa4>)
{
 800d55a:	4617      	mov	r7, r2
  buffer[ 0 ] = 0x7E;
 800d55c:	227e      	movs	r2, #126	; 0x7e
 800d55e:	702a      	strb	r2, [r5, #0]
  buffer[ 1 ] = ( len >> 8 ) & 0xFF;
 800d560:	0a0a      	lsrs	r2, r1, #8
 800d562:	706a      	strb	r2, [r5, #1]
{
 800d564:	460c      	mov	r4, r1
 800d566:	461e      	mov	r6, r3
  buffer[ 2 ] = len & 0xFF;
 800d568:	70a9      	strb	r1, [r5, #2]
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d56a:	2200      	movs	r2, #0
 800d56c:	4294      	cmp	r4, r2
 800d56e:	dc27      	bgt.n	800d5c0 <xbee_api_transmit+0x6c>
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d570:	4621      	mov	r1, r4
 800d572:	f7ff fe9f 	bl	800d2b4 <xbee_checksum>
 800d576:	192b      	adds	r3, r5, r4

  HAL_StatusTypeDef r;
  while ( ( r = HAL_UART_Transmit_IT( &huart3, buffer, len + 4 ) ) == HAL_BUSY ) {}
 800d578:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d5f8 <xbee_api_transmit+0xa4>
 800d57c:	4d1f      	ldr	r5, [pc, #124]	; (800d5fc <xbee_api_transmit+0xa8>)
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d57e:	70d8      	strb	r0, [r3, #3]
  while ( ( r = HAL_UART_Transmit_IT( &huart3, buffer, len + 4 ) ) == HAL_BUSY ) {}
 800d580:	3404      	adds	r4, #4
 800d582:	b2a4      	uxth	r4, r4
 800d584:	4622      	mov	r2, r4
 800d586:	4641      	mov	r1, r8
 800d588:	4628      	mov	r0, r5
 800d58a:	f7f6 f8d3 	bl	8003734 <HAL_UART_Transmit_IT>
 800d58e:	2802      	cmp	r0, #2
 800d590:	d0f8      	beq.n	800d584 <xbee_api_transmit+0x30>

  if ( r != HAL_OK ) return 0;
 800d592:	b998      	cbnz	r0, 800d5bc <xbee_api_transmit+0x68>

  while ( !event_check( &xbee_evt_endtx ) ) {}
 800d594:	4c1a      	ldr	r4, [pc, #104]	; (800d600 <xbee_api_transmit+0xac>)
 800d596:	4620      	mov	r0, r4
 800d598:	f7fe fcfa 	bl	800bf90 <event_check>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d0fa      	beq.n	800d596 <xbee_api_transmit+0x42>
  //return 0;

  // Wait for ack from the XBee board
  uint8_t rank;

  uint32_t tickend = HAL_GetTick() + 5000;
 800d5a0:	f7f3 fce6 	bl	8000f70 <HAL_GetTick>
 800d5a4:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
 800d5a8:	3408      	adds	r4, #8

  while ( HAL_GetTick() < tickend )
 800d5aa:	f7f3 fce1 	bl	8000f70 <HAL_GetTick>
 800d5ae:	4284      	cmp	r4, r0
 800d5b0:	d80b      	bhi.n	800d5ca <xbee_api_transmit+0x76>
		  }
		  return 1;
	  }
  }

  xbee_signal_error( __LINE__ );
 800d5b2:	4b14      	ldr	r3, [pc, #80]	; (800d604 <xbee_api_transmit+0xb0>)
 800d5b4:	f240 2005 	movw	r0, #517	; 0x205
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4798      	blx	r3
  if ( r != HAL_OK ) return 0;
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e013      	b.n	800d5e8 <xbee_api_transmit+0x94>
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d5c0:	18ab      	adds	r3, r5, r2
 800d5c2:	5c81      	ldrb	r1, [r0, r2]
 800d5c4:	70d9      	strb	r1, [r3, #3]
 800d5c6:	3201      	adds	r2, #1
 800d5c8:	e7d0      	b.n	800d56c <xbee_api_transmit+0x18>
	  if ( xbee_frames_find( &rank, ack_frame_type ) )
 800d5ca:	4639      	mov	r1, r7
 800d5cc:	f10d 0007 	add.w	r0, sp, #7
 800d5d0:	f7ff fe4a 	bl	800d268 <xbee_frames_find>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d0e8      	beq.n	800d5aa <xbee_api_transmit+0x56>
 800d5d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		  if ( resp_data )
 800d5dc:	b13e      	cbz	r6, 800d5ee <xbee_api_transmit+0x9a>
		    xbee_recv_full_rank( resp_data, resp_len, rank );
 800d5de:	9908      	ldr	r1, [sp, #32]
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff feef 	bl	800d3c4 <xbee_recv_full_rank>
		  return 1;
 800d5e6:	2001      	movs	r0, #1
  return 0;
}
 800d5e8:	b002      	add	sp, #8
 800d5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xbee_recv_discard_rank( rank );
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	f7ff ff17 	bl	800d422 <xbee_recv_discard_rank>
 800d5f4:	e7f7      	b.n	800d5e6 <xbee_api_transmit+0x92>
 800d5f6:	bf00      	nop
 800d5f8:	20000e6d 	.word	0x20000e6d
 800d5fc:	200086c8 	.word	0x200086c8
 800d600:	20009194 	.word	0x20009194
 800d604:	20009198 	.word	0x20009198

0800d608 <xbee_api_send_to>:
#define INC_FRAME_ID() { frame_id++; if ( frame_id == 0 ) frame_id = 1; }

// ...........................................................................
// Note : len = 73 max
int xbee_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800d608:	b570      	push	{r4, r5, r6, lr}
  
  // Type
  xreq[ 0 ] = 0x10;

  // Frame ID
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d60a:	4d20      	ldr	r5, [pc, #128]	; (800d68c <xbee_api_send_to+0x84>)
{
 800d60c:	b09c      	sub	sp, #112	; 0x70
  xreq[ 0 ] = 0x10;
 800d60e:	2410      	movs	r4, #16
 800d610:	f88d 400c 	strb.w	r4, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d614:	782c      	ldrb	r4, [r5, #0]
 800d616:	f88d 400d 	strb.w	r4, [sp, #13]
 800d61a:	3401      	adds	r4, #1
 800d61c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d620:	bf08      	it	eq
 800d622:	2401      	moveq	r4, #1
 800d624:	702c      	strb	r4, [r5, #0]
  //   - Point-multipoint (0x40)
  //   - Directed Broadcast (0x80)
  //   - DigiMesh (0xC0)
  // Note: done here before we destroy the value of 'to'
  //xreq[ 13 ] = 0x80;
  xreq[ 13 ] = ( to == XBEE_BROADCAST ? 0x80 : 0x40 );
 800d626:	2500      	movs	r5, #0
 800d628:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d62c:	42a9      	cmp	r1, r5
 800d62e:	bf06      	itte	eq
 800d630:	42a0      	cmpeq	r0, r4
 800d632:	2480      	moveq	r4, #128	; 0x80
 800d634:	2440      	movne	r4, #64	; 0x40
 800d636:	f88d 4019 	strb.w	r4, [sp, #25]
 800d63a:	2408      	movs	r4, #8

  // Dest address
  for ( i = 7 ; i >= 0 ; i-- )
  {
	xreq[ i + 2 ] = to & 0xFF;
 800d63c:	ad03      	add	r5, sp, #12
 800d63e:	4425      	add	r5, r4
	to >>= 8;
 800d640:	0a0e      	lsrs	r6, r1, #8
	xreq[ i + 2 ] = to & 0xFF;
 800d642:	7068      	strb	r0, [r5, #1]
	to >>= 8;
 800d644:	0a05      	lsrs	r5, r0, #8
 800d646:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
  for ( i = 7 ; i >= 0 ; i-- )
 800d64a:	3c01      	subs	r4, #1
	to >>= 8;
 800d64c:	4628      	mov	r0, r5
 800d64e:	4631      	mov	r1, r6
  for ( i = 7 ; i >= 0 ; i-- )
 800d650:	d1f4      	bne.n	800d63c <xbee_api_send_to+0x34>
  }
  
  // Reserved
  xreq[ 10 ] = 0xFF;
 800d652:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 800d656:	f8ad 1016 	strh.w	r1, [sp, #22]
  xreq[ 11 ] = 0xFE;
 800d65a:	f88d 4018 	strb.w	r4, [sp, #24]

  // Radius
  xreq[ 12 ] = 0;

  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d65e:	42a3      	cmp	r3, r4
 800d660:	dc0d      	bgt.n	800d67e <xbee_api_send_to+0x76>

  if ( xbee_api_transmit( xreq, 14 + len, 0x8B, 0, 0 ) )
 800d662:	f103 010e 	add.w	r1, r3, #14
 800d666:	2300      	movs	r3, #0
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	228b      	movs	r2, #139	; 0x8b
 800d66c:	b289      	uxth	r1, r1
 800d66e:	a803      	add	r0, sp, #12
 800d670:	f7ff ff70 	bl	800d554 <xbee_api_transmit>
  {
	  return 1;
  }

  return 0;
}
 800d674:	3000      	adds	r0, #0
 800d676:	bf18      	it	ne
 800d678:	2001      	movne	r0, #1
 800d67a:	b01c      	add	sp, #112	; 0x70
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d67e:	a903      	add	r1, sp, #12
 800d680:	4421      	add	r1, r4
 800d682:	5d10      	ldrb	r0, [r2, r4]
 800d684:	7388      	strb	r0, [r1, #14]
 800d686:	3401      	adds	r4, #1
 800d688:	e7e9      	b.n	800d65e <xbee_api_send_to+0x56>
 800d68a:	bf00      	nop
 800d68c:	200005b8 	.word	0x200005b8

0800d690 <xbee_api_AT16>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT16( uint8_t *cmd, uint16_t val )
{
 800d690:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d692:	4a11      	ldr	r2, [pc, #68]	; (800d6d8 <xbee_api_AT16+0x48>)
{
 800d694:	b09d      	sub	sp, #116	; 0x74
  xreq[ 0 ] = 0x08;
 800d696:	2308      	movs	r3, #8
 800d698:	f88d 300c 	strb.w	r3, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d69c:	7813      	ldrb	r3, [r2, #0]
 800d69e:	f88d 300d 	strb.w	r3, [sp, #13]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d6a8:	bf08      	it	eq
 800d6aa:	2301      	moveq	r3, #1
 800d6ac:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d6ae:	7803      	ldrb	r3, [r0, #0]
 800d6b0:	f88d 300e 	strb.w	r3, [sp, #14]
 800d6b4:	7843      	ldrb	r3, [r0, #1]
 800d6b6:	f88d 300f 	strb.w	r3, [sp, #15]

  xreq[ 4 ] = (val>>8) & 0xFF;
 800d6ba:	0a0b      	lsrs	r3, r1, #8
 800d6bc:	f88d 3010 	strb.w	r3, [sp, #16]
  xreq[ 5 ] = val & 0xFF;

  return xbee_api_transmit( xreq, 6, 0x88, 0, 0 );
 800d6c0:	2300      	movs	r3, #0
  xreq[ 5 ] = val & 0xFF;
 800d6c2:	f88d 1011 	strb.w	r1, [sp, #17]
  return xbee_api_transmit( xreq, 6, 0x88, 0, 0 );
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2288      	movs	r2, #136	; 0x88
 800d6ca:	2106      	movs	r1, #6
 800d6cc:	a803      	add	r0, sp, #12
 800d6ce:	f7ff ff41 	bl	800d554 <xbee_api_transmit>
}
 800d6d2:	b01d      	add	sp, #116	; 0x74
 800d6d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d8:	200005b8 	.word	0x200005b8

0800d6dc <xbee_api_AT8>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT8( uint8_t *cmd, uint8_t val )
{
 800d6dc:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d6de:	4a10      	ldr	r2, [pc, #64]	; (800d720 <xbee_api_AT8+0x44>)
{
 800d6e0:	b09d      	sub	sp, #116	; 0x74
  xreq[ 0 ] = 0x08;
 800d6e2:	2308      	movs	r3, #8
 800d6e4:	f88d 300c 	strb.w	r3, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d6e8:	7813      	ldrb	r3, [r2, #0]
 800d6ea:	f88d 300d 	strb.w	r3, [sp, #13]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d6f4:	bf08      	it	eq
 800d6f6:	2301      	moveq	r3, #1
 800d6f8:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d6fa:	7803      	ldrb	r3, [r0, #0]
 800d6fc:	f88d 300e 	strb.w	r3, [sp, #14]
 800d700:	7843      	ldrb	r3, [r0, #1]
 800d702:	f88d 300f 	strb.w	r3, [sp, #15]

  xreq[ 4 ] = val;

  return xbee_api_transmit( xreq, 5, 0x88, 0, 0 );
 800d706:	2300      	movs	r3, #0
  xreq[ 4 ] = val;
 800d708:	f88d 1010 	strb.w	r1, [sp, #16]
  return xbee_api_transmit( xreq, 5, 0x88, 0, 0 );
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	2288      	movs	r2, #136	; 0x88
 800d710:	2105      	movs	r1, #5
 800d712:	a803      	add	r0, sp, #12
 800d714:	f7ff ff1e 	bl	800d554 <xbee_api_transmit>
}
 800d718:	b01d      	add	sp, #116	; 0x74
 800d71a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d71e:	bf00      	nop
 800d720:	200005b8 	.word	0x200005b8

0800d724 <xbee_init>:
	xbee_signal_error = f;
 800d724:	4b12      	ldr	r3, [pc, #72]	; (800d770 <xbee_init+0x4c>)
	event_init( &xbee_evt );
 800d726:	4813      	ldr	r0, [pc, #76]	; (800d774 <xbee_init+0x50>)
{
 800d728:	b510      	push	{r4, lr}
	xbee_signal_error = f;
 800d72a:	6019      	str	r1, [r3, #0]
}
// ...........................................................................

void xbee_log_clear()
{
	xbee_log_buffer[ 0 ] = 0;
 800d72c:	4b12      	ldr	r3, [pc, #72]	; (800d778 <xbee_init+0x54>)
 800d72e:	2400      	movs	r4, #0
 800d730:	701c      	strb	r4, [r3, #0]
	event_init( &xbee_evt );
 800d732:	f7fe fc27 	bl	800bf84 <event_init>
	event_init( &xbee_evt_endtx );
 800d736:	4811      	ldr	r0, [pc, #68]	; (800d77c <xbee_init+0x58>)
 800d738:	f7fe fc24 	bl	800bf84 <event_init>
	HAL_Delay( 1000 );
 800d73c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d740:	f7f3 fc1c 	bl	8000f7c <HAL_Delay>
	xbee_recv_clear();
 800d744:	4b0e      	ldr	r3, [pc, #56]	; (800d780 <xbee_init+0x5c>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d746:	480f      	ldr	r0, [pc, #60]	; (800d784 <xbee_init+0x60>)
	xbee_recv_clear();
 800d748:	801c      	strh	r4, [r3, #0]
 800d74a:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <xbee_init+0x64>)
 800d74c:	801c      	strh	r4, [r3, #0]
	xbee_n_frames = 0;
 800d74e:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <xbee_init+0x68>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d750:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
	xbee_n_frames = 0;
 800d754:	701c      	strb	r4, [r3, #0]
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d756:	f7ff ff9b 	bl	800d690 <xbee_api_AT16>
	xbee_api_AT8( ( uint8_t * )"CH", 0x11 );
 800d75a:	2111      	movs	r1, #17
 800d75c:	480c      	ldr	r0, [pc, #48]	; (800d790 <xbee_init+0x6c>)
 800d75e:	f7ff ffbd 	bl	800d6dc <xbee_api_AT8>
	xbee_api_AT8( ( uint8_t * )"CE", 0 );
 800d762:	4621      	mov	r1, r4
 800d764:	480b      	ldr	r0, [pc, #44]	; (800d794 <xbee_init+0x70>)
}
 800d766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xbee_api_AT8( ( uint8_t * )"CE", 0 );
 800d76a:	f7ff bfb7 	b.w	800d6dc <xbee_api_AT8>
 800d76e:	bf00      	nop
 800d770:	20009198 	.word	0x20009198
 800d774:	2000919c 	.word	0x2000919c
 800d778:	2000919d 	.word	0x2000919d
 800d77c:	20009194 	.word	0x20009194
 800d780:	20001ab8 	.word	0x20001ab8
 800d784:	08012782 	.word	0x08012782
 800d788:	20000ed4 	.word	0x20000ed4
 800d78c:	200016cf 	.word	0x200016cf
 800d790:	08012785 	.word	0x08012785
 800d794:	08012788 	.word	0x08012788

0800d798 <xbee_process>:
	if ( led_ms )
 800d798:	4907      	ldr	r1, [pc, #28]	; (800d7b8 <xbee_process+0x20>)
 800d79a:	880b      	ldrh	r3, [r1, #0]
 800d79c:	b153      	cbz	r3, 800d7b4 <xbee_process+0x1c>
		if ( led_ms <= ms )
 800d79e:	4283      	cmp	r3, r0
 800d7a0:	dc06      	bgt.n	800d7b0 <xbee_process+0x18>
			XBEE_RX_LED_STOP();
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	800a      	strh	r2, [r1, #0]
 800d7a6:	4805      	ldr	r0, [pc, #20]	; (800d7bc <xbee_process+0x24>)
 800d7a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d7ac:	f7f4 baea 	b.w	8001d84 <HAL_GPIO_WritePin>
			led_ms -= ms;
 800d7b0:	1a1b      	subs	r3, r3, r0
 800d7b2:	800b      	strh	r3, [r1, #0]
}
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	20000ed2 	.word	0x20000ed2
 800d7bc:	40020c00 	.word	0x40020c00

0800d7c0 <xbee_AT_configure_API1>:
{
 800d7c0:	b570      	push	{r4, r5, r6, lr}
	  xbee_mode_AT = 1;
 800d7c2:	4d32      	ldr	r5, [pc, #200]	; (800d88c <xbee_AT_configure_API1+0xcc>)
	  HAL_Delay( 1100 );
 800d7c4:	f240 404c 	movw	r0, #1100	; 0x44c
	  xbee_mode_AT = 1;
 800d7c8:	2401      	movs	r4, #1
 800d7ca:	702c      	strb	r4, [r5, #0]
	  HAL_Delay( 1100 );
 800d7cc:	f7f3 fbd6 	bl	8000f7c <HAL_Delay>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"+++", 3, 1000 );
 800d7d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	492e      	ldr	r1, [pc, #184]	; (800d890 <xbee_AT_configure_API1+0xd0>)
 800d7d8:	482e      	ldr	r0, [pc, #184]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d7da:	f7f5 ff51 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 1100 );
 800d7de:	f240 404c 	movw	r0, #1100	; 0x44c
 800d7e2:	f7f3 fbcb 	bl	8000f7c <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 1; }
 800d7e6:	f7ff fe9b 	bl	800d520 <xbee_AT_check_OK>
 800d7ea:	462e      	mov	r6, r5
 800d7ec:	b910      	cbnz	r0, 800d7f4 <xbee_AT_configure_API1+0x34>
 800d7ee:	7028      	strb	r0, [r5, #0]
 800d7f0:	4620      	mov	r0, r4
}
 800d7f2:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATRE\r", 5, 1000 );
 800d7f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7f8:	2205      	movs	r2, #5
 800d7fa:	4927      	ldr	r1, [pc, #156]	; (800d898 <xbee_AT_configure_API1+0xd8>)
 800d7fc:	4825      	ldr	r0, [pc, #148]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d7fe:	f7f5 ff3f 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d802:	2064      	movs	r0, #100	; 0x64
 800d804:	f7f3 fbba 	bl	8000f7c <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d808:	f7ff fe8a 	bl	800d520 <xbee_AT_check_OK>
 800d80c:	b918      	cbnz	r0, 800d816 <xbee_AT_configure_API1+0x56>
 800d80e:	2300      	movs	r3, #0
 800d810:	7033      	strb	r3, [r6, #0]
 800d812:	2002      	movs	r0, #2
 800d814:	e7ed      	b.n	800d7f2 <xbee_AT_configure_API1+0x32>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATAP1\r", 6, 1000 );
 800d816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d81a:	2206      	movs	r2, #6
 800d81c:	491f      	ldr	r1, [pc, #124]	; (800d89c <xbee_AT_configure_API1+0xdc>)
 800d81e:	481d      	ldr	r0, [pc, #116]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d820:	f7f5 ff2e 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d824:	2064      	movs	r0, #100	; 0x64
 800d826:	f7f3 fba9 	bl	8000f7c <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d82a:	f7ff fe79 	bl	800d520 <xbee_AT_check_OK>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0ed      	beq.n	800d80e <xbee_AT_configure_API1+0x4e>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATBD7\r", 6, 1000 ); // 115200
 800d832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d836:	2206      	movs	r2, #6
 800d838:	4919      	ldr	r1, [pc, #100]	; (800d8a0 <xbee_AT_configure_API1+0xe0>)
 800d83a:	4816      	ldr	r0, [pc, #88]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d83c:	f7f5 ff20 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d840:	2064      	movs	r0, #100	; 0x64
 800d842:	f7f3 fb9b 	bl	8000f7c <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 3; }
 800d846:	f7ff fe6b 	bl	800d520 <xbee_AT_check_OK>
 800d84a:	b910      	cbnz	r0, 800d852 <xbee_AT_configure_API1+0x92>
 800d84c:	7028      	strb	r0, [r5, #0]
 800d84e:	2003      	movs	r0, #3
 800d850:	e7cf      	b.n	800d7f2 <xbee_AT_configure_API1+0x32>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATWR\r", 5, 1000 );
 800d852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d856:	2205      	movs	r2, #5
 800d858:	4912      	ldr	r1, [pc, #72]	; (800d8a4 <xbee_AT_configure_API1+0xe4>)
 800d85a:	480e      	ldr	r0, [pc, #56]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d85c:	f7f5 ff10 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d860:	2064      	movs	r0, #100	; 0x64
 800d862:	f7f3 fb8b 	bl	8000f7c <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 4; }
 800d866:	f7ff fe5b 	bl	800d520 <xbee_AT_check_OK>
 800d86a:	b910      	cbnz	r0, 800d872 <xbee_AT_configure_API1+0xb2>
 800d86c:	7028      	strb	r0, [r5, #0]
 800d86e:	2004      	movs	r0, #4
 800d870:	e7bf      	b.n	800d7f2 <xbee_AT_configure_API1+0x32>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATCN\r", 5, 1000 );
 800d872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d876:	2205      	movs	r2, #5
 800d878:	490b      	ldr	r1, [pc, #44]	; (800d8a8 <xbee_AT_configure_API1+0xe8>)
 800d87a:	4806      	ldr	r0, [pc, #24]	; (800d894 <xbee_AT_configure_API1+0xd4>)
 800d87c:	f7f5 ff00 	bl	8003680 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d880:	2064      	movs	r0, #100	; 0x64
 800d882:	f7f3 fb7b 	bl	8000f7c <HAL_Delay>
	  xbee_mode_AT = 0;
 800d886:	2000      	movs	r0, #0
 800d888:	7028      	strb	r0, [r5, #0]
	  return 0;
 800d88a:	e7b2      	b.n	800d7f2 <xbee_AT_configure_API1+0x32>
 800d88c:	200016ce 	.word	0x200016ce
 800d890:	0801275e 	.word	0x0801275e
 800d894:	200086c8 	.word	0x200086c8
 800d898:	08012762 	.word	0x08012762
 800d89c:	08012768 	.word	0x08012768
 800d8a0:	0801276f 	.word	0x0801276f
 800d8a4:	08012776 	.word	0x08012776
 800d8a8:	0801277c 	.word	0x0801277c

0800d8ac <xbee_log>:
}


void xbee_log( const char *msg )
{
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4604      	mov	r4, r0
	int len_rl = strlen( ( const char * )xbee_log_buffer );
 800d8b0:	4810      	ldr	r0, [pc, #64]	; (800d8f4 <xbee_log+0x48>)
 800d8b2:	f7f2 fc97 	bl	80001e4 <strlen>
 800d8b6:	4605      	mov	r5, r0
	int len_msg = strlen( msg );
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7f2 fc93 	bl	80001e4 <strlen>


	if ( len_rl + len_msg > XBEE_LOG_SIZE )
 800d8be:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8c2:	182a      	adds	r2, r5, r0
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	dc05      	bgt.n	800d8d4 <xbee_log+0x28>
		int i, k;
		len_rl++;
		for ( k = 0, i = len_msg ; i < len_rl ; i++, k++ ) xbee_log_buffer[ k ] = xbee_log_buffer[ i ];
	}

	strcat( ( char * )xbee_log_buffer, msg );
 800d8c8:	4621      	mov	r1, r4
 800d8ca:	480a      	ldr	r0, [pc, #40]	; (800d8f4 <xbee_log+0x48>)
}
 800d8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	strcat( ( char * )xbee_log_buffer, msg );
 800d8d0:	f000 b990 	b.w	800dbf4 <strcat>
		if ( len_msg < XBEE_LOG_SIZE / 3 ) len_msg = XBEE_LOG_SIZE / 3;
 800d8d4:	f240 6281 	movw	r2, #1665	; 0x681
 800d8d8:	f240 6382 	movw	r3, #1666	; 0x682
 800d8dc:	4290      	cmp	r0, r2
 800d8de:	bf98      	it	ls
 800d8e0:	4618      	movls	r0, r3
		for ( k = 0, i = len_msg ; i < len_rl ; i++, k++ ) xbee_log_buffer[ k ] = xbee_log_buffer[ i ];
 800d8e2:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <xbee_log+0x48>)
 800d8e4:	1a1a      	subs	r2, r3, r0
 800d8e6:	42a8      	cmp	r0, r5
 800d8e8:	dcee      	bgt.n	800d8c8 <xbee_log+0x1c>
 800d8ea:	5cc1      	ldrb	r1, [r0, r3]
 800d8ec:	5411      	strb	r1, [r2, r0]
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	e7f9      	b.n	800d8e6 <xbee_log+0x3a>
 800d8f2:	bf00      	nop
 800d8f4:	2000919d 	.word	0x2000919d

0800d8f8 <xbee_log_get>:

const char *xbee_log_get()
{
	return ( const char * )xbee_log_buffer;
}
 800d8f8:	4800      	ldr	r0, [pc, #0]	; (800d8fc <xbee_log_get+0x4>)
 800d8fa:	4770      	bx	lr
 800d8fc:	2000919d 	.word	0x2000919d

0800d900 <xbee_log_len>:

int xbee_log_len()
{
  return strlen( ( const char * )xbee_log_buffer );
 800d900:	4801      	ldr	r0, [pc, #4]	; (800d908 <xbee_log_len+0x8>)
 800d902:	f7f2 bc6f 	b.w	80001e4 <strlen>
 800d906:	bf00      	nop
 800d908:	2000919d 	.word	0x2000919d

0800d90c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d90c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d912:	e003      	b.n	800d91c <LoopCopyDataInit>

0800d914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d914:	4b0c      	ldr	r3, [pc, #48]	; (800d948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d91a:	3104      	adds	r1, #4

0800d91c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d91c:	480b      	ldr	r0, [pc, #44]	; (800d94c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d91e:	4b0c      	ldr	r3, [pc, #48]	; (800d950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d924:	d3f6      	bcc.n	800d914 <CopyDataInit>
  ldr  r2, =_sbss
 800d926:	4a0b      	ldr	r2, [pc, #44]	; (800d954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d928:	e002      	b.n	800d930 <LoopFillZerobss>

0800d92a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d92a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d92c:	f842 3b04 	str.w	r3, [r2], #4

0800d930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d930:	4b09      	ldr	r3, [pc, #36]	; (800d958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d934:	d3f9      	bcc.n	800d92a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d936:	f7ff fa99 	bl	800ce6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d93a:	f000 f815 	bl	800d968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d93e:	f7fe fd75 	bl	800c42c <main>
  bx  lr    
 800d942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d944:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d948:	0801293c 	.word	0x0801293c
  ldr  r0, =_sdata
 800d94c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d950:	2000078c 	.word	0x2000078c
  ldr  r2, =_sbss
 800d954:	20000790 	.word	0x20000790
  ldr  r3, = _ebss
 800d958:	2000a52c 	.word	0x2000a52c

0800d95c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d95c:	e7fe      	b.n	800d95c <ADC_IRQHandler>

0800d95e <atoi>:
 800d95e:	220a      	movs	r2, #10
 800d960:	2100      	movs	r1, #0
 800d962:	f000 ba27 	b.w	800ddb4 <strtol>
	...

0800d968 <__libc_init_array>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	4e0d      	ldr	r6, [pc, #52]	; (800d9a0 <__libc_init_array+0x38>)
 800d96c:	4c0d      	ldr	r4, [pc, #52]	; (800d9a4 <__libc_init_array+0x3c>)
 800d96e:	1ba4      	subs	r4, r4, r6
 800d970:	10a4      	asrs	r4, r4, #2
 800d972:	2500      	movs	r5, #0
 800d974:	42a5      	cmp	r5, r4
 800d976:	d109      	bne.n	800d98c <__libc_init_array+0x24>
 800d978:	4e0b      	ldr	r6, [pc, #44]	; (800d9a8 <__libc_init_array+0x40>)
 800d97a:	4c0c      	ldr	r4, [pc, #48]	; (800d9ac <__libc_init_array+0x44>)
 800d97c:	f001 fa02 	bl	800ed84 <_init>
 800d980:	1ba4      	subs	r4, r4, r6
 800d982:	10a4      	asrs	r4, r4, #2
 800d984:	2500      	movs	r5, #0
 800d986:	42a5      	cmp	r5, r4
 800d988:	d105      	bne.n	800d996 <__libc_init_array+0x2e>
 800d98a:	bd70      	pop	{r4, r5, r6, pc}
 800d98c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d990:	4798      	blx	r3
 800d992:	3501      	adds	r5, #1
 800d994:	e7ee      	b.n	800d974 <__libc_init_array+0xc>
 800d996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d99a:	4798      	blx	r3
 800d99c:	3501      	adds	r5, #1
 800d99e:	e7f2      	b.n	800d986 <__libc_init_array+0x1e>
 800d9a0:	08012934 	.word	0x08012934
 800d9a4:	08012934 	.word	0x08012934
 800d9a8:	08012934 	.word	0x08012934
 800d9ac:	08012938 	.word	0x08012938

0800d9b0 <malloc>:
 800d9b0:	4b02      	ldr	r3, [pc, #8]	; (800d9bc <malloc+0xc>)
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	f000 b87b 	b.w	800dab0 <_malloc_r>
 800d9ba:	bf00      	nop
 800d9bc:	200005bc 	.word	0x200005bc

0800d9c0 <free>:
 800d9c0:	4b02      	ldr	r3, [pc, #8]	; (800d9cc <free+0xc>)
 800d9c2:	4601      	mov	r1, r0
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	f000 b825 	b.w	800da14 <_free_r>
 800d9ca:	bf00      	nop
 800d9cc:	200005bc 	.word	0x200005bc

0800d9d0 <memcmp>:
 800d9d0:	b530      	push	{r4, r5, lr}
 800d9d2:	2400      	movs	r4, #0
 800d9d4:	42a2      	cmp	r2, r4
 800d9d6:	d101      	bne.n	800d9dc <memcmp+0xc>
 800d9d8:	2000      	movs	r0, #0
 800d9da:	e007      	b.n	800d9ec <memcmp+0x1c>
 800d9dc:	5d03      	ldrb	r3, [r0, r4]
 800d9de:	3401      	adds	r4, #1
 800d9e0:	190d      	adds	r5, r1, r4
 800d9e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d9e6:	42ab      	cmp	r3, r5
 800d9e8:	d0f4      	beq.n	800d9d4 <memcmp+0x4>
 800d9ea:	1b58      	subs	r0, r3, r5
 800d9ec:	bd30      	pop	{r4, r5, pc}

0800d9ee <memcpy>:
 800d9ee:	b510      	push	{r4, lr}
 800d9f0:	1e43      	subs	r3, r0, #1
 800d9f2:	440a      	add	r2, r1
 800d9f4:	4291      	cmp	r1, r2
 800d9f6:	d100      	bne.n	800d9fa <memcpy+0xc>
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da02:	e7f7      	b.n	800d9f4 <memcpy+0x6>

0800da04 <memset>:
 800da04:	4402      	add	r2, r0
 800da06:	4603      	mov	r3, r0
 800da08:	4293      	cmp	r3, r2
 800da0a:	d100      	bne.n	800da0e <memset+0xa>
 800da0c:	4770      	bx	lr
 800da0e:	f803 1b01 	strb.w	r1, [r3], #1
 800da12:	e7f9      	b.n	800da08 <memset+0x4>

0800da14 <_free_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4605      	mov	r5, r0
 800da18:	2900      	cmp	r1, #0
 800da1a:	d045      	beq.n	800daa8 <_free_r+0x94>
 800da1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da20:	1f0c      	subs	r4, r1, #4
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfb8      	it	lt
 800da26:	18e4      	addlt	r4, r4, r3
 800da28:	f000 fab9 	bl	800df9e <__malloc_lock>
 800da2c:	4a1f      	ldr	r2, [pc, #124]	; (800daac <_free_r+0x98>)
 800da2e:	6813      	ldr	r3, [r2, #0]
 800da30:	4610      	mov	r0, r2
 800da32:	b933      	cbnz	r3, 800da42 <_free_r+0x2e>
 800da34:	6063      	str	r3, [r4, #4]
 800da36:	6014      	str	r4, [r2, #0]
 800da38:	4628      	mov	r0, r5
 800da3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3e:	f000 baaf 	b.w	800dfa0 <__malloc_unlock>
 800da42:	42a3      	cmp	r3, r4
 800da44:	d90c      	bls.n	800da60 <_free_r+0x4c>
 800da46:	6821      	ldr	r1, [r4, #0]
 800da48:	1862      	adds	r2, r4, r1
 800da4a:	4293      	cmp	r3, r2
 800da4c:	bf04      	itt	eq
 800da4e:	681a      	ldreq	r2, [r3, #0]
 800da50:	685b      	ldreq	r3, [r3, #4]
 800da52:	6063      	str	r3, [r4, #4]
 800da54:	bf04      	itt	eq
 800da56:	1852      	addeq	r2, r2, r1
 800da58:	6022      	streq	r2, [r4, #0]
 800da5a:	6004      	str	r4, [r0, #0]
 800da5c:	e7ec      	b.n	800da38 <_free_r+0x24>
 800da5e:	4613      	mov	r3, r2
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	b10a      	cbz	r2, 800da68 <_free_r+0x54>
 800da64:	42a2      	cmp	r2, r4
 800da66:	d9fa      	bls.n	800da5e <_free_r+0x4a>
 800da68:	6819      	ldr	r1, [r3, #0]
 800da6a:	1858      	adds	r0, r3, r1
 800da6c:	42a0      	cmp	r0, r4
 800da6e:	d10b      	bne.n	800da88 <_free_r+0x74>
 800da70:	6820      	ldr	r0, [r4, #0]
 800da72:	4401      	add	r1, r0
 800da74:	1858      	adds	r0, r3, r1
 800da76:	4282      	cmp	r2, r0
 800da78:	6019      	str	r1, [r3, #0]
 800da7a:	d1dd      	bne.n	800da38 <_free_r+0x24>
 800da7c:	6810      	ldr	r0, [r2, #0]
 800da7e:	6852      	ldr	r2, [r2, #4]
 800da80:	605a      	str	r2, [r3, #4]
 800da82:	4401      	add	r1, r0
 800da84:	6019      	str	r1, [r3, #0]
 800da86:	e7d7      	b.n	800da38 <_free_r+0x24>
 800da88:	d902      	bls.n	800da90 <_free_r+0x7c>
 800da8a:	230c      	movs	r3, #12
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	e7d3      	b.n	800da38 <_free_r+0x24>
 800da90:	6820      	ldr	r0, [r4, #0]
 800da92:	1821      	adds	r1, r4, r0
 800da94:	428a      	cmp	r2, r1
 800da96:	bf04      	itt	eq
 800da98:	6811      	ldreq	r1, [r2, #0]
 800da9a:	6852      	ldreq	r2, [r2, #4]
 800da9c:	6062      	str	r2, [r4, #4]
 800da9e:	bf04      	itt	eq
 800daa0:	1809      	addeq	r1, r1, r0
 800daa2:	6021      	streq	r1, [r4, #0]
 800daa4:	605c      	str	r4, [r3, #4]
 800daa6:	e7c7      	b.n	800da38 <_free_r+0x24>
 800daa8:	bd38      	pop	{r3, r4, r5, pc}
 800daaa:	bf00      	nop
 800daac:	20001abc 	.word	0x20001abc

0800dab0 <_malloc_r>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	1ccd      	adds	r5, r1, #3
 800dab4:	f025 0503 	bic.w	r5, r5, #3
 800dab8:	3508      	adds	r5, #8
 800daba:	2d0c      	cmp	r5, #12
 800dabc:	bf38      	it	cc
 800dabe:	250c      	movcc	r5, #12
 800dac0:	2d00      	cmp	r5, #0
 800dac2:	4606      	mov	r6, r0
 800dac4:	db01      	blt.n	800daca <_malloc_r+0x1a>
 800dac6:	42a9      	cmp	r1, r5
 800dac8:	d903      	bls.n	800dad2 <_malloc_r+0x22>
 800daca:	230c      	movs	r3, #12
 800dacc:	6033      	str	r3, [r6, #0]
 800dace:	2000      	movs	r0, #0
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
 800dad2:	f000 fa64 	bl	800df9e <__malloc_lock>
 800dad6:	4a21      	ldr	r2, [pc, #132]	; (800db5c <_malloc_r+0xac>)
 800dad8:	6814      	ldr	r4, [r2, #0]
 800dada:	4621      	mov	r1, r4
 800dadc:	b991      	cbnz	r1, 800db04 <_malloc_r+0x54>
 800dade:	4c20      	ldr	r4, [pc, #128]	; (800db60 <_malloc_r+0xb0>)
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	b91b      	cbnz	r3, 800daec <_malloc_r+0x3c>
 800dae4:	4630      	mov	r0, r6
 800dae6:	f000 f855 	bl	800db94 <_sbrk_r>
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	4629      	mov	r1, r5
 800daee:	4630      	mov	r0, r6
 800daf0:	f000 f850 	bl	800db94 <_sbrk_r>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d124      	bne.n	800db42 <_malloc_r+0x92>
 800daf8:	230c      	movs	r3, #12
 800dafa:	6033      	str	r3, [r6, #0]
 800dafc:	4630      	mov	r0, r6
 800dafe:	f000 fa4f 	bl	800dfa0 <__malloc_unlock>
 800db02:	e7e4      	b.n	800dace <_malloc_r+0x1e>
 800db04:	680b      	ldr	r3, [r1, #0]
 800db06:	1b5b      	subs	r3, r3, r5
 800db08:	d418      	bmi.n	800db3c <_malloc_r+0x8c>
 800db0a:	2b0b      	cmp	r3, #11
 800db0c:	d90f      	bls.n	800db2e <_malloc_r+0x7e>
 800db0e:	600b      	str	r3, [r1, #0]
 800db10:	50cd      	str	r5, [r1, r3]
 800db12:	18cc      	adds	r4, r1, r3
 800db14:	4630      	mov	r0, r6
 800db16:	f000 fa43 	bl	800dfa0 <__malloc_unlock>
 800db1a:	f104 000b 	add.w	r0, r4, #11
 800db1e:	1d23      	adds	r3, r4, #4
 800db20:	f020 0007 	bic.w	r0, r0, #7
 800db24:	1ac3      	subs	r3, r0, r3
 800db26:	d0d3      	beq.n	800dad0 <_malloc_r+0x20>
 800db28:	425a      	negs	r2, r3
 800db2a:	50e2      	str	r2, [r4, r3]
 800db2c:	e7d0      	b.n	800dad0 <_malloc_r+0x20>
 800db2e:	428c      	cmp	r4, r1
 800db30:	684b      	ldr	r3, [r1, #4]
 800db32:	bf16      	itet	ne
 800db34:	6063      	strne	r3, [r4, #4]
 800db36:	6013      	streq	r3, [r2, #0]
 800db38:	460c      	movne	r4, r1
 800db3a:	e7eb      	b.n	800db14 <_malloc_r+0x64>
 800db3c:	460c      	mov	r4, r1
 800db3e:	6849      	ldr	r1, [r1, #4]
 800db40:	e7cc      	b.n	800dadc <_malloc_r+0x2c>
 800db42:	1cc4      	adds	r4, r0, #3
 800db44:	f024 0403 	bic.w	r4, r4, #3
 800db48:	42a0      	cmp	r0, r4
 800db4a:	d005      	beq.n	800db58 <_malloc_r+0xa8>
 800db4c:	1a21      	subs	r1, r4, r0
 800db4e:	4630      	mov	r0, r6
 800db50:	f000 f820 	bl	800db94 <_sbrk_r>
 800db54:	3001      	adds	r0, #1
 800db56:	d0cf      	beq.n	800daf8 <_malloc_r+0x48>
 800db58:	6025      	str	r5, [r4, #0]
 800db5a:	e7db      	b.n	800db14 <_malloc_r+0x64>
 800db5c:	20001abc 	.word	0x20001abc
 800db60:	20001ac0 	.word	0x20001ac0

0800db64 <iprintf>:
 800db64:	b40f      	push	{r0, r1, r2, r3}
 800db66:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <iprintf+0x2c>)
 800db68:	b513      	push	{r0, r1, r4, lr}
 800db6a:	681c      	ldr	r4, [r3, #0]
 800db6c:	b124      	cbz	r4, 800db78 <iprintf+0x14>
 800db6e:	69a3      	ldr	r3, [r4, #24]
 800db70:	b913      	cbnz	r3, 800db78 <iprintf+0x14>
 800db72:	4620      	mov	r0, r4
 800db74:	f000 f974 	bl	800de60 <__sinit>
 800db78:	ab05      	add	r3, sp, #20
 800db7a:	9a04      	ldr	r2, [sp, #16]
 800db7c:	68a1      	ldr	r1, [r4, #8]
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	4620      	mov	r0, r4
 800db82:	f000 fb8b 	bl	800e29c <_vfiprintf_r>
 800db86:	b002      	add	sp, #8
 800db88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db8c:	b004      	add	sp, #16
 800db8e:	4770      	bx	lr
 800db90:	200005bc 	.word	0x200005bc

0800db94 <_sbrk_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4c06      	ldr	r4, [pc, #24]	; (800dbb0 <_sbrk_r+0x1c>)
 800db98:	2300      	movs	r3, #0
 800db9a:	4605      	mov	r5, r0
 800db9c:	4608      	mov	r0, r1
 800db9e:	6023      	str	r3, [r4, #0]
 800dba0:	f7ff f93e 	bl	800ce20 <_sbrk>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_sbrk_r+0x1a>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_sbrk_r+0x1a>
 800dbac:	602b      	str	r3, [r5, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	2000a528 	.word	0x2000a528

0800dbb4 <siprintf>:
 800dbb4:	b40e      	push	{r1, r2, r3}
 800dbb6:	b500      	push	{lr}
 800dbb8:	b09c      	sub	sp, #112	; 0x70
 800dbba:	ab1d      	add	r3, sp, #116	; 0x74
 800dbbc:	9002      	str	r0, [sp, #8]
 800dbbe:	9006      	str	r0, [sp, #24]
 800dbc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbc4:	4809      	ldr	r0, [pc, #36]	; (800dbec <siprintf+0x38>)
 800dbc6:	9107      	str	r1, [sp, #28]
 800dbc8:	9104      	str	r1, [sp, #16]
 800dbca:	4909      	ldr	r1, [pc, #36]	; (800dbf0 <siprintf+0x3c>)
 800dbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbd0:	9105      	str	r1, [sp, #20]
 800dbd2:	6800      	ldr	r0, [r0, #0]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	a902      	add	r1, sp, #8
 800dbd8:	f000 fa3e 	bl	800e058 <_svfiprintf_r>
 800dbdc:	9b02      	ldr	r3, [sp, #8]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
 800dbe2:	b01c      	add	sp, #112	; 0x70
 800dbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbe8:	b003      	add	sp, #12
 800dbea:	4770      	bx	lr
 800dbec:	200005bc 	.word	0x200005bc
 800dbf0:	ffff0208 	.word	0xffff0208

0800dbf4 <strcat>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	781a      	ldrb	r2, [r3, #0]
 800dbfa:	1c5c      	adds	r4, r3, #1
 800dbfc:	b93a      	cbnz	r2, 800dc0e <strcat+0x1a>
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc08:	2a00      	cmp	r2, #0
 800dc0a:	d1f9      	bne.n	800dc00 <strcat+0xc>
 800dc0c:	bd10      	pop	{r4, pc}
 800dc0e:	4623      	mov	r3, r4
 800dc10:	e7f2      	b.n	800dbf8 <strcat+0x4>

0800dc12 <strchr>:
 800dc12:	b2c9      	uxtb	r1, r1
 800dc14:	4603      	mov	r3, r0
 800dc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc1a:	b11a      	cbz	r2, 800dc24 <strchr+0x12>
 800dc1c:	428a      	cmp	r2, r1
 800dc1e:	d1f9      	bne.n	800dc14 <strchr+0x2>
 800dc20:	4618      	mov	r0, r3
 800dc22:	4770      	bx	lr
 800dc24:	2900      	cmp	r1, #0
 800dc26:	bf18      	it	ne
 800dc28:	2300      	movne	r3, #0
 800dc2a:	e7f9      	b.n	800dc20 <strchr+0xe>

0800dc2c <strcpy>:
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc32:	f803 2b01 	strb.w	r2, [r3], #1
 800dc36:	2a00      	cmp	r2, #0
 800dc38:	d1f9      	bne.n	800dc2e <strcpy+0x2>
 800dc3a:	4770      	bx	lr

0800dc3c <strncmp>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	b16a      	cbz	r2, 800dc5c <strncmp+0x20>
 800dc40:	3901      	subs	r1, #1
 800dc42:	1884      	adds	r4, r0, r2
 800dc44:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dc48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d103      	bne.n	800dc58 <strncmp+0x1c>
 800dc50:	42a0      	cmp	r0, r4
 800dc52:	d001      	beq.n	800dc58 <strncmp+0x1c>
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1f5      	bne.n	800dc44 <strncmp+0x8>
 800dc58:	1a98      	subs	r0, r3, r2
 800dc5a:	bd10      	pop	{r4, pc}
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	e7fc      	b.n	800dc5a <strncmp+0x1e>

0800dc60 <strncpy>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	3901      	subs	r1, #1
 800dc64:	4604      	mov	r4, r0
 800dc66:	b902      	cbnz	r2, 800dc6a <strncpy+0xa>
 800dc68:	bd70      	pop	{r4, r5, r6, pc}
 800dc6a:	4623      	mov	r3, r4
 800dc6c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800dc70:	f803 5b01 	strb.w	r5, [r3], #1
 800dc74:	1e56      	subs	r6, r2, #1
 800dc76:	b92d      	cbnz	r5, 800dc84 <strncpy+0x24>
 800dc78:	4414      	add	r4, r2
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	d0f4      	beq.n	800dc68 <strncpy+0x8>
 800dc7e:	f803 5b01 	strb.w	r5, [r3], #1
 800dc82:	e7fa      	b.n	800dc7a <strncpy+0x1a>
 800dc84:	461c      	mov	r4, r3
 800dc86:	4632      	mov	r2, r6
 800dc88:	e7ed      	b.n	800dc66 <strncpy+0x6>

0800dc8a <strstr>:
 800dc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8c:	7803      	ldrb	r3, [r0, #0]
 800dc8e:	b17b      	cbz	r3, 800dcb0 <strstr+0x26>
 800dc90:	4604      	mov	r4, r0
 800dc92:	7823      	ldrb	r3, [r4, #0]
 800dc94:	4620      	mov	r0, r4
 800dc96:	1c66      	adds	r6, r4, #1
 800dc98:	b17b      	cbz	r3, 800dcba <strstr+0x30>
 800dc9a:	1e4a      	subs	r2, r1, #1
 800dc9c:	1e63      	subs	r3, r4, #1
 800dc9e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800dca2:	b14d      	cbz	r5, 800dcb8 <strstr+0x2e>
 800dca4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800dca8:	42af      	cmp	r7, r5
 800dcaa:	4634      	mov	r4, r6
 800dcac:	d0f7      	beq.n	800dc9e <strstr+0x14>
 800dcae:	e7f0      	b.n	800dc92 <strstr+0x8>
 800dcb0:	780b      	ldrb	r3, [r1, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bf18      	it	ne
 800dcb6:	2000      	movne	r0, #0
 800dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	e7fc      	b.n	800dcb8 <strstr+0x2e>

0800dcbe <_strtol_l.isra.0>:
 800dcbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc2:	4680      	mov	r8, r0
 800dcc4:	4689      	mov	r9, r1
 800dcc6:	4692      	mov	sl, r2
 800dcc8:	461e      	mov	r6, r3
 800dcca:	460f      	mov	r7, r1
 800dccc:	463d      	mov	r5, r7
 800dcce:	9808      	ldr	r0, [sp, #32]
 800dcd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcd4:	f000 f94e 	bl	800df74 <__locale_ctype_ptr_l>
 800dcd8:	4420      	add	r0, r4
 800dcda:	7843      	ldrb	r3, [r0, #1]
 800dcdc:	f013 0308 	ands.w	r3, r3, #8
 800dce0:	d132      	bne.n	800dd48 <_strtol_l.isra.0+0x8a>
 800dce2:	2c2d      	cmp	r4, #45	; 0x2d
 800dce4:	d132      	bne.n	800dd4c <_strtol_l.isra.0+0x8e>
 800dce6:	787c      	ldrb	r4, [r7, #1]
 800dce8:	1cbd      	adds	r5, r7, #2
 800dcea:	2201      	movs	r2, #1
 800dcec:	2e00      	cmp	r6, #0
 800dcee:	d05d      	beq.n	800ddac <_strtol_l.isra.0+0xee>
 800dcf0:	2e10      	cmp	r6, #16
 800dcf2:	d109      	bne.n	800dd08 <_strtol_l.isra.0+0x4a>
 800dcf4:	2c30      	cmp	r4, #48	; 0x30
 800dcf6:	d107      	bne.n	800dd08 <_strtol_l.isra.0+0x4a>
 800dcf8:	782b      	ldrb	r3, [r5, #0]
 800dcfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dcfe:	2b58      	cmp	r3, #88	; 0x58
 800dd00:	d14f      	bne.n	800dda2 <_strtol_l.isra.0+0xe4>
 800dd02:	786c      	ldrb	r4, [r5, #1]
 800dd04:	2610      	movs	r6, #16
 800dd06:	3502      	adds	r5, #2
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	bf14      	ite	ne
 800dd0c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dd10:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dd14:	2700      	movs	r7, #0
 800dd16:	fbb1 fcf6 	udiv	ip, r1, r6
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dd20:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dd24:	2b09      	cmp	r3, #9
 800dd26:	d817      	bhi.n	800dd58 <_strtol_l.isra.0+0x9a>
 800dd28:	461c      	mov	r4, r3
 800dd2a:	42a6      	cmp	r6, r4
 800dd2c:	dd23      	ble.n	800dd76 <_strtol_l.isra.0+0xb8>
 800dd2e:	1c7b      	adds	r3, r7, #1
 800dd30:	d007      	beq.n	800dd42 <_strtol_l.isra.0+0x84>
 800dd32:	4584      	cmp	ip, r0
 800dd34:	d31c      	bcc.n	800dd70 <_strtol_l.isra.0+0xb2>
 800dd36:	d101      	bne.n	800dd3c <_strtol_l.isra.0+0x7e>
 800dd38:	45a6      	cmp	lr, r4
 800dd3a:	db19      	blt.n	800dd70 <_strtol_l.isra.0+0xb2>
 800dd3c:	fb00 4006 	mla	r0, r0, r6, r4
 800dd40:	2701      	movs	r7, #1
 800dd42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd46:	e7eb      	b.n	800dd20 <_strtol_l.isra.0+0x62>
 800dd48:	462f      	mov	r7, r5
 800dd4a:	e7bf      	b.n	800dccc <_strtol_l.isra.0+0xe>
 800dd4c:	2c2b      	cmp	r4, #43	; 0x2b
 800dd4e:	bf04      	itt	eq
 800dd50:	1cbd      	addeq	r5, r7, #2
 800dd52:	787c      	ldrbeq	r4, [r7, #1]
 800dd54:	461a      	mov	r2, r3
 800dd56:	e7c9      	b.n	800dcec <_strtol_l.isra.0+0x2e>
 800dd58:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dd5c:	2b19      	cmp	r3, #25
 800dd5e:	d801      	bhi.n	800dd64 <_strtol_l.isra.0+0xa6>
 800dd60:	3c37      	subs	r4, #55	; 0x37
 800dd62:	e7e2      	b.n	800dd2a <_strtol_l.isra.0+0x6c>
 800dd64:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dd68:	2b19      	cmp	r3, #25
 800dd6a:	d804      	bhi.n	800dd76 <_strtol_l.isra.0+0xb8>
 800dd6c:	3c57      	subs	r4, #87	; 0x57
 800dd6e:	e7dc      	b.n	800dd2a <_strtol_l.isra.0+0x6c>
 800dd70:	f04f 37ff 	mov.w	r7, #4294967295
 800dd74:	e7e5      	b.n	800dd42 <_strtol_l.isra.0+0x84>
 800dd76:	1c7b      	adds	r3, r7, #1
 800dd78:	d108      	bne.n	800dd8c <_strtol_l.isra.0+0xce>
 800dd7a:	2322      	movs	r3, #34	; 0x22
 800dd7c:	f8c8 3000 	str.w	r3, [r8]
 800dd80:	4608      	mov	r0, r1
 800dd82:	f1ba 0f00 	cmp.w	sl, #0
 800dd86:	d107      	bne.n	800dd98 <_strtol_l.isra.0+0xda>
 800dd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8c:	b102      	cbz	r2, 800dd90 <_strtol_l.isra.0+0xd2>
 800dd8e:	4240      	negs	r0, r0
 800dd90:	f1ba 0f00 	cmp.w	sl, #0
 800dd94:	d0f8      	beq.n	800dd88 <_strtol_l.isra.0+0xca>
 800dd96:	b10f      	cbz	r7, 800dd9c <_strtol_l.isra.0+0xde>
 800dd98:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd9c:	f8ca 9000 	str.w	r9, [sl]
 800dda0:	e7f2      	b.n	800dd88 <_strtol_l.isra.0+0xca>
 800dda2:	2430      	movs	r4, #48	; 0x30
 800dda4:	2e00      	cmp	r6, #0
 800dda6:	d1af      	bne.n	800dd08 <_strtol_l.isra.0+0x4a>
 800dda8:	2608      	movs	r6, #8
 800ddaa:	e7ad      	b.n	800dd08 <_strtol_l.isra.0+0x4a>
 800ddac:	2c30      	cmp	r4, #48	; 0x30
 800ddae:	d0a3      	beq.n	800dcf8 <_strtol_l.isra.0+0x3a>
 800ddb0:	260a      	movs	r6, #10
 800ddb2:	e7a9      	b.n	800dd08 <_strtol_l.isra.0+0x4a>

0800ddb4 <strtol>:
 800ddb4:	4b08      	ldr	r3, [pc, #32]	; (800ddd8 <strtol+0x24>)
 800ddb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddb8:	681c      	ldr	r4, [r3, #0]
 800ddba:	4d08      	ldr	r5, [pc, #32]	; (800dddc <strtol+0x28>)
 800ddbc:	6a23      	ldr	r3, [r4, #32]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	bf08      	it	eq
 800ddc2:	462b      	moveq	r3, r5
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	460a      	mov	r2, r1
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f7ff ff76 	bl	800dcbe <_strtol_l.isra.0>
 800ddd2:	b003      	add	sp, #12
 800ddd4:	bd30      	pop	{r4, r5, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200005bc 	.word	0x200005bc
 800dddc:	20000620 	.word	0x20000620

0800dde0 <std>:
 800dde0:	2300      	movs	r3, #0
 800dde2:	b510      	push	{r4, lr}
 800dde4:	4604      	mov	r4, r0
 800dde6:	e9c0 3300 	strd	r3, r3, [r0]
 800ddea:	6083      	str	r3, [r0, #8]
 800ddec:	8181      	strh	r1, [r0, #12]
 800ddee:	6643      	str	r3, [r0, #100]	; 0x64
 800ddf0:	81c2      	strh	r2, [r0, #14]
 800ddf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddf6:	6183      	str	r3, [r0, #24]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	2208      	movs	r2, #8
 800ddfc:	305c      	adds	r0, #92	; 0x5c
 800ddfe:	f7ff fe01 	bl	800da04 <memset>
 800de02:	4b05      	ldr	r3, [pc, #20]	; (800de18 <std+0x38>)
 800de04:	6263      	str	r3, [r4, #36]	; 0x24
 800de06:	4b05      	ldr	r3, [pc, #20]	; (800de1c <std+0x3c>)
 800de08:	62a3      	str	r3, [r4, #40]	; 0x28
 800de0a:	4b05      	ldr	r3, [pc, #20]	; (800de20 <std+0x40>)
 800de0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de0e:	4b05      	ldr	r3, [pc, #20]	; (800de24 <std+0x44>)
 800de10:	6224      	str	r4, [r4, #32]
 800de12:	6323      	str	r3, [r4, #48]	; 0x30
 800de14:	bd10      	pop	{r4, pc}
 800de16:	bf00      	nop
 800de18:	0800e7d9 	.word	0x0800e7d9
 800de1c:	0800e7fb 	.word	0x0800e7fb
 800de20:	0800e833 	.word	0x0800e833
 800de24:	0800e857 	.word	0x0800e857

0800de28 <_cleanup_r>:
 800de28:	4901      	ldr	r1, [pc, #4]	; (800de30 <_cleanup_r+0x8>)
 800de2a:	f000 b885 	b.w	800df38 <_fwalk_reent>
 800de2e:	bf00      	nop
 800de30:	0800eb4d 	.word	0x0800eb4d

0800de34 <__sfmoreglue>:
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	1e4a      	subs	r2, r1, #1
 800de38:	2568      	movs	r5, #104	; 0x68
 800de3a:	4355      	muls	r5, r2
 800de3c:	460e      	mov	r6, r1
 800de3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de42:	f7ff fe35 	bl	800dab0 <_malloc_r>
 800de46:	4604      	mov	r4, r0
 800de48:	b140      	cbz	r0, 800de5c <__sfmoreglue+0x28>
 800de4a:	2100      	movs	r1, #0
 800de4c:	e9c0 1600 	strd	r1, r6, [r0]
 800de50:	300c      	adds	r0, #12
 800de52:	60a0      	str	r0, [r4, #8]
 800de54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de58:	f7ff fdd4 	bl	800da04 <memset>
 800de5c:	4620      	mov	r0, r4
 800de5e:	bd70      	pop	{r4, r5, r6, pc}

0800de60 <__sinit>:
 800de60:	6983      	ldr	r3, [r0, #24]
 800de62:	b510      	push	{r4, lr}
 800de64:	4604      	mov	r4, r0
 800de66:	bb33      	cbnz	r3, 800deb6 <__sinit+0x56>
 800de68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800de6c:	6503      	str	r3, [r0, #80]	; 0x50
 800de6e:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <__sinit+0x58>)
 800de70:	4a12      	ldr	r2, [pc, #72]	; (800debc <__sinit+0x5c>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6282      	str	r2, [r0, #40]	; 0x28
 800de76:	4298      	cmp	r0, r3
 800de78:	bf04      	itt	eq
 800de7a:	2301      	moveq	r3, #1
 800de7c:	6183      	streq	r3, [r0, #24]
 800de7e:	f000 f81f 	bl	800dec0 <__sfp>
 800de82:	6060      	str	r0, [r4, #4]
 800de84:	4620      	mov	r0, r4
 800de86:	f000 f81b 	bl	800dec0 <__sfp>
 800de8a:	60a0      	str	r0, [r4, #8]
 800de8c:	4620      	mov	r0, r4
 800de8e:	f000 f817 	bl	800dec0 <__sfp>
 800de92:	2200      	movs	r2, #0
 800de94:	60e0      	str	r0, [r4, #12]
 800de96:	2104      	movs	r1, #4
 800de98:	6860      	ldr	r0, [r4, #4]
 800de9a:	f7ff ffa1 	bl	800dde0 <std>
 800de9e:	2201      	movs	r2, #1
 800dea0:	2109      	movs	r1, #9
 800dea2:	68a0      	ldr	r0, [r4, #8]
 800dea4:	f7ff ff9c 	bl	800dde0 <std>
 800dea8:	2202      	movs	r2, #2
 800deaa:	2112      	movs	r1, #18
 800deac:	68e0      	ldr	r0, [r4, #12]
 800deae:	f7ff ff97 	bl	800dde0 <std>
 800deb2:	2301      	movs	r3, #1
 800deb4:	61a3      	str	r3, [r4, #24]
 800deb6:	bd10      	pop	{r4, pc}
 800deb8:	0801278c 	.word	0x0801278c
 800debc:	0800de29 	.word	0x0800de29

0800dec0 <__sfp>:
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	4b1b      	ldr	r3, [pc, #108]	; (800df30 <__sfp+0x70>)
 800dec4:	681e      	ldr	r6, [r3, #0]
 800dec6:	69b3      	ldr	r3, [r6, #24]
 800dec8:	4607      	mov	r7, r0
 800deca:	b913      	cbnz	r3, 800ded2 <__sfp+0x12>
 800decc:	4630      	mov	r0, r6
 800dece:	f7ff ffc7 	bl	800de60 <__sinit>
 800ded2:	3648      	adds	r6, #72	; 0x48
 800ded4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ded8:	3b01      	subs	r3, #1
 800deda:	d503      	bpl.n	800dee4 <__sfp+0x24>
 800dedc:	6833      	ldr	r3, [r6, #0]
 800dede:	b133      	cbz	r3, 800deee <__sfp+0x2e>
 800dee0:	6836      	ldr	r6, [r6, #0]
 800dee2:	e7f7      	b.n	800ded4 <__sfp+0x14>
 800dee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dee8:	b16d      	cbz	r5, 800df06 <__sfp+0x46>
 800deea:	3468      	adds	r4, #104	; 0x68
 800deec:	e7f4      	b.n	800ded8 <__sfp+0x18>
 800deee:	2104      	movs	r1, #4
 800def0:	4638      	mov	r0, r7
 800def2:	f7ff ff9f 	bl	800de34 <__sfmoreglue>
 800def6:	6030      	str	r0, [r6, #0]
 800def8:	2800      	cmp	r0, #0
 800defa:	d1f1      	bne.n	800dee0 <__sfp+0x20>
 800defc:	230c      	movs	r3, #12
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	4604      	mov	r4, r0
 800df02:	4620      	mov	r0, r4
 800df04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df06:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <__sfp+0x74>)
 800df08:	6665      	str	r5, [r4, #100]	; 0x64
 800df0a:	e9c4 5500 	strd	r5, r5, [r4]
 800df0e:	60a5      	str	r5, [r4, #8]
 800df10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800df14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800df18:	2208      	movs	r2, #8
 800df1a:	4629      	mov	r1, r5
 800df1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df20:	f7ff fd70 	bl	800da04 <memset>
 800df24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df2c:	e7e9      	b.n	800df02 <__sfp+0x42>
 800df2e:	bf00      	nop
 800df30:	0801278c 	.word	0x0801278c
 800df34:	ffff0001 	.word	0xffff0001

0800df38 <_fwalk_reent>:
 800df38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df3c:	4680      	mov	r8, r0
 800df3e:	4689      	mov	r9, r1
 800df40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df44:	2600      	movs	r6, #0
 800df46:	b914      	cbnz	r4, 800df4e <_fwalk_reent+0x16>
 800df48:	4630      	mov	r0, r6
 800df4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800df52:	3f01      	subs	r7, #1
 800df54:	d501      	bpl.n	800df5a <_fwalk_reent+0x22>
 800df56:	6824      	ldr	r4, [r4, #0]
 800df58:	e7f5      	b.n	800df46 <_fwalk_reent+0xe>
 800df5a:	89ab      	ldrh	r3, [r5, #12]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d907      	bls.n	800df70 <_fwalk_reent+0x38>
 800df60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df64:	3301      	adds	r3, #1
 800df66:	d003      	beq.n	800df70 <_fwalk_reent+0x38>
 800df68:	4629      	mov	r1, r5
 800df6a:	4640      	mov	r0, r8
 800df6c:	47c8      	blx	r9
 800df6e:	4306      	orrs	r6, r0
 800df70:	3568      	adds	r5, #104	; 0x68
 800df72:	e7ee      	b.n	800df52 <_fwalk_reent+0x1a>

0800df74 <__locale_ctype_ptr_l>:
 800df74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800df78:	4770      	bx	lr

0800df7a <__ascii_mbtowc>:
 800df7a:	b082      	sub	sp, #8
 800df7c:	b901      	cbnz	r1, 800df80 <__ascii_mbtowc+0x6>
 800df7e:	a901      	add	r1, sp, #4
 800df80:	b142      	cbz	r2, 800df94 <__ascii_mbtowc+0x1a>
 800df82:	b14b      	cbz	r3, 800df98 <__ascii_mbtowc+0x1e>
 800df84:	7813      	ldrb	r3, [r2, #0]
 800df86:	600b      	str	r3, [r1, #0]
 800df88:	7812      	ldrb	r2, [r2, #0]
 800df8a:	1c10      	adds	r0, r2, #0
 800df8c:	bf18      	it	ne
 800df8e:	2001      	movne	r0, #1
 800df90:	b002      	add	sp, #8
 800df92:	4770      	bx	lr
 800df94:	4610      	mov	r0, r2
 800df96:	e7fb      	b.n	800df90 <__ascii_mbtowc+0x16>
 800df98:	f06f 0001 	mvn.w	r0, #1
 800df9c:	e7f8      	b.n	800df90 <__ascii_mbtowc+0x16>

0800df9e <__malloc_lock>:
 800df9e:	4770      	bx	lr

0800dfa0 <__malloc_unlock>:
 800dfa0:	4770      	bx	lr

0800dfa2 <__ssputs_r>:
 800dfa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa6:	688e      	ldr	r6, [r1, #8]
 800dfa8:	429e      	cmp	r6, r3
 800dfaa:	4682      	mov	sl, r0
 800dfac:	460c      	mov	r4, r1
 800dfae:	4690      	mov	r8, r2
 800dfb0:	4699      	mov	r9, r3
 800dfb2:	d837      	bhi.n	800e024 <__ssputs_r+0x82>
 800dfb4:	898a      	ldrh	r2, [r1, #12]
 800dfb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfba:	d031      	beq.n	800e020 <__ssputs_r+0x7e>
 800dfbc:	6825      	ldr	r5, [r4, #0]
 800dfbe:	6909      	ldr	r1, [r1, #16]
 800dfc0:	1a6f      	subs	r7, r5, r1
 800dfc2:	6965      	ldr	r5, [r4, #20]
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfca:	fb95 f5f3 	sdiv	r5, r5, r3
 800dfce:	f109 0301 	add.w	r3, r9, #1
 800dfd2:	443b      	add	r3, r7
 800dfd4:	429d      	cmp	r5, r3
 800dfd6:	bf38      	it	cc
 800dfd8:	461d      	movcc	r5, r3
 800dfda:	0553      	lsls	r3, r2, #21
 800dfdc:	d530      	bpl.n	800e040 <__ssputs_r+0x9e>
 800dfde:	4629      	mov	r1, r5
 800dfe0:	f7ff fd66 	bl	800dab0 <_malloc_r>
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	b950      	cbnz	r0, 800dffe <__ssputs_r+0x5c>
 800dfe8:	230c      	movs	r3, #12
 800dfea:	f8ca 3000 	str.w	r3, [sl]
 800dfee:	89a3      	ldrh	r3, [r4, #12]
 800dff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dff4:	81a3      	strh	r3, [r4, #12]
 800dff6:	f04f 30ff 	mov.w	r0, #4294967295
 800dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffe:	463a      	mov	r2, r7
 800e000:	6921      	ldr	r1, [r4, #16]
 800e002:	f7ff fcf4 	bl	800d9ee <memcpy>
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	6126      	str	r6, [r4, #16]
 800e014:	6165      	str	r5, [r4, #20]
 800e016:	443e      	add	r6, r7
 800e018:	1bed      	subs	r5, r5, r7
 800e01a:	6026      	str	r6, [r4, #0]
 800e01c:	60a5      	str	r5, [r4, #8]
 800e01e:	464e      	mov	r6, r9
 800e020:	454e      	cmp	r6, r9
 800e022:	d900      	bls.n	800e026 <__ssputs_r+0x84>
 800e024:	464e      	mov	r6, r9
 800e026:	4632      	mov	r2, r6
 800e028:	4641      	mov	r1, r8
 800e02a:	6820      	ldr	r0, [r4, #0]
 800e02c:	f000 fe2e 	bl	800ec8c <memmove>
 800e030:	68a3      	ldr	r3, [r4, #8]
 800e032:	1b9b      	subs	r3, r3, r6
 800e034:	60a3      	str	r3, [r4, #8]
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	441e      	add	r6, r3
 800e03a:	6026      	str	r6, [r4, #0]
 800e03c:	2000      	movs	r0, #0
 800e03e:	e7dc      	b.n	800dffa <__ssputs_r+0x58>
 800e040:	462a      	mov	r2, r5
 800e042:	f000 fe3c 	bl	800ecbe <_realloc_r>
 800e046:	4606      	mov	r6, r0
 800e048:	2800      	cmp	r0, #0
 800e04a:	d1e2      	bne.n	800e012 <__ssputs_r+0x70>
 800e04c:	6921      	ldr	r1, [r4, #16]
 800e04e:	4650      	mov	r0, sl
 800e050:	f7ff fce0 	bl	800da14 <_free_r>
 800e054:	e7c8      	b.n	800dfe8 <__ssputs_r+0x46>
	...

0800e058 <_svfiprintf_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	461d      	mov	r5, r3
 800e05e:	898b      	ldrh	r3, [r1, #12]
 800e060:	061f      	lsls	r7, r3, #24
 800e062:	b09d      	sub	sp, #116	; 0x74
 800e064:	4680      	mov	r8, r0
 800e066:	460c      	mov	r4, r1
 800e068:	4616      	mov	r6, r2
 800e06a:	d50f      	bpl.n	800e08c <_svfiprintf_r+0x34>
 800e06c:	690b      	ldr	r3, [r1, #16]
 800e06e:	b96b      	cbnz	r3, 800e08c <_svfiprintf_r+0x34>
 800e070:	2140      	movs	r1, #64	; 0x40
 800e072:	f7ff fd1d 	bl	800dab0 <_malloc_r>
 800e076:	6020      	str	r0, [r4, #0]
 800e078:	6120      	str	r0, [r4, #16]
 800e07a:	b928      	cbnz	r0, 800e088 <_svfiprintf_r+0x30>
 800e07c:	230c      	movs	r3, #12
 800e07e:	f8c8 3000 	str.w	r3, [r8]
 800e082:	f04f 30ff 	mov.w	r0, #4294967295
 800e086:	e0c8      	b.n	800e21a <_svfiprintf_r+0x1c2>
 800e088:	2340      	movs	r3, #64	; 0x40
 800e08a:	6163      	str	r3, [r4, #20]
 800e08c:	2300      	movs	r3, #0
 800e08e:	9309      	str	r3, [sp, #36]	; 0x24
 800e090:	2320      	movs	r3, #32
 800e092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e096:	2330      	movs	r3, #48	; 0x30
 800e098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e09c:	9503      	str	r5, [sp, #12]
 800e09e:	f04f 0b01 	mov.w	fp, #1
 800e0a2:	4637      	mov	r7, r6
 800e0a4:	463d      	mov	r5, r7
 800e0a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e0aa:	b10b      	cbz	r3, 800e0b0 <_svfiprintf_r+0x58>
 800e0ac:	2b25      	cmp	r3, #37	; 0x25
 800e0ae:	d13e      	bne.n	800e12e <_svfiprintf_r+0xd6>
 800e0b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e0b4:	d00b      	beq.n	800e0ce <_svfiprintf_r+0x76>
 800e0b6:	4653      	mov	r3, sl
 800e0b8:	4632      	mov	r2, r6
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4640      	mov	r0, r8
 800e0be:	f7ff ff70 	bl	800dfa2 <__ssputs_r>
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f000 80a4 	beq.w	800e210 <_svfiprintf_r+0x1b8>
 800e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ca:	4453      	add	r3, sl
 800e0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ce:	783b      	ldrb	r3, [r7, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f000 809d 	beq.w	800e210 <_svfiprintf_r+0x1b8>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	9307      	str	r3, [sp, #28]
 800e0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0e8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0ea:	462f      	mov	r7, r5
 800e0ec:	2205      	movs	r2, #5
 800e0ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e0f2:	4850      	ldr	r0, [pc, #320]	; (800e234 <_svfiprintf_r+0x1dc>)
 800e0f4:	f7f2 f884 	bl	8000200 <memchr>
 800e0f8:	9b04      	ldr	r3, [sp, #16]
 800e0fa:	b9d0      	cbnz	r0, 800e132 <_svfiprintf_r+0xda>
 800e0fc:	06d9      	lsls	r1, r3, #27
 800e0fe:	bf44      	itt	mi
 800e100:	2220      	movmi	r2, #32
 800e102:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e106:	071a      	lsls	r2, r3, #28
 800e108:	bf44      	itt	mi
 800e10a:	222b      	movmi	r2, #43	; 0x2b
 800e10c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e110:	782a      	ldrb	r2, [r5, #0]
 800e112:	2a2a      	cmp	r2, #42	; 0x2a
 800e114:	d015      	beq.n	800e142 <_svfiprintf_r+0xea>
 800e116:	9a07      	ldr	r2, [sp, #28]
 800e118:	462f      	mov	r7, r5
 800e11a:	2000      	movs	r0, #0
 800e11c:	250a      	movs	r5, #10
 800e11e:	4639      	mov	r1, r7
 800e120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e124:	3b30      	subs	r3, #48	; 0x30
 800e126:	2b09      	cmp	r3, #9
 800e128:	d94d      	bls.n	800e1c6 <_svfiprintf_r+0x16e>
 800e12a:	b1b8      	cbz	r0, 800e15c <_svfiprintf_r+0x104>
 800e12c:	e00f      	b.n	800e14e <_svfiprintf_r+0xf6>
 800e12e:	462f      	mov	r7, r5
 800e130:	e7b8      	b.n	800e0a4 <_svfiprintf_r+0x4c>
 800e132:	4a40      	ldr	r2, [pc, #256]	; (800e234 <_svfiprintf_r+0x1dc>)
 800e134:	1a80      	subs	r0, r0, r2
 800e136:	fa0b f000 	lsl.w	r0, fp, r0
 800e13a:	4318      	orrs	r0, r3
 800e13c:	9004      	str	r0, [sp, #16]
 800e13e:	463d      	mov	r5, r7
 800e140:	e7d3      	b.n	800e0ea <_svfiprintf_r+0x92>
 800e142:	9a03      	ldr	r2, [sp, #12]
 800e144:	1d11      	adds	r1, r2, #4
 800e146:	6812      	ldr	r2, [r2, #0]
 800e148:	9103      	str	r1, [sp, #12]
 800e14a:	2a00      	cmp	r2, #0
 800e14c:	db01      	blt.n	800e152 <_svfiprintf_r+0xfa>
 800e14e:	9207      	str	r2, [sp, #28]
 800e150:	e004      	b.n	800e15c <_svfiprintf_r+0x104>
 800e152:	4252      	negs	r2, r2
 800e154:	f043 0302 	orr.w	r3, r3, #2
 800e158:	9207      	str	r2, [sp, #28]
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	783b      	ldrb	r3, [r7, #0]
 800e15e:	2b2e      	cmp	r3, #46	; 0x2e
 800e160:	d10c      	bne.n	800e17c <_svfiprintf_r+0x124>
 800e162:	787b      	ldrb	r3, [r7, #1]
 800e164:	2b2a      	cmp	r3, #42	; 0x2a
 800e166:	d133      	bne.n	800e1d0 <_svfiprintf_r+0x178>
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	1d1a      	adds	r2, r3, #4
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	9203      	str	r2, [sp, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	bfb8      	it	lt
 800e174:	f04f 33ff 	movlt.w	r3, #4294967295
 800e178:	3702      	adds	r7, #2
 800e17a:	9305      	str	r3, [sp, #20]
 800e17c:	4d2e      	ldr	r5, [pc, #184]	; (800e238 <_svfiprintf_r+0x1e0>)
 800e17e:	7839      	ldrb	r1, [r7, #0]
 800e180:	2203      	movs	r2, #3
 800e182:	4628      	mov	r0, r5
 800e184:	f7f2 f83c 	bl	8000200 <memchr>
 800e188:	b138      	cbz	r0, 800e19a <_svfiprintf_r+0x142>
 800e18a:	2340      	movs	r3, #64	; 0x40
 800e18c:	1b40      	subs	r0, r0, r5
 800e18e:	fa03 f000 	lsl.w	r0, r3, r0
 800e192:	9b04      	ldr	r3, [sp, #16]
 800e194:	4303      	orrs	r3, r0
 800e196:	3701      	adds	r7, #1
 800e198:	9304      	str	r3, [sp, #16]
 800e19a:	7839      	ldrb	r1, [r7, #0]
 800e19c:	4827      	ldr	r0, [pc, #156]	; (800e23c <_svfiprintf_r+0x1e4>)
 800e19e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1a2:	2206      	movs	r2, #6
 800e1a4:	1c7e      	adds	r6, r7, #1
 800e1a6:	f7f2 f82b 	bl	8000200 <memchr>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d038      	beq.n	800e220 <_svfiprintf_r+0x1c8>
 800e1ae:	4b24      	ldr	r3, [pc, #144]	; (800e240 <_svfiprintf_r+0x1e8>)
 800e1b0:	bb13      	cbnz	r3, 800e1f8 <_svfiprintf_r+0x1a0>
 800e1b2:	9b03      	ldr	r3, [sp, #12]
 800e1b4:	3307      	adds	r3, #7
 800e1b6:	f023 0307 	bic.w	r3, r3, #7
 800e1ba:	3308      	adds	r3, #8
 800e1bc:	9303      	str	r3, [sp, #12]
 800e1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c0:	444b      	add	r3, r9
 800e1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1c4:	e76d      	b.n	800e0a2 <_svfiprintf_r+0x4a>
 800e1c6:	fb05 3202 	mla	r2, r5, r2, r3
 800e1ca:	2001      	movs	r0, #1
 800e1cc:	460f      	mov	r7, r1
 800e1ce:	e7a6      	b.n	800e11e <_svfiprintf_r+0xc6>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	3701      	adds	r7, #1
 800e1d4:	9305      	str	r3, [sp, #20]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	250a      	movs	r5, #10
 800e1da:	4638      	mov	r0, r7
 800e1dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1e0:	3a30      	subs	r2, #48	; 0x30
 800e1e2:	2a09      	cmp	r2, #9
 800e1e4:	d903      	bls.n	800e1ee <_svfiprintf_r+0x196>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0c8      	beq.n	800e17c <_svfiprintf_r+0x124>
 800e1ea:	9105      	str	r1, [sp, #20]
 800e1ec:	e7c6      	b.n	800e17c <_svfiprintf_r+0x124>
 800e1ee:	fb05 2101 	mla	r1, r5, r1, r2
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	4607      	mov	r7, r0
 800e1f6:	e7f0      	b.n	800e1da <_svfiprintf_r+0x182>
 800e1f8:	ab03      	add	r3, sp, #12
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4b11      	ldr	r3, [pc, #68]	; (800e244 <_svfiprintf_r+0x1ec>)
 800e200:	a904      	add	r1, sp, #16
 800e202:	4640      	mov	r0, r8
 800e204:	f3af 8000 	nop.w
 800e208:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e20c:	4681      	mov	r9, r0
 800e20e:	d1d6      	bne.n	800e1be <_svfiprintf_r+0x166>
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	065b      	lsls	r3, r3, #25
 800e214:	f53f af35 	bmi.w	800e082 <_svfiprintf_r+0x2a>
 800e218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e21a:	b01d      	add	sp, #116	; 0x74
 800e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e220:	ab03      	add	r3, sp, #12
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	4622      	mov	r2, r4
 800e226:	4b07      	ldr	r3, [pc, #28]	; (800e244 <_svfiprintf_r+0x1ec>)
 800e228:	a904      	add	r1, sp, #16
 800e22a:	4640      	mov	r0, r8
 800e22c:	f000 f9c2 	bl	800e5b4 <_printf_i>
 800e230:	e7ea      	b.n	800e208 <_svfiprintf_r+0x1b0>
 800e232:	bf00      	nop
 800e234:	080127f6 	.word	0x080127f6
 800e238:	080127fc 	.word	0x080127fc
 800e23c:	08012800 	.word	0x08012800
 800e240:	00000000 	.word	0x00000000
 800e244:	0800dfa3 	.word	0x0800dfa3

0800e248 <__sfputc_r>:
 800e248:	6893      	ldr	r3, [r2, #8]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	b410      	push	{r4}
 800e250:	6093      	str	r3, [r2, #8]
 800e252:	da08      	bge.n	800e266 <__sfputc_r+0x1e>
 800e254:	6994      	ldr	r4, [r2, #24]
 800e256:	42a3      	cmp	r3, r4
 800e258:	db01      	blt.n	800e25e <__sfputc_r+0x16>
 800e25a:	290a      	cmp	r1, #10
 800e25c:	d103      	bne.n	800e266 <__sfputc_r+0x1e>
 800e25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e262:	f000 bafd 	b.w	800e860 <__swbuf_r>
 800e266:	6813      	ldr	r3, [r2, #0]
 800e268:	1c58      	adds	r0, r3, #1
 800e26a:	6010      	str	r0, [r2, #0]
 800e26c:	7019      	strb	r1, [r3, #0]
 800e26e:	4608      	mov	r0, r1
 800e270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <__sfputs_r>:
 800e276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	4614      	mov	r4, r2
 800e27e:	18d5      	adds	r5, r2, r3
 800e280:	42ac      	cmp	r4, r5
 800e282:	d101      	bne.n	800e288 <__sfputs_r+0x12>
 800e284:	2000      	movs	r0, #0
 800e286:	e007      	b.n	800e298 <__sfputs_r+0x22>
 800e288:	463a      	mov	r2, r7
 800e28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28e:	4630      	mov	r0, r6
 800e290:	f7ff ffda 	bl	800e248 <__sfputc_r>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d1f3      	bne.n	800e280 <__sfputs_r+0xa>
 800e298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e29c <_vfiprintf_r>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	460c      	mov	r4, r1
 800e2a2:	b09d      	sub	sp, #116	; 0x74
 800e2a4:	4617      	mov	r7, r2
 800e2a6:	461d      	mov	r5, r3
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b118      	cbz	r0, 800e2b4 <_vfiprintf_r+0x18>
 800e2ac:	6983      	ldr	r3, [r0, #24]
 800e2ae:	b90b      	cbnz	r3, 800e2b4 <_vfiprintf_r+0x18>
 800e2b0:	f7ff fdd6 	bl	800de60 <__sinit>
 800e2b4:	4b7c      	ldr	r3, [pc, #496]	; (800e4a8 <_vfiprintf_r+0x20c>)
 800e2b6:	429c      	cmp	r4, r3
 800e2b8:	d158      	bne.n	800e36c <_vfiprintf_r+0xd0>
 800e2ba:	6874      	ldr	r4, [r6, #4]
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	0718      	lsls	r0, r3, #28
 800e2c0:	d55e      	bpl.n	800e380 <_vfiprintf_r+0xe4>
 800e2c2:	6923      	ldr	r3, [r4, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d05b      	beq.n	800e380 <_vfiprintf_r+0xe4>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e2cc:	2320      	movs	r3, #32
 800e2ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2d2:	2330      	movs	r3, #48	; 0x30
 800e2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d8:	9503      	str	r5, [sp, #12]
 800e2da:	f04f 0b01 	mov.w	fp, #1
 800e2de:	46b8      	mov	r8, r7
 800e2e0:	4645      	mov	r5, r8
 800e2e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2e6:	b10b      	cbz	r3, 800e2ec <_vfiprintf_r+0x50>
 800e2e8:	2b25      	cmp	r3, #37	; 0x25
 800e2ea:	d154      	bne.n	800e396 <_vfiprintf_r+0xfa>
 800e2ec:	ebb8 0a07 	subs.w	sl, r8, r7
 800e2f0:	d00b      	beq.n	800e30a <_vfiprintf_r+0x6e>
 800e2f2:	4653      	mov	r3, sl
 800e2f4:	463a      	mov	r2, r7
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7ff ffbc 	bl	800e276 <__sfputs_r>
 800e2fe:	3001      	adds	r0, #1
 800e300:	f000 80c2 	beq.w	800e488 <_vfiprintf_r+0x1ec>
 800e304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e306:	4453      	add	r3, sl
 800e308:	9309      	str	r3, [sp, #36]	; 0x24
 800e30a:	f898 3000 	ldrb.w	r3, [r8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f000 80ba 	beq.w	800e488 <_vfiprintf_r+0x1ec>
 800e314:	2300      	movs	r3, #0
 800e316:	f04f 32ff 	mov.w	r2, #4294967295
 800e31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e31e:	9304      	str	r3, [sp, #16]
 800e320:	9307      	str	r3, [sp, #28]
 800e322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e326:	931a      	str	r3, [sp, #104]	; 0x68
 800e328:	46a8      	mov	r8, r5
 800e32a:	2205      	movs	r2, #5
 800e32c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e330:	485e      	ldr	r0, [pc, #376]	; (800e4ac <_vfiprintf_r+0x210>)
 800e332:	f7f1 ff65 	bl	8000200 <memchr>
 800e336:	9b04      	ldr	r3, [sp, #16]
 800e338:	bb78      	cbnz	r0, 800e39a <_vfiprintf_r+0xfe>
 800e33a:	06d9      	lsls	r1, r3, #27
 800e33c:	bf44      	itt	mi
 800e33e:	2220      	movmi	r2, #32
 800e340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e344:	071a      	lsls	r2, r3, #28
 800e346:	bf44      	itt	mi
 800e348:	222b      	movmi	r2, #43	; 0x2b
 800e34a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e34e:	782a      	ldrb	r2, [r5, #0]
 800e350:	2a2a      	cmp	r2, #42	; 0x2a
 800e352:	d02a      	beq.n	800e3aa <_vfiprintf_r+0x10e>
 800e354:	9a07      	ldr	r2, [sp, #28]
 800e356:	46a8      	mov	r8, r5
 800e358:	2000      	movs	r0, #0
 800e35a:	250a      	movs	r5, #10
 800e35c:	4641      	mov	r1, r8
 800e35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e362:	3b30      	subs	r3, #48	; 0x30
 800e364:	2b09      	cmp	r3, #9
 800e366:	d969      	bls.n	800e43c <_vfiprintf_r+0x1a0>
 800e368:	b360      	cbz	r0, 800e3c4 <_vfiprintf_r+0x128>
 800e36a:	e024      	b.n	800e3b6 <_vfiprintf_r+0x11a>
 800e36c:	4b50      	ldr	r3, [pc, #320]	; (800e4b0 <_vfiprintf_r+0x214>)
 800e36e:	429c      	cmp	r4, r3
 800e370:	d101      	bne.n	800e376 <_vfiprintf_r+0xda>
 800e372:	68b4      	ldr	r4, [r6, #8]
 800e374:	e7a2      	b.n	800e2bc <_vfiprintf_r+0x20>
 800e376:	4b4f      	ldr	r3, [pc, #316]	; (800e4b4 <_vfiprintf_r+0x218>)
 800e378:	429c      	cmp	r4, r3
 800e37a:	bf08      	it	eq
 800e37c:	68f4      	ldreq	r4, [r6, #12]
 800e37e:	e79d      	b.n	800e2bc <_vfiprintf_r+0x20>
 800e380:	4621      	mov	r1, r4
 800e382:	4630      	mov	r0, r6
 800e384:	f000 fade 	bl	800e944 <__swsetup_r>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d09d      	beq.n	800e2c8 <_vfiprintf_r+0x2c>
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	b01d      	add	sp, #116	; 0x74
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	46a8      	mov	r8, r5
 800e398:	e7a2      	b.n	800e2e0 <_vfiprintf_r+0x44>
 800e39a:	4a44      	ldr	r2, [pc, #272]	; (800e4ac <_vfiprintf_r+0x210>)
 800e39c:	1a80      	subs	r0, r0, r2
 800e39e:	fa0b f000 	lsl.w	r0, fp, r0
 800e3a2:	4318      	orrs	r0, r3
 800e3a4:	9004      	str	r0, [sp, #16]
 800e3a6:	4645      	mov	r5, r8
 800e3a8:	e7be      	b.n	800e328 <_vfiprintf_r+0x8c>
 800e3aa:	9a03      	ldr	r2, [sp, #12]
 800e3ac:	1d11      	adds	r1, r2, #4
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	9103      	str	r1, [sp, #12]
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	db01      	blt.n	800e3ba <_vfiprintf_r+0x11e>
 800e3b6:	9207      	str	r2, [sp, #28]
 800e3b8:	e004      	b.n	800e3c4 <_vfiprintf_r+0x128>
 800e3ba:	4252      	negs	r2, r2
 800e3bc:	f043 0302 	orr.w	r3, r3, #2
 800e3c0:	9207      	str	r2, [sp, #28]
 800e3c2:	9304      	str	r3, [sp, #16]
 800e3c4:	f898 3000 	ldrb.w	r3, [r8]
 800e3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ca:	d10e      	bne.n	800e3ea <_vfiprintf_r+0x14e>
 800e3cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d2:	d138      	bne.n	800e446 <_vfiprintf_r+0x1aa>
 800e3d4:	9b03      	ldr	r3, [sp, #12]
 800e3d6:	1d1a      	adds	r2, r3, #4
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	9203      	str	r2, [sp, #12]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	bfb8      	it	lt
 800e3e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3e4:	f108 0802 	add.w	r8, r8, #2
 800e3e8:	9305      	str	r3, [sp, #20]
 800e3ea:	4d33      	ldr	r5, [pc, #204]	; (800e4b8 <_vfiprintf_r+0x21c>)
 800e3ec:	f898 1000 	ldrb.w	r1, [r8]
 800e3f0:	2203      	movs	r2, #3
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f7f1 ff04 	bl	8000200 <memchr>
 800e3f8:	b140      	cbz	r0, 800e40c <_vfiprintf_r+0x170>
 800e3fa:	2340      	movs	r3, #64	; 0x40
 800e3fc:	1b40      	subs	r0, r0, r5
 800e3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e402:	9b04      	ldr	r3, [sp, #16]
 800e404:	4303      	orrs	r3, r0
 800e406:	f108 0801 	add.w	r8, r8, #1
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	f898 1000 	ldrb.w	r1, [r8]
 800e410:	482a      	ldr	r0, [pc, #168]	; (800e4bc <_vfiprintf_r+0x220>)
 800e412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e416:	2206      	movs	r2, #6
 800e418:	f108 0701 	add.w	r7, r8, #1
 800e41c:	f7f1 fef0 	bl	8000200 <memchr>
 800e420:	2800      	cmp	r0, #0
 800e422:	d037      	beq.n	800e494 <_vfiprintf_r+0x1f8>
 800e424:	4b26      	ldr	r3, [pc, #152]	; (800e4c0 <_vfiprintf_r+0x224>)
 800e426:	bb1b      	cbnz	r3, 800e470 <_vfiprintf_r+0x1d4>
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	3307      	adds	r3, #7
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	3308      	adds	r3, #8
 800e432:	9303      	str	r3, [sp, #12]
 800e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e436:	444b      	add	r3, r9
 800e438:	9309      	str	r3, [sp, #36]	; 0x24
 800e43a:	e750      	b.n	800e2de <_vfiprintf_r+0x42>
 800e43c:	fb05 3202 	mla	r2, r5, r2, r3
 800e440:	2001      	movs	r0, #1
 800e442:	4688      	mov	r8, r1
 800e444:	e78a      	b.n	800e35c <_vfiprintf_r+0xc0>
 800e446:	2300      	movs	r3, #0
 800e448:	f108 0801 	add.w	r8, r8, #1
 800e44c:	9305      	str	r3, [sp, #20]
 800e44e:	4619      	mov	r1, r3
 800e450:	250a      	movs	r5, #10
 800e452:	4640      	mov	r0, r8
 800e454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e458:	3a30      	subs	r2, #48	; 0x30
 800e45a:	2a09      	cmp	r2, #9
 800e45c:	d903      	bls.n	800e466 <_vfiprintf_r+0x1ca>
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0c3      	beq.n	800e3ea <_vfiprintf_r+0x14e>
 800e462:	9105      	str	r1, [sp, #20]
 800e464:	e7c1      	b.n	800e3ea <_vfiprintf_r+0x14e>
 800e466:	fb05 2101 	mla	r1, r5, r1, r2
 800e46a:	2301      	movs	r3, #1
 800e46c:	4680      	mov	r8, r0
 800e46e:	e7f0      	b.n	800e452 <_vfiprintf_r+0x1b6>
 800e470:	ab03      	add	r3, sp, #12
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	4622      	mov	r2, r4
 800e476:	4b13      	ldr	r3, [pc, #76]	; (800e4c4 <_vfiprintf_r+0x228>)
 800e478:	a904      	add	r1, sp, #16
 800e47a:	4630      	mov	r0, r6
 800e47c:	f3af 8000 	nop.w
 800e480:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e484:	4681      	mov	r9, r0
 800e486:	d1d5      	bne.n	800e434 <_vfiprintf_r+0x198>
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	065b      	lsls	r3, r3, #25
 800e48c:	f53f af7e 	bmi.w	800e38c <_vfiprintf_r+0xf0>
 800e490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e492:	e77d      	b.n	800e390 <_vfiprintf_r+0xf4>
 800e494:	ab03      	add	r3, sp, #12
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	4622      	mov	r2, r4
 800e49a:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <_vfiprintf_r+0x228>)
 800e49c:	a904      	add	r1, sp, #16
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f000 f888 	bl	800e5b4 <_printf_i>
 800e4a4:	e7ec      	b.n	800e480 <_vfiprintf_r+0x1e4>
 800e4a6:	bf00      	nop
 800e4a8:	080127b0 	.word	0x080127b0
 800e4ac:	080127f6 	.word	0x080127f6
 800e4b0:	080127d0 	.word	0x080127d0
 800e4b4:	08012790 	.word	0x08012790
 800e4b8:	080127fc 	.word	0x080127fc
 800e4bc:	08012800 	.word	0x08012800
 800e4c0:	00000000 	.word	0x00000000
 800e4c4:	0800e277 	.word	0x0800e277

0800e4c8 <_printf_common>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	4691      	mov	r9, r2
 800e4ce:	461f      	mov	r7, r3
 800e4d0:	688a      	ldr	r2, [r1, #8]
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfb8      	it	lt
 800e4dc:	4613      	movlt	r3, r2
 800e4de:	f8c9 3000 	str.w	r3, [r9]
 800e4e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	b112      	cbz	r2, 800e4f2 <_printf_common+0x2a>
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	f8c9 3000 	str.w	r3, [r9]
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	0699      	lsls	r1, r3, #26
 800e4f6:	bf42      	ittt	mi
 800e4f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e4fc:	3302      	addmi	r3, #2
 800e4fe:	f8c9 3000 	strmi.w	r3, [r9]
 800e502:	6825      	ldr	r5, [r4, #0]
 800e504:	f015 0506 	ands.w	r5, r5, #6
 800e508:	d107      	bne.n	800e51a <_printf_common+0x52>
 800e50a:	f104 0a19 	add.w	sl, r4, #25
 800e50e:	68e3      	ldr	r3, [r4, #12]
 800e510:	f8d9 2000 	ldr.w	r2, [r9]
 800e514:	1a9b      	subs	r3, r3, r2
 800e516:	42ab      	cmp	r3, r5
 800e518:	dc28      	bgt.n	800e56c <_printf_common+0xa4>
 800e51a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e51e:	6822      	ldr	r2, [r4, #0]
 800e520:	3300      	adds	r3, #0
 800e522:	bf18      	it	ne
 800e524:	2301      	movne	r3, #1
 800e526:	0692      	lsls	r2, r2, #26
 800e528:	d42d      	bmi.n	800e586 <_printf_common+0xbe>
 800e52a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e52e:	4639      	mov	r1, r7
 800e530:	4630      	mov	r0, r6
 800e532:	47c0      	blx	r8
 800e534:	3001      	adds	r0, #1
 800e536:	d020      	beq.n	800e57a <_printf_common+0xb2>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	68e5      	ldr	r5, [r4, #12]
 800e53c:	f8d9 2000 	ldr.w	r2, [r9]
 800e540:	f003 0306 	and.w	r3, r3, #6
 800e544:	2b04      	cmp	r3, #4
 800e546:	bf08      	it	eq
 800e548:	1aad      	subeq	r5, r5, r2
 800e54a:	68a3      	ldr	r3, [r4, #8]
 800e54c:	6922      	ldr	r2, [r4, #16]
 800e54e:	bf0c      	ite	eq
 800e550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e554:	2500      	movne	r5, #0
 800e556:	4293      	cmp	r3, r2
 800e558:	bfc4      	itt	gt
 800e55a:	1a9b      	subgt	r3, r3, r2
 800e55c:	18ed      	addgt	r5, r5, r3
 800e55e:	f04f 0900 	mov.w	r9, #0
 800e562:	341a      	adds	r4, #26
 800e564:	454d      	cmp	r5, r9
 800e566:	d11a      	bne.n	800e59e <_printf_common+0xd6>
 800e568:	2000      	movs	r0, #0
 800e56a:	e008      	b.n	800e57e <_printf_common+0xb6>
 800e56c:	2301      	movs	r3, #1
 800e56e:	4652      	mov	r2, sl
 800e570:	4639      	mov	r1, r7
 800e572:	4630      	mov	r0, r6
 800e574:	47c0      	blx	r8
 800e576:	3001      	adds	r0, #1
 800e578:	d103      	bne.n	800e582 <_printf_common+0xba>
 800e57a:	f04f 30ff 	mov.w	r0, #4294967295
 800e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e582:	3501      	adds	r5, #1
 800e584:	e7c3      	b.n	800e50e <_printf_common+0x46>
 800e586:	18e1      	adds	r1, r4, r3
 800e588:	1c5a      	adds	r2, r3, #1
 800e58a:	2030      	movs	r0, #48	; 0x30
 800e58c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e590:	4422      	add	r2, r4
 800e592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e596:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e59a:	3302      	adds	r3, #2
 800e59c:	e7c5      	b.n	800e52a <_printf_common+0x62>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	4622      	mov	r2, r4
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	47c0      	blx	r8
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d0e6      	beq.n	800e57a <_printf_common+0xb2>
 800e5ac:	f109 0901 	add.w	r9, r9, #1
 800e5b0:	e7d8      	b.n	800e564 <_printf_common+0x9c>
	...

0800e5b4 <_printf_i>:
 800e5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e5bc:	460c      	mov	r4, r1
 800e5be:	7e09      	ldrb	r1, [r1, #24]
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	296e      	cmp	r1, #110	; 0x6e
 800e5c4:	4617      	mov	r7, r2
 800e5c6:	4606      	mov	r6, r0
 800e5c8:	4698      	mov	r8, r3
 800e5ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5cc:	f000 80b3 	beq.w	800e736 <_printf_i+0x182>
 800e5d0:	d822      	bhi.n	800e618 <_printf_i+0x64>
 800e5d2:	2963      	cmp	r1, #99	; 0x63
 800e5d4:	d036      	beq.n	800e644 <_printf_i+0x90>
 800e5d6:	d80a      	bhi.n	800e5ee <_printf_i+0x3a>
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	f000 80b9 	beq.w	800e750 <_printf_i+0x19c>
 800e5de:	2958      	cmp	r1, #88	; 0x58
 800e5e0:	f000 8083 	beq.w	800e6ea <_printf_i+0x136>
 800e5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e5ec:	e032      	b.n	800e654 <_printf_i+0xa0>
 800e5ee:	2964      	cmp	r1, #100	; 0x64
 800e5f0:	d001      	beq.n	800e5f6 <_printf_i+0x42>
 800e5f2:	2969      	cmp	r1, #105	; 0x69
 800e5f4:	d1f6      	bne.n	800e5e4 <_printf_i+0x30>
 800e5f6:	6820      	ldr	r0, [r4, #0]
 800e5f8:	6813      	ldr	r3, [r2, #0]
 800e5fa:	0605      	lsls	r5, r0, #24
 800e5fc:	f103 0104 	add.w	r1, r3, #4
 800e600:	d52a      	bpl.n	800e658 <_printf_i+0xa4>
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6011      	str	r1, [r2, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	da03      	bge.n	800e612 <_printf_i+0x5e>
 800e60a:	222d      	movs	r2, #45	; 0x2d
 800e60c:	425b      	negs	r3, r3
 800e60e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e612:	486f      	ldr	r0, [pc, #444]	; (800e7d0 <_printf_i+0x21c>)
 800e614:	220a      	movs	r2, #10
 800e616:	e039      	b.n	800e68c <_printf_i+0xd8>
 800e618:	2973      	cmp	r1, #115	; 0x73
 800e61a:	f000 809d 	beq.w	800e758 <_printf_i+0x1a4>
 800e61e:	d808      	bhi.n	800e632 <_printf_i+0x7e>
 800e620:	296f      	cmp	r1, #111	; 0x6f
 800e622:	d020      	beq.n	800e666 <_printf_i+0xb2>
 800e624:	2970      	cmp	r1, #112	; 0x70
 800e626:	d1dd      	bne.n	800e5e4 <_printf_i+0x30>
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	f043 0320 	orr.w	r3, r3, #32
 800e62e:	6023      	str	r3, [r4, #0]
 800e630:	e003      	b.n	800e63a <_printf_i+0x86>
 800e632:	2975      	cmp	r1, #117	; 0x75
 800e634:	d017      	beq.n	800e666 <_printf_i+0xb2>
 800e636:	2978      	cmp	r1, #120	; 0x78
 800e638:	d1d4      	bne.n	800e5e4 <_printf_i+0x30>
 800e63a:	2378      	movs	r3, #120	; 0x78
 800e63c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e640:	4864      	ldr	r0, [pc, #400]	; (800e7d4 <_printf_i+0x220>)
 800e642:	e055      	b.n	800e6f0 <_printf_i+0x13c>
 800e644:	6813      	ldr	r3, [r2, #0]
 800e646:	1d19      	adds	r1, r3, #4
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	6011      	str	r1, [r2, #0]
 800e64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e654:	2301      	movs	r3, #1
 800e656:	e08c      	b.n	800e772 <_printf_i+0x1be>
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	6011      	str	r1, [r2, #0]
 800e65c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e660:	bf18      	it	ne
 800e662:	b21b      	sxthne	r3, r3
 800e664:	e7cf      	b.n	800e606 <_printf_i+0x52>
 800e666:	6813      	ldr	r3, [r2, #0]
 800e668:	6825      	ldr	r5, [r4, #0]
 800e66a:	1d18      	adds	r0, r3, #4
 800e66c:	6010      	str	r0, [r2, #0]
 800e66e:	0628      	lsls	r0, r5, #24
 800e670:	d501      	bpl.n	800e676 <_printf_i+0xc2>
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	e002      	b.n	800e67c <_printf_i+0xc8>
 800e676:	0668      	lsls	r0, r5, #25
 800e678:	d5fb      	bpl.n	800e672 <_printf_i+0xbe>
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	4854      	ldr	r0, [pc, #336]	; (800e7d0 <_printf_i+0x21c>)
 800e67e:	296f      	cmp	r1, #111	; 0x6f
 800e680:	bf14      	ite	ne
 800e682:	220a      	movne	r2, #10
 800e684:	2208      	moveq	r2, #8
 800e686:	2100      	movs	r1, #0
 800e688:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e68c:	6865      	ldr	r5, [r4, #4]
 800e68e:	60a5      	str	r5, [r4, #8]
 800e690:	2d00      	cmp	r5, #0
 800e692:	f2c0 8095 	blt.w	800e7c0 <_printf_i+0x20c>
 800e696:	6821      	ldr	r1, [r4, #0]
 800e698:	f021 0104 	bic.w	r1, r1, #4
 800e69c:	6021      	str	r1, [r4, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d13d      	bne.n	800e71e <_printf_i+0x16a>
 800e6a2:	2d00      	cmp	r5, #0
 800e6a4:	f040 808e 	bne.w	800e7c4 <_printf_i+0x210>
 800e6a8:	4665      	mov	r5, ip
 800e6aa:	2a08      	cmp	r2, #8
 800e6ac:	d10b      	bne.n	800e6c6 <_printf_i+0x112>
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	07db      	lsls	r3, r3, #31
 800e6b2:	d508      	bpl.n	800e6c6 <_printf_i+0x112>
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	6862      	ldr	r2, [r4, #4]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	bfde      	ittt	le
 800e6bc:	2330      	movle	r3, #48	; 0x30
 800e6be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6c6:	ebac 0305 	sub.w	r3, ip, r5
 800e6ca:	6123      	str	r3, [r4, #16]
 800e6cc:	f8cd 8000 	str.w	r8, [sp]
 800e6d0:	463b      	mov	r3, r7
 800e6d2:	aa03      	add	r2, sp, #12
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f7ff fef6 	bl	800e4c8 <_printf_common>
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d14d      	bne.n	800e77c <_printf_i+0x1c8>
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	b005      	add	sp, #20
 800e6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ea:	4839      	ldr	r0, [pc, #228]	; (800e7d0 <_printf_i+0x21c>)
 800e6ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e6f0:	6813      	ldr	r3, [r2, #0]
 800e6f2:	6821      	ldr	r1, [r4, #0]
 800e6f4:	1d1d      	adds	r5, r3, #4
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6015      	str	r5, [r2, #0]
 800e6fa:	060a      	lsls	r2, r1, #24
 800e6fc:	d50b      	bpl.n	800e716 <_printf_i+0x162>
 800e6fe:	07ca      	lsls	r2, r1, #31
 800e700:	bf44      	itt	mi
 800e702:	f041 0120 	orrmi.w	r1, r1, #32
 800e706:	6021      	strmi	r1, [r4, #0]
 800e708:	b91b      	cbnz	r3, 800e712 <_printf_i+0x15e>
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	f022 0220 	bic.w	r2, r2, #32
 800e710:	6022      	str	r2, [r4, #0]
 800e712:	2210      	movs	r2, #16
 800e714:	e7b7      	b.n	800e686 <_printf_i+0xd2>
 800e716:	064d      	lsls	r5, r1, #25
 800e718:	bf48      	it	mi
 800e71a:	b29b      	uxthmi	r3, r3
 800e71c:	e7ef      	b.n	800e6fe <_printf_i+0x14a>
 800e71e:	4665      	mov	r5, ip
 800e720:	fbb3 f1f2 	udiv	r1, r3, r2
 800e724:	fb02 3311 	mls	r3, r2, r1, r3
 800e728:	5cc3      	ldrb	r3, [r0, r3]
 800e72a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e72e:	460b      	mov	r3, r1
 800e730:	2900      	cmp	r1, #0
 800e732:	d1f5      	bne.n	800e720 <_printf_i+0x16c>
 800e734:	e7b9      	b.n	800e6aa <_printf_i+0xf6>
 800e736:	6813      	ldr	r3, [r2, #0]
 800e738:	6825      	ldr	r5, [r4, #0]
 800e73a:	6961      	ldr	r1, [r4, #20]
 800e73c:	1d18      	adds	r0, r3, #4
 800e73e:	6010      	str	r0, [r2, #0]
 800e740:	0628      	lsls	r0, r5, #24
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	d501      	bpl.n	800e74a <_printf_i+0x196>
 800e746:	6019      	str	r1, [r3, #0]
 800e748:	e002      	b.n	800e750 <_printf_i+0x19c>
 800e74a:	066a      	lsls	r2, r5, #25
 800e74c:	d5fb      	bpl.n	800e746 <_printf_i+0x192>
 800e74e:	8019      	strh	r1, [r3, #0]
 800e750:	2300      	movs	r3, #0
 800e752:	6123      	str	r3, [r4, #16]
 800e754:	4665      	mov	r5, ip
 800e756:	e7b9      	b.n	800e6cc <_printf_i+0x118>
 800e758:	6813      	ldr	r3, [r2, #0]
 800e75a:	1d19      	adds	r1, r3, #4
 800e75c:	6011      	str	r1, [r2, #0]
 800e75e:	681d      	ldr	r5, [r3, #0]
 800e760:	6862      	ldr	r2, [r4, #4]
 800e762:	2100      	movs	r1, #0
 800e764:	4628      	mov	r0, r5
 800e766:	f7f1 fd4b 	bl	8000200 <memchr>
 800e76a:	b108      	cbz	r0, 800e770 <_printf_i+0x1bc>
 800e76c:	1b40      	subs	r0, r0, r5
 800e76e:	6060      	str	r0, [r4, #4]
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	6123      	str	r3, [r4, #16]
 800e774:	2300      	movs	r3, #0
 800e776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e77a:	e7a7      	b.n	800e6cc <_printf_i+0x118>
 800e77c:	6923      	ldr	r3, [r4, #16]
 800e77e:	462a      	mov	r2, r5
 800e780:	4639      	mov	r1, r7
 800e782:	4630      	mov	r0, r6
 800e784:	47c0      	blx	r8
 800e786:	3001      	adds	r0, #1
 800e788:	d0aa      	beq.n	800e6e0 <_printf_i+0x12c>
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	079b      	lsls	r3, r3, #30
 800e78e:	d413      	bmi.n	800e7b8 <_printf_i+0x204>
 800e790:	68e0      	ldr	r0, [r4, #12]
 800e792:	9b03      	ldr	r3, [sp, #12]
 800e794:	4298      	cmp	r0, r3
 800e796:	bfb8      	it	lt
 800e798:	4618      	movlt	r0, r3
 800e79a:	e7a3      	b.n	800e6e4 <_printf_i+0x130>
 800e79c:	2301      	movs	r3, #1
 800e79e:	464a      	mov	r2, r9
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	47c0      	blx	r8
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	d09a      	beq.n	800e6e0 <_printf_i+0x12c>
 800e7aa:	3501      	adds	r5, #1
 800e7ac:	68e3      	ldr	r3, [r4, #12]
 800e7ae:	9a03      	ldr	r2, [sp, #12]
 800e7b0:	1a9b      	subs	r3, r3, r2
 800e7b2:	42ab      	cmp	r3, r5
 800e7b4:	dcf2      	bgt.n	800e79c <_printf_i+0x1e8>
 800e7b6:	e7eb      	b.n	800e790 <_printf_i+0x1dc>
 800e7b8:	2500      	movs	r5, #0
 800e7ba:	f104 0919 	add.w	r9, r4, #25
 800e7be:	e7f5      	b.n	800e7ac <_printf_i+0x1f8>
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1ac      	bne.n	800e71e <_printf_i+0x16a>
 800e7c4:	7803      	ldrb	r3, [r0, #0]
 800e7c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7ce:	e76c      	b.n	800e6aa <_printf_i+0xf6>
 800e7d0:	08012807 	.word	0x08012807
 800e7d4:	08012818 	.word	0x08012818

0800e7d8 <__sread>:
 800e7d8:	b510      	push	{r4, lr}
 800e7da:	460c      	mov	r4, r1
 800e7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e0:	f000 fa94 	bl	800ed0c <_read_r>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	bfab      	itete	ge
 800e7e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7ea:	89a3      	ldrhlt	r3, [r4, #12]
 800e7ec:	181b      	addge	r3, r3, r0
 800e7ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7f2:	bfac      	ite	ge
 800e7f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7f6:	81a3      	strhlt	r3, [r4, #12]
 800e7f8:	bd10      	pop	{r4, pc}

0800e7fa <__swrite>:
 800e7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fe:	461f      	mov	r7, r3
 800e800:	898b      	ldrh	r3, [r1, #12]
 800e802:	05db      	lsls	r3, r3, #23
 800e804:	4605      	mov	r5, r0
 800e806:	460c      	mov	r4, r1
 800e808:	4616      	mov	r6, r2
 800e80a:	d505      	bpl.n	800e818 <__swrite+0x1e>
 800e80c:	2302      	movs	r3, #2
 800e80e:	2200      	movs	r2, #0
 800e810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e814:	f000 f9c4 	bl	800eba0 <_lseek_r>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e81e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	4632      	mov	r2, r6
 800e826:	463b      	mov	r3, r7
 800e828:	4628      	mov	r0, r5
 800e82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e82e:	f000 b877 	b.w	800e920 <_write_r>

0800e832 <__sseek>:
 800e832:	b510      	push	{r4, lr}
 800e834:	460c      	mov	r4, r1
 800e836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83a:	f000 f9b1 	bl	800eba0 <_lseek_r>
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	bf15      	itete	ne
 800e844:	6560      	strne	r0, [r4, #84]	; 0x54
 800e846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e84a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e84e:	81a3      	strheq	r3, [r4, #12]
 800e850:	bf18      	it	ne
 800e852:	81a3      	strhne	r3, [r4, #12]
 800e854:	bd10      	pop	{r4, pc}

0800e856 <__sclose>:
 800e856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85a:	f000 b8e1 	b.w	800ea20 <_close_r>
	...

0800e860 <__swbuf_r>:
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	460e      	mov	r6, r1
 800e864:	4614      	mov	r4, r2
 800e866:	4605      	mov	r5, r0
 800e868:	b118      	cbz	r0, 800e872 <__swbuf_r+0x12>
 800e86a:	6983      	ldr	r3, [r0, #24]
 800e86c:	b90b      	cbnz	r3, 800e872 <__swbuf_r+0x12>
 800e86e:	f7ff faf7 	bl	800de60 <__sinit>
 800e872:	4b21      	ldr	r3, [pc, #132]	; (800e8f8 <__swbuf_r+0x98>)
 800e874:	429c      	cmp	r4, r3
 800e876:	d12a      	bne.n	800e8ce <__swbuf_r+0x6e>
 800e878:	686c      	ldr	r4, [r5, #4]
 800e87a:	69a3      	ldr	r3, [r4, #24]
 800e87c:	60a3      	str	r3, [r4, #8]
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	071a      	lsls	r2, r3, #28
 800e882:	d52e      	bpl.n	800e8e2 <__swbuf_r+0x82>
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	b363      	cbz	r3, 800e8e2 <__swbuf_r+0x82>
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	6820      	ldr	r0, [r4, #0]
 800e88c:	1ac0      	subs	r0, r0, r3
 800e88e:	6963      	ldr	r3, [r4, #20]
 800e890:	b2f6      	uxtb	r6, r6
 800e892:	4283      	cmp	r3, r0
 800e894:	4637      	mov	r7, r6
 800e896:	dc04      	bgt.n	800e8a2 <__swbuf_r+0x42>
 800e898:	4621      	mov	r1, r4
 800e89a:	4628      	mov	r0, r5
 800e89c:	f000 f956 	bl	800eb4c <_fflush_r>
 800e8a0:	bb28      	cbnz	r0, 800e8ee <__swbuf_r+0x8e>
 800e8a2:	68a3      	ldr	r3, [r4, #8]
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	60a3      	str	r3, [r4, #8]
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	6022      	str	r2, [r4, #0]
 800e8ae:	701e      	strb	r6, [r3, #0]
 800e8b0:	6963      	ldr	r3, [r4, #20]
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	4283      	cmp	r3, r0
 800e8b6:	d004      	beq.n	800e8c2 <__swbuf_r+0x62>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	07db      	lsls	r3, r3, #31
 800e8bc:	d519      	bpl.n	800e8f2 <__swbuf_r+0x92>
 800e8be:	2e0a      	cmp	r6, #10
 800e8c0:	d117      	bne.n	800e8f2 <__swbuf_r+0x92>
 800e8c2:	4621      	mov	r1, r4
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f000 f941 	bl	800eb4c <_fflush_r>
 800e8ca:	b190      	cbz	r0, 800e8f2 <__swbuf_r+0x92>
 800e8cc:	e00f      	b.n	800e8ee <__swbuf_r+0x8e>
 800e8ce:	4b0b      	ldr	r3, [pc, #44]	; (800e8fc <__swbuf_r+0x9c>)
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	d101      	bne.n	800e8d8 <__swbuf_r+0x78>
 800e8d4:	68ac      	ldr	r4, [r5, #8]
 800e8d6:	e7d0      	b.n	800e87a <__swbuf_r+0x1a>
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <__swbuf_r+0xa0>)
 800e8da:	429c      	cmp	r4, r3
 800e8dc:	bf08      	it	eq
 800e8de:	68ec      	ldreq	r4, [r5, #12]
 800e8e0:	e7cb      	b.n	800e87a <__swbuf_r+0x1a>
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f000 f82d 	bl	800e944 <__swsetup_r>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d0cc      	beq.n	800e888 <__swbuf_r+0x28>
 800e8ee:	f04f 37ff 	mov.w	r7, #4294967295
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	080127b0 	.word	0x080127b0
 800e8fc:	080127d0 	.word	0x080127d0
 800e900:	08012790 	.word	0x08012790

0800e904 <__ascii_wctomb>:
 800e904:	b149      	cbz	r1, 800e91a <__ascii_wctomb+0x16>
 800e906:	2aff      	cmp	r2, #255	; 0xff
 800e908:	bf85      	ittet	hi
 800e90a:	238a      	movhi	r3, #138	; 0x8a
 800e90c:	6003      	strhi	r3, [r0, #0]
 800e90e:	700a      	strbls	r2, [r1, #0]
 800e910:	f04f 30ff 	movhi.w	r0, #4294967295
 800e914:	bf98      	it	ls
 800e916:	2001      	movls	r0, #1
 800e918:	4770      	bx	lr
 800e91a:	4608      	mov	r0, r1
 800e91c:	4770      	bx	lr
	...

0800e920 <_write_r>:
 800e920:	b538      	push	{r3, r4, r5, lr}
 800e922:	4c07      	ldr	r4, [pc, #28]	; (800e940 <_write_r+0x20>)
 800e924:	4605      	mov	r5, r0
 800e926:	4608      	mov	r0, r1
 800e928:	4611      	mov	r1, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	6022      	str	r2, [r4, #0]
 800e92e:	461a      	mov	r2, r3
 800e930:	f7fd fcb6 	bl	800c2a0 <_write>
 800e934:	1c43      	adds	r3, r0, #1
 800e936:	d102      	bne.n	800e93e <_write_r+0x1e>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	b103      	cbz	r3, 800e93e <_write_r+0x1e>
 800e93c:	602b      	str	r3, [r5, #0]
 800e93e:	bd38      	pop	{r3, r4, r5, pc}
 800e940:	2000a528 	.word	0x2000a528

0800e944 <__swsetup_r>:
 800e944:	4b32      	ldr	r3, [pc, #200]	; (800ea10 <__swsetup_r+0xcc>)
 800e946:	b570      	push	{r4, r5, r6, lr}
 800e948:	681d      	ldr	r5, [r3, #0]
 800e94a:	4606      	mov	r6, r0
 800e94c:	460c      	mov	r4, r1
 800e94e:	b125      	cbz	r5, 800e95a <__swsetup_r+0x16>
 800e950:	69ab      	ldr	r3, [r5, #24]
 800e952:	b913      	cbnz	r3, 800e95a <__swsetup_r+0x16>
 800e954:	4628      	mov	r0, r5
 800e956:	f7ff fa83 	bl	800de60 <__sinit>
 800e95a:	4b2e      	ldr	r3, [pc, #184]	; (800ea14 <__swsetup_r+0xd0>)
 800e95c:	429c      	cmp	r4, r3
 800e95e:	d10f      	bne.n	800e980 <__swsetup_r+0x3c>
 800e960:	686c      	ldr	r4, [r5, #4]
 800e962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e966:	b29a      	uxth	r2, r3
 800e968:	0715      	lsls	r5, r2, #28
 800e96a:	d42c      	bmi.n	800e9c6 <__swsetup_r+0x82>
 800e96c:	06d0      	lsls	r0, r2, #27
 800e96e:	d411      	bmi.n	800e994 <__swsetup_r+0x50>
 800e970:	2209      	movs	r2, #9
 800e972:	6032      	str	r2, [r6, #0]
 800e974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e978:	81a3      	strh	r3, [r4, #12]
 800e97a:	f04f 30ff 	mov.w	r0, #4294967295
 800e97e:	e03e      	b.n	800e9fe <__swsetup_r+0xba>
 800e980:	4b25      	ldr	r3, [pc, #148]	; (800ea18 <__swsetup_r+0xd4>)
 800e982:	429c      	cmp	r4, r3
 800e984:	d101      	bne.n	800e98a <__swsetup_r+0x46>
 800e986:	68ac      	ldr	r4, [r5, #8]
 800e988:	e7eb      	b.n	800e962 <__swsetup_r+0x1e>
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <__swsetup_r+0xd8>)
 800e98c:	429c      	cmp	r4, r3
 800e98e:	bf08      	it	eq
 800e990:	68ec      	ldreq	r4, [r5, #12]
 800e992:	e7e6      	b.n	800e962 <__swsetup_r+0x1e>
 800e994:	0751      	lsls	r1, r2, #29
 800e996:	d512      	bpl.n	800e9be <__swsetup_r+0x7a>
 800e998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e99a:	b141      	cbz	r1, 800e9ae <__swsetup_r+0x6a>
 800e99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	d002      	beq.n	800e9aa <__swsetup_r+0x66>
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f7ff f835 	bl	800da14 <_free_r>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	6363      	str	r3, [r4, #52]	; 0x34
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9b4:	81a3      	strh	r3, [r4, #12]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	6063      	str	r3, [r4, #4]
 800e9ba:	6923      	ldr	r3, [r4, #16]
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	89a3      	ldrh	r3, [r4, #12]
 800e9c0:	f043 0308 	orr.w	r3, r3, #8
 800e9c4:	81a3      	strh	r3, [r4, #12]
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	b94b      	cbnz	r3, 800e9de <__swsetup_r+0x9a>
 800e9ca:	89a3      	ldrh	r3, [r4, #12]
 800e9cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9d4:	d003      	beq.n	800e9de <__swsetup_r+0x9a>
 800e9d6:	4621      	mov	r1, r4
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f000 f917 	bl	800ec0c <__smakebuf_r>
 800e9de:	89a2      	ldrh	r2, [r4, #12]
 800e9e0:	f012 0301 	ands.w	r3, r2, #1
 800e9e4:	d00c      	beq.n	800ea00 <__swsetup_r+0xbc>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	60a3      	str	r3, [r4, #8]
 800e9ea:	6963      	ldr	r3, [r4, #20]
 800e9ec:	425b      	negs	r3, r3
 800e9ee:	61a3      	str	r3, [r4, #24]
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	b953      	cbnz	r3, 800ea0a <__swsetup_r+0xc6>
 800e9f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e9fc:	d1ba      	bne.n	800e974 <__swsetup_r+0x30>
 800e9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ea00:	0792      	lsls	r2, r2, #30
 800ea02:	bf58      	it	pl
 800ea04:	6963      	ldrpl	r3, [r4, #20]
 800ea06:	60a3      	str	r3, [r4, #8]
 800ea08:	e7f2      	b.n	800e9f0 <__swsetup_r+0xac>
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	e7f7      	b.n	800e9fe <__swsetup_r+0xba>
 800ea0e:	bf00      	nop
 800ea10:	200005bc 	.word	0x200005bc
 800ea14:	080127b0 	.word	0x080127b0
 800ea18:	080127d0 	.word	0x080127d0
 800ea1c:	08012790 	.word	0x08012790

0800ea20 <_close_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4c06      	ldr	r4, [pc, #24]	; (800ea3c <_close_r+0x1c>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4605      	mov	r5, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	f7fe fa12 	bl	800ce54 <_close>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_close_r+0x1a>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_close_r+0x1a>
 800ea38:	602b      	str	r3, [r5, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	2000a528 	.word	0x2000a528

0800ea40 <__sflush_r>:
 800ea40:	898a      	ldrh	r2, [r1, #12]
 800ea42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea46:	4605      	mov	r5, r0
 800ea48:	0710      	lsls	r0, r2, #28
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	d458      	bmi.n	800eb00 <__sflush_r+0xc0>
 800ea4e:	684b      	ldr	r3, [r1, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dc05      	bgt.n	800ea60 <__sflush_r+0x20>
 800ea54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dc02      	bgt.n	800ea60 <__sflush_r+0x20>
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea62:	2e00      	cmp	r6, #0
 800ea64:	d0f9      	beq.n	800ea5a <__sflush_r+0x1a>
 800ea66:	2300      	movs	r3, #0
 800ea68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea6c:	682f      	ldr	r7, [r5, #0]
 800ea6e:	6a21      	ldr	r1, [r4, #32]
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	d032      	beq.n	800eada <__sflush_r+0x9a>
 800ea74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	075a      	lsls	r2, r3, #29
 800ea7a:	d505      	bpl.n	800ea88 <__sflush_r+0x48>
 800ea7c:	6863      	ldr	r3, [r4, #4]
 800ea7e:	1ac0      	subs	r0, r0, r3
 800ea80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea82:	b10b      	cbz	r3, 800ea88 <__sflush_r+0x48>
 800ea84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea86:	1ac0      	subs	r0, r0, r3
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea8e:	6a21      	ldr	r1, [r4, #32]
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b0      	blx	r6
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	d106      	bne.n	800eaa8 <__sflush_r+0x68>
 800ea9a:	6829      	ldr	r1, [r5, #0]
 800ea9c:	291d      	cmp	r1, #29
 800ea9e:	d848      	bhi.n	800eb32 <__sflush_r+0xf2>
 800eaa0:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <__sflush_r+0x108>)
 800eaa2:	40ca      	lsrs	r2, r1
 800eaa4:	07d6      	lsls	r6, r2, #31
 800eaa6:	d544      	bpl.n	800eb32 <__sflush_r+0xf2>
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	6062      	str	r2, [r4, #4]
 800eaac:	04d9      	lsls	r1, r3, #19
 800eaae:	6922      	ldr	r2, [r4, #16]
 800eab0:	6022      	str	r2, [r4, #0]
 800eab2:	d504      	bpl.n	800eabe <__sflush_r+0x7e>
 800eab4:	1c42      	adds	r2, r0, #1
 800eab6:	d101      	bne.n	800eabc <__sflush_r+0x7c>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b903      	cbnz	r3, 800eabe <__sflush_r+0x7e>
 800eabc:	6560      	str	r0, [r4, #84]	; 0x54
 800eabe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eac0:	602f      	str	r7, [r5, #0]
 800eac2:	2900      	cmp	r1, #0
 800eac4:	d0c9      	beq.n	800ea5a <__sflush_r+0x1a>
 800eac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaca:	4299      	cmp	r1, r3
 800eacc:	d002      	beq.n	800ead4 <__sflush_r+0x94>
 800eace:	4628      	mov	r0, r5
 800ead0:	f7fe ffa0 	bl	800da14 <_free_r>
 800ead4:	2000      	movs	r0, #0
 800ead6:	6360      	str	r0, [r4, #52]	; 0x34
 800ead8:	e7c0      	b.n	800ea5c <__sflush_r+0x1c>
 800eada:	2301      	movs	r3, #1
 800eadc:	4628      	mov	r0, r5
 800eade:	47b0      	blx	r6
 800eae0:	1c41      	adds	r1, r0, #1
 800eae2:	d1c8      	bne.n	800ea76 <__sflush_r+0x36>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0c5      	beq.n	800ea76 <__sflush_r+0x36>
 800eaea:	2b1d      	cmp	r3, #29
 800eaec:	d001      	beq.n	800eaf2 <__sflush_r+0xb2>
 800eaee:	2b16      	cmp	r3, #22
 800eaf0:	d101      	bne.n	800eaf6 <__sflush_r+0xb6>
 800eaf2:	602f      	str	r7, [r5, #0]
 800eaf4:	e7b1      	b.n	800ea5a <__sflush_r+0x1a>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eafc:	81a3      	strh	r3, [r4, #12]
 800eafe:	e7ad      	b.n	800ea5c <__sflush_r+0x1c>
 800eb00:	690f      	ldr	r7, [r1, #16]
 800eb02:	2f00      	cmp	r7, #0
 800eb04:	d0a9      	beq.n	800ea5a <__sflush_r+0x1a>
 800eb06:	0793      	lsls	r3, r2, #30
 800eb08:	680e      	ldr	r6, [r1, #0]
 800eb0a:	bf08      	it	eq
 800eb0c:	694b      	ldreq	r3, [r1, #20]
 800eb0e:	600f      	str	r7, [r1, #0]
 800eb10:	bf18      	it	ne
 800eb12:	2300      	movne	r3, #0
 800eb14:	eba6 0807 	sub.w	r8, r6, r7
 800eb18:	608b      	str	r3, [r1, #8]
 800eb1a:	f1b8 0f00 	cmp.w	r8, #0
 800eb1e:	dd9c      	ble.n	800ea5a <__sflush_r+0x1a>
 800eb20:	4643      	mov	r3, r8
 800eb22:	463a      	mov	r2, r7
 800eb24:	6a21      	ldr	r1, [r4, #32]
 800eb26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb28:	4628      	mov	r0, r5
 800eb2a:	47b0      	blx	r6
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	dc06      	bgt.n	800eb3e <__sflush_r+0xfe>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb36:	81a3      	strh	r3, [r4, #12]
 800eb38:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3c:	e78e      	b.n	800ea5c <__sflush_r+0x1c>
 800eb3e:	4407      	add	r7, r0
 800eb40:	eba8 0800 	sub.w	r8, r8, r0
 800eb44:	e7e9      	b.n	800eb1a <__sflush_r+0xda>
 800eb46:	bf00      	nop
 800eb48:	20400001 	.word	0x20400001

0800eb4c <_fflush_r>:
 800eb4c:	b538      	push	{r3, r4, r5, lr}
 800eb4e:	690b      	ldr	r3, [r1, #16]
 800eb50:	4605      	mov	r5, r0
 800eb52:	460c      	mov	r4, r1
 800eb54:	b1db      	cbz	r3, 800eb8e <_fflush_r+0x42>
 800eb56:	b118      	cbz	r0, 800eb60 <_fflush_r+0x14>
 800eb58:	6983      	ldr	r3, [r0, #24]
 800eb5a:	b90b      	cbnz	r3, 800eb60 <_fflush_r+0x14>
 800eb5c:	f7ff f980 	bl	800de60 <__sinit>
 800eb60:	4b0c      	ldr	r3, [pc, #48]	; (800eb94 <_fflush_r+0x48>)
 800eb62:	429c      	cmp	r4, r3
 800eb64:	d109      	bne.n	800eb7a <_fflush_r+0x2e>
 800eb66:	686c      	ldr	r4, [r5, #4]
 800eb68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb6c:	b17b      	cbz	r3, 800eb8e <_fflush_r+0x42>
 800eb6e:	4621      	mov	r1, r4
 800eb70:	4628      	mov	r0, r5
 800eb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb76:	f7ff bf63 	b.w	800ea40 <__sflush_r>
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <_fflush_r+0x4c>)
 800eb7c:	429c      	cmp	r4, r3
 800eb7e:	d101      	bne.n	800eb84 <_fflush_r+0x38>
 800eb80:	68ac      	ldr	r4, [r5, #8]
 800eb82:	e7f1      	b.n	800eb68 <_fflush_r+0x1c>
 800eb84:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <_fflush_r+0x50>)
 800eb86:	429c      	cmp	r4, r3
 800eb88:	bf08      	it	eq
 800eb8a:	68ec      	ldreq	r4, [r5, #12]
 800eb8c:	e7ec      	b.n	800eb68 <_fflush_r+0x1c>
 800eb8e:	2000      	movs	r0, #0
 800eb90:	bd38      	pop	{r3, r4, r5, pc}
 800eb92:	bf00      	nop
 800eb94:	080127b0 	.word	0x080127b0
 800eb98:	080127d0 	.word	0x080127d0
 800eb9c:	08012790 	.word	0x08012790

0800eba0 <_lseek_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4c07      	ldr	r4, [pc, #28]	; (800ebc0 <_lseek_r+0x20>)
 800eba4:	4605      	mov	r5, r0
 800eba6:	4608      	mov	r0, r1
 800eba8:	4611      	mov	r1, r2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	6022      	str	r2, [r4, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f7fe f95a 	bl	800ce68 <_lseek>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_lseek_r+0x1e>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_lseek_r+0x1e>
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	2000a528 	.word	0x2000a528

0800ebc4 <__swhatbuf_r>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	460e      	mov	r6, r1
 800ebc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebcc:	2900      	cmp	r1, #0
 800ebce:	b096      	sub	sp, #88	; 0x58
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	461d      	mov	r5, r3
 800ebd4:	da07      	bge.n	800ebe6 <__swhatbuf_r+0x22>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	89b3      	ldrh	r3, [r6, #12]
 800ebdc:	061a      	lsls	r2, r3, #24
 800ebde:	d410      	bmi.n	800ec02 <__swhatbuf_r+0x3e>
 800ebe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebe4:	e00e      	b.n	800ec04 <__swhatbuf_r+0x40>
 800ebe6:	466a      	mov	r2, sp
 800ebe8:	f000 f8a2 	bl	800ed30 <_fstat_r>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	dbf2      	blt.n	800ebd6 <__swhatbuf_r+0x12>
 800ebf0:	9a01      	ldr	r2, [sp, #4]
 800ebf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebfa:	425a      	negs	r2, r3
 800ebfc:	415a      	adcs	r2, r3
 800ebfe:	602a      	str	r2, [r5, #0]
 800ec00:	e7ee      	b.n	800ebe0 <__swhatbuf_r+0x1c>
 800ec02:	2340      	movs	r3, #64	; 0x40
 800ec04:	2000      	movs	r0, #0
 800ec06:	6023      	str	r3, [r4, #0]
 800ec08:	b016      	add	sp, #88	; 0x58
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}

0800ec0c <__smakebuf_r>:
 800ec0c:	898b      	ldrh	r3, [r1, #12]
 800ec0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec10:	079d      	lsls	r5, r3, #30
 800ec12:	4606      	mov	r6, r0
 800ec14:	460c      	mov	r4, r1
 800ec16:	d507      	bpl.n	800ec28 <__smakebuf_r+0x1c>
 800ec18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	2301      	movs	r3, #1
 800ec22:	6163      	str	r3, [r4, #20]
 800ec24:	b002      	add	sp, #8
 800ec26:	bd70      	pop	{r4, r5, r6, pc}
 800ec28:	ab01      	add	r3, sp, #4
 800ec2a:	466a      	mov	r2, sp
 800ec2c:	f7ff ffca 	bl	800ebc4 <__swhatbuf_r>
 800ec30:	9900      	ldr	r1, [sp, #0]
 800ec32:	4605      	mov	r5, r0
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7fe ff3b 	bl	800dab0 <_malloc_r>
 800ec3a:	b948      	cbnz	r0, 800ec50 <__smakebuf_r+0x44>
 800ec3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec40:	059a      	lsls	r2, r3, #22
 800ec42:	d4ef      	bmi.n	800ec24 <__smakebuf_r+0x18>
 800ec44:	f023 0303 	bic.w	r3, r3, #3
 800ec48:	f043 0302 	orr.w	r3, r3, #2
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	e7e3      	b.n	800ec18 <__smakebuf_r+0xc>
 800ec50:	4b0d      	ldr	r3, [pc, #52]	; (800ec88 <__smakebuf_r+0x7c>)
 800ec52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec54:	89a3      	ldrh	r3, [r4, #12]
 800ec56:	6020      	str	r0, [r4, #0]
 800ec58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	9b00      	ldr	r3, [sp, #0]
 800ec60:	6163      	str	r3, [r4, #20]
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	6120      	str	r0, [r4, #16]
 800ec66:	b15b      	cbz	r3, 800ec80 <__smakebuf_r+0x74>
 800ec68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f000 f871 	bl	800ed54 <_isatty_r>
 800ec72:	b128      	cbz	r0, 800ec80 <__smakebuf_r+0x74>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f023 0303 	bic.w	r3, r3, #3
 800ec7a:	f043 0301 	orr.w	r3, r3, #1
 800ec7e:	81a3      	strh	r3, [r4, #12]
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	431d      	orrs	r5, r3
 800ec84:	81a5      	strh	r5, [r4, #12]
 800ec86:	e7cd      	b.n	800ec24 <__smakebuf_r+0x18>
 800ec88:	0800de29 	.word	0x0800de29

0800ec8c <memmove>:
 800ec8c:	4288      	cmp	r0, r1
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	eb01 0302 	add.w	r3, r1, r2
 800ec94:	d807      	bhi.n	800eca6 <memmove+0x1a>
 800ec96:	1e42      	subs	r2, r0, #1
 800ec98:	4299      	cmp	r1, r3
 800ec9a:	d00a      	beq.n	800ecb2 <memmove+0x26>
 800ec9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eca4:	e7f8      	b.n	800ec98 <memmove+0xc>
 800eca6:	4283      	cmp	r3, r0
 800eca8:	d9f5      	bls.n	800ec96 <memmove+0xa>
 800ecaa:	1881      	adds	r1, r0, r2
 800ecac:	1ad2      	subs	r2, r2, r3
 800ecae:	42d3      	cmn	r3, r2
 800ecb0:	d100      	bne.n	800ecb4 <memmove+0x28>
 800ecb2:	bd10      	pop	{r4, pc}
 800ecb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ecbc:	e7f7      	b.n	800ecae <memmove+0x22>

0800ecbe <_realloc_r>:
 800ecbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	460e      	mov	r6, r1
 800ecc6:	b921      	cbnz	r1, 800ecd2 <_realloc_r+0x14>
 800ecc8:	4611      	mov	r1, r2
 800ecca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ecce:	f7fe beef 	b.w	800dab0 <_malloc_r>
 800ecd2:	b922      	cbnz	r2, 800ecde <_realloc_r+0x20>
 800ecd4:	f7fe fe9e 	bl	800da14 <_free_r>
 800ecd8:	4625      	mov	r5, r4
 800ecda:	4628      	mov	r0, r5
 800ecdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecde:	f000 f849 	bl	800ed74 <_malloc_usable_size_r>
 800ece2:	42a0      	cmp	r0, r4
 800ece4:	d20f      	bcs.n	800ed06 <_realloc_r+0x48>
 800ece6:	4621      	mov	r1, r4
 800ece8:	4638      	mov	r0, r7
 800ecea:	f7fe fee1 	bl	800dab0 <_malloc_r>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d0f2      	beq.n	800ecda <_realloc_r+0x1c>
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	f7fe fe79 	bl	800d9ee <memcpy>
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4638      	mov	r0, r7
 800ed00:	f7fe fe88 	bl	800da14 <_free_r>
 800ed04:	e7e9      	b.n	800ecda <_realloc_r+0x1c>
 800ed06:	4635      	mov	r5, r6
 800ed08:	e7e7      	b.n	800ecda <_realloc_r+0x1c>
	...

0800ed0c <_read_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4c07      	ldr	r4, [pc, #28]	; (800ed2c <_read_r+0x20>)
 800ed10:	4605      	mov	r5, r0
 800ed12:	4608      	mov	r0, r1
 800ed14:	4611      	mov	r1, r2
 800ed16:	2200      	movs	r2, #0
 800ed18:	6022      	str	r2, [r4, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	f7fe f872 	bl	800ce04 <_read>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d102      	bne.n	800ed2a <_read_r+0x1e>
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	b103      	cbz	r3, 800ed2a <_read_r+0x1e>
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	2000a528 	.word	0x2000a528

0800ed30 <_fstat_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	4c07      	ldr	r4, [pc, #28]	; (800ed50 <_fstat_r+0x20>)
 800ed34:	2300      	movs	r3, #0
 800ed36:	4605      	mov	r5, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	f7fe f88c 	bl	800ce5a <_fstat>
 800ed42:	1c43      	adds	r3, r0, #1
 800ed44:	d102      	bne.n	800ed4c <_fstat_r+0x1c>
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	b103      	cbz	r3, 800ed4c <_fstat_r+0x1c>
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	bd38      	pop	{r3, r4, r5, pc}
 800ed4e:	bf00      	nop
 800ed50:	2000a528 	.word	0x2000a528

0800ed54 <_isatty_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4c06      	ldr	r4, [pc, #24]	; (800ed70 <_isatty_r+0x1c>)
 800ed58:	2300      	movs	r3, #0
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	f7fe f880 	bl	800ce64 <_isatty>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	d102      	bne.n	800ed6e <_isatty_r+0x1a>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	b103      	cbz	r3, 800ed6e <_isatty_r+0x1a>
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	2000a528 	.word	0x2000a528

0800ed74 <_malloc_usable_size_r>:
 800ed74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed78:	1f18      	subs	r0, r3, #4
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	bfbc      	itt	lt
 800ed7e:	580b      	ldrlt	r3, [r1, r0]
 800ed80:	18c0      	addlt	r0, r0, r3
 800ed82:	4770      	bx	lr

0800ed84 <_init>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr

0800ed90 <_fini>:
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	bf00      	nop
 800ed94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed96:	bc08      	pop	{r3}
 800ed98:	469e      	mov	lr, r3
 800ed9a:	4770      	bx	lr
